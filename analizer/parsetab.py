
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEMODrightUMINUSAMPERSAND AND ASSIGN BREAK CASE COLON COMMA CONST CONTINUE DATATYPE DECLARE_ASSIGN DEFAULT DEFER DIVIDE DOT ELSE EQ FALLTHROUGH FOR FUNC GE GO GT IDENTIFIER IF IMPORT INTERFACE LBRACE LBRACKET LE LPAREN LT MAIN MAP MINUS MOD NEQ NIL NUMBER OR PACKAGE PLUS RANGE RAW_STRING RBRACE RBRACKET RETURN RPAREN RUNE SELECT SEMICOLON STRING STRUCT SWITCH TIMES TYPE VARsentencias : sentencia\n                  | sentencia sentenciassentencia : assignment\n                | varDeclaration\n                | input\n                | llamarFuncion\n                | package\n                | import\n                | switch\n                | mapinput : IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPARENvarDeclaration : VAR IDENTIFIER DATATYPEassignment : IDENTIFIER DECLARE_ASSIGN expressionassigment : VAR IDENTIFIER DATATYPE ASSIGN expressionassignment : VAR IDENTIFIER DATATYPE ASSIGN llamarFuncionllamarFuncion : IDENTIFIER LPAREN argumentos_opt RPARENargumentos_opt : argumentos\n                      | emptyargumentos : expression\n                  | expression COMMA argumentosexpression : expression comparador expressionexpression : expression operadorLogico expressionoperadorLogico : AND\n                      | ORcomparador : EQ\n                  | NEQ\n                  | GT\n                  | LT\n                  | GE\n                  | LEempty :switch : SWITCH expression LBRACE caseBlocks RBRACEcaseBlocks : caseBlock\n                   | caseBlock caseBlockscaseBlock : CASE expression COLON sentencias\n                  | DEFAULT COLON sentenciasmap : IDENTIFIER DECLARE_ASSIGN mapLiteralmap : VAR IDENTIFIER ASSIGN mapLiteralmapLiteral : MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACEmapEntries : mapEntry\n                   | mapEntry COMMA mapEntriesmapEntry : value_key COLON value_keyvalue_key : expression\n                | STRINGpackage : PACKAGE MAINimport : IMPORT STRINGexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : valuevalue : NUMBERvalue : IDENTIFIER'
    
_lr_action_items = {'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,12,15,17,18,19,21,22,24,25,26,27,28,29,30,37,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,59,60,61,62,65,67,68,69,70,71,72,73,74,76,79,80,83,86,89,91,97,98,99,],[11,11,-3,-4,-5,-6,-7,-8,-9,-10,20,28,28,32,28,-45,-46,28,28,-54,-55,-56,-13,-37,-12,28,28,28,28,28,28,28,-25,-26,-27,-28,-29,-30,-23,-24,-52,-16,28,78,-38,28,-21,-22,-47,-48,-49,-50,-51,-53,85,-15,-32,11,11,-11,28,-39,28,28,]),'VAR':([0,2,3,4,5,6,7,8,9,10,21,22,26,27,28,29,30,37,55,59,62,67,68,69,70,71,72,73,74,79,80,83,86,89,97,],[12,12,-3,-4,-5,-6,-7,-8,-9,-10,-45,-46,-54,-55,-56,-13,-37,-12,-52,-16,-38,-21,-22,-47,-48,-49,-50,-51,-53,-15,-32,12,12,-11,-39,]),'PACKAGE':([0,2,3,4,5,6,7,8,9,10,21,22,26,27,28,29,30,37,55,59,62,67,68,69,70,71,72,73,74,79,80,83,86,89,97,],[13,13,-3,-4,-5,-6,-7,-8,-9,-10,-45,-46,-54,-55,-56,-13,-37,-12,-52,-16,-38,-21,-22,-47,-48,-49,-50,-51,-53,-15,-32,13,13,-11,-39,]),'IMPORT':([0,2,3,4,5,6,7,8,9,10,21,22,26,27,28,29,30,37,55,59,62,67,68,69,70,71,72,73,74,79,80,83,86,89,97,],[14,14,-3,-4,-5,-6,-7,-8,-9,-10,-45,-46,-54,-55,-56,-13,-37,-12,-52,-16,-38,-21,-22,-47,-48,-49,-50,-51,-53,-15,-32,14,14,-11,-39,]),'SWITCH':([0,2,3,4,5,6,7,8,9,10,21,22,26,27,28,29,30,37,55,59,62,67,68,69,70,71,72,73,74,79,80,83,86,89,97,],[15,15,-3,-4,-5,-6,-7,-8,-9,-10,-45,-46,-54,-55,-56,-13,-37,-12,-52,-16,-38,-21,-22,-47,-48,-49,-50,-51,-53,-15,-32,15,15,-11,-39,]),'$end':([1,2,3,4,5,6,7,8,9,10,16,21,22,26,27,28,29,30,37,55,59,62,67,68,69,70,71,72,73,74,79,80,89,97,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-2,-45,-46,-54,-55,-56,-13,-37,-12,-52,-16,-38,-21,-22,-47,-48,-49,-50,-51,-53,-15,-32,-11,-39,]),'CASE':([2,3,4,5,6,7,8,9,10,16,21,22,26,27,28,29,30,37,39,55,59,62,64,67,68,69,70,71,72,73,74,79,80,87,89,90,97,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-2,-45,-46,-54,-55,-56,-13,-37,-12,65,-52,-16,-38,65,-21,-22,-47,-48,-49,-50,-51,-53,-15,-32,-36,-11,-35,-39,]),'DEFAULT':([2,3,4,5,6,7,8,9,10,16,21,22,26,27,28,29,30,37,39,55,59,62,64,67,68,69,70,71,72,73,74,79,80,87,89,90,97,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-2,-45,-46,-54,-55,-56,-13,-37,-12,66,-52,-16,-38,66,-21,-22,-47,-48,-49,-50,-51,-53,-15,-32,-36,-11,-35,-39,]),'RBRACE':([2,3,4,5,6,7,8,9,10,16,21,22,26,27,28,29,30,37,55,59,62,63,64,67,68,69,70,71,72,73,74,79,80,81,87,89,90,92,93,95,96,97,100,101,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-2,-45,-46,-54,-55,-56,-13,-37,-12,-52,-16,-38,80,-33,-21,-22,-47,-48,-49,-50,-51,-53,-15,-32,-34,-36,-11,-35,97,-40,-43,-44,-39,-41,-42,]),'DECLARE_ASSIGN':([11,],[17,]),'DOT':([11,],[18,]),'LPAREN':([11,15,17,19,24,25,32,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,60,65,78,91,98,99,],[19,25,25,25,25,25,58,25,25,25,25,25,25,25,-25,-26,-27,-28,-29,-30,-23,-24,25,25,19,25,25,25,]),'MAIN':([13,],[21,]),'STRING':([14,91,98,99,],[22,96,96,96,]),'MINUS':([15,17,19,23,24,25,26,27,28,29,36,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,60,65,67,68,69,70,71,72,73,74,82,91,95,98,99,],[24,24,24,43,24,24,-54,-55,-56,43,43,24,24,24,24,24,24,24,-25,-26,-27,-28,-29,-30,-23,-24,-52,43,24,24,43,43,-47,-48,-49,-50,-51,-53,43,24,43,24,24,]),'NUMBER':([15,17,19,24,25,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,60,65,91,98,99,],[27,27,27,27,27,27,27,27,27,27,27,27,-25,-26,-27,-28,-29,-30,-23,-24,27,27,27,27,27,]),'MAP':([17,38,],[31,31,]),'RPAREN':([19,26,27,28,33,34,35,36,55,56,67,68,69,70,71,72,73,74,77,85,],[-31,-54,-55,-56,59,-17,-18,-19,-52,74,-21,-22,-47,-48,-49,-50,-51,-53,-20,89,]),'DATATYPE':([20,57,84,],[37,75,88,]),'ASSIGN':([20,37,],[38,61,]),'LBRACE':([23,26,27,28,55,67,68,69,70,71,72,73,74,88,],[39,-54,-55,-56,-52,-21,-22,-47,-48,-49,-50,-51,-53,91,]),'PLUS':([23,26,27,28,29,36,55,56,67,68,69,70,71,72,73,74,82,95,],[42,-54,-55,-56,42,42,-52,42,42,42,-47,-48,-49,-50,-51,-53,42,42,]),'TIMES':([23,26,27,28,29,36,55,56,67,68,69,70,71,72,73,74,82,95,],[44,-54,-55,-56,44,44,-52,44,44,44,44,44,-49,-50,-51,-53,44,44,]),'DIVIDE':([23,26,27,28,29,36,55,56,67,68,69,70,71,72,73,74,82,95,],[45,-54,-55,-56,45,45,-52,45,45,45,45,45,-49,-50,-51,-53,45,45,]),'MOD':([23,26,27,28,29,36,55,56,67,68,69,70,71,72,73,74,82,95,],[46,-54,-55,-56,46,46,-52,46,46,46,46,46,-49,-50,-51,-53,46,46,]),'EQ':([23,26,27,28,29,36,55,56,67,68,69,70,71,72,73,74,82,95,],[47,-54,-55,-56,47,47,-52,47,47,47,-47,-48,-49,-50,-51,-53,47,47,]),'NEQ':([23,26,27,28,29,36,55,56,67,68,69,70,71,72,73,74,82,95,],[48,-54,-55,-56,48,48,-52,48,48,48,-47,-48,-49,-50,-51,-53,48,48,]),'GT':([23,26,27,28,29,36,55,56,67,68,69,70,71,72,73,74,82,95,],[49,-54,-55,-56,49,49,-52,49,49,49,-47,-48,-49,-50,-51,-53,49,49,]),'LT':([23,26,27,28,29,36,55,56,67,68,69,70,71,72,73,74,82,95,],[50,-54,-55,-56,50,50,-52,50,50,50,-47,-48,-49,-50,-51,-53,50,50,]),'GE':([23,26,27,28,29,36,55,56,67,68,69,70,71,72,73,74,82,95,],[51,-54,-55,-56,51,51,-52,51,51,51,-47,-48,-49,-50,-51,-53,51,51,]),'LE':([23,26,27,28,29,36,55,56,67,68,69,70,71,72,73,74,82,95,],[52,-54,-55,-56,52,52,-52,52,52,52,-47,-48,-49,-50,-51,-53,52,52,]),'AND':([23,26,27,28,29,36,55,56,67,68,69,70,71,72,73,74,82,95,],[53,-54,-55,-56,53,53,-52,53,53,53,-47,-48,-49,-50,-51,-53,53,53,]),'OR':([23,26,27,28,29,36,55,56,67,68,69,70,71,72,73,74,82,95,],[54,-54,-55,-56,54,54,-52,54,54,54,-47,-48,-49,-50,-51,-53,54,54,]),'COMMA':([26,27,28,36,55,67,68,69,70,71,72,73,74,93,95,96,101,],[-54,-55,-56,60,-52,-21,-22,-47,-48,-49,-50,-51,-53,98,-43,-44,-42,]),'COLON':([26,27,28,55,66,67,68,69,70,71,72,73,74,82,94,95,96,],[-54,-55,-56,-52,83,-21,-22,-47,-48,-49,-50,-51,-53,86,99,-43,-44,]),'LBRACKET':([31,],[57,]),'AMPERSAND':([58,],[76,]),'RBRACKET':([75,],[84,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'sentencias':([0,2,83,86,],[1,16,87,90,]),'sentencia':([0,2,83,86,],[2,2,2,2,]),'assignment':([0,2,83,86,],[3,3,3,3,]),'varDeclaration':([0,2,83,86,],[4,4,4,4,]),'input':([0,2,83,86,],[5,5,5,5,]),'llamarFuncion':([0,2,61,83,86,],[6,6,79,6,6,]),'package':([0,2,83,86,],[7,7,7,7,]),'import':([0,2,83,86,],[8,8,8,8,]),'switch':([0,2,83,86,],[9,9,9,9,]),'map':([0,2,83,86,],[10,10,10,10,]),'expression':([15,17,19,24,25,40,41,42,43,44,45,46,60,65,91,98,99,],[23,29,36,55,56,67,68,69,70,71,72,73,36,82,95,95,95,]),'value':([15,17,19,24,25,40,41,42,43,44,45,46,60,65,91,98,99,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'mapLiteral':([17,38,],[30,62,]),'argumentos_opt':([19,],[33,]),'argumentos':([19,60,],[34,77,]),'empty':([19,],[35,]),'comparador':([23,29,36,55,56,67,68,69,70,71,72,73,82,95,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'operadorLogico':([23,29,36,55,56,67,68,69,70,71,72,73,82,95,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'caseBlocks':([39,64,],[63,81,]),'caseBlock':([39,64,],[64,64,]),'mapEntries':([91,98,],[92,100,]),'mapEntry':([91,98,],[93,93,]),'value_key':([91,98,99,],[94,94,101,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> sentencias","S'",1,None,None,None),
  ('sentencias -> sentencia','sentencias',1,'p_sentencias','parser.py',7),
  ('sentencias -> sentencia sentencias','sentencias',2,'p_sentencias','parser.py',8),
  ('sentencia -> assignment','sentencia',1,'p_sentencia','parser.py',11),
  ('sentencia -> varDeclaration','sentencia',1,'p_sentencia','parser.py',12),
  ('sentencia -> input','sentencia',1,'p_sentencia','parser.py',13),
  ('sentencia -> llamarFuncion','sentencia',1,'p_sentencia','parser.py',14),
  ('sentencia -> package','sentencia',1,'p_sentencia','parser.py',15),
  ('sentencia -> import','sentencia',1,'p_sentencia','parser.py',16),
  ('sentencia -> switch','sentencia',1,'p_sentencia','parser.py',17),
  ('sentencia -> map','sentencia',1,'p_sentencia','parser.py',18),
  ('input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN','input',7,'p_input','parser.py',21),
  ('varDeclaration -> VAR IDENTIFIER DATATYPE','varDeclaration',3,'p_var_declaration','parser.py',24),
  ('assignment -> IDENTIFIER DECLARE_ASSIGN expression','assignment',3,'p_short_assignment','parser.py',27),
  ('assigment -> VAR IDENTIFIER DATATYPE ASSIGN expression','assigment',5,'p_assignment_simple','parser.py',30),
  ('assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion','assignment',5,'p_assingment_funcion','parser.py',33),
  ('llamarFuncion -> IDENTIFIER LPAREN argumentos_opt RPAREN','llamarFuncion',4,'p_llamar_funcion','parser.py',36),
  ('argumentos_opt -> argumentos','argumentos_opt',1,'p_argumentos_opt','parser.py',39),
  ('argumentos_opt -> empty','argumentos_opt',1,'p_argumentos_opt','parser.py',40),
  ('argumentos -> expression','argumentos',1,'p_argumentos','parser.py',43),
  ('argumentos -> expression COMMA argumentos','argumentos',3,'p_argumentos','parser.py',44),
  ('expression -> expression comparador expression','expression',3,'p_expression_comparacion','parser.py',47),
  ('expression -> expression operadorLogico expression','expression',3,'p_boolean_expression','parser.py',50),
  ('operadorLogico -> AND','operadorLogico',1,'p_operador_logico','parser.py',53),
  ('operadorLogico -> OR','operadorLogico',1,'p_operador_logico','parser.py',54),
  ('comparador -> EQ','comparador',1,'p_comparador','parser.py',57),
  ('comparador -> NEQ','comparador',1,'p_comparador','parser.py',58),
  ('comparador -> GT','comparador',1,'p_comparador','parser.py',59),
  ('comparador -> LT','comparador',1,'p_comparador','parser.py',60),
  ('comparador -> GE','comparador',1,'p_comparador','parser.py',61),
  ('comparador -> LE','comparador',1,'p_comparador','parser.py',62),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',65),
  ('switch -> SWITCH expression LBRACE caseBlocks RBRACE','switch',5,'p_switch_statement','parser.py',69),
  ('caseBlocks -> caseBlock','caseBlocks',1,'p_caseBlocks','parser.py',72),
  ('caseBlocks -> caseBlock caseBlocks','caseBlocks',2,'p_caseBlocks','parser.py',73),
  ('caseBlock -> CASE expression COLON sentencias','caseBlock',4,'p_caseBlock','parser.py',76),
  ('caseBlock -> DEFAULT COLON sentencias','caseBlock',3,'p_caseBlock','parser.py',77),
  ('map -> IDENTIFIER DECLARE_ASSIGN mapLiteral','map',3,'p_short_map','parser.py',80),
  ('map -> VAR IDENTIFIER ASSIGN mapLiteral','map',4,'p_map','parser.py',83),
  ('mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE','mapLiteral',8,'p_map_literal','parser.py',86),
  ('mapEntries -> mapEntry','mapEntries',1,'p_map_entries','parser.py',89),
  ('mapEntries -> mapEntry COMMA mapEntries','mapEntries',3,'p_map_entries','parser.py',90),
  ('mapEntry -> value_key COLON value_key','mapEntry',3,'p_map_entry','parser.py',93),
  ('value_key -> expression','value_key',1,'p_value_key','parser.py',96),
  ('value_key -> STRING','value_key',1,'p_value_key','parser.py',97),
  ('package -> PACKAGE MAIN','package',2,'p_package','parser.py',102),
  ('import -> IMPORT STRING','import',2,'p_import','parser.py',105),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binary','parser.py',124),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binary','parser.py',125),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binary','parser.py',126),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binary','parser.py',127),
  ('expression -> expression MOD expression','expression',3,'p_expression_binary','parser.py',128),
  ('expression -> MINUS expression','expression',2,'p_expression_unary_minus','parser.py',132),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',136),
  ('expression -> value','expression',1,'p_expression_value','parser.py',140),
  ('value -> NUMBER','value',1,'p_value_number','parser.py',144),
  ('value -> IDENTIFIER','value',1,'p_value_identifier','parser.py',148),
]
