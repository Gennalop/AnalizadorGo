
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEMODrightUMINUSAMPERSAND AND ASSIGN BREAK CASE COLON COMMA CONST CONTINUE DATATYPE DECLARE_ASSIGN DEFAULT DEFER DIVIDE DOT ELSE EQ FALLTHROUGH FALSE FOR FUNC GE GO GT IDENTIFIER IF IMPORT INTERFACE LBRACE LBRACKET LE LPAREN LT MAP MINUS MOD NEQ NIL NUMBER OR PACKAGE PLUS RANGE RAW_STRING RBRACE RBRACKET RETURN RPAREN RUNE SELECT SEMICOLON STRING STRING_UNCLOSE STRUCT SWITCH TIMES TRUE TYPE VARprogram : declaration_listdeclaration_list : declarationdeclaration_list : declaration_list declarationdeclaration : struct_definition\n                   | print_statement\n                   | for_statement\n                   sentencias : sentencia\n                  | sentencia sentenciassentencia : assignment\n                 | input\n                 | llamarFuncion\n                 | print_statement\n                 | struct_definition\n                 | for_statementinput : IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPARENassignment : assigmentSimple\n                  | assignmentFuncion\n                  | shortAssignmentshortAssignment : IDENTIFIER DECLARE_ASSIGN expressionassigmentSimple : VAR IDENTIFIER DATATYPE ASSIGN expressionassignmentFuncion : VAR IDENTIFIER DATATYPE ASSIGN llamarFuncionllamarFuncion : IDENTIFIER LPAREN argument_list_opt RPARENargument_list : expressionargument_list : argument_list COMMA expressionargument_list_opt : argument_listargument_list_opt : condicion : expression comparador expressioncondicion_compleja : condicion operadorLogico condicion\n                          | condicion operadorLogico condicion_complejaoperadorLogico : AND\n                      | ORcomparador : EQ\n                  | NEQ\n                  | GT\n                  | LT\n                  | GE\n                  | LEempty :print_statement : IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPARENstruct_definition : TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACEstruct_field : IDENTIFIER DATATYPEstruct_fields : struct_fieldstruct_fields : struct_fields struct_fieldfor_statement : FOR shortAssignment SEMICOLON condicion SEMICOLON expression blockfor_statement : FOR condicion blockfor_statement : FOR blockblock : LBRACE sentencias RBRACEblock : LBRACE RBRACEexpression : NUMBERexpression : IDENTIFIERexpression : RUNEexpression : STRINGexpression : RAW_STRINGexpression : TRUE\n                  | FALSEexpression : NILexpression : expression PLUS expression\n                 | expression MINUS expression\n                 | expression TIMES expression\n                 | expression DIVIDE expression\n                 | expression MOD expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPAREN'
    
_lr_action_items = {'TYPE':([0,2,3,4,5,6,10,16,18,19,20,21,22,23,24,25,31,46,47,48,49,50,51,52,53,54,55,56,59,60,66,67,68,69,70,71,72,77,89,91,95,98,100,101,102,104,],[7,7,-2,-4,-5,-6,-3,-46,7,-49,-51,-52,-53,-54,-55,-56,-45,-48,7,-9,-10,-11,-12,-13,-14,-16,-17,-18,-62,-50,-57,-58,-59,-60,-61,-19,-47,-63,-40,-39,-22,-44,-50,-20,-21,-15,]),'IDENTIFIER':([0,2,3,4,5,6,7,9,10,12,16,18,19,20,21,22,23,24,25,26,27,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,58,59,60,62,63,66,67,68,69,70,71,72,74,75,77,79,80,84,88,89,90,91,92,94,95,96,98,99,100,101,102,104,],[8,8,-2,-4,-5,-6,11,17,-3,29,-46,57,-49,-51,-52,-53,-54,-55,-56,60,60,60,-45,60,60,60,60,60,60,-32,-33,-34,-35,-36,-37,60,-48,57,-9,-10,-11,-12,-13,-14,-16,-17,-18,76,-62,-50,78,60,-57,-58,-59,-60,-61,-19,-47,85,60,-63,78,-42,60,-41,-40,-43,-39,60,60,-22,100,-44,103,-50,-20,-21,-15,]),'FOR':([0,2,3,4,5,6,10,16,18,19,20,21,22,23,24,25,31,46,47,48,49,50,51,52,53,54,55,56,59,60,66,67,68,69,70,71,72,77,89,91,95,98,100,101,102,104,],[9,9,-2,-4,-5,-6,-3,-46,9,-49,-51,-52,-53,-54,-55,-56,-45,-48,9,-9,-10,-11,-12,-13,-14,-16,-17,-18,-62,-50,-57,-58,-59,-60,-61,-19,-47,-63,-40,-39,-22,-44,-50,-20,-21,-15,]),'$end':([1,2,3,4,5,6,10,16,31,46,72,89,91,98,],[0,-1,-2,-4,-5,-6,-3,-46,-45,-48,-47,-40,-39,-44,]),'DOT':([8,57,],[12,74,]),'LBRACE':([9,14,19,20,21,22,23,24,25,28,59,60,65,66,67,68,69,70,77,93,],[18,18,-49,-51,-52,-53,-54,-55,-56,62,-62,-50,-27,-57,-58,-59,-60,-61,-63,18,]),'NUMBER':([9,26,27,30,32,33,34,35,36,37,38,39,40,41,42,43,44,63,75,84,92,94,96,],[19,19,19,19,19,19,19,19,19,19,-32,-33,-34,-35,-36,-37,19,19,19,19,19,19,19,]),'RUNE':([9,26,27,30,32,33,34,35,36,37,38,39,40,41,42,43,44,63,75,84,92,94,96,],[20,20,20,20,20,20,20,20,20,20,-32,-33,-34,-35,-36,-37,20,20,20,20,20,20,20,]),'STRING':([9,26,27,30,32,33,34,35,36,37,38,39,40,41,42,43,44,63,75,84,92,94,96,],[21,21,21,21,21,21,21,21,21,21,-32,-33,-34,-35,-36,-37,21,21,21,21,21,21,21,]),'RAW_STRING':([9,26,27,30,32,33,34,35,36,37,38,39,40,41,42,43,44,63,75,84,92,94,96,],[22,22,22,22,22,22,22,22,22,22,-32,-33,-34,-35,-36,-37,22,22,22,22,22,22,22,]),'TRUE':([9,26,27,30,32,33,34,35,36,37,38,39,40,41,42,43,44,63,75,84,92,94,96,],[23,23,23,23,23,23,23,23,23,23,-32,-33,-34,-35,-36,-37,23,23,23,23,23,23,23,]),'FALSE':([9,26,27,30,32,33,34,35,36,37,38,39,40,41,42,43,44,63,75,84,92,94,96,],[24,24,24,24,24,24,24,24,24,24,-32,-33,-34,-35,-36,-37,24,24,24,24,24,24,24,]),'NIL':([9,26,27,30,32,33,34,35,36,37,38,39,40,41,42,43,44,63,75,84,92,94,96,],[25,25,25,25,25,25,25,25,25,25,-32,-33,-34,-35,-36,-37,25,25,25,25,25,25,25,]),'MINUS':([9,15,17,19,20,21,22,23,24,25,26,27,30,32,33,34,35,36,37,38,39,40,41,42,43,44,59,60,61,63,65,66,67,68,69,70,71,75,77,83,84,92,93,94,96,97,100,101,],[26,34,-50,-49,-51,-52,-53,-54,-55,-56,26,26,26,26,26,26,26,26,26,-32,-33,-34,-35,-36,-37,26,-62,-50,34,26,34,-57,-58,-59,-60,-61,34,26,-63,34,26,26,34,26,26,34,-50,34,]),'LPAREN':([9,26,27,29,30,32,33,34,35,36,37,38,39,40,41,42,43,44,57,63,75,84,85,92,94,96,100,],[27,27,27,63,27,27,27,27,27,27,27,-32,-33,-34,-35,-36,-37,27,75,27,27,27,94,27,27,27,75,]),'STRUCT':([11,],[28,]),'SEMICOLON':([13,19,20,21,22,23,24,25,59,60,64,65,66,67,68,69,70,71,77,],[30,-49,-51,-52,-53,-54,-55,-56,-62,-50,84,-27,-57,-58,-59,-60,-61,-19,-63,]),'PLUS':([15,17,19,20,21,22,23,24,25,59,60,61,65,66,67,68,69,70,71,77,83,93,97,100,101,],[33,-50,-49,-51,-52,-53,-54,-55,-56,-62,-50,33,33,-57,-58,-59,-60,-61,33,-63,33,33,33,-50,33,]),'TIMES':([15,17,19,20,21,22,23,24,25,59,60,61,65,66,67,68,69,70,71,77,83,93,97,100,101,],[35,-50,-49,-51,-52,-53,-54,-55,-56,-62,-50,35,35,35,35,-59,-60,-61,35,-63,35,35,35,-50,35,]),'DIVIDE':([15,17,19,20,21,22,23,24,25,59,60,61,65,66,67,68,69,70,71,77,83,93,97,100,101,],[36,-50,-49,-51,-52,-53,-54,-55,-56,-62,-50,36,36,36,36,-59,-60,-61,36,-63,36,36,36,-50,36,]),'MOD':([15,17,19,20,21,22,23,24,25,59,60,61,65,66,67,68,69,70,71,77,83,93,97,100,101,],[37,-50,-49,-51,-52,-53,-54,-55,-56,-62,-50,37,37,37,37,-59,-60,-61,37,-63,37,37,37,-50,37,]),'EQ':([15,17,19,20,21,22,23,24,25,59,60,66,67,68,69,70,77,],[38,-50,-49,-51,-52,-53,-54,-55,-56,-62,-50,-57,-58,-59,-60,-61,-63,]),'NEQ':([15,17,19,20,21,22,23,24,25,59,60,66,67,68,69,70,77,],[39,-50,-49,-51,-52,-53,-54,-55,-56,-62,-50,-57,-58,-59,-60,-61,-63,]),'GT':([15,17,19,20,21,22,23,24,25,59,60,66,67,68,69,70,77,],[40,-50,-49,-51,-52,-53,-54,-55,-56,-62,-50,-57,-58,-59,-60,-61,-63,]),'LT':([15,17,19,20,21,22,23,24,25,59,60,66,67,68,69,70,77,],[41,-50,-49,-51,-52,-53,-54,-55,-56,-62,-50,-57,-58,-59,-60,-61,-63,]),'GE':([15,17,19,20,21,22,23,24,25,59,60,66,67,68,69,70,77,],[42,-50,-49,-51,-52,-53,-54,-55,-56,-62,-50,-57,-58,-59,-60,-61,-63,]),'LE':([15,17,19,20,21,22,23,24,25,59,60,66,67,68,69,70,77,],[43,-50,-49,-51,-52,-53,-54,-55,-56,-62,-50,-57,-58,-59,-60,-61,-63,]),'VAR':([16,18,19,20,21,22,23,24,25,31,46,47,48,49,50,51,52,53,54,55,56,59,60,66,67,68,69,70,71,72,77,89,91,95,98,100,101,102,104,],[-46,58,-49,-51,-52,-53,-54,-55,-56,-45,-48,58,-9,-10,-11,-12,-13,-14,-16,-17,-18,-62,-50,-57,-58,-59,-60,-61,-19,-47,-63,-40,-39,-22,-44,-50,-20,-21,-15,]),'RBRACE':([16,18,19,20,21,22,23,24,25,31,45,46,47,48,49,50,51,52,53,54,55,56,59,60,66,67,68,69,70,71,72,73,77,79,80,88,89,90,91,95,98,100,101,102,104,],[-46,46,-49,-51,-52,-53,-54,-55,-56,-45,72,-48,-7,-9,-10,-11,-12,-13,-14,-16,-17,-18,-62,-50,-57,-58,-59,-60,-61,-19,-47,-8,-63,89,-42,-41,-40,-43,-39,-22,-44,-50,-20,-21,-15,]),'DECLARE_ASSIGN':([17,57,],[44,44,]),'RPAREN':([19,20,21,22,23,24,25,59,60,61,63,66,67,68,69,70,75,77,81,82,83,86,94,97,103,],[-49,-51,-52,-53,-54,-55,-56,-62,-50,77,-26,-57,-58,-59,-60,-61,-26,-63,91,-25,-23,95,-26,-24,104,]),'COMMA':([19,20,21,22,23,24,25,59,60,66,67,68,69,70,77,82,83,97,],[-49,-51,-52,-53,-54,-55,-56,-62,-50,-57,-58,-59,-60,-61,-63,92,-23,-24,]),'DATATYPE':([76,78,],[87,88,]),'ASSIGN':([87,],[96,]),'AMPERSAND':([94,],[99,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,],[2,]),'declaration':([0,2,],[3,10,]),'struct_definition':([0,2,18,47,],[4,4,52,52,]),'print_statement':([0,2,18,47,],[5,5,51,51,]),'for_statement':([0,2,18,47,],[6,6,53,53,]),'shortAssignment':([9,18,47,],[13,56,56,]),'condicion':([9,30,],[14,64,]),'expression':([9,26,27,30,32,33,34,35,36,37,44,63,75,84,92,94,96,],[15,59,61,15,65,66,67,68,69,70,71,83,83,93,97,83,101,]),'block':([9,14,93,],[16,31,98,]),'comparador':([15,],[32,]),'sentencias':([18,47,],[45,73,]),'sentencia':([18,47,],[47,47,]),'assignment':([18,47,],[48,48,]),'input':([18,47,],[49,49,]),'llamarFuncion':([18,47,96,],[50,50,102,]),'assigmentSimple':([18,47,],[54,54,]),'assignmentFuncion':([18,47,],[55,55,]),'struct_fields':([62,],[79,]),'struct_field':([62,79,],[80,90,]),'argument_list_opt':([63,75,94,],[81,86,81,]),'argument_list':([63,75,94,],[82,82,82,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','parser.py',7),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list_single','parser.py',13),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_multiple','parser.py',17),
  ('declaration -> struct_definition','declaration',1,'p_declaration','parser.py',21),
  ('declaration -> print_statement','declaration',1,'p_declaration','parser.py',22),
  ('declaration -> for_statement','declaration',1,'p_declaration','parser.py',23),
  ('sentencias -> sentencia','sentencias',1,'p_sentencias','parser.py',32),
  ('sentencias -> sentencia sentencias','sentencias',2,'p_sentencias','parser.py',33),
  ('sentencia -> assignment','sentencia',1,'p_sentencia','parser.py',36),
  ('sentencia -> input','sentencia',1,'p_sentencia','parser.py',37),
  ('sentencia -> llamarFuncion','sentencia',1,'p_sentencia','parser.py',38),
  ('sentencia -> print_statement','sentencia',1,'p_sentencia','parser.py',39),
  ('sentencia -> struct_definition','sentencia',1,'p_sentencia','parser.py',40),
  ('sentencia -> for_statement','sentencia',1,'p_sentencia','parser.py',41),
  ('input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN','input',7,'p_input','parser.py',44),
  ('assignment -> assigmentSimple','assignment',1,'p_assignment','parser.py',47),
  ('assignment -> assignmentFuncion','assignment',1,'p_assignment','parser.py',48),
  ('assignment -> shortAssignment','assignment',1,'p_assignment','parser.py',49),
  ('shortAssignment -> IDENTIFIER DECLARE_ASSIGN expression','shortAssignment',3,'p_short_assignment','parser.py',52),
  ('assigmentSimple -> VAR IDENTIFIER DATATYPE ASSIGN expression','assigmentSimple',5,'p_assignment_simple','parser.py',55),
  ('assignmentFuncion -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion','assignmentFuncion',5,'p_assingment_funcion','parser.py',58),
  ('llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN','llamarFuncion',4,'p_llamar_funcion','parser.py',61),
  ('argument_list -> expression','argument_list',1,'p_argument_list_single','parser.py',73),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list_multiple','parser.py',76),
  ('argument_list_opt -> argument_list','argument_list_opt',1,'p_argument_list_opt_some','parser.py',81),
  ('argument_list_opt -> <empty>','argument_list_opt',0,'p_argument_list_opt_empty','parser.py',84),
  ('condicion -> expression comparador expression','condicion',3,'p_condicion','parser.py',88),
  ('condicion_compleja -> condicion operadorLogico condicion','condicion_compleja',3,'p_condicion_compleja','parser.py',91),
  ('condicion_compleja -> condicion operadorLogico condicion_compleja','condicion_compleja',3,'p_condicion_compleja','parser.py',92),
  ('operadorLogico -> AND','operadorLogico',1,'p_operador_logico','parser.py',95),
  ('operadorLogico -> OR','operadorLogico',1,'p_operador_logico','parser.py',96),
  ('comparador -> EQ','comparador',1,'p_comparador','parser.py',99),
  ('comparador -> NEQ','comparador',1,'p_comparador','parser.py',100),
  ('comparador -> GT','comparador',1,'p_comparador','parser.py',101),
  ('comparador -> LT','comparador',1,'p_comparador','parser.py',102),
  ('comparador -> GE','comparador',1,'p_comparador','parser.py',103),
  ('comparador -> LE','comparador',1,'p_comparador','parser.py',104),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',107),
  ('print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN','print_statement',6,'p_print_statement','parser.py',118),
  ('struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE','struct_definition',6,'p_struct_definition','parser.py',128),
  ('struct_field -> IDENTIFIER DATATYPE','struct_field',2,'p_struct_field','parser.py',133),
  ('struct_fields -> struct_field','struct_fields',1,'p_struct_fields_single','parser.py',138),
  ('struct_fields -> struct_fields struct_field','struct_fields',2,'p_struct_fields_multiple','parser.py',141),
  ('for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block','for_statement',7,'p_for_statement_classis','parser.py',148),
  ('for_statement -> FOR condicion block','for_statement',3,'p_for_statement_condition','parser.py',152),
  ('for_statement -> FOR block','for_statement',2,'p_for_statement_infinite','parser.py',156),
  ('block -> LBRACE sentencias RBRACE','block',3,'p_block','parser.py',160),
  ('block -> LBRACE RBRACE','block',2,'p_block_empty','parser.py',164),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',179),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',182),
  ('expression -> RUNE','expression',1,'p_expression_rune','parser.py',185),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',188),
  ('expression -> RAW_STRING','expression',1,'p_expression_raw_string','parser.py',191),
  ('expression -> TRUE','expression',1,'p_expression_boolean','parser.py',194),
  ('expression -> FALSE','expression',1,'p_expression_boolean','parser.py',195),
  ('expression -> NIL','expression',1,'p_expression_nil','parser.py',198),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binary','parser.py',202),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binary','parser.py',203),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binary','parser.py',204),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binary','parser.py',205),
  ('expression -> expression MOD expression','expression',3,'p_expression_binary','parser.py',206),
  ('expression -> MINUS expression','expression',2,'p_expression_unary_minus','parser.py',210),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',214),
]
