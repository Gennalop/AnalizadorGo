
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDnonassocEQNEQGTLTGELEleftPLUSMINUSleftTIMESDIVIDEMODrightUMINUSAMPERSAND AND ASSIGN BREAK CASE COLON COMMA CONST CONTINUE DATATYPE DECLARE_ASSIGN DEFAULT DEFER DIVIDE DOT ELSE EQ FALLTHROUGH FALSE FOR FUNC GE GO GT IDENTIFIER IF IMPORT INTERFACE LBRACE LBRACKET LE LPAREN LT MAIN MAP MINUS MOD NEQ NIL NUMBER OR PACKAGE PLUS RANGE RAW_STRING RBRACE RBRACKET RETURN RPAREN RUNE SELECT SEMICOLON STRING STRING_UNCLOSE STRUCT SWITCH TIMES TRUE TYPE VARprogram : package import_list declaration_list\n               | package declaration_list\n               | declaration_list\n               | packagepackage : PACKAGE MAINarguments : expression\n                 | expression COMMA argumentsdeclaration_list : declarationdeclaration_list : declaration_list declarationdeclaration : struct_definition\n                   | print_statement\n                   | for_statement\n                   | const_declaration\n                   | function\n                   | method_definition\n                   | function_literal\n                   | importconst_declaration : CONST IDENTIFIER ASSIGN expressionimport_list : importimport_list : import_list importsentencias : sentencia\n                  | sentencia sentenciassentencia : assignment\n                 | input\n                 | llamarFuncion\n                 | print_statement\n                 | struct_definition\n                 | for_statement\n                 | package\n                 | import\n                 | switch\n                 | map\n                 | if_statement\n                 | return_statementinput : IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPARENvarDeclaration : VAR IDENTIFIER DATATYPEassignment : IDENTIFIER DECLARE_ASSIGN expression\n                  | VAR IDENTIFIER DATATYPE ASSIGN expression\n                  | VAR IDENTIFIER DATATYPE ASSIGN llamarFuncionllamarFuncion : IDENTIFIER LPAREN argument_list_opt RPARENargumentos : expression\n                  | expression COMMA argumentosexpression : expression comparador expressionexpression : expression operadorLogico expressionargument_list : expressionargument_list : argument_list COMMA expressionargument_list_opt : argument_listargument_list_opt : condicion : expression comparador expressioncondicion_compleja : condicion operadorLogico condicion\n                          | condicion operadorLogico condicion_complejaoperadorLogico : AND\n                      | ORcomparador : EQ\n                  | NEQ\n                  | GT\n                  | LT\n                  | GE\n                  | LEempty :switch : SWITCH expression LBRACE caseBlocks RBRACEcaseBlocks : caseBlock\n                   | caseBlock caseBlockscaseBlock : CASE expression COLON sentencias\n                  | DEFAULT COLON sentenciasmap : IDENTIFIER DECLARE_ASSIGN mapLiteralmap : VAR IDENTIFIER ASSIGN mapLiteralmapLiteral : MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACEmapEntries : mapEntry\n                   | mapEntry COMMA mapEntriesmapEntry : value_key COLON value_keyvalue_key : expression\n                | STRINGfunction : FUNC IDENTIFIER LPAREN params_opt RPAREN return_type blockfunction : FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE sentencias RETURN expression RBRACEfunction : FUNC MAIN LPAREN params_opt RPAREN blockreturn_statement : RETURN expressionparams_opt : params\n                      | emptyparams : param\n                  | param COMMA paramsparam : IDENTIFIER type_nametype_name : DATATYPE\n                 | IDENTIFIERimport : IMPORT STRINGprint_statement : IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPARENstruct_definition : TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACEstruct_field : IDENTIFIER DATATYPEstruct_fields : struct_fieldstruct_fields : struct_fields struct_fieldmethod_definition : FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN blockfor_statement : FOR shortAssignment SEMICOLON condicion SEMICOLON expression blockidentifier_list : IDENTIFIERidentifier_list : IDENTIFIER COMMA identifier_listshortAssignment : identifier_list DECLARE_ASSIGN expressionfor_statement : FOR condicion blockfor_statement : FOR blockfor_range_clause : shortAssignment RANGE expressionblock : LBRACE sentencias RBRACEblock : LBRACE RBRACEexpression : NUMBERexpression : IDENTIFIERexpression : RUNEexpression : STRINGexpression : RAW_STRINGexpression : TRUE\n                  | FALSEexpression : NILexpression : expression operator expressionoperator : PLUS\n                | MINUS\n                | TIMES\n                | DIVIDE\n                | MODexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENif_statement : IF condicion_compleja block\n                    | IF condicion_compleja block ELSE blockfunction_literal : FUNC LPAREN parameters RPAREN return_type blockparameters : parameters COMMA parameter\n                  | parameter\n                  | emptyparameter : IDENTIFIER DATATYPE\n                 | IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPEreturn_type : DATATYPE\n                   | emptyslice_declaration : VAR IDENTIFIER LBRACKET RBRACKET type_namedeclare_assign : IDENTIFIER DECLARE_ASSIGN slice_literalslice_literal : LBRACKET RBRACKET type_name LBRACE elements RBRACEelements : elements COMMA expressionelements : expression'
    
_lr_action_items = {'PACKAGE':([0,24,30,32,34,35,36,37,38,39,40,47,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,92,93,106,107,109,118,122,142,143,150,152,167,169,174,176,191,194,195,196,197,200,201,203,208,215,230,],[4,-5,-97,4,-101,-103,-104,-105,-106,-107,-108,-85,-96,-100,4,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-115,-102,-44,-109,-99,-77,-116,-37,-66,-117,-43,-87,-86,-40,-67,-92,-102,-38,-39,-61,4,-118,4,4,-35,-68,]),'TYPE':([0,2,3,5,6,7,8,9,10,11,12,13,20,21,22,23,24,30,32,34,35,36,37,38,39,40,47,48,49,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,92,93,106,107,109,118,122,123,142,143,150,152,167,169,174,176,188,189,191,194,195,196,197,200,201,202,203,208,215,222,229,230,],[14,14,14,-8,-10,-11,-12,-13,-14,-15,-16,-17,14,14,-17,-9,-5,-97,14,-101,-103,-104,-105,-106,-107,-108,-85,14,-17,-96,-100,14,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-115,-102,-44,-109,-99,-77,-116,-18,-37,-66,-117,-43,-87,-86,-40,-67,-119,-76,-92,-102,-38,-39,-61,14,-118,-74,14,14,-35,-91,-75,-68,]),'IDENTIFIER':([0,2,3,5,6,7,8,9,10,11,12,13,14,16,17,18,20,21,22,23,24,26,30,32,34,35,36,37,38,39,40,41,42,45,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,89,90,91,92,93,95,96,97,101,102,103,106,107,109,111,112,113,118,121,122,123,124,133,136,137,141,142,143,150,151,152,157,158,159,166,167,168,169,170,173,174,175,176,179,188,189,191,193,194,195,196,197,200,201,202,203,205,208,215,217,219,220,222,229,230,231,232,],[15,15,15,-8,-10,-11,-12,-13,-14,-15,-16,-17,25,33,43,44,15,15,-17,-9,-5,51,-97,86,-101,-103,-104,-105,-106,-107,-108,93,93,97,-85,15,-17,93,-96,93,93,93,-54,-55,-56,-57,-58,-59,-52,-53,-110,-111,-112,-113,-114,93,-100,86,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,114,93,93,93,119,-115,-102,93,124,130,124,135,93,-44,-109,-99,93,145,93,-77,93,-116,-18,153,164,135,-89,93,-37,-66,-117,93,-43,124,164,187,-88,-87,-90,-86,93,93,-40,194,-67,93,-119,-76,-92,207,-102,-38,-39,-61,86,-118,-74,86,93,86,-35,93,93,93,-91,-75,-68,93,93,]),'FOR':([0,2,3,5,6,7,8,9,10,11,12,13,20,21,22,23,24,30,32,34,35,36,37,38,39,40,47,48,49,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,92,93,106,107,109,118,122,123,142,143,150,152,167,169,174,176,188,189,191,194,195,196,197,200,201,202,203,208,215,222,229,230,],[16,16,16,-8,-10,-11,-12,-13,-14,-15,-16,-17,16,16,-17,-9,-5,-97,16,-101,-103,-104,-105,-106,-107,-108,-85,16,-17,-96,-100,16,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-115,-102,-44,-109,-99,-77,-116,-18,-37,-66,-117,-43,-87,-86,-40,-67,-119,-76,-92,-102,-38,-39,-61,16,-118,-74,16,16,-35,-91,-75,-68,]),'CONST':([0,2,3,5,6,7,8,9,10,11,12,13,20,21,22,23,24,30,34,35,36,37,38,39,40,47,48,49,53,72,92,93,106,107,109,122,123,152,167,169,188,189,191,202,222,229,],[17,17,17,-8,-10,-11,-12,-13,-14,-15,-16,-17,17,17,-17,-9,-5,-97,-101,-103,-104,-105,-106,-107,-108,-85,17,-17,-96,-100,-115,-102,-44,-109,-99,-116,-18,-43,-87,-86,-119,-76,-92,-74,-91,-75,]),'FUNC':([0,2,3,5,6,7,8,9,10,11,12,13,20,21,22,23,24,30,34,35,36,37,38,39,40,47,48,49,53,72,92,93,97,106,107,109,122,123,152,164,167,169,188,189,191,202,222,229,],[18,18,18,-8,-10,-11,-12,-13,-14,-15,-16,-17,18,18,-17,-9,-5,-97,-101,-103,-104,-105,-106,-107,-108,-85,18,-17,-96,-100,-115,-102,129,-44,-109,-99,-116,-18,-43,129,-87,-86,-119,-76,-92,-74,-91,-75,]),'IMPORT':([0,2,3,5,6,7,8,9,10,11,12,13,20,21,22,23,24,30,32,34,35,36,37,38,39,40,47,48,49,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,92,93,106,107,109,118,122,123,142,143,150,152,167,169,174,176,188,189,191,194,195,196,197,200,201,202,203,208,215,222,229,230,],[19,19,19,-8,-10,-11,-12,-13,-14,-15,-16,-17,19,19,-17,-9,-5,-97,19,-101,-103,-104,-105,-106,-107,-108,-85,19,-17,-96,-100,19,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-115,-102,-44,-109,-99,-77,-116,-18,-37,-66,-117,-43,-87,-86,-40,-67,-119,-76,-92,-102,-38,-39,-61,19,-118,-74,19,19,-35,-91,-75,-68,]),'$end':([1,2,3,5,6,7,8,9,10,11,12,13,21,22,23,24,30,34,35,36,37,38,39,40,47,48,49,53,72,92,93,106,107,109,122,123,152,167,169,188,189,191,202,222,229,],[0,-4,-3,-8,-10,-11,-12,-13,-14,-15,-16,-17,-2,-17,-9,-5,-97,-101,-103,-104,-105,-106,-107,-108,-85,-1,-17,-96,-100,-115,-102,-44,-109,-99,-116,-18,-43,-87,-86,-119,-76,-92,-74,-91,-75,]),'MAIN':([4,18,],[24,46,]),'DOT':([15,86,],[26,112,]),'LBRACE':([16,28,34,35,36,37,38,39,40,50,92,93,105,106,107,115,116,122,132,152,156,160,161,162,165,171,181,182,183,184,214,218,],[32,32,-101,-103,-104,-105,-106,-107,-108,102,-115,-102,-49,-44,-109,149,32,-116,-60,-43,-60,32,-125,-126,32,32,32,-50,-51,203,220,32,]),'NUMBER':([16,41,42,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,88,89,90,95,103,111,113,121,141,151,170,173,175,179,205,217,219,220,231,232,],[34,34,34,34,34,34,34,-54,-55,-56,-57,-58,-59,-52,-53,-110,-111,-112,-113,-114,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'RUNE':([16,41,42,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,88,89,90,95,103,111,113,121,141,151,170,173,175,179,205,217,219,220,231,232,],[35,35,35,35,35,35,35,-54,-55,-56,-57,-58,-59,-52,-53,-110,-111,-112,-113,-114,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'STRING':([16,19,41,42,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,88,89,90,95,103,111,113,121,141,151,170,173,175,179,205,217,219,220,231,232,],[36,47,36,36,36,36,36,36,-54,-55,-56,-57,-58,-59,-52,-53,-110,-111,-112,-113,-114,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,228,228,228,]),'RAW_STRING':([16,41,42,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,88,89,90,95,103,111,113,121,141,151,170,173,175,179,205,217,219,220,231,232,],[37,37,37,37,37,37,37,-54,-55,-56,-57,-58,-59,-52,-53,-110,-111,-112,-113,-114,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'TRUE':([16,41,42,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,88,89,90,95,103,111,113,121,141,151,170,173,175,179,205,217,219,220,231,232,],[38,38,38,38,38,38,38,-54,-55,-56,-57,-58,-59,-52,-53,-110,-111,-112,-113,-114,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'FALSE':([16,41,42,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,88,89,90,95,103,111,113,121,141,151,170,173,175,179,205,217,219,220,231,232,],[39,39,39,39,39,39,39,-54,-55,-56,-57,-58,-59,-52,-53,-110,-111,-112,-113,-114,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'NIL':([16,41,42,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,88,89,90,95,103,111,113,121,141,151,170,173,175,179,205,217,219,220,231,232,],[40,40,40,40,40,40,40,-54,-55,-56,-57,-58,-59,-52,-53,-110,-111,-112,-113,-114,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'MINUS':([16,29,33,34,35,36,37,38,39,40,41,42,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,88,89,90,92,93,94,95,103,105,106,107,108,111,113,115,118,121,122,123,140,141,142,151,152,170,171,173,175,179,190,194,195,199,205,213,217,219,220,221,227,228,231,232,],[41,66,-102,-101,-103,-104,-105,-106,-107,-108,41,41,41,41,41,41,-54,-55,-56,-57,-58,-59,-52,-53,-110,-111,-112,-113,-114,41,41,41,41,-115,-102,66,41,41,66,66,66,66,41,41,66,66,41,-116,66,66,41,66,41,66,41,66,41,41,41,66,-102,66,66,41,66,41,41,41,66,66,-104,41,41,]),'LPAREN':([16,18,41,42,44,46,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,86,88,89,90,95,103,111,113,121,129,141,145,151,170,173,175,179,187,194,205,217,219,220,231,232,],[42,45,42,42,96,101,103,42,42,42,42,-54,-55,-56,-57,-58,-59,-52,-53,-110,-111,-112,-113,-114,42,113,42,42,42,42,42,42,42,42,158,42,173,42,42,42,42,42,205,113,42,42,42,42,42,42,]),'VAR':([24,30,32,34,35,36,37,38,39,40,47,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,92,93,106,107,109,118,122,142,143,150,152,167,169,174,176,191,194,195,196,197,200,201,203,208,215,230,],[-5,-97,87,-101,-103,-104,-105,-106,-107,-108,-85,-96,-100,87,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-115,-102,-44,-109,-99,-77,-116,-37,-66,-117,-43,-87,-86,-40,-67,-92,-102,-38,-39,-61,87,-118,87,87,-35,-68,]),'SWITCH':([24,30,32,34,35,36,37,38,39,40,47,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,92,93,106,107,109,118,122,142,143,150,152,167,169,174,176,191,194,195,196,197,200,201,203,208,215,230,],[-5,-97,88,-101,-103,-104,-105,-106,-107,-108,-85,-96,-100,88,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-115,-102,-44,-109,-99,-77,-116,-37,-66,-117,-43,-87,-86,-40,-67,-92,-102,-38,-39,-61,88,-118,88,88,-35,-68,]),'IF':([24,30,32,34,35,36,37,38,39,40,47,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,92,93,106,107,109,118,122,142,143,150,152,167,169,174,176,191,194,195,196,197,200,201,203,208,215,230,],[-5,-97,89,-101,-103,-104,-105,-106,-107,-108,-85,-96,-100,89,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-115,-102,-44,-109,-99,-77,-116,-37,-66,-117,-43,-87,-86,-40,-67,-92,-102,-38,-39,-61,89,-118,89,89,-35,-68,]),'RETURN':([24,30,32,34,35,36,37,38,39,40,47,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,92,93,106,107,109,110,118,122,142,143,150,152,167,169,174,176,191,194,195,196,197,200,201,203,208,210,215,230,],[-5,-97,90,-101,-103,-104,-105,-106,-107,-108,-85,-96,-100,90,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-115,-102,-44,-109,-99,-22,-77,-116,-37,-66,-117,-43,-87,-86,-40,-67,-92,-102,-38,-39,-61,90,-118,90,90,217,-35,-68,]),'RBRACE':([24,30,32,34,35,36,37,38,39,40,47,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,92,93,106,107,109,110,118,122,136,137,142,143,150,152,166,167,168,169,174,176,177,178,191,194,195,196,197,198,201,203,209,210,215,216,221,224,225,227,228,230,233,234,],[-5,-97,72,-101,-103,-104,-105,-106,-107,-108,-85,-96,109,-100,-21,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-115,-102,-44,-109,-99,-22,-77,-116,167,-89,-37,-66,-117,-43,-88,-87,-90,-86,-40,-67,197,-62,-92,-102,-38,-39,-61,-63,-118,72,-65,109,-35,-64,229,230,-69,-72,-73,-68,-70,-71,]),'CASE':([24,30,34,35,36,37,38,39,40,47,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,92,93,106,107,109,110,118,122,142,143,149,150,152,167,169,174,176,178,191,194,195,196,197,201,209,215,216,230,],[-5,-97,-101,-103,-104,-105,-106,-107,-108,-85,-96,-100,-21,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-115,-102,-44,-109,-99,-22,-77,-116,-37,-66,179,-117,-43,-87,-86,-40,-67,179,-92,-102,-38,-39,-61,-118,-65,-35,-64,-68,]),'DEFAULT':([24,30,34,35,36,37,38,39,40,47,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,92,93,106,107,109,110,118,122,142,143,149,150,152,167,169,174,176,178,191,194,195,196,197,201,209,215,216,230,],[-5,-97,-101,-103,-104,-105,-106,-107,-108,-85,-96,-100,-21,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-115,-102,-44,-109,-99,-22,-77,-116,-37,-66,180,-117,-43,-87,-86,-40,-67,180,-92,-102,-38,-39,-61,-118,-65,-35,-64,-68,]),'STRUCT':([25,],[50,]),'SEMICOLON':([27,34,35,36,37,38,39,40,92,93,104,105,106,107,108,122,152,],[52,-101,-103,-104,-105,-106,-107,-108,-115,-102,141,-49,-44,-109,-95,-116,-43,]),'EQ':([29,33,34,35,36,37,38,39,40,92,93,94,105,106,107,108,115,118,122,123,140,142,152,171,190,194,195,199,213,221,227,228,],[57,-102,-101,-103,-104,-105,-106,-107,-108,-115,-102,57,57,57,57,57,57,57,-116,57,57,57,57,57,57,-102,57,57,57,57,57,-104,]),'NEQ':([29,33,34,35,36,37,38,39,40,92,93,94,105,106,107,108,115,118,122,123,140,142,152,171,190,194,195,199,213,221,227,228,],[58,-102,-101,-103,-104,-105,-106,-107,-108,-115,-102,58,58,58,58,58,58,58,-116,58,58,58,58,58,58,-102,58,58,58,58,58,-104,]),'GT':([29,33,34,35,36,37,38,39,40,92,93,94,105,106,107,108,115,118,122,123,140,142,152,171,190,194,195,199,213,221,227,228,],[59,-102,-101,-103,-104,-105,-106,-107,-108,-115,-102,59,59,59,59,59,59,59,-116,59,59,59,59,59,59,-102,59,59,59,59,59,-104,]),'LT':([29,33,34,35,36,37,38,39,40,92,93,94,105,106,107,108,115,118,122,123,140,142,152,171,190,194,195,199,213,221,227,228,],[60,-102,-101,-103,-104,-105,-106,-107,-108,-115,-102,60,60,60,60,60,60,60,-116,60,60,60,60,60,60,-102,60,60,60,60,60,-104,]),'GE':([29,33,34,35,36,37,38,39,40,92,93,94,105,106,107,108,115,118,122,123,140,142,152,171,190,194,195,199,213,221,227,228,],[61,-102,-101,-103,-104,-105,-106,-107,-108,-115,-102,61,61,61,61,61,61,61,-116,61,61,61,61,61,61,-102,61,61,61,61,61,-104,]),'LE':([29,33,34,35,36,37,38,39,40,92,93,94,105,106,107,108,115,118,122,123,140,142,152,171,190,194,195,199,213,221,227,228,],[62,-102,-101,-103,-104,-105,-106,-107,-108,-115,-102,62,62,62,62,62,62,62,-116,62,62,62,62,62,62,-102,62,62,62,62,62,-104,]),'AND':([29,33,34,35,36,37,38,39,40,92,93,94,105,106,107,108,115,117,118,122,123,140,142,152,171,182,190,194,195,199,213,221,227,228,],[63,-102,-101,-103,-104,-105,-106,-107,-108,-115,-102,63,63,63,63,63,63,63,63,-116,63,63,63,63,63,63,63,-102,63,63,63,63,63,-104,]),'OR':([29,33,34,35,36,37,38,39,40,92,93,94,105,106,107,108,115,117,118,122,123,140,142,152,171,182,190,194,195,199,213,221,227,228,],[64,-102,-101,-103,-104,-105,-106,-107,-108,-115,-102,64,64,64,64,64,64,64,64,-116,64,64,64,64,64,64,64,-102,64,64,64,64,64,-104,]),'PLUS':([29,33,34,35,36,37,38,39,40,92,93,94,105,106,107,108,115,118,122,123,140,142,152,171,190,194,195,199,213,221,227,228,],[65,-102,-101,-103,-104,-105,-106,-107,-108,-115,-102,65,65,65,65,65,65,65,-116,65,65,65,65,65,65,-102,65,65,65,65,65,-104,]),'TIMES':([29,33,34,35,36,37,38,39,40,92,93,94,105,106,107,108,115,118,122,123,140,142,152,171,190,194,195,199,213,221,227,228,],[67,-102,-101,-103,-104,-105,-106,-107,-108,-115,-102,67,67,67,67,67,67,67,-116,67,67,67,67,67,67,-102,67,67,67,67,67,-104,]),'DIVIDE':([29,33,34,35,36,37,38,39,40,92,93,94,105,106,107,108,115,118,122,123,140,142,152,171,190,194,195,199,213,221,227,228,],[68,-102,-101,-103,-104,-105,-106,-107,-108,-115,-102,68,68,68,68,68,68,68,-116,68,68,68,68,68,68,-102,68,68,68,68,68,-104,]),'MOD':([29,33,34,35,36,37,38,39,40,92,93,94,105,106,107,108,115,118,122,123,140,142,152,171,190,194,195,199,213,221,227,228,],[69,-102,-101,-103,-104,-105,-106,-107,-108,-115,-102,69,69,69,69,69,69,69,-116,69,69,69,69,69,69,-102,69,69,69,69,69,-104,]),'DECLARE_ASSIGN':([31,33,86,119,120,],[70,-93,111,-93,-94,]),'COMMA':([33,34,35,36,37,38,39,40,45,92,93,98,99,100,106,107,119,122,128,131,139,140,152,153,154,155,158,163,186,190,211,213,225,227,228,234,],[91,-101,-103,-104,-105,-106,-107,-108,-60,-115,-102,133,-121,-122,-44,-109,91,-116,157,-123,170,-45,-43,-84,-82,-83,-60,-120,133,-46,-124,219,231,-72,-73,-71,]),'RPAREN':([34,35,36,37,38,39,40,45,92,93,94,96,98,99,100,101,103,106,107,113,122,125,126,127,128,130,131,134,138,139,140,146,152,153,154,155,158,163,173,185,186,190,207,211,212,213,223,],[-101,-103,-104,-105,-106,-107,-108,-60,-115,-102,122,-60,132,-121,-122,-60,-48,-44,-109,-48,-116,156,-78,-79,-80,159,-123,165,169,-47,-45,174,-43,-84,-82,-83,-60,-120,-48,-81,204,-46,215,-124,218,-6,-7,]),'COLON':([34,35,36,37,38,39,40,92,93,106,107,122,152,180,199,226,227,228,],[-101,-103,-104,-105,-106,-107,-108,-115,-102,-44,-109,-116,-43,200,208,232,-72,-73,]),'ASSIGN':([43,114,147,],[95,148,175,]),'ELSE':([72,109,150,],[-100,-99,181,]),'DATATYPE':([97,114,124,132,135,156,164,172,204,206,],[131,147,155,161,166,161,131,192,211,214,]),'MAP':([111,148,],[144,144,]),'LBRACKET':([144,],[172,]),'AMPERSAND':([173,],[193,]),'RBRACKET':([192,],[206,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'package':([0,32,73,200,203,208,],[2,80,80,80,80,80,]),'declaration_list':([0,2,20,],[3,21,48,]),'declaration':([0,2,3,20,21,48,],[5,5,23,5,23,23,]),'struct_definition':([0,2,3,20,21,32,48,73,200,203,208,],[6,6,6,6,6,78,6,78,78,78,78,]),'print_statement':([0,2,3,20,21,32,48,73,200,203,208,],[7,7,7,7,7,77,7,77,77,77,77,]),'for_statement':([0,2,3,20,21,32,48,73,200,203,208,],[8,8,8,8,8,79,8,79,79,79,79,]),'const_declaration':([0,2,3,20,21,48,],[9,9,9,9,9,9,]),'function':([0,2,3,20,21,48,],[10,10,10,10,10,10,]),'method_definition':([0,2,3,20,21,48,],[11,11,11,11,11,11,]),'function_literal':([0,2,3,20,21,48,],[12,12,12,12,12,12,]),'import':([0,2,3,20,21,32,48,73,200,203,208,],[13,22,13,49,13,81,13,81,81,81,81,]),'import_list':([2,],[20,]),'shortAssignment':([16,],[27,]),'condicion':([16,52,89,151,],[28,104,117,182,]),'expression':([16,41,42,52,54,55,56,70,88,89,90,95,103,111,113,121,141,151,170,173,175,179,205,217,219,220,231,232,],[29,92,94,29,105,106,107,108,115,29,118,123,140,142,140,152,171,29,190,140,195,199,213,221,213,227,227,227,]),'block':([16,28,116,160,165,171,181,184,218,],[30,53,150,188,189,191,201,202,222,]),'identifier_list':([16,91,],[31,120,]),'comparador':([29,92,94,105,106,107,108,115,118,123,140,142,152,171,190,195,199,213,221,227,],[54,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,]),'operadorLogico':([29,92,94,105,106,107,108,115,117,118,123,140,142,152,171,182,190,195,199,213,221,227,],[55,55,55,55,55,55,55,55,151,55,55,55,55,55,55,151,55,55,55,55,55,55,]),'operator':([29,92,94,105,106,107,108,115,118,123,140,142,152,171,190,195,199,213,221,227,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'sentencias':([32,73,200,203,208,],[71,110,209,210,216,]),'sentencia':([32,73,200,203,208,],[73,73,73,73,73,]),'assignment':([32,73,200,203,208,],[74,74,74,74,74,]),'input':([32,73,200,203,208,],[75,75,75,75,75,]),'llamarFuncion':([32,73,175,200,203,208,],[76,76,196,76,76,76,]),'switch':([32,73,200,203,208,],[82,82,82,82,82,]),'map':([32,73,200,203,208,],[83,83,83,83,83,]),'if_statement':([32,73,200,203,208,],[84,84,84,84,84,]),'return_statement':([32,73,200,203,208,],[85,85,85,85,85,]),'parameters':([45,158,],[98,186,]),'parameter':([45,133,158,],[99,163,99,]),'empty':([45,96,101,132,156,158,],[100,127,127,162,162,100,]),'condicion_compleja':([89,151,],[116,183,]),'params_opt':([96,101,],[125,134,]),'params':([96,101,157,],[126,126,185,]),'param':([96,101,157,],[128,128,128,]),'struct_fields':([102,],[136,]),'struct_field':([102,136,],[137,168,]),'argument_list_opt':([103,113,173,],[138,146,138,]),'argument_list':([103,113,173,],[139,139,139,]),'mapLiteral':([111,148,],[143,176,]),'type_name':([124,],[154,]),'return_type':([132,156,],[160,184,]),'caseBlocks':([149,178,],[177,198,]),'caseBlock':([149,178,],[178,178,]),'arguments':([205,219,],[212,223,]),'mapEntries':([220,231,],[224,233,]),'mapEntry':([220,231,],[225,225,]),'value_key':([220,231,232,],[226,226,234,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> package import_list declaration_list','program',3,'p_program','parser.py',7),
  ('program -> package declaration_list','program',2,'p_program','parser.py',8),
  ('program -> declaration_list','program',1,'p_program','parser.py',9),
  ('program -> package','program',1,'p_program','parser.py',10),
  ('package -> PACKAGE MAIN','package',2,'p_package','parser.py',19),
  ('arguments -> expression','arguments',1,'p_arguments','parser.py',24),
  ('arguments -> expression COMMA arguments','arguments',3,'p_arguments','parser.py',25),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list_single','parser.py',34),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_multiple','parser.py',38),
  ('declaration -> struct_definition','declaration',1,'p_declaration','parser.py',42),
  ('declaration -> print_statement','declaration',1,'p_declaration','parser.py',43),
  ('declaration -> for_statement','declaration',1,'p_declaration','parser.py',44),
  ('declaration -> const_declaration','declaration',1,'p_declaration','parser.py',45),
  ('declaration -> function','declaration',1,'p_declaration','parser.py',46),
  ('declaration -> method_definition','declaration',1,'p_declaration','parser.py',47),
  ('declaration -> function_literal','declaration',1,'p_declaration','parser.py',48),
  ('declaration -> import','declaration',1,'p_declaration','parser.py',49),
  ('const_declaration -> CONST IDENTIFIER ASSIGN expression','const_declaration',4,'p_const_declaration','parser.py',54),
  ('import_list -> import','import_list',1,'p_import_list_single','parser.py',58),
  ('import_list -> import_list import','import_list',2,'p_import_list_multiple','parser.py',62),
  ('sentencias -> sentencia','sentencias',1,'p_sentencias','parser.py',70),
  ('sentencias -> sentencia sentencias','sentencias',2,'p_sentencias','parser.py',71),
  ('sentencia -> assignment','sentencia',1,'p_sentencia','parser.py',78),
  ('sentencia -> input','sentencia',1,'p_sentencia','parser.py',79),
  ('sentencia -> llamarFuncion','sentencia',1,'p_sentencia','parser.py',80),
  ('sentencia -> print_statement','sentencia',1,'p_sentencia','parser.py',81),
  ('sentencia -> struct_definition','sentencia',1,'p_sentencia','parser.py',82),
  ('sentencia -> for_statement','sentencia',1,'p_sentencia','parser.py',83),
  ('sentencia -> package','sentencia',1,'p_sentencia','parser.py',84),
  ('sentencia -> import','sentencia',1,'p_sentencia','parser.py',85),
  ('sentencia -> switch','sentencia',1,'p_sentencia','parser.py',86),
  ('sentencia -> map','sentencia',1,'p_sentencia','parser.py',87),
  ('sentencia -> if_statement','sentencia',1,'p_sentencia','parser.py',88),
  ('sentencia -> return_statement','sentencia',1,'p_sentencia','parser.py',89),
  ('input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN','input',7,'p_input','parser.py',92),
  ('varDeclaration -> VAR IDENTIFIER DATATYPE','varDeclaration',3,'p_var_declaration','parser.py',95),
  ('assignment -> IDENTIFIER DECLARE_ASSIGN expression','assignment',3,'p_assignment','parser.py',98),
  ('assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression','assignment',5,'p_assignment','parser.py',99),
  ('assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion','assignment',5,'p_assignment','parser.py',100),
  ('llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN','llamarFuncion',4,'p_llamar_funcion','parser.py',103),
  ('argumentos -> expression','argumentos',1,'p_argumentos','parser.py',114),
  ('argumentos -> expression COMMA argumentos','argumentos',3,'p_argumentos','parser.py',115),
  ('expression -> expression comparador expression','expression',3,'p_expression_comparacion','parser.py',119),
  ('expression -> expression operadorLogico expression','expression',3,'p_boolean_expression','parser.py',142),
  ('argument_list -> expression','argument_list',1,'p_argument_list_single','parser.py',146),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list_multiple','parser.py',149),
  ('argument_list_opt -> argument_list','argument_list_opt',1,'p_argument_list_opt_some','parser.py',154),
  ('argument_list_opt -> <empty>','argument_list_opt',0,'p_argument_list_opt_empty','parser.py',157),
  ('condicion -> expression comparador expression','condicion',3,'p_condicion','parser.py',161),
  ('condicion_compleja -> condicion operadorLogico condicion','condicion_compleja',3,'p_condicion_compleja','parser.py',164),
  ('condicion_compleja -> condicion operadorLogico condicion_compleja','condicion_compleja',3,'p_condicion_compleja','parser.py',165),
  ('operadorLogico -> AND','operadorLogico',1,'p_operador_logico','parser.py',168),
  ('operadorLogico -> OR','operadorLogico',1,'p_operador_logico','parser.py',169),
  ('comparador -> EQ','comparador',1,'p_comparador','parser.py',172),
  ('comparador -> NEQ','comparador',1,'p_comparador','parser.py',173),
  ('comparador -> GT','comparador',1,'p_comparador','parser.py',174),
  ('comparador -> LT','comparador',1,'p_comparador','parser.py',175),
  ('comparador -> GE','comparador',1,'p_comparador','parser.py',176),
  ('comparador -> LE','comparador',1,'p_comparador','parser.py',177),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',180),
  ('switch -> SWITCH expression LBRACE caseBlocks RBRACE','switch',5,'p_switch_statement','parser.py',184),
  ('caseBlocks -> caseBlock','caseBlocks',1,'p_caseBlocks','parser.py',191),
  ('caseBlocks -> caseBlock caseBlocks','caseBlocks',2,'p_caseBlocks','parser.py',192),
  ('caseBlock -> CASE expression COLON sentencias','caseBlock',4,'p_caseBlock','parser.py',195),
  ('caseBlock -> DEFAULT COLON sentencias','caseBlock',3,'p_caseBlock','parser.py',196),
  ('map -> IDENTIFIER DECLARE_ASSIGN mapLiteral','map',3,'p_short_map','parser.py',199),
  ('map -> VAR IDENTIFIER ASSIGN mapLiteral','map',4,'p_map','parser.py',202),
  ('mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE','mapLiteral',8,'p_map_literal','parser.py',205),
  ('mapEntries -> mapEntry','mapEntries',1,'p_map_entries','parser.py',208),
  ('mapEntries -> mapEntry COMMA mapEntries','mapEntries',3,'p_map_entries','parser.py',209),
  ('mapEntry -> value_key COLON value_key','mapEntry',3,'p_map_entry','parser.py',212),
  ('value_key -> expression','value_key',1,'p_value_key','parser.py',215),
  ('value_key -> STRING','value_key',1,'p_value_key','parser.py',216),
  ('function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block','function',7,'p_function','parser.py',219),
  ('function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE sentencias RETURN expression RBRACE','function',11,'p_function_with_return','parser.py',223),
  ('function -> FUNC MAIN LPAREN params_opt RPAREN block','function',6,'p_function_main','parser.py',226),
  ('return_statement -> RETURN expression','return_statement',2,'p_return_statement','parser.py',229),
  ('params_opt -> params','params_opt',1,'p_params_opt','parser.py',232),
  ('params_opt -> empty','params_opt',1,'p_params_opt','parser.py',233),
  ('params -> param','params',1,'p_params','parser.py',236),
  ('params -> param COMMA params','params',3,'p_params','parser.py',237),
  ('param -> IDENTIFIER type_name','param',2,'p_param','parser.py',240),
  ('type_name -> DATATYPE','type_name',1,'p_type_name','parser.py',243),
  ('type_name -> IDENTIFIER','type_name',1,'p_type_name','parser.py',244),
  ('import -> IMPORT STRING','import',2,'p_import','parser.py',249),
  ('print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN','print_statement',6,'p_print_statement','parser.py',259),
  ('struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE','struct_definition',6,'p_struct_definition','parser.py',269),
  ('struct_field -> IDENTIFIER DATATYPE','struct_field',2,'p_struct_field','parser.py',274),
  ('struct_fields -> struct_field','struct_fields',1,'p_struct_fields_single','parser.py',279),
  ('struct_fields -> struct_fields struct_field','struct_fields',2,'p_struct_fields_multiple','parser.py',282),
  ('method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block','method_definition',10,'p_method_definition','parser.py',289),
  ('for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block','for_statement',7,'p_for_statement_classis','parser.py',303),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list_single','parser.py',307),
  ('identifier_list -> IDENTIFIER COMMA identifier_list','identifier_list',3,'p_identifier_list_multiple','parser.py',311),
  ('shortAssignment -> identifier_list DECLARE_ASSIGN expression','shortAssignment',3,'p_short_assignment','parser.py',315),
  ('for_statement -> FOR condicion block','for_statement',3,'p_for_statement_condition','parser.py',320),
  ('for_statement -> FOR block','for_statement',2,'p_for_statement_infinite','parser.py',330),
  ('for_range_clause -> shortAssignment RANGE expression','for_range_clause',3,'p_for_range_clause','parser.py',334),
  ('block -> LBRACE sentencias RBRACE','block',3,'p_block','parser.py',338),
  ('block -> LBRACE RBRACE','block',2,'p_block_empty','parser.py',342),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',360),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',363),
  ('expression -> RUNE','expression',1,'p_expression_rune','parser.py',366),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',369),
  ('expression -> RAW_STRING','expression',1,'p_expression_raw_string','parser.py',372),
  ('expression -> TRUE','expression',1,'p_expression_boolean','parser.py',375),
  ('expression -> FALSE','expression',1,'p_expression_boolean','parser.py',376),
  ('expression -> NIL','expression',1,'p_expression_nil','parser.py',379),
  ('expression -> expression operator expression','expression',3,'p_expression_binary','parser.py',383),
  ('operator -> PLUS','operator',1,'p_operator','parser.py',387),
  ('operator -> MINUS','operator',1,'p_operator','parser.py',388),
  ('operator -> TIMES','operator',1,'p_operator','parser.py',389),
  ('operator -> DIVIDE','operator',1,'p_operator','parser.py',390),
  ('operator -> MOD','operator',1,'p_operator','parser.py',391),
  ('expression -> MINUS expression','expression',2,'p_expression_unary_minus','parser.py',394),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',398),
  ('if_statement -> IF condicion_compleja block','if_statement',3,'p_if_statement','parser.py',417),
  ('if_statement -> IF condicion_compleja block ELSE block','if_statement',5,'p_if_statement','parser.py',418),
  ('function_literal -> FUNC LPAREN parameters RPAREN return_type block','function_literal',6,'p_function_literal','parser.py',432),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','parser.py',436),
  ('parameters -> parameter','parameters',1,'p_parameters','parser.py',437),
  ('parameters -> empty','parameters',1,'p_parameters','parser.py',438),
  ('parameter -> IDENTIFIER DATATYPE','parameter',2,'p_parameter','parser.py',447),
  ('parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE','parameter',6,'p_parameter','parser.py',448),
  ('return_type -> DATATYPE','return_type',1,'p_return_type','parser.py',455),
  ('return_type -> empty','return_type',1,'p_return_type','parser.py',456),
  ('slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name','slice_declaration',5,'p_slice_declaration','parser.py',466),
  ('declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal','declare_assign',3,'p_slice_declare_assign','parser.py',470),
  ('slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE','slice_literal',6,'p_slice_literal','parser.py',474),
  ('elements -> elements COMMA expression','elements',3,'p_elements_multiple','parser.py',478),
  ('elements -> expression','elements',1,'p_elements_single','parser.py',482),
]
