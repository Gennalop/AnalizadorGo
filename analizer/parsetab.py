
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND AND ASSIGN BREAK CASE COLON COMMA CONST CONTINUE DATATYPE DECLARE_ASSIGN DEFAULT DEFER DIVIDE DOT ELSE EQ FALLTHROUGH FALSE FOR FUNC GE GO GT IDENTIFIER IF IMPORT INTERFACE LBRACE LBRACKET LE LPAREN LT MAP MINUS MOD NEQ NIL NUMBER OR PACKAGE PLUS RANGE RAW_STRING RBRACE RBRACKET RETURN RPAREN RUNE SELECT SEMICOLON STRING STRING_UNCLOSE STRUCT SWITCH TIMES TRUE TYPE VARprogram : declaration_listdeclaration_list : declarationdeclaration_list : declaration_list declarationdeclaration : struct_definition\n                   | print_statementprint_statement : IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPARENargument_list : expressionargument_list : argument_list COMMA expressionargument_list_opt : argument_listargument_list_opt : expression : IDENTIFIERexpression : NUMBERexpression : RUNEexpression : STRINGexpression : RAW_STRINGexpression : TRUE\n                  | FALSEexpression : NILstruct_definition : TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACEstruct_field : IDENTIFIER DATATYPEstruct_fields : struct_fieldstruct_fields : struct_fields struct_field'
    
_lr_action_items = {'TYPE':([0,2,3,4,5,8,30,32,],[6,6,-2,-4,-5,-3,-19,-6,]),'IDENTIFIER':([0,2,3,4,5,6,8,10,13,14,16,17,29,30,31,32,33,],[7,7,-2,-4,-5,9,-3,12,15,18,15,-21,-20,-19,-22,-6,18,]),'$end':([1,2,3,4,5,8,30,32,],[0,-1,-2,-4,-5,-3,-19,-6,]),'DOT':([7,],[10,]),'STRUCT':([9,],[11,]),'LBRACE':([11,],[13,]),'LPAREN':([12,],[14,]),'RPAREN':([14,18,19,20,21,22,23,24,25,26,27,28,34,],[-10,-11,32,-9,-7,-12,-13,-14,-15,-16,-17,-18,-8,]),'NUMBER':([14,33,],[22,22,]),'RUNE':([14,33,],[23,23,]),'STRING':([14,33,],[24,24,]),'RAW_STRING':([14,33,],[25,25,]),'TRUE':([14,33,],[26,26,]),'FALSE':([14,33,],[27,27,]),'NIL':([14,33,],[28,28,]),'DATATYPE':([15,],[29,]),'RBRACE':([16,17,29,31,],[30,-21,-20,-22,]),'COMMA':([18,20,21,22,23,24,25,26,27,28,34,],[-11,33,-7,-12,-13,-14,-15,-16,-17,-18,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,],[2,]),'declaration':([0,2,],[3,8,]),'struct_definition':([0,2,],[4,4,]),'print_statement':([0,2,],[5,5,]),'struct_fields':([13,],[16,]),'struct_field':([13,16,],[17,31,]),'argument_list_opt':([14,],[19,]),'argument_list':([14,],[20,]),'expression':([14,33,],[21,34,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','parser.py',7),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list_single','parser.py',11),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_multiple','parser.py',15),
  ('declaration -> struct_definition','declaration',1,'p_declaration','parser.py',19),
  ('declaration -> print_statement','declaration',1,'p_declaration','parser.py',20),
  ('print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN','print_statement',6,'p_print_statement','parser.py',27),
  ('argument_list -> expression','argument_list',1,'p_argument_list_single','parser.py',35),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list_multiple','parser.py',38),
  ('argument_list_opt -> argument_list','argument_list_opt',1,'p_argument_list_opt_some','parser.py',43),
  ('argument_list_opt -> <empty>','argument_list_opt',0,'p_argument_list_opt_empty','parser.py',46),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',51),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',54),
  ('expression -> RUNE','expression',1,'p_expression_rune','parser.py',57),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',60),
  ('expression -> RAW_STRING','expression',1,'p_expression_raw_string','parser.py',63),
  ('expression -> TRUE','expression',1,'p_expression_boolean','parser.py',66),
  ('expression -> FALSE','expression',1,'p_expression_boolean','parser.py',67),
  ('expression -> NIL','expression',1,'p_expression_nil','parser.py',70),
  ('struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE','struct_definition',6,'p_struct_definition','parser.py',88),
  ('struct_field -> IDENTIFIER DATATYPE','struct_field',2,'p_struct_field','parser.py',93),
  ('struct_fields -> struct_field','struct_fields',1,'p_struct_fields_single','parser.py',98),
  ('struct_fields -> struct_fields struct_field','struct_fields',2,'p_struct_fields_multiple','parser.py',101),
]
