
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDnonassocEQNEQGTLTGELEleftPLUSMINUSleftTIMESDIVIDEMODrightUMINUSAMPERSAND AND ASSIGN BREAK CASE COLON COMMA CONST CONTINUE DATATYPE DECLARE_ASSIGN DEFAULT DEFER DIVIDE DOT ELSE EQ FALLTHROUGH FALSE FOR FUNC GE GO GT IDENTIFIER IF IMPORT INTERFACE LBRACE LBRACKET LE LPAREN LT MAIN MAP MINUS MOD NEQ NIL NUMBER OR PACKAGE PLUS RANGE RAW_STRING RBRACE RBRACKET RETURN RPAREN RUNE SELECT SEMICOLON STRING STRING_UNCLOSED STRUCT SWITCH TIMES TRUE TYPE VARprogram : statement_liststatement_list_opt : statement_list\n                            | statement_list : statement\n                      | statement_list statementstatement : assignment\n                 | input\n                 | llamarFuncion\n                 | print_statement\n                 | struct_definition\n                 | for_statement\n                 | package\n                 | import\n                 | switch\n                 | map\n                 | if_statement\n                 | function\n                 | method_definition\n                 | function_literal\n                 | var_declaration\n                 | slice_declaration\n                 | declare_assignpackage : PACKAGE MAIN\n               | PACKAGE IDENTIFIERimport : IMPORT STRING\n              | IMPORT LPAREN import_list RPARENimport_list : STRING\n                   | import_list STRINGarguments : expression\n                  | arguments COMMA expression\n                  | const_declaration : CONST IDENTIFIER ASSIGN expressioninput : IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPARENvar_declaration : VAR IDENTIFIER type_nameassignment : IDENTIFIER DECLARE_ASSIGN expression\n                  | IDENTIFIER DECLARE_ASSIGN struct_literal\n                  | VAR IDENTIFIER type_name ASSIGN expression\n                  | VAR IDENTIFIER type_name ASSIGN llamarFuncionassignment : IDENTIFIER DECLARE_ASSIGN slice_literal\n                  | VAR IDENTIFIER type_name ASSIGN slice_literalassignment : IDENTIFIER ASSIGN expressionllamarFuncion : IDENTIFIER LPAREN argument_list_opt RPAREN\n                     | IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN\n                     | IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPARENexpression : expression comparador expressionexpression : expression operadorLogico expressionargument_list : expressionargument_list : argument_list COMMA expressionargument_list_opt : argument_listargument_list_opt : condicion : expression comparador expressioncondicion_compleja : condicion operadorLogico condicion\n                          | condicion operadorLogico condicion_complejaoperadorLogico : AND\n                      | ORcomparador : EQ\n                  | NEQ\n                  | GT\n                  | LT\n                  | GE\n                  | LEempty :switch : SWITCH expression LBRACE caseBlocks RBRACEcaseBlocks : caseBlock\n                   | caseBlock caseBlockscaseBlock : CASE expression COLON statement_list\n                  | DEFAULT COLON statement_listmap : IDENTIFIER DECLARE_ASSIGN mapLiteralmap : VAR IDENTIFIER ASSIGN mapLiteralmapLiteral : MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACEmapEntries : mapEntry\n                   | mapEntry COMMA mapEntriesmapEntry : value_key COLON value_keyvalue_key : expression\n                | STRINGfunction : FUNC IDENTIFIER LPAREN params_opt RPAREN blockfunction : FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACEfunction : FUNC MAIN LPAREN params_opt RPAREN blockreturn_statement : RETURN return_valuesreturn_values : expressionreturn_values : expression COMMA return_valuesparams_opt : params\n                      | params : param\n                  | param COMMA paramsparam : IDENTIFIER type_name\n             | identifier_list type_nameprint_statement : IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPARENstruct_definition : TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACEstruct_literal : IDENTIFIER LBRACE struct_field_assignments RBRACEstruct_field_assignments : struct_field_assignmentstruct_field_assignments : struct_field_assignments COMMA struct_field_assignmentstruct_field_assignment : IDENTIFIER COLON expressionstruct_field : IDENTIFIER type_namestruct_fields : struct_fieldstruct_fields : struct_fields struct_fieldmethod_definition : FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN blockfor_statement : FOR shortAssignment SEMICOLON condicion SEMICOLON expression blockshortAssignment : identifier_list DECLARE_ASSIGN expressionfor_statement : FOR condicion blockfor_statement : FOR blockfor_range_clause : shortAssignment RANGE expressionblock : LBRACE statement_list RBRACEblock : LBRACE RBRACEexpression : NUMBERexpression : IDENTIFIERexpression : RUNEexpression : STRINGexpression : RAW_STRINGexpression : TRUE\n                  | FALSEexpression : NILexpression : slice_literalexpression : llamarFuncionexpression : expression operator expressionexpression : expression DOT IDENTIFIERoperator : PLUS\n                | MINUS\n                | TIMES\n                | DIVIDE\n                | MODexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENif_statement : IF condicion block\n                    | IF condicion block ELSE block\n                    | IF condicion_compleja block\n                    | IF condicion_compleja block ELSE blockfunction_literal : FUNC LPAREN parameters RPAREN return_type blockparameters : parameters COMMA parameter\n                  | parameter\n                  | emptyparameter : IDENTIFIER type_name\n                 | identifier_list type_nameidentifier_list : IDENTIFIERidentifier_list : IDENTIFIER COMMA identifier_listtype_name : DATATYPE\n                 | IDENTIFIER\n                 | LBRACKET RBRACKET type_name\n                 | FUNC LPAREN parameters RPAREN return_typereturn_type : DATATYPEreturn_type : LPAREN type_list RPARENexpression : function_literalreturn_type : emptytype_list : DATATYPEtype_list : DATATYPE COMMA type_listslice_declaration : VAR IDENTIFIER LBRACKET RBRACKET type_namedeclare_assign : IDENTIFIER DECLARE_ASSIGN slice_literalslice_literal : LBRACKET RBRACKET type_name LBRACE elements RBRACEelements : elements COMMA expressionelements : expressionexpression : expression LBRACKET expression RBRACKETexpression : expression LBRACKET expression COLON expression RBRACKET\n                  | expression LBRACKET COLON expression RBRACKET\n                  | expression LBRACKET expression COLON RBRACKET'
    
_lr_action_items = {'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,23,24,25,27,28,29,30,31,32,33,34,35,40,42,44,45,46,47,48,49,50,51,52,53,54,55,58,59,60,63,67,69,70,71,72,73,75,80,81,84,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,115,119,120,121,122,123,124,128,129,130,131,132,133,134,135,136,137,138,139,140,143,144,145,147,149,150,151,153,156,157,161,163,168,172,176,183,187,188,189,190,192,193,194,195,196,197,199,200,201,202,205,206,207,210,212,215,216,219,220,221,222,224,225,226,227,228,229,232,233,235,238,239,240,246,247,251,252,253,254,255,256,257,258,259,260,261,263,265,274,276,277,278,279,280,],[21,21,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,35,36,43,59,63,63,66,-5,69,63,76,63,80,-101,21,-105,-107,-108,-109,-110,-111,-112,-113,-114,63,63,-142,-23,-24,-25,-106,124,-106,-35,-36,-39,-68,-41,-137,-34,-136,63,-100,63,63,63,145,63,-56,-57,-58,-59,-60,-61,-54,-55,-117,-118,-119,-120,-121,63,21,-104,150,152,-122,80,156,63,-124,63,-126,168,173,80,168,179,80,63,-42,63,63,63,-69,80,156,192,-46,-115,-116,63,-103,-134,-135,-123,80,-26,63,-45,80,80,156,223,-37,-38,-40,-138,80,192,-95,63,-151,63,63,80,63,-63,21,-125,-127,168,243,-140,-143,63,-90,179,80,-44,-43,-62,-94,-89,-96,-154,-153,-138,21,21,-76,-128,-78,-33,-139,-98,-152,-44,-148,63,21,21,63,-141,63,21,-77,63,-70,63,63,-97,]),'VAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,30,40,42,44,45,46,47,48,49,50,51,52,55,58,59,60,63,69,70,71,72,73,75,80,81,84,88,108,109,112,120,122,133,137,143,144,145,149,153,157,163,187,188,189,190,196,202,205,206,207,215,216,220,224,225,226,228,232,233,235,238,239,240,246,247,251,252,253,254,255,256,258,259,261,265,274,277,280,],[22,22,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-5,-101,22,-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,-23,-24,-25,-106,-106,-35,-36,-39,-68,-41,-137,-34,-136,-100,22,-104,-122,-124,-126,-42,-69,-46,-115,-116,-103,-123,-26,-45,-37,-38,-40,-138,-151,-63,22,-125,-127,-140,-143,-90,-44,-43,-62,-89,-154,-153,-138,22,22,-76,-128,-78,-33,-139,-98,-152,-44,-148,22,22,-141,22,-77,-70,-97,]),'TYPE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,30,40,42,44,45,46,47,48,49,50,51,52,55,58,59,60,63,69,70,71,72,73,75,80,81,84,88,108,109,112,120,122,133,137,143,144,145,149,153,157,163,187,188,189,190,196,202,205,206,207,215,216,220,224,225,226,228,232,233,235,238,239,240,246,247,251,252,253,254,255,256,258,259,261,265,274,277,280,],[23,23,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-5,-101,23,-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,-23,-24,-25,-106,-106,-35,-36,-39,-68,-41,-137,-34,-136,-100,23,-104,-122,-124,-126,-42,-69,-46,-115,-116,-103,-123,-26,-45,-37,-38,-40,-138,-151,-63,23,-125,-127,-140,-143,-90,-44,-43,-62,-89,-154,-153,-138,23,23,-76,-128,-78,-33,-139,-98,-152,-44,-148,23,23,-141,23,-77,-70,-97,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,30,40,42,44,45,46,47,48,49,50,51,52,55,58,59,60,63,69,70,71,72,73,75,80,81,84,88,108,109,112,120,122,133,137,143,144,145,149,153,157,163,187,188,189,190,196,202,205,206,207,215,216,220,224,225,226,228,232,233,235,238,239,240,246,247,251,252,253,254,255,256,258,259,261,265,274,277,280,],[24,24,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-5,-101,24,-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,-23,-24,-25,-106,-106,-35,-36,-39,-68,-41,-137,-34,-136,-100,24,-104,-122,-124,-126,-42,-69,-46,-115,-116,-103,-123,-26,-45,-37,-38,-40,-138,-151,-63,24,-125,-127,-140,-143,-90,-44,-43,-62,-89,-154,-153,-138,24,24,-76,-128,-78,-33,-139,-98,-152,-44,-148,24,24,-141,24,-77,-70,-97,]),'PACKAGE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,30,40,42,44,45,46,47,48,49,50,51,52,55,58,59,60,63,69,70,71,72,73,75,80,81,84,88,108,109,112,120,122,133,137,143,144,145,149,153,157,163,187,188,189,190,196,202,205,206,207,215,216,220,224,225,226,228,232,233,235,238,239,240,246,247,251,252,253,254,255,256,258,259,261,265,274,277,280,],[25,25,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-5,-101,25,-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,-23,-24,-25,-106,-106,-35,-36,-39,-68,-41,-137,-34,-136,-100,25,-104,-122,-124,-126,-42,-69,-46,-115,-116,-103,-123,-26,-45,-37,-38,-40,-138,-151,-63,25,-125,-127,-140,-143,-90,-44,-43,-62,-89,-154,-153,-138,25,25,-76,-128,-78,-33,-139,-98,-152,-44,-148,25,25,-141,25,-77,-70,-97,]),'IMPORT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,30,40,42,44,45,46,47,48,49,50,51,52,55,58,59,60,63,69,70,71,72,73,75,80,81,84,88,108,109,112,120,122,133,137,143,144,145,149,153,157,163,187,188,189,190,196,202,205,206,207,215,216,220,224,225,226,228,232,233,235,238,239,240,246,247,251,252,253,254,255,256,258,259,261,265,274,277,280,],[26,26,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-5,-101,26,-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,-23,-24,-25,-106,-106,-35,-36,-39,-68,-41,-137,-34,-136,-100,26,-104,-122,-124,-126,-42,-69,-46,-115,-116,-103,-123,-26,-45,-37,-38,-40,-138,-151,-63,26,-125,-127,-140,-143,-90,-44,-43,-62,-89,-154,-153,-138,26,26,-76,-128,-78,-33,-139,-98,-152,-44,-148,26,26,-141,26,-77,-70,-97,]),'SWITCH':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,30,40,42,44,45,46,47,48,49,50,51,52,55,58,59,60,63,69,70,71,72,73,75,80,81,84,88,108,109,112,120,122,133,137,143,144,145,149,153,157,163,187,188,189,190,196,202,205,206,207,215,216,220,224,225,226,228,232,233,235,238,239,240,246,247,251,252,253,254,255,256,258,259,261,265,274,277,280,],[27,27,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-5,-101,27,-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,-23,-24,-25,-106,-106,-35,-36,-39,-68,-41,-137,-34,-136,-100,27,-104,-122,-124,-126,-42,-69,-46,-115,-116,-103,-123,-26,-45,-37,-38,-40,-138,-151,-63,27,-125,-127,-140,-143,-90,-44,-43,-62,-89,-154,-153,-138,27,27,-76,-128,-78,-33,-139,-98,-152,-44,-148,27,27,-141,27,-77,-70,-97,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,30,40,42,44,45,46,47,48,49,50,51,52,55,58,59,60,63,69,70,71,72,73,75,80,81,84,88,108,109,112,120,122,133,137,143,144,145,149,153,157,163,187,188,189,190,196,202,205,206,207,215,216,220,224,225,226,228,232,233,235,238,239,240,246,247,251,252,253,254,255,256,258,259,261,265,274,277,280,],[28,28,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-5,-101,28,-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,-23,-24,-25,-106,-106,-35,-36,-39,-68,-41,-137,-34,-136,-100,28,-104,-122,-124,-126,-42,-69,-46,-115,-116,-103,-123,-26,-45,-37,-38,-40,-138,-151,-63,28,-125,-127,-140,-143,-90,-44,-43,-62,-89,-154,-153,-138,28,28,-76,-128,-78,-33,-139,-98,-152,-44,-148,28,28,-141,28,-77,-70,-97,]),'FUNC':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,24,27,28,30,31,32,34,35,40,42,44,45,46,47,48,49,50,51,52,53,54,55,58,59,60,63,69,70,71,72,73,75,80,81,84,87,88,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,112,114,119,120,121,122,124,128,131,132,133,134,135,136,137,138,143,144,145,147,149,150,151,153,156,157,161,163,168,172,187,188,189,190,192,195,196,197,199,200,201,202,205,206,207,215,216,219,220,222,224,225,226,228,232,233,235,238,239,240,246,247,251,252,253,254,255,256,257,258,259,260,261,263,265,274,276,277,278,279,280,],[29,29,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,57,57,57,-5,57,57,57,85,-101,29,-105,-107,-108,-109,-110,-111,-112,-113,-114,57,57,-142,-23,-24,-25,-106,-106,-35,-36,-39,-68,-41,-137,-34,-136,57,-100,57,57,57,57,-56,-57,-58,-59,-60,-61,-54,-55,-117,-118,-119,-120,-121,57,29,-104,-122,85,57,-124,57,-126,85,85,85,57,-42,57,57,57,-69,85,-46,-115,-116,57,-103,-134,-135,-123,85,-26,57,-45,85,85,-37,-38,-40,-138,85,57,-151,57,57,85,57,-63,29,-125,-127,-140,-143,57,-90,85,-44,-43,-62,-89,-154,-153,-138,29,29,-76,-128,-78,-33,-139,-98,-152,-44,-148,57,29,29,57,-141,57,29,-77,57,-70,57,57,-97,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,30,40,44,45,46,47,48,49,50,51,52,55,58,59,60,63,69,70,71,72,73,75,80,81,84,88,109,112,120,122,133,137,143,144,145,149,153,157,163,187,188,189,190,196,202,206,207,215,216,220,224,225,226,228,232,233,235,240,246,247,251,252,253,254,255,256,261,274,277,280,],[0,-1,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-5,-101,-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,-23,-24,-25,-106,-106,-35,-36,-39,-68,-41,-137,-34,-136,-100,-104,-122,-124,-126,-42,-69,-46,-115,-116,-103,-123,-26,-45,-37,-38,-40,-138,-151,-63,-125,-127,-140,-143,-90,-44,-43,-62,-89,-154,-153,-138,-76,-128,-78,-33,-139,-98,-152,-44,-148,-141,-77,-70,-97,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,30,40,42,44,45,46,47,48,49,50,51,52,55,58,59,60,63,69,70,71,72,73,75,80,81,84,88,108,109,112,120,122,133,137,143,144,145,149,153,157,159,160,163,180,181,187,188,189,190,193,194,196,202,203,206,207,215,216,220,224,225,226,227,228,229,232,233,235,236,237,239,240,246,247,248,249,251,252,253,254,255,256,258,261,264,265,269,270,272,273,274,277,280,282,283,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-5,-101,109,-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,-23,-24,-25,-106,-106,-35,-36,-39,-68,-41,-137,-34,-136,-100,149,-104,-122,-124,-126,-42,-69,-46,-115,-116,-103,-123,-26,202,-64,-45,220,-91,-37,-38,-40,-138,228,-95,-151,-63,-65,-125,-127,-140,-143,-90,-44,-43,-62,-94,-89,-96,-154,-153,-138,256,-150,-67,-76,-128,-78,-93,-92,-33,-139,-98,-152,-44,-148,-66,-141,-149,274,277,-71,-74,-75,-77,-70,-97,-72,-73,]),'CASE':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,30,40,44,45,46,47,48,49,50,51,52,55,58,59,60,63,69,70,71,72,73,75,80,81,84,88,109,112,118,120,122,133,137,143,144,145,149,153,157,160,163,187,188,189,190,196,202,206,207,215,216,220,224,225,226,228,232,233,235,239,240,246,247,251,252,253,254,255,256,258,261,274,277,280,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-5,-101,-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,-23,-24,-25,-106,-106,-35,-36,-39,-68,-41,-137,-34,-136,-100,-104,-122,161,-124,-126,-42,-69,-46,-115,-116,-103,-123,-26,161,-45,-37,-38,-40,-138,-151,-63,-125,-127,-140,-143,-90,-44,-43,-62,-89,-154,-153,-138,-67,-76,-128,-78,-33,-139,-98,-152,-44,-148,-66,-141,-77,-70,-97,]),'DEFAULT':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,30,40,44,45,46,47,48,49,50,51,52,55,58,59,60,63,69,70,71,72,73,75,80,81,84,88,109,112,118,120,122,133,137,143,144,145,149,153,157,160,163,187,188,189,190,196,202,206,207,215,216,220,224,225,226,228,232,233,235,239,240,246,247,251,252,253,254,255,256,258,261,274,277,280,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-5,-101,-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,-23,-24,-25,-106,-106,-35,-36,-39,-68,-41,-137,-34,-136,-100,-104,-122,162,-124,-126,-42,-69,-46,-115,-116,-103,-123,-26,162,-45,-37,-38,-40,-138,-151,-63,-125,-127,-140,-143,-90,-44,-43,-62,-89,-154,-153,-138,-67,-76,-128,-78,-33,-139,-98,-152,-44,-148,-66,-141,-77,-70,-97,]),'DECLARE_ASSIGN':([21,41,43,150,151,],[31,107,-134,-134,-135,]),'ASSIGN':([21,35,80,81,84,190,215,216,226,235,252,261,],[32,82,-137,136,-136,-138,-140,-143,-62,-138,-139,-141,]),'DOT':([21,39,43,44,45,46,47,48,49,50,51,52,55,62,63,69,70,72,75,78,109,112,113,133,142,143,144,145,146,148,149,153,163,185,186,187,188,189,196,198,204,225,230,231,232,233,237,246,248,254,255,256,264,267,272,273,281,],[33,92,111,-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,92,111,111,92,-113,92,92,-104,-122,92,-42,92,92,92,-116,92,92,-103,-123,92,92,92,92,-114,-113,-151,92,92,-43,92,92,-154,-153,92,-128,92,-152,-44,-148,92,92,92,-108,92,]),'LPAREN':([21,24,26,27,28,29,31,32,34,43,53,54,57,63,66,68,69,76,85,87,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,119,121,132,134,135,136,147,152,161,175,195,197,199,201,209,219,226,243,257,260,263,276,278,279,],[34,54,61,54,54,67,54,54,54,34,54,54,115,34,123,129,34,132,139,54,54,54,54,54,-56,-57,-58,-59,-60,-61,-54,-55,-117,-118,-119,-120,-121,54,54,54,54,54,54,54,54,199,54,213,54,54,54,54,213,54,213,260,54,54,54,54,54,54,]),'LBRACE':([24,38,44,45,46,47,48,49,50,51,52,55,62,63,64,65,69,80,84,86,109,112,133,142,143,144,145,149,153,155,163,164,165,166,167,175,196,209,214,215,216,218,225,226,230,232,233,235,241,246,250,252,254,255,256,261,275,],[42,42,-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,118,-106,42,42,130,-137,-136,140,-104,-122,-42,-51,-46,-115,-116,-103,-123,201,-45,42,-52,-53,42,-62,-151,42,42,-140,-143,42,-43,-62,42,-154,-153,-138,259,-128,263,-139,-152,-44,-148,-141,42,]),'NUMBER':([24,27,28,31,32,34,53,54,87,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,119,121,132,134,135,136,147,161,195,197,199,201,219,257,260,263,276,278,279,],[44,44,44,44,44,44,44,44,44,44,44,44,44,-56,-57,-58,-59,-60,-61,-54,-55,-117,-118,-119,-120,-121,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'RUNE':([24,27,28,31,32,34,53,54,87,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,119,121,132,134,135,136,147,161,195,197,199,201,219,257,260,263,276,278,279,],[45,45,45,45,45,45,45,45,45,45,45,45,45,-56,-57,-58,-59,-60,-61,-54,-55,-117,-118,-119,-120,-121,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'STRING':([24,26,27,28,31,32,34,53,54,61,87,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,116,117,119,121,132,134,135,136,147,158,161,195,197,199,201,219,257,260,263,276,278,279,],[46,60,46,46,46,46,46,46,46,117,46,46,46,46,46,-56,-57,-58,-59,-60,-61,-54,-55,-117,-118,-119,-120,-121,46,158,-27,46,46,46,46,46,46,46,-28,46,46,46,46,46,46,46,46,273,46,273,273,]),'RAW_STRING':([24,27,28,31,32,34,53,54,87,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,119,121,132,134,135,136,147,161,195,197,199,201,219,257,260,263,276,278,279,],[47,47,47,47,47,47,47,47,47,47,47,47,47,-56,-57,-58,-59,-60,-61,-54,-55,-117,-118,-119,-120,-121,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'TRUE':([24,27,28,31,32,34,53,54,87,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,119,121,132,134,135,136,147,161,195,197,199,201,219,257,260,263,276,278,279,],[48,48,48,48,48,48,48,48,48,48,48,48,48,-56,-57,-58,-59,-60,-61,-54,-55,-117,-118,-119,-120,-121,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'FALSE':([24,27,28,31,32,34,53,54,87,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,119,121,132,134,135,136,147,161,195,197,199,201,219,257,260,263,276,278,279,],[49,49,49,49,49,49,49,49,49,49,49,49,49,-56,-57,-58,-59,-60,-61,-54,-55,-117,-118,-119,-120,-121,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'NIL':([24,27,28,31,32,34,53,54,87,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,119,121,132,134,135,136,147,161,195,197,199,201,219,257,260,263,276,278,279,],[50,50,50,50,50,50,50,50,50,50,50,50,50,-56,-57,-58,-59,-60,-61,-54,-55,-117,-118,-119,-120,-121,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'MINUS':([24,27,28,31,32,34,39,43,44,45,46,47,48,49,50,51,52,53,54,55,62,63,69,70,72,75,78,87,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,112,113,119,121,132,133,134,135,136,142,143,144,145,146,147,148,149,153,161,163,185,186,187,188,189,195,196,197,198,199,201,204,219,225,230,231,232,233,237,246,248,254,255,256,257,260,263,264,267,272,273,276,278,279,281,],[53,53,53,53,53,53,103,-106,-105,-107,-108,-109,-110,-111,-112,-113,-114,53,53,-142,103,-106,-106,103,-113,103,103,53,53,53,53,53,-56,-57,-58,-59,-60,-61,-54,-55,-117,-118,-119,-120,-121,53,-104,-122,103,53,53,53,-42,53,53,53,103,103,103,-116,103,53,103,-103,-123,53,103,103,103,103,-114,-113,53,-151,53,103,53,53,103,53,-43,103,103,-154,-153,103,-128,103,-152,-44,-148,53,53,53,103,103,103,-108,53,53,53,103,]),'LBRACKET':([24,27,28,31,32,34,35,39,43,44,45,46,47,48,49,50,51,52,53,54,55,62,63,69,70,72,74,75,78,87,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,112,113,114,119,121,124,128,131,132,133,134,135,136,138,142,143,144,145,146,147,148,149,150,151,153,156,161,163,168,172,185,186,187,188,189,192,195,196,197,198,199,200,201,204,219,222,225,230,231,232,233,237,246,248,254,255,256,257,260,263,264,267,272,273,276,278,279,281,],[56,56,56,56,56,56,83,93,-106,-105,-107,-108,-109,-110,-111,-112,-113,-114,56,56,-142,93,-106,-106,93,-113,131,93,93,56,56,56,56,56,-56,-57,-58,-59,-60,-61,-54,-55,-117,-118,-119,-120,-121,56,-104,-122,93,154,56,56,154,154,154,56,-42,56,56,56,154,93,93,93,-116,93,56,93,-103,-134,-135,-123,154,56,93,154,154,93,93,93,-114,-113,154,56,-151,56,93,56,154,56,93,56,154,-43,93,93,-154,-153,93,-128,93,-152,-44,-148,56,56,56,93,93,93,-108,56,56,56,93,]),'MAIN':([25,29,],[58,68,]),'MAP':([31,82,],[74,74,]),'RPAREN':([34,44,45,46,47,48,49,50,51,52,55,63,67,77,78,79,80,84,109,112,113,115,116,117,123,125,126,127,129,132,133,139,143,144,145,149,153,158,163,169,170,171,173,174,177,178,184,185,186,191,196,199,208,211,215,216,217,223,225,226,232,233,234,235,242,244,245,246,252,254,255,256,260,261,266,267,268,281,],[-50,-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,-106,-62,133,-47,-49,-137,-136,-104,-122,153,-62,157,-27,-83,175,-130,-131,-83,-50,-42,-62,-46,-115,-116,-103,-123,-28,-45,209,-82,-84,212,-132,-133,218,224,225,-48,226,-151,-50,-86,-87,-140,-143,-129,251,-43,-62,-154,-153,255,-138,-85,261,-144,-128,-139,-152,-44,-148,-31,-141,275,-29,-145,-30,]),'COMMA':([34,43,44,45,46,47,48,49,50,51,52,55,63,67,77,78,79,80,84,109,112,115,124,125,126,127,133,139,143,144,145,149,150,153,156,163,168,171,173,174,177,180,181,186,191,196,208,211,215,216,217,225,226,232,233,235,236,237,245,246,248,249,252,254,255,256,260,261,264,266,267,270,272,273,281,283,],[-50,110,-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,-106,-62,134,-47,135,-137,-136,-104,-122,-62,110,176,-130,-131,-42,-62,-46,-115,-116,-103,110,-123,110,-45,110,210,-137,-132,-133,221,-91,-48,176,-151,-86,-87,-140,-143,-129,-43,-62,-154,-153,-138,257,-150,262,-128,-93,-92,-139,-152,-44,-148,-31,-141,-149,276,-29,278,-74,-75,-30,-73,]),'DATATYPE':([35,114,124,128,131,138,150,151,156,168,172,175,192,200,209,213,222,226,262,],[84,84,84,84,84,84,-134,-135,84,84,84,215,84,84,215,245,84,215,245,]),'STRUCT':([36,],[86,]),'SEMICOLON':([37,44,45,46,47,48,49,50,51,52,55,63,109,112,133,141,142,143,144,145,148,149,153,163,196,225,232,233,246,254,255,256,],[87,-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,-106,-104,-122,-42,195,-51,-46,-115,-116,-99,-103,-123,-45,-151,-43,-154,-153,-128,-152,-44,-148,]),'EQ':([39,43,44,45,46,47,48,49,50,51,52,55,62,63,69,70,72,75,78,109,112,113,133,142,143,144,145,146,148,149,153,163,185,186,187,188,189,196,198,204,225,230,231,232,233,237,246,248,254,255,256,264,267,272,273,281,],[94,-106,-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,94,-106,-106,94,-113,94,94,-104,-122,94,-42,94,94,94,-116,94,94,-103,-123,94,94,94,94,-114,-113,-151,94,94,-43,94,94,-154,-153,94,-128,94,-152,-44,-148,94,94,94,-108,94,]),'NEQ':([39,43,44,45,46,47,48,49,50,51,52,55,62,63,69,70,72,75,78,109,112,113,133,142,143,144,145,146,148,149,153,163,185,186,187,188,189,196,198,204,225,230,231,232,233,237,246,248,254,255,256,264,267,272,273,281,],[95,-106,-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,95,-106,-106,95,-113,95,95,-104,-122,95,-42,95,95,95,-116,95,95,-103,-123,95,95,95,95,-114,-113,-151,95,95,-43,95,95,-154,-153,95,-128,95,-152,-44,-148,95,95,95,-108,95,]),'GT':([39,43,44,45,46,47,48,49,50,51,52,55,62,63,69,70,72,75,78,109,112,113,133,142,143,144,145,146,148,149,153,163,185,186,187,188,189,196,198,204,225,230,231,232,233,237,246,248,254,255,256,264,267,272,273,281,],[96,-106,-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,96,-106,-106,96,-113,96,96,-104,-122,96,-42,96,96,96,-116,96,96,-103,-123,96,96,96,96,-114,-113,-151,96,96,-43,96,96,-154,-153,96,-128,96,-152,-44,-148,96,96,96,-108,96,]),'LT':([39,43,44,45,46,47,48,49,50,51,52,55,62,63,69,70,72,75,78,109,112,113,133,142,143,144,145,146,148,149,153,163,185,186,187,188,189,196,198,204,225,230,231,232,233,237,246,248,254,255,256,264,267,272,273,281,],[97,-106,-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,97,-106,-106,97,-113,97,97,-104,-122,97,-42,97,97,97,-116,97,97,-103,-123,97,97,97,97,-114,-113,-151,97,97,-43,97,97,-154,-153,97,-128,97,-152,-44,-148,97,97,97,-108,97,]),'GE':([39,43,44,45,46,47,48,49,50,51,52,55,62,63,69,70,72,75,78,109,112,113,133,142,143,144,145,146,148,149,153,163,185,186,187,188,189,196,198,204,225,230,231,232,233,237,246,248,254,255,256,264,267,272,273,281,],[98,-106,-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,98,-106,-106,98,-113,98,98,-104,-122,98,-42,98,98,98,-116,98,98,-103,-123,98,98,98,98,-114,-113,-151,98,98,-43,98,98,-154,-153,98,-128,98,-152,-44,-148,98,98,98,-108,98,]),'LE':([39,43,44,45,46,47,48,49,50,51,52,55,62,63,69,70,72,75,78,109,112,113,133,142,143,144,145,146,148,149,153,163,185,186,187,188,189,196,198,204,225,230,231,232,233,237,246,248,254,255,256,264,267,272,273,281,],[99,-106,-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,99,-106,-106,99,-113,99,99,-104,-122,99,-42,99,99,99,-116,99,99,-103,-123,99,99,99,99,-114,-113,-151,99,99,-43,99,99,-154,-153,99,-128,99,-152,-44,-148,99,99,99,-108,99,]),'AND':([39,43,44,45,46,47,48,49,50,51,52,55,62,63,64,69,70,72,75,78,109,112,113,133,142,143,144,145,146,148,149,153,163,165,185,186,187,188,189,196,198,204,225,230,231,232,233,237,246,248,254,255,256,264,267,272,273,281,],[100,-106,-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,100,-106,100,-106,100,-113,100,100,-104,-122,100,-42,100,100,100,-116,100,100,-103,-123,100,100,100,100,100,-114,-113,-151,100,100,-43,100,100,-154,-153,100,-128,100,-152,-44,-148,100,100,100,-108,100,]),'OR':([39,43,44,45,46,47,48,49,50,51,52,55,62,63,64,69,70,72,75,78,109,112,113,133,142,143,144,145,146,148,149,153,163,165,185,186,187,188,189,196,198,204,225,230,231,232,233,237,246,248,254,255,256,264,267,272,273,281,],[101,-106,-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,101,-106,101,-106,101,-113,101,101,-104,-122,101,-42,101,101,101,-116,101,101,-103,-123,101,101,101,101,101,-114,-113,-151,101,101,-43,101,101,-154,-153,101,-128,101,-152,-44,-148,101,101,101,-108,101,]),'PLUS':([39,43,44,45,46,47,48,49,50,51,52,55,62,63,69,70,72,75,78,109,112,113,133,142,143,144,145,146,148,149,153,163,185,186,187,188,189,196,198,204,225,230,231,232,233,237,246,248,254,255,256,264,267,272,273,281,],[102,-106,-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,102,-106,-106,102,-113,102,102,-104,-122,102,-42,102,102,102,-116,102,102,-103,-123,102,102,102,102,-114,-113,-151,102,102,-43,102,102,-154,-153,102,-128,102,-152,-44,-148,102,102,102,-108,102,]),'TIMES':([39,43,44,45,46,47,48,49,50,51,52,55,62,63,69,70,72,75,78,109,112,113,133,142,143,144,145,146,148,149,153,163,185,186,187,188,189,196,198,204,225,230,231,232,233,237,246,248,254,255,256,264,267,272,273,281,],[104,-106,-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,104,-106,-106,104,-113,104,104,-104,-122,104,-42,104,104,104,-116,104,104,-103,-123,104,104,104,104,-114,-113,-151,104,104,-43,104,104,-154,-153,104,-128,104,-152,-44,-148,104,104,104,-108,104,]),'DIVIDE':([39,43,44,45,46,47,48,49,50,51,52,55,62,63,69,70,72,75,78,109,112,113,133,142,143,144,145,146,148,149,153,163,185,186,187,188,189,196,198,204,225,230,231,232,233,237,246,248,254,255,256,264,267,272,273,281,],[105,-106,-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,105,-106,-106,105,-113,105,105,-104,-122,105,-42,105,105,105,-116,105,105,-103,-123,105,105,105,105,-114,-113,-151,105,105,-43,105,105,-154,-153,105,-128,105,-152,-44,-148,105,105,105,-108,105,]),'MOD':([39,43,44,45,46,47,48,49,50,51,52,55,62,63,69,70,72,75,78,109,112,113,133,142,143,144,145,146,148,149,153,163,185,186,187,188,189,196,198,204,225,230,231,232,233,237,246,248,254,255,256,264,267,272,273,281,],[106,-106,-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,106,-106,-106,106,-113,106,106,-104,-122,106,-42,106,106,106,-116,106,106,-103,-123,106,106,106,106,-114,-113,-151,106,106,-43,106,106,-154,-153,106,-128,106,-152,-44,-148,106,106,106,-108,106,]),'RBRACKET':([44,45,46,47,48,49,50,51,52,55,56,63,80,83,84,109,112,133,143,144,145,146,149,153,154,163,182,196,197,198,215,216,225,226,231,232,233,235,246,252,254,255,256,261,],[-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,114,-106,-137,138,-136,-104,-122,-42,-46,-115,-116,196,-103,-123,200,-45,222,-151,232,233,-140,-143,-43,-62,254,-154,-153,-138,-128,-139,-152,-44,-148,-141,]),'COLON':([44,45,46,47,48,49,50,51,52,55,63,93,109,112,133,143,144,145,146,149,153,162,163,179,196,204,225,232,233,246,254,255,256,271,272,273,],[-105,-107,-108,-109,-110,-111,-112,-113,-114,-142,-106,147,-104,-122,-42,-46,-115,-116,197,-103,-123,205,-45,219,-151,238,-43,-154,-153,-128,-152,-44,-148,279,-74,-75,]),'ELSE':([109,120,122,149,],[-104,164,167,-103,]),'AMPERSAND':([132,],[183,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,42,205,238,259,],[2,108,239,258,265,]),'statement':([0,2,42,108,205,238,239,258,259,265,],[3,30,3,30,3,3,30,30,3,30,]),'assignment':([0,2,42,108,205,238,239,258,259,265,],[4,4,4,4,4,4,4,4,4,4,]),'input':([0,2,42,108,205,238,239,258,259,265,],[5,5,5,5,5,5,5,5,5,5,]),'llamarFuncion':([0,2,24,27,28,31,32,34,42,53,54,87,89,90,91,93,107,108,119,121,132,134,135,136,147,161,195,197,199,201,205,219,238,239,257,258,259,260,263,265,276,278,279,],[6,6,52,52,52,52,52,52,6,52,52,52,52,52,52,52,52,6,52,52,52,52,52,188,52,52,52,52,52,52,6,52,6,6,52,6,6,52,52,6,52,52,52,]),'print_statement':([0,2,42,108,205,238,239,258,259,265,],[7,7,7,7,7,7,7,7,7,7,]),'struct_definition':([0,2,42,108,205,238,239,258,259,265,],[8,8,8,8,8,8,8,8,8,8,]),'for_statement':([0,2,42,108,205,238,239,258,259,265,],[9,9,9,9,9,9,9,9,9,9,]),'package':([0,2,42,108,205,238,239,258,259,265,],[10,10,10,10,10,10,10,10,10,10,]),'import':([0,2,42,108,205,238,239,258,259,265,],[11,11,11,11,11,11,11,11,11,11,]),'switch':([0,2,42,108,205,238,239,258,259,265,],[12,12,12,12,12,12,12,12,12,12,]),'map':([0,2,42,108,205,238,239,258,259,265,],[13,13,13,13,13,13,13,13,13,13,]),'if_statement':([0,2,42,108,205,238,239,258,259,265,],[14,14,14,14,14,14,14,14,14,14,]),'function':([0,2,42,108,205,238,239,258,259,265,],[15,15,15,15,15,15,15,15,15,15,]),'method_definition':([0,2,42,108,205,238,239,258,259,265,],[16,16,16,16,16,16,16,16,16,16,]),'function_literal':([0,2,24,27,28,31,32,34,42,53,54,87,89,90,91,93,107,108,119,121,132,134,135,136,147,161,195,197,199,201,205,219,238,239,257,258,259,260,263,265,276,278,279,],[17,17,55,55,55,55,55,55,17,55,55,55,55,55,55,55,55,17,55,55,55,55,55,55,55,55,55,55,55,55,17,55,17,17,55,17,17,55,55,17,55,55,55,]),'var_declaration':([0,2,42,108,205,238,239,258,259,265,],[18,18,18,18,18,18,18,18,18,18,]),'slice_declaration':([0,2,42,108,205,238,239,258,259,265,],[19,19,19,19,19,19,19,19,19,19,]),'declare_assign':([0,2,42,108,205,238,239,258,259,265,],[20,20,20,20,20,20,20,20,20,20,]),'shortAssignment':([24,],[37,]),'condicion':([24,28,87,121,],[38,64,141,165,]),'expression':([24,27,28,31,32,34,53,54,87,89,90,91,93,107,119,121,132,134,135,136,147,161,195,197,199,201,219,257,260,263,276,278,279,],[39,62,39,70,75,78,112,113,39,142,143,144,146,148,163,39,78,185,186,187,198,204,230,231,78,237,248,264,267,272,281,272,272,]),'block':([24,38,64,65,164,167,209,214,218,230,275,],[40,88,120,122,206,207,240,246,247,253,280,]),'identifier_list':([24,67,110,115,123,129,139,176,210,],[41,128,151,128,172,172,128,128,172,]),'slice_literal':([24,27,28,31,32,34,53,54,87,89,90,91,93,107,119,121,132,134,135,136,147,161,195,197,199,201,219,257,260,263,276,278,279,],[51,51,51,72,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,189,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'condicion_compleja':([28,121,],[65,166,]),'struct_literal':([31,],[71,]),'mapLiteral':([31,82,],[73,137,]),'argument_list_opt':([34,132,199,],[77,184,234,]),'argument_list':([34,132,199,],[79,79,79,]),'type_name':([35,114,124,128,131,138,156,168,172,192,200,222,],[81,155,174,177,182,190,174,208,211,227,235,250,]),'comparador':([39,62,70,75,78,112,113,142,143,144,146,148,163,185,186,187,198,204,230,231,237,248,264,267,272,281,],[89,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,]),'operadorLogico':([39,62,64,70,75,78,112,113,142,143,144,146,148,163,165,185,186,187,198,204,230,231,237,248,264,267,272,281,],[90,90,121,90,90,90,90,90,90,90,90,90,90,90,121,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'operator':([39,62,70,75,78,112,113,142,143,144,146,148,163,185,186,187,198,204,230,231,237,248,264,267,272,281,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'import_list':([61,],[116,]),'parameters':([67,115,139,],[125,125,191,]),'parameter':([67,115,139,176,],[126,126,126,217,]),'empty':([67,115,139,175,209,226,],[127,127,127,216,216,216,]),'caseBlocks':([118,160,],[159,203,]),'caseBlock':([118,160,],[160,160,]),'params_opt':([123,129,],[169,178,]),'params':([123,129,210,],[170,170,242,]),'param':([123,129,210,],[171,171,171,]),'struct_field_assignments':([130,],[180,]),'struct_field_assignment':([130,221,],[181,249,]),'struct_fields':([140,],[193,]),'struct_field':([140,193,],[194,229,]),'return_type':([175,209,226,],[214,241,252,]),'elements':([201,],[236,]),'type_list':([213,262,],[244,268,]),'arguments':([260,],[266,]),'mapEntries':([263,278,],[269,282,]),'mapEntry':([263,278,],[270,270,]),'value_key':([263,278,279,],[271,271,283,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',20),
  ('statement_list_opt -> statement_list','statement_list_opt',1,'p_statement_list_opt','parser.py',24),
  ('statement_list_opt -> <empty>','statement_list_opt',0,'p_statement_list_opt','parser.py',25),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',32),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',33),
  ('statement -> assignment','statement',1,'p_statement','parser.py',40),
  ('statement -> input','statement',1,'p_statement','parser.py',41),
  ('statement -> llamarFuncion','statement',1,'p_statement','parser.py',42),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',43),
  ('statement -> struct_definition','statement',1,'p_statement','parser.py',44),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',45),
  ('statement -> package','statement',1,'p_statement','parser.py',46),
  ('statement -> import','statement',1,'p_statement','parser.py',47),
  ('statement -> switch','statement',1,'p_statement','parser.py',48),
  ('statement -> map','statement',1,'p_statement','parser.py',49),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',50),
  ('statement -> function','statement',1,'p_statement','parser.py',51),
  ('statement -> method_definition','statement',1,'p_statement','parser.py',52),
  ('statement -> function_literal','statement',1,'p_statement','parser.py',53),
  ('statement -> var_declaration','statement',1,'p_statement','parser.py',54),
  ('statement -> slice_declaration','statement',1,'p_statement','parser.py',55),
  ('statement -> declare_assign','statement',1,'p_statement','parser.py',56),
  ('package -> PACKAGE MAIN','package',2,'p_package','parser.py',62),
  ('package -> PACKAGE IDENTIFIER','package',2,'p_package','parser.py',63),
  ('import -> IMPORT STRING','import',2,'p_import','parser.py',67),
  ('import -> IMPORT LPAREN import_list RPAREN','import',4,'p_import','parser.py',68),
  ('import_list -> STRING','import_list',1,'p_import_list','parser.py',75),
  ('import_list -> import_list STRING','import_list',2,'p_import_list','parser.py',76),
  ('arguments -> expression','arguments',1,'p_arguments','parser.py',83),
  ('arguments -> arguments COMMA expression','arguments',3,'p_arguments','parser.py',84),
  ('arguments -> <empty>','arguments',0,'p_arguments','parser.py',85),
  ('const_declaration -> CONST IDENTIFIER ASSIGN expression','const_declaration',4,'p_const_declaration','parser.py',95),
  ('input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN','input',7,'p_input','parser.py',103),
  ('var_declaration -> VAR IDENTIFIER type_name','var_declaration',3,'p_var_declaration','parser.py',106),
  ('assignment -> IDENTIFIER DECLARE_ASSIGN expression','assignment',3,'p_assignment','parser.py',118),
  ('assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal','assignment',3,'p_assignment','parser.py',119),
  ('assignment -> VAR IDENTIFIER type_name ASSIGN expression','assignment',5,'p_assignment','parser.py',120),
  ('assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion','assignment',5,'p_assignment','parser.py',121),
  ('assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal','assignment',3,'p_assignment_slice_literal','parser.py',151),
  ('assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal','assignment',5,'p_assignment_slice_literal','parser.py',152),
  ('assignment -> IDENTIFIER ASSIGN expression','assignment',3,'p_reasignacion','parser.py',169),
  ('llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN','llamarFuncion',4,'p_llamar_funcion','parser.py',181),
  ('llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN','llamarFuncion',6,'p_llamar_funcion','parser.py',182),
  ('llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN','llamarFuncion',6,'p_llamar_funcion','parser.py',183),
  ('expression -> expression comparador expression','expression',3,'p_expression_comparacion','parser.py',201),
  ('expression -> expression operadorLogico expression','expression',3,'p_boolean_expression','parser.py',231),
  ('argument_list -> expression','argument_list',1,'p_argument_list_single','parser.py',235),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list_multiple','parser.py',238),
  ('argument_list_opt -> argument_list','argument_list_opt',1,'p_argument_list_opt_some','parser.py',243),
  ('argument_list_opt -> <empty>','argument_list_opt',0,'p_argument_list_opt_empty','parser.py',246),
  ('condicion -> expression comparador expression','condicion',3,'p_condicion','parser.py',250),
  ('condicion_compleja -> condicion operadorLogico condicion','condicion_compleja',3,'p_condicion_compleja','parser.py',277),
  ('condicion_compleja -> condicion operadorLogico condicion_compleja','condicion_compleja',3,'p_condicion_compleja','parser.py',278),
  ('operadorLogico -> AND','operadorLogico',1,'p_operador_logico','parser.py',289),
  ('operadorLogico -> OR','operadorLogico',1,'p_operador_logico','parser.py',290),
  ('comparador -> EQ','comparador',1,'p_comparador','parser.py',293),
  ('comparador -> NEQ','comparador',1,'p_comparador','parser.py',294),
  ('comparador -> GT','comparador',1,'p_comparador','parser.py',295),
  ('comparador -> LT','comparador',1,'p_comparador','parser.py',296),
  ('comparador -> GE','comparador',1,'p_comparador','parser.py',297),
  ('comparador -> LE','comparador',1,'p_comparador','parser.py',298),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',302),
  ('switch -> SWITCH expression LBRACE caseBlocks RBRACE','switch',5,'p_switch_statement','parser.py',306),
  ('caseBlocks -> caseBlock','caseBlocks',1,'p_caseBlocks','parser.py',313),
  ('caseBlocks -> caseBlock caseBlocks','caseBlocks',2,'p_caseBlocks','parser.py',314),
  ('caseBlock -> CASE expression COLON statement_list','caseBlock',4,'p_caseBlock','parser.py',317),
  ('caseBlock -> DEFAULT COLON statement_list','caseBlock',3,'p_caseBlock','parser.py',318),
  ('map -> IDENTIFIER DECLARE_ASSIGN mapLiteral','map',3,'p_short_map','parser.py',321),
  ('map -> VAR IDENTIFIER ASSIGN mapLiteral','map',4,'p_map','parser.py',324),
  ('mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE','mapLiteral',8,'p_map_literal','parser.py',327),
  ('mapEntries -> mapEntry','mapEntries',1,'p_map_entries','parser.py',330),
  ('mapEntries -> mapEntry COMMA mapEntries','mapEntries',3,'p_map_entries','parser.py',331),
  ('mapEntry -> value_key COLON value_key','mapEntry',3,'p_map_entry','parser.py',334),
  ('value_key -> expression','value_key',1,'p_value_key','parser.py',337),
  ('value_key -> STRING','value_key',1,'p_value_key','parser.py',338),
  ('function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block','function',6,'p_function_no_return','parser.py',341),
  ('function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE','function',9,'p_function_with_return','parser.py',352),
  ('function -> FUNC MAIN LPAREN params_opt RPAREN block','function',6,'p_function_main','parser.py',376),
  ('return_statement -> RETURN return_values','return_statement',2,'p_return_statement','parser.py',388),
  ('return_values -> expression','return_values',1,'p_return_values_single','parser.py',392),
  ('return_values -> expression COMMA return_values','return_values',3,'p_return_values_multiple','parser.py',396),
  ('params_opt -> params','params_opt',1,'p_params_opt','parser.py',401),
  ('params_opt -> <empty>','params_opt',0,'p_params_opt','parser.py',402),
  ('params -> param','params',1,'p_params','parser.py',409),
  ('params -> param COMMA params','params',3,'p_params','parser.py',410),
  ('param -> IDENTIFIER type_name','param',2,'p_param','parser.py',417),
  ('param -> identifier_list type_name','param',2,'p_param','parser.py',418),
  ('print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN','print_statement',6,'p_print_statement','parser.py',438),
  ('struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE','struct_definition',6,'p_struct_definition','parser.py',448),
  ('struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE','struct_literal',4,'p_struct_literal','parser.py',460),
  ('struct_field_assignments -> struct_field_assignment','struct_field_assignments',1,'p_struct_field_assignments_single','parser.py',485),
  ('struct_field_assignments -> struct_field_assignments COMMA struct_field_assignment','struct_field_assignments',3,'p_struct_field_assignments_multiple','parser.py',489),
  ('struct_field_assignment -> IDENTIFIER COLON expression','struct_field_assignment',3,'p_struct_field_assignment','parser.py',493),
  ('struct_field -> IDENTIFIER type_name','struct_field',2,'p_struct_field','parser.py',500),
  ('struct_fields -> struct_field','struct_fields',1,'p_struct_fields_single','parser.py',505),
  ('struct_fields -> struct_fields struct_field','struct_fields',2,'p_struct_fields_multiple','parser.py',508),
  ('method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block','method_definition',10,'p_method_definition','parser.py',515),
  ('for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block','for_statement',7,'p_for_statement_classis','parser.py',529),
  ('shortAssignment -> identifier_list DECLARE_ASSIGN expression','shortAssignment',3,'p_short_assignment','parser.py',541),
  ('for_statement -> FOR condicion block','for_statement',3,'p_for_statement_condition','parser.py',546),
  ('for_statement -> FOR block','for_statement',2,'p_for_statement_infinite','parser.py',556),
  ('for_range_clause -> shortAssignment RANGE expression','for_range_clause',3,'p_for_range_clause','parser.py',560),
  ('block -> LBRACE statement_list RBRACE','block',3,'p_block','parser.py',564),
  ('block -> LBRACE RBRACE','block',2,'p_block_empty','parser.py',568),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',586),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',591),
  ('expression -> RUNE','expression',1,'p_expression_rune','parser.py',603),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',606),
  ('expression -> RAW_STRING','expression',1,'p_expression_raw_string','parser.py',609),
  ('expression -> TRUE','expression',1,'p_expression_boolean','parser.py',612),
  ('expression -> FALSE','expression',1,'p_expression_boolean','parser.py',613),
  ('expression -> NIL','expression',1,'p_expression_nil','parser.py',616),
  ('expression -> slice_literal','expression',1,'p_expression_slice_literal','parser.py',620),
  ('expression -> llamarFuncion','expression',1,'p_expression_llamar_funcion','parser.py',624),
  ('expression -> expression operator expression','expression',3,'p_expression_binary','parser.py',629),
  ('expression -> expression DOT IDENTIFIER','expression',3,'p_expression_field_access','parser.py',647),
  ('operator -> PLUS','operator',1,'p_operator','parser.py',651),
  ('operator -> MINUS','operator',1,'p_operator','parser.py',652),
  ('operator -> TIMES','operator',1,'p_operator','parser.py',653),
  ('operator -> DIVIDE','operator',1,'p_operator','parser.py',654),
  ('operator -> MOD','operator',1,'p_operator','parser.py',655),
  ('expression -> MINUS expression','expression',2,'p_expression_unary_minus','parser.py',659),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',663),
  ('if_statement -> IF condicion block','if_statement',3,'p_if_statement','parser.py',670),
  ('if_statement -> IF condicion block ELSE block','if_statement',5,'p_if_statement','parser.py',671),
  ('if_statement -> IF condicion_compleja block','if_statement',3,'p_if_statement','parser.py',672),
  ('if_statement -> IF condicion_compleja block ELSE block','if_statement',5,'p_if_statement','parser.py',673),
  ('function_literal -> FUNC LPAREN parameters RPAREN return_type block','function_literal',6,'p_function_literal','parser.py',687),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','parser.py',691),
  ('parameters -> parameter','parameters',1,'p_parameters','parser.py',692),
  ('parameters -> empty','parameters',1,'p_parameters','parser.py',693),
  ('parameter -> IDENTIFIER type_name','parameter',2,'p_parameter','parser.py',707),
  ('parameter -> identifier_list type_name','parameter',2,'p_parameter','parser.py',708),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list_single','parser.py',716),
  ('identifier_list -> IDENTIFIER COMMA identifier_list','identifier_list',3,'p_identifier_list_multiple','parser.py',720),
  ('type_name -> DATATYPE','type_name',1,'p_type_name','parser.py',724),
  ('type_name -> IDENTIFIER','type_name',1,'p_type_name','parser.py',725),
  ('type_name -> LBRACKET RBRACKET type_name','type_name',3,'p_type_name','parser.py',726),
  ('type_name -> FUNC LPAREN parameters RPAREN return_type','type_name',5,'p_type_name','parser.py',727),
  ('return_type -> DATATYPE','return_type',1,'p_return_type_single','parser.py',736),
  ('return_type -> LPAREN type_list RPAREN','return_type',3,'p_return_type_multiple','parser.py',740),
  ('expression -> function_literal','expression',1,'p_expression_function_literal','parser.py',744),
  ('return_type -> empty','return_type',1,'p_return_type_empty','parser.py',748),
  ('type_list -> DATATYPE','type_list',1,'p_type_list_single','parser.py',751),
  ('type_list -> DATATYPE COMMA type_list','type_list',3,'p_type_list_multiple','parser.py',755),
  ('slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name','slice_declaration',5,'p_slice_declaration','parser.py',760),
  ('declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal','declare_assign',3,'p_slice_declare_assign','parser.py',764),
  ('slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE','slice_literal',6,'p_slice_literal','parser.py',768),
  ('elements -> elements COMMA expression','elements',3,'p_elements_multiple','parser.py',772),
  ('elements -> expression','elements',1,'p_elements_single','parser.py',776),
  ('expression -> expression LBRACKET expression RBRACKET','expression',4,'p_expression_index_access','parser.py',780),
  ('expression -> expression LBRACKET expression COLON expression RBRACKET','expression',6,'p_expression_slice_access','parser.py',784),
  ('expression -> expression LBRACKET COLON expression RBRACKET','expression',5,'p_expression_slice_access','parser.py',785),
  ('expression -> expression LBRACKET expression COLON RBRACKET','expression',5,'p_expression_slice_access','parser.py',786),
]
