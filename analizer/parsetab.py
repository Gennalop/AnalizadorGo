
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEMODrightUMINUSAMPERSAND AND ASSIGN BREAK CASE COLON COMMA CONST CONTINUE DATATYPE DECLARE_ASSIGN DEFAULT DEFER DIVIDE DOT ELSE EQ FALLTHROUGH FOR FUNC GE GO GT IDENTIFIER IF IMPORT INTERFACE LBRACE LBRACKET LE LPAREN LT MAP MINUS MOD NEQ NIL NUMBER OR PACKAGE PLUS RANGE RAW_STRING RBRACE RBRACKET RETURN RPAREN RUNE SELECT SEMICOLON STRING STRUCT SWITCH TIMES TYPE VARexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : valuevalue : NUMBERvalue : IDENTIFIER'
    
_lr_action_items = {'MINUS':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,],[2,8,2,2,-8,-9,-10,2,2,2,2,2,-6,8,-1,-2,-3,-4,-5,-7,]),'LPAREN':([0,2,3,7,8,9,10,11,],[3,3,3,3,3,3,3,3,]),'NUMBER':([0,2,3,7,8,9,10,11,],[5,5,5,5,5,5,5,5,]),'IDENTIFIER':([0,2,3,7,8,9,10,11,],[6,6,6,6,6,6,6,6,]),'$end':([1,4,5,6,12,14,15,16,17,18,19,],[0,-8,-9,-10,-6,-1,-2,-3,-4,-5,-7,]),'PLUS':([1,4,5,6,12,13,14,15,16,17,18,19,],[7,-8,-9,-10,-6,7,-1,-2,-3,-4,-5,-7,]),'TIMES':([1,4,5,6,12,13,14,15,16,17,18,19,],[9,-8,-9,-10,-6,9,9,9,-3,-4,-5,-7,]),'DIVIDE':([1,4,5,6,12,13,14,15,16,17,18,19,],[10,-8,-9,-10,-6,10,10,10,-3,-4,-5,-7,]),'MOD':([1,4,5,6,12,13,14,15,16,17,18,19,],[11,-8,-9,-10,-6,11,11,11,-3,-4,-5,-7,]),'RPAREN':([4,5,6,12,13,14,15,16,17,18,19,],[-8,-9,-10,-6,19,-1,-2,-3,-4,-5,-7,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,3,7,8,9,10,11,],[1,12,13,14,15,16,17,18,]),'value':([0,2,3,7,8,9,10,11,],[4,4,4,4,4,4,4,4,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binary','parser.py',26),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binary','parser.py',27),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binary','parser.py',28),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binary','parser.py',29),
  ('expression -> expression MOD expression','expression',3,'p_expression_binary','parser.py',30),
  ('expression -> MINUS expression','expression',2,'p_expression_unary_minus','parser.py',34),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',38),
  ('expression -> value','expression',1,'p_expression_value','parser.py',42),
  ('value -> NUMBER','value',1,'p_value_number','parser.py',46),
  ('value -> IDENTIFIER','value',1,'p_value_identifier','parser.py',50),
]
