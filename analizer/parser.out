Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CONTINUE
    DEFER
    FALLTHROUGH
    GO
    INTERFACE
    SELECT
    STRING_UNCLOSED

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list_opt -> statement_list
Rule 3     statement_list_opt -> <empty>
Rule 4     statement_list -> statement
Rule 5     statement_list -> statement_list statement
Rule 6     statement -> assignment
Rule 7     statement -> input
Rule 8     statement -> llamarFuncion
Rule 9     statement -> print_statement
Rule 10    statement -> struct_definition
Rule 11    statement -> for_statement
Rule 12    statement -> package
Rule 13    statement -> import
Rule 14    statement -> switch
Rule 15    statement -> map
Rule 16    statement -> if_statement
Rule 17    statement -> function
Rule 18    statement -> method_definition
Rule 19    statement -> function_literal
Rule 20    statement -> var_declaration
Rule 21    statement -> slice_declaration
Rule 22    statement -> declare_assign
Rule 23    package -> PACKAGE MAIN
Rule 24    package -> PACKAGE IDENTIFIER
Rule 25    import -> IMPORT STRING
Rule 26    import -> IMPORT LPAREN import_list RPAREN
Rule 27    import_list -> STRING
Rule 28    import_list -> import_list STRING
Rule 29    arguments -> expression
Rule 30    arguments -> arguments COMMA expression
Rule 31    arguments -> <empty>
Rule 32    const_declaration -> CONST IDENTIFIER ASSIGN expression
Rule 33    input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
Rule 34    var_declaration -> VAR IDENTIFIER DATATYPE
Rule 35    assignment -> IDENTIFIER DECLARE_ASSIGN expression
Rule 36    assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression
Rule 37    assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
Rule 38    assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal
Rule 39    assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal
Rule 40    assignment -> IDENTIFIER ASSIGN expression
Rule 41    llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN
Rule 42    llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
Rule 43    llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
Rule 44    expression -> expression comparador expression
Rule 45    expression -> expression operadorLogico expression
Rule 46    argument_list -> expression
Rule 47    argument_list -> argument_list COMMA expression
Rule 48    argument_list_opt -> argument_list
Rule 49    argument_list_opt -> <empty>
Rule 50    condicion -> expression comparador expression
Rule 51    condicion_compleja -> condicion operadorLogico condicion
Rule 52    condicion_compleja -> condicion operadorLogico condicion_compleja
Rule 53    operadorLogico -> AND
Rule 54    operadorLogico -> OR
Rule 55    comparador -> EQ
Rule 56    comparador -> NEQ
Rule 57    comparador -> GT
Rule 58    comparador -> LT
Rule 59    comparador -> GE
Rule 60    comparador -> LE
Rule 61    empty -> <empty>
Rule 62    switch -> SWITCH expression LBRACE caseBlocks RBRACE
Rule 63    caseBlocks -> caseBlock
Rule 64    caseBlocks -> caseBlock caseBlocks
Rule 65    caseBlock -> CASE expression COLON statement_list
Rule 66    caseBlock -> DEFAULT COLON statement_list
Rule 67    map -> IDENTIFIER DECLARE_ASSIGN mapLiteral
Rule 68    map -> VAR IDENTIFIER ASSIGN mapLiteral
Rule 69    mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE
Rule 70    mapEntries -> mapEntry
Rule 71    mapEntries -> mapEntry COMMA mapEntries
Rule 72    mapEntry -> value_key COLON value_key
Rule 73    value_key -> expression
Rule 74    value_key -> STRING
Rule 75    function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block
Rule 76    function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
Rule 77    return_values -> expression
Rule 78    return_values -> return_values COMMA expression
Rule 79    function -> FUNC MAIN LPAREN params_opt RPAREN block
Rule 80    return_statement -> RETURN expression
Rule 81    params_opt -> params
Rule 82    params_opt -> <empty>
Rule 83    params -> param
Rule 84    params -> param COMMA params
Rule 85    param -> IDENTIFIER type_name
Rule 86    type_name -> DATATYPE
Rule 87    type_name -> IDENTIFIER
Rule 88    print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
Rule 89    struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
Rule 90    struct_field -> IDENTIFIER DATATYPE
Rule 91    struct_fields -> struct_field
Rule 92    struct_fields -> struct_fields struct_field
Rule 93    method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
Rule 94    for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
Rule 95    identifier_list -> IDENTIFIER
Rule 96    identifier_list -> IDENTIFIER COMMA identifier_list
Rule 97    shortAssignment -> identifier_list DECLARE_ASSIGN expression
Rule 98    for_statement -> FOR condicion block
Rule 99    for_statement -> FOR block
Rule 100   for_range_clause -> shortAssignment RANGE expression
Rule 101   block -> LBRACE statement_list RBRACE
Rule 102   block -> LBRACE RBRACE
Rule 103   expression -> NUMBER
Rule 104   expression -> IDENTIFIER
Rule 105   expression -> RUNE
Rule 106   expression -> STRING
Rule 107   expression -> RAW_STRING
Rule 108   expression -> TRUE
Rule 109   expression -> FALSE
Rule 110   expression -> NIL
Rule 111   expression -> slice_literal
Rule 112   expression -> llamarFuncion
Rule 113   expression -> expression operator expression
Rule 114   expression -> expression DOT IDENTIFIER
Rule 115   operator -> PLUS
Rule 116   operator -> MINUS
Rule 117   operator -> TIMES
Rule 118   operator -> DIVIDE
Rule 119   operator -> MOD
Rule 120   expression -> MINUS expression
Rule 121   expression -> LPAREN expression RPAREN
Rule 122   if_statement -> IF condicion block
Rule 123   if_statement -> IF condicion block ELSE block
Rule 124   if_statement -> IF condicion_compleja block
Rule 125   if_statement -> IF condicion_compleja block ELSE block
Rule 126   function_literal -> FUNC LPAREN parameters RPAREN return_type block
Rule 127   parameters -> parameters COMMA parameter
Rule 128   parameters -> parameter
Rule 129   parameters -> empty
Rule 130   parameter -> IDENTIFIER DATATYPE
Rule 131   parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE
Rule 132   return_type -> DATATYPE
Rule 133   return_type -> empty
Rule 134   return_type -> LPAREN DATATYPE COMMA return_type RPAREN
Rule 135   slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name
Rule 136   declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal
Rule 137   slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE
Rule 138   elements -> elements COMMA expression
Rule 139   elements -> expression
Rule 140   expression -> expression LBRACKET expression RBRACKET
Rule 141   expression -> expression LBRACKET expression COLON expression RBRACKET
Rule 142   expression -> expression LBRACKET COLON expression RBRACKET
Rule 143   expression -> expression LBRACKET expression COLON RBRACKET

Terminals, with rules where they appear

AMPERSAND            : 33
AND                  : 53
ASSIGN               : 32 36 37 39 40 68
BREAK                : 
CASE                 : 65
COLON                : 65 66 72 141 142 143
COMMA                : 30 42 47 71 78 84 96 127 134 138
CONST                : 32
CONTINUE             : 
DATATYPE             : 34 36 37 39 69 69 86 90 130 131 132 134
DECLARE_ASSIGN       : 35 38 67 97 136
DEFAULT              : 66
DEFER                : 
DIVIDE               : 118
DOT                  : 33 43 88 114
ELSE                 : 123 125
EQ                   : 55
FALLTHROUGH          : 
FALSE                : 109
FOR                  : 94 98 99
FUNC                 : 75 76 79 93 126 131
GE                   : 59
GO                   : 
GT                   : 57
IDENTIFIER           : 24 32 33 33 33 34 35 36 37 38 39 40 41 42 43 43 67 68 75 76 85 87 88 88 89 90 93 93 93 95 96 104 114 130 131 135 136
IF                   : 122 123 124 125
IMPORT               : 25 26
INTERFACE            : 
LBRACE               : 62 69 76 89 101 102 137
LBRACKET             : 69 135 137 140 141 142 143
LE                   : 60
LPAREN               : 26 33 41 42 43 75 76 79 88 93 93 121 126 131 134
LT                   : 58
MAIN                 : 23 79
MAP                  : 69
MINUS                : 116 120
MOD                  : 119
NEQ                  : 56
NIL                  : 110
NUMBER               : 103
OR                   : 54
PACKAGE              : 23 24
PLUS                 : 115
RANGE                : 100
RAW_STRING           : 107
RBRACE               : 62 69 76 89 101 102 137
RBRACKET             : 69 135 137 140 141 142 143
RETURN               : 76 80
RPAREN               : 26 33 41 42 43 75 76 79 88 93 93 121 126 131 134
RUNE                 : 105
SELECT               : 
SEMICOLON            : 94 94
STRING               : 25 27 28 74 106
STRING_UNCLOSED      : 
STRUCT               : 89
SWITCH               : 62
TIMES                : 117
TRUE                 : 108
TYPE                 : 89
VAR                  : 34 36 37 39 68 135
error                : 

Nonterminals, with rules where they appear

argument_list        : 47 48
argument_list_opt    : 41 42 43 88
arguments            : 30 93
assignment           : 6
block                : 75 79 93 94 98 99 122 123 123 124 125 125 126
caseBlock            : 63 64
caseBlocks           : 62 64
comparador           : 44 50
condicion            : 51 51 52 94 98 122 123
condicion_compleja   : 52 124 125
const_declaration    : 
declare_assign       : 22
elements             : 137 138
empty                : 129 133
expression           : 29 30 32 35 36 40 42 44 44 45 45 46 47 50 50 62 65 73 77 78 80 94 97 100 113 113 114 120 121 138 139 140 140 141 141 141 142 142 143 143
for_range_clause     : 
for_statement        : 11
function             : 17
function_literal     : 19
identifier_list      : 96 97
if_statement         : 16
import               : 13
import_list          : 26 28
input                : 7
llamarFuncion        : 8 37 112
map                  : 15
mapEntries           : 69 71
mapEntry             : 70 71
mapLiteral           : 67 68
method_definition    : 18
operadorLogico       : 45 51 52
operator             : 113
package              : 12
param                : 83 84
parameter            : 127 128
parameters           : 126 127 131
params               : 81 84
params_opt           : 75 76 79
print_statement      : 9
program              : 0
return_statement     : 
return_type          : 76 126 134
return_values        : 76 78
shortAssignment      : 94 100
slice_declaration    : 21
slice_literal        : 38 39 111 136
statement            : 4 5
statement_list       : 1 2 5 65 66 101
statement_list_opt   : 76
struct_definition    : 10
struct_field         : 91 92
struct_fields        : 89 92
switch               : 14
type_name            : 85 135 137
value_key            : 72 72
var_declaration      : 20

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (37) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (38) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (39) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN slice_literal
    (40) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (94) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (98) for_statement -> . FOR condicion block
    (99) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (62) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (67) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (68) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (122) if_statement -> . IF condicion block
    (123) if_statement -> . IF condicion block ELSE block
    (124) if_statement -> . IF condicion_compleja block
    (125) if_statement -> . IF condicion_compleja block ELSE block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (76) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (79) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (93) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER DATATYPE
    (135) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (136) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (37) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (38) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (39) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN slice_literal
    (40) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (94) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (98) for_statement -> . FOR condicion block
    (99) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (62) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (67) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (68) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (122) if_statement -> . IF condicion block
    (123) if_statement -> . IF condicion block ELSE block
    (124) if_statement -> . IF condicion_compleja block
    (125) if_statement -> . IF condicion_compleja block ELSE block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (76) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (79) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (93) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER DATATYPE
    (135) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (136) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    $end            reduce using rule 1 (program -> statement_list .)
    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29

    statement                      shift and go to state 30
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20

state 3

    (4) statement_list -> statement .

    IDENTIFIER      reduce using rule 4 (statement_list -> statement .)
    VAR             reduce using rule 4 (statement_list -> statement .)
    TYPE            reduce using rule 4 (statement_list -> statement .)
    FOR             reduce using rule 4 (statement_list -> statement .)
    PACKAGE         reduce using rule 4 (statement_list -> statement .)
    IMPORT          reduce using rule 4 (statement_list -> statement .)
    SWITCH          reduce using rule 4 (statement_list -> statement .)
    IF              reduce using rule 4 (statement_list -> statement .)
    FUNC            reduce using rule 4 (statement_list -> statement .)
    $end            reduce using rule 4 (statement_list -> statement .)
    RBRACE          reduce using rule 4 (statement_list -> statement .)
    CASE            reduce using rule 4 (statement_list -> statement .)
    DEFAULT         reduce using rule 4 (statement_list -> statement .)
    RETURN          reduce using rule 4 (statement_list -> statement .)


state 4

    (6) statement -> assignment .

    IDENTIFIER      reduce using rule 6 (statement -> assignment .)
    VAR             reduce using rule 6 (statement -> assignment .)
    TYPE            reduce using rule 6 (statement -> assignment .)
    FOR             reduce using rule 6 (statement -> assignment .)
    PACKAGE         reduce using rule 6 (statement -> assignment .)
    IMPORT          reduce using rule 6 (statement -> assignment .)
    SWITCH          reduce using rule 6 (statement -> assignment .)
    IF              reduce using rule 6 (statement -> assignment .)
    FUNC            reduce using rule 6 (statement -> assignment .)
    $end            reduce using rule 6 (statement -> assignment .)
    RBRACE          reduce using rule 6 (statement -> assignment .)
    CASE            reduce using rule 6 (statement -> assignment .)
    DEFAULT         reduce using rule 6 (statement -> assignment .)
    RETURN          reduce using rule 6 (statement -> assignment .)


state 5

    (7) statement -> input .

    IDENTIFIER      reduce using rule 7 (statement -> input .)
    VAR             reduce using rule 7 (statement -> input .)
    TYPE            reduce using rule 7 (statement -> input .)
    FOR             reduce using rule 7 (statement -> input .)
    PACKAGE         reduce using rule 7 (statement -> input .)
    IMPORT          reduce using rule 7 (statement -> input .)
    SWITCH          reduce using rule 7 (statement -> input .)
    IF              reduce using rule 7 (statement -> input .)
    FUNC            reduce using rule 7 (statement -> input .)
    $end            reduce using rule 7 (statement -> input .)
    RBRACE          reduce using rule 7 (statement -> input .)
    CASE            reduce using rule 7 (statement -> input .)
    DEFAULT         reduce using rule 7 (statement -> input .)
    RETURN          reduce using rule 7 (statement -> input .)


state 6

    (8) statement -> llamarFuncion .

    IDENTIFIER      reduce using rule 8 (statement -> llamarFuncion .)
    VAR             reduce using rule 8 (statement -> llamarFuncion .)
    TYPE            reduce using rule 8 (statement -> llamarFuncion .)
    FOR             reduce using rule 8 (statement -> llamarFuncion .)
    PACKAGE         reduce using rule 8 (statement -> llamarFuncion .)
    IMPORT          reduce using rule 8 (statement -> llamarFuncion .)
    SWITCH          reduce using rule 8 (statement -> llamarFuncion .)
    IF              reduce using rule 8 (statement -> llamarFuncion .)
    FUNC            reduce using rule 8 (statement -> llamarFuncion .)
    $end            reduce using rule 8 (statement -> llamarFuncion .)
    RBRACE          reduce using rule 8 (statement -> llamarFuncion .)
    CASE            reduce using rule 8 (statement -> llamarFuncion .)
    DEFAULT         reduce using rule 8 (statement -> llamarFuncion .)
    RETURN          reduce using rule 8 (statement -> llamarFuncion .)


state 7

    (9) statement -> print_statement .

    IDENTIFIER      reduce using rule 9 (statement -> print_statement .)
    VAR             reduce using rule 9 (statement -> print_statement .)
    TYPE            reduce using rule 9 (statement -> print_statement .)
    FOR             reduce using rule 9 (statement -> print_statement .)
    PACKAGE         reduce using rule 9 (statement -> print_statement .)
    IMPORT          reduce using rule 9 (statement -> print_statement .)
    SWITCH          reduce using rule 9 (statement -> print_statement .)
    IF              reduce using rule 9 (statement -> print_statement .)
    FUNC            reduce using rule 9 (statement -> print_statement .)
    $end            reduce using rule 9 (statement -> print_statement .)
    RBRACE          reduce using rule 9 (statement -> print_statement .)
    CASE            reduce using rule 9 (statement -> print_statement .)
    DEFAULT         reduce using rule 9 (statement -> print_statement .)
    RETURN          reduce using rule 9 (statement -> print_statement .)


state 8

    (10) statement -> struct_definition .

    IDENTIFIER      reduce using rule 10 (statement -> struct_definition .)
    VAR             reduce using rule 10 (statement -> struct_definition .)
    TYPE            reduce using rule 10 (statement -> struct_definition .)
    FOR             reduce using rule 10 (statement -> struct_definition .)
    PACKAGE         reduce using rule 10 (statement -> struct_definition .)
    IMPORT          reduce using rule 10 (statement -> struct_definition .)
    SWITCH          reduce using rule 10 (statement -> struct_definition .)
    IF              reduce using rule 10 (statement -> struct_definition .)
    FUNC            reduce using rule 10 (statement -> struct_definition .)
    $end            reduce using rule 10 (statement -> struct_definition .)
    RBRACE          reduce using rule 10 (statement -> struct_definition .)
    CASE            reduce using rule 10 (statement -> struct_definition .)
    DEFAULT         reduce using rule 10 (statement -> struct_definition .)
    RETURN          reduce using rule 10 (statement -> struct_definition .)


state 9

    (11) statement -> for_statement .

    IDENTIFIER      reduce using rule 11 (statement -> for_statement .)
    VAR             reduce using rule 11 (statement -> for_statement .)
    TYPE            reduce using rule 11 (statement -> for_statement .)
    FOR             reduce using rule 11 (statement -> for_statement .)
    PACKAGE         reduce using rule 11 (statement -> for_statement .)
    IMPORT          reduce using rule 11 (statement -> for_statement .)
    SWITCH          reduce using rule 11 (statement -> for_statement .)
    IF              reduce using rule 11 (statement -> for_statement .)
    FUNC            reduce using rule 11 (statement -> for_statement .)
    $end            reduce using rule 11 (statement -> for_statement .)
    RBRACE          reduce using rule 11 (statement -> for_statement .)
    CASE            reduce using rule 11 (statement -> for_statement .)
    DEFAULT         reduce using rule 11 (statement -> for_statement .)
    RETURN          reduce using rule 11 (statement -> for_statement .)


state 10

    (12) statement -> package .

    IDENTIFIER      reduce using rule 12 (statement -> package .)
    VAR             reduce using rule 12 (statement -> package .)
    TYPE            reduce using rule 12 (statement -> package .)
    FOR             reduce using rule 12 (statement -> package .)
    PACKAGE         reduce using rule 12 (statement -> package .)
    IMPORT          reduce using rule 12 (statement -> package .)
    SWITCH          reduce using rule 12 (statement -> package .)
    IF              reduce using rule 12 (statement -> package .)
    FUNC            reduce using rule 12 (statement -> package .)
    $end            reduce using rule 12 (statement -> package .)
    RBRACE          reduce using rule 12 (statement -> package .)
    CASE            reduce using rule 12 (statement -> package .)
    DEFAULT         reduce using rule 12 (statement -> package .)
    RETURN          reduce using rule 12 (statement -> package .)


state 11

    (13) statement -> import .

    IDENTIFIER      reduce using rule 13 (statement -> import .)
    VAR             reduce using rule 13 (statement -> import .)
    TYPE            reduce using rule 13 (statement -> import .)
    FOR             reduce using rule 13 (statement -> import .)
    PACKAGE         reduce using rule 13 (statement -> import .)
    IMPORT          reduce using rule 13 (statement -> import .)
    SWITCH          reduce using rule 13 (statement -> import .)
    IF              reduce using rule 13 (statement -> import .)
    FUNC            reduce using rule 13 (statement -> import .)
    $end            reduce using rule 13 (statement -> import .)
    RBRACE          reduce using rule 13 (statement -> import .)
    CASE            reduce using rule 13 (statement -> import .)
    DEFAULT         reduce using rule 13 (statement -> import .)
    RETURN          reduce using rule 13 (statement -> import .)


state 12

    (14) statement -> switch .

    IDENTIFIER      reduce using rule 14 (statement -> switch .)
    VAR             reduce using rule 14 (statement -> switch .)
    TYPE            reduce using rule 14 (statement -> switch .)
    FOR             reduce using rule 14 (statement -> switch .)
    PACKAGE         reduce using rule 14 (statement -> switch .)
    IMPORT          reduce using rule 14 (statement -> switch .)
    SWITCH          reduce using rule 14 (statement -> switch .)
    IF              reduce using rule 14 (statement -> switch .)
    FUNC            reduce using rule 14 (statement -> switch .)
    $end            reduce using rule 14 (statement -> switch .)
    RBRACE          reduce using rule 14 (statement -> switch .)
    CASE            reduce using rule 14 (statement -> switch .)
    DEFAULT         reduce using rule 14 (statement -> switch .)
    RETURN          reduce using rule 14 (statement -> switch .)


state 13

    (15) statement -> map .

    IDENTIFIER      reduce using rule 15 (statement -> map .)
    VAR             reduce using rule 15 (statement -> map .)
    TYPE            reduce using rule 15 (statement -> map .)
    FOR             reduce using rule 15 (statement -> map .)
    PACKAGE         reduce using rule 15 (statement -> map .)
    IMPORT          reduce using rule 15 (statement -> map .)
    SWITCH          reduce using rule 15 (statement -> map .)
    IF              reduce using rule 15 (statement -> map .)
    FUNC            reduce using rule 15 (statement -> map .)
    $end            reduce using rule 15 (statement -> map .)
    RBRACE          reduce using rule 15 (statement -> map .)
    CASE            reduce using rule 15 (statement -> map .)
    DEFAULT         reduce using rule 15 (statement -> map .)
    RETURN          reduce using rule 15 (statement -> map .)


state 14

    (16) statement -> if_statement .

    IDENTIFIER      reduce using rule 16 (statement -> if_statement .)
    VAR             reduce using rule 16 (statement -> if_statement .)
    TYPE            reduce using rule 16 (statement -> if_statement .)
    FOR             reduce using rule 16 (statement -> if_statement .)
    PACKAGE         reduce using rule 16 (statement -> if_statement .)
    IMPORT          reduce using rule 16 (statement -> if_statement .)
    SWITCH          reduce using rule 16 (statement -> if_statement .)
    IF              reduce using rule 16 (statement -> if_statement .)
    FUNC            reduce using rule 16 (statement -> if_statement .)
    $end            reduce using rule 16 (statement -> if_statement .)
    RBRACE          reduce using rule 16 (statement -> if_statement .)
    CASE            reduce using rule 16 (statement -> if_statement .)
    DEFAULT         reduce using rule 16 (statement -> if_statement .)
    RETURN          reduce using rule 16 (statement -> if_statement .)


state 15

    (17) statement -> function .

    IDENTIFIER      reduce using rule 17 (statement -> function .)
    VAR             reduce using rule 17 (statement -> function .)
    TYPE            reduce using rule 17 (statement -> function .)
    FOR             reduce using rule 17 (statement -> function .)
    PACKAGE         reduce using rule 17 (statement -> function .)
    IMPORT          reduce using rule 17 (statement -> function .)
    SWITCH          reduce using rule 17 (statement -> function .)
    IF              reduce using rule 17 (statement -> function .)
    FUNC            reduce using rule 17 (statement -> function .)
    $end            reduce using rule 17 (statement -> function .)
    RBRACE          reduce using rule 17 (statement -> function .)
    CASE            reduce using rule 17 (statement -> function .)
    DEFAULT         reduce using rule 17 (statement -> function .)
    RETURN          reduce using rule 17 (statement -> function .)


state 16

    (18) statement -> method_definition .

    IDENTIFIER      reduce using rule 18 (statement -> method_definition .)
    VAR             reduce using rule 18 (statement -> method_definition .)
    TYPE            reduce using rule 18 (statement -> method_definition .)
    FOR             reduce using rule 18 (statement -> method_definition .)
    PACKAGE         reduce using rule 18 (statement -> method_definition .)
    IMPORT          reduce using rule 18 (statement -> method_definition .)
    SWITCH          reduce using rule 18 (statement -> method_definition .)
    IF              reduce using rule 18 (statement -> method_definition .)
    FUNC            reduce using rule 18 (statement -> method_definition .)
    $end            reduce using rule 18 (statement -> method_definition .)
    RBRACE          reduce using rule 18 (statement -> method_definition .)
    CASE            reduce using rule 18 (statement -> method_definition .)
    DEFAULT         reduce using rule 18 (statement -> method_definition .)
    RETURN          reduce using rule 18 (statement -> method_definition .)


state 17

    (19) statement -> function_literal .

    IDENTIFIER      reduce using rule 19 (statement -> function_literal .)
    VAR             reduce using rule 19 (statement -> function_literal .)
    TYPE            reduce using rule 19 (statement -> function_literal .)
    FOR             reduce using rule 19 (statement -> function_literal .)
    PACKAGE         reduce using rule 19 (statement -> function_literal .)
    IMPORT          reduce using rule 19 (statement -> function_literal .)
    SWITCH          reduce using rule 19 (statement -> function_literal .)
    IF              reduce using rule 19 (statement -> function_literal .)
    FUNC            reduce using rule 19 (statement -> function_literal .)
    $end            reduce using rule 19 (statement -> function_literal .)
    RBRACE          reduce using rule 19 (statement -> function_literal .)
    CASE            reduce using rule 19 (statement -> function_literal .)
    DEFAULT         reduce using rule 19 (statement -> function_literal .)
    RETURN          reduce using rule 19 (statement -> function_literal .)


state 18

    (20) statement -> var_declaration .

    IDENTIFIER      reduce using rule 20 (statement -> var_declaration .)
    VAR             reduce using rule 20 (statement -> var_declaration .)
    TYPE            reduce using rule 20 (statement -> var_declaration .)
    FOR             reduce using rule 20 (statement -> var_declaration .)
    PACKAGE         reduce using rule 20 (statement -> var_declaration .)
    IMPORT          reduce using rule 20 (statement -> var_declaration .)
    SWITCH          reduce using rule 20 (statement -> var_declaration .)
    IF              reduce using rule 20 (statement -> var_declaration .)
    FUNC            reduce using rule 20 (statement -> var_declaration .)
    $end            reduce using rule 20 (statement -> var_declaration .)
    RBRACE          reduce using rule 20 (statement -> var_declaration .)
    CASE            reduce using rule 20 (statement -> var_declaration .)
    DEFAULT         reduce using rule 20 (statement -> var_declaration .)
    RETURN          reduce using rule 20 (statement -> var_declaration .)


state 19

    (21) statement -> slice_declaration .

    IDENTIFIER      reduce using rule 21 (statement -> slice_declaration .)
    VAR             reduce using rule 21 (statement -> slice_declaration .)
    TYPE            reduce using rule 21 (statement -> slice_declaration .)
    FOR             reduce using rule 21 (statement -> slice_declaration .)
    PACKAGE         reduce using rule 21 (statement -> slice_declaration .)
    IMPORT          reduce using rule 21 (statement -> slice_declaration .)
    SWITCH          reduce using rule 21 (statement -> slice_declaration .)
    IF              reduce using rule 21 (statement -> slice_declaration .)
    FUNC            reduce using rule 21 (statement -> slice_declaration .)
    $end            reduce using rule 21 (statement -> slice_declaration .)
    RBRACE          reduce using rule 21 (statement -> slice_declaration .)
    CASE            reduce using rule 21 (statement -> slice_declaration .)
    DEFAULT         reduce using rule 21 (statement -> slice_declaration .)
    RETURN          reduce using rule 21 (statement -> slice_declaration .)


state 20

    (22) statement -> declare_assign .

    IDENTIFIER      reduce using rule 22 (statement -> declare_assign .)
    VAR             reduce using rule 22 (statement -> declare_assign .)
    TYPE            reduce using rule 22 (statement -> declare_assign .)
    FOR             reduce using rule 22 (statement -> declare_assign .)
    PACKAGE         reduce using rule 22 (statement -> declare_assign .)
    IMPORT          reduce using rule 22 (statement -> declare_assign .)
    SWITCH          reduce using rule 22 (statement -> declare_assign .)
    IF              reduce using rule 22 (statement -> declare_assign .)
    FUNC            reduce using rule 22 (statement -> declare_assign .)
    $end            reduce using rule 22 (statement -> declare_assign .)
    RBRACE          reduce using rule 22 (statement -> declare_assign .)
    CASE            reduce using rule 22 (statement -> declare_assign .)
    DEFAULT         reduce using rule 22 (statement -> declare_assign .)
    RETURN          reduce using rule 22 (statement -> declare_assign .)


state 21

    (35) assignment -> IDENTIFIER . DECLARE_ASSIGN expression
    (38) assignment -> IDENTIFIER . DECLARE_ASSIGN slice_literal
    (40) assignment -> IDENTIFIER . ASSIGN expression
    (33) input -> IDENTIFIER . DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (41) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) print_statement -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (67) map -> IDENTIFIER . DECLARE_ASSIGN mapLiteral
    (136) declare_assign -> IDENTIFIER . DECLARE_ASSIGN slice_literal

    DECLARE_ASSIGN  shift and go to state 31
    ASSIGN          shift and go to state 32
    DOT             shift and go to state 33
    LPAREN          shift and go to state 34


state 22

    (36) assignment -> VAR . IDENTIFIER DATATYPE ASSIGN expression
    (37) assignment -> VAR . IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (39) assignment -> VAR . IDENTIFIER DATATYPE ASSIGN slice_literal
    (68) map -> VAR . IDENTIFIER ASSIGN mapLiteral
    (34) var_declaration -> VAR . IDENTIFIER DATATYPE
    (135) slice_declaration -> VAR . IDENTIFIER LBRACKET RBRACKET type_name

    IDENTIFIER      shift and go to state 35


state 23

    (89) struct_definition -> TYPE . IDENTIFIER STRUCT LBRACE struct_fields RBRACE

    IDENTIFIER      shift and go to state 36


state 24

    (94) for_statement -> FOR . shortAssignment SEMICOLON condicion SEMICOLON expression block
    (98) for_statement -> FOR . condicion block
    (99) for_statement -> FOR . block
    (97) shortAssignment -> . identifier_list DECLARE_ASSIGN expression
    (50) condicion -> . expression comparador expression
    (101) block -> . LBRACE statement_list RBRACE
    (102) block -> . LBRACE RBRACE
    (95) identifier_list -> . IDENTIFIER
    (96) identifier_list -> . IDENTIFIER COMMA identifier_list
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    LBRACE          shift and go to state 42
    IDENTIFIER      shift and go to state 43
    NUMBER          shift and go to state 44
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    shortAssignment                shift and go to state 37
    condicion                      shift and go to state 38
    expression                     shift and go to state 39
    block                          shift and go to state 40
    identifier_list                shift and go to state 41
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 25

    (23) package -> PACKAGE . MAIN
    (24) package -> PACKAGE . IDENTIFIER

    MAIN            shift and go to state 56
    IDENTIFIER      shift and go to state 57


state 26

    (25) import -> IMPORT . STRING
    (26) import -> IMPORT . LPAREN import_list RPAREN

    STRING          shift and go to state 58
    LPAREN          shift and go to state 59


state 27

    (62) switch -> SWITCH . expression LBRACE caseBlocks RBRACE
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    expression                     shift and go to state 60
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 28

    (122) if_statement -> IF . condicion block
    (123) if_statement -> IF . condicion block ELSE block
    (124) if_statement -> IF . condicion_compleja block
    (125) if_statement -> IF . condicion_compleja block ELSE block
    (50) condicion -> . expression comparador expression
    (51) condicion_compleja -> . condicion operadorLogico condicion
    (52) condicion_compleja -> . condicion operadorLogico condicion_compleja
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    condicion                      shift and go to state 62
    condicion_compleja             shift and go to state 63
    expression                     shift and go to state 39
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 29

    (75) function -> FUNC . IDENTIFIER LPAREN params_opt RPAREN block
    (76) function -> FUNC . IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (79) function -> FUNC . MAIN LPAREN params_opt RPAREN block
    (93) method_definition -> FUNC . LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (126) function_literal -> FUNC . LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 64
    MAIN            shift and go to state 66
    LPAREN          shift and go to state 65


state 30

    (5) statement_list -> statement_list statement .

    IDENTIFIER      reduce using rule 5 (statement_list -> statement_list statement .)
    VAR             reduce using rule 5 (statement_list -> statement_list statement .)
    TYPE            reduce using rule 5 (statement_list -> statement_list statement .)
    FOR             reduce using rule 5 (statement_list -> statement_list statement .)
    PACKAGE         reduce using rule 5 (statement_list -> statement_list statement .)
    IMPORT          reduce using rule 5 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 5 (statement_list -> statement_list statement .)
    IF              reduce using rule 5 (statement_list -> statement_list statement .)
    FUNC            reduce using rule 5 (statement_list -> statement_list statement .)
    $end            reduce using rule 5 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 5 (statement_list -> statement_list statement .)
    CASE            reduce using rule 5 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 5 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 5 (statement_list -> statement_list statement .)


state 31

    (35) assignment -> IDENTIFIER DECLARE_ASSIGN . expression
    (38) assignment -> IDENTIFIER DECLARE_ASSIGN . slice_literal
    (67) map -> IDENTIFIER DECLARE_ASSIGN . mapLiteral
    (136) declare_assign -> IDENTIFIER DECLARE_ASSIGN . slice_literal
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (69) mapLiteral -> . MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55
    MAP             shift and go to state 70

    expression                     shift and go to state 67
    slice_literal                  shift and go to state 68
    mapLiteral                     shift and go to state 69
    llamarFuncion                  shift and go to state 52

state 32

    (40) assignment -> IDENTIFIER ASSIGN . expression
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    expression                     shift and go to state 71
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 33

    (33) input -> IDENTIFIER DOT . IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (43) llamarFuncion -> IDENTIFIER DOT . IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) print_statement -> IDENTIFIER DOT . IDENTIFIER LPAREN argument_list_opt RPAREN

    IDENTIFIER      shift and go to state 72


state 34

    (41) llamarFuncion -> IDENTIFIER LPAREN . argument_list_opt RPAREN
    (42) llamarFuncion -> IDENTIFIER LPAREN . argument_list_opt COMMA expression RPAREN
    (48) argument_list_opt -> . argument_list
    (49) argument_list_opt -> .
    (46) argument_list -> . expression
    (47) argument_list -> . argument_list COMMA expression
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    RPAREN          reduce using rule 49 (argument_list_opt -> .)
    COMMA           reduce using rule 49 (argument_list_opt -> .)
    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    argument_list_opt              shift and go to state 73
    expression                     shift and go to state 74
    argument_list                  shift and go to state 75
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 35

    (36) assignment -> VAR IDENTIFIER . DATATYPE ASSIGN expression
    (37) assignment -> VAR IDENTIFIER . DATATYPE ASSIGN llamarFuncion
    (39) assignment -> VAR IDENTIFIER . DATATYPE ASSIGN slice_literal
    (68) map -> VAR IDENTIFIER . ASSIGN mapLiteral
    (34) var_declaration -> VAR IDENTIFIER . DATATYPE
    (135) slice_declaration -> VAR IDENTIFIER . LBRACKET RBRACKET type_name

    DATATYPE        shift and go to state 76
    ASSIGN          shift and go to state 77
    LBRACKET        shift and go to state 78


state 36

    (89) struct_definition -> TYPE IDENTIFIER . STRUCT LBRACE struct_fields RBRACE

    STRUCT          shift and go to state 79


state 37

    (94) for_statement -> FOR shortAssignment . SEMICOLON condicion SEMICOLON expression block

    SEMICOLON       shift and go to state 80


state 38

    (98) for_statement -> FOR condicion . block
    (101) block -> . LBRACE statement_list RBRACE
    (102) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 42

    block                          shift and go to state 81

state 39

    (50) condicion -> expression . comparador expression
    (44) expression -> expression . comparador expression
    (45) expression -> expression . operadorLogico expression
    (113) expression -> expression . operator expression
    (114) expression -> expression . DOT IDENTIFIER
    (140) expression -> expression . LBRACKET expression RBRACKET
    (141) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (142) expression -> expression . LBRACKET COLON expression RBRACKET
    (143) expression -> expression . LBRACKET expression COLON RBRACKET
    (55) comparador -> . EQ
    (56) comparador -> . NEQ
    (57) comparador -> . GT
    (58) comparador -> . LT
    (59) comparador -> . GE
    (60) comparador -> . LE
    (53) operadorLogico -> . AND
    (54) operadorLogico -> . OR
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    DOT             shift and go to state 85
    LBRACKET        shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    GT              shift and go to state 89
    LT              shift and go to state 90
    GE              shift and go to state 91
    LE              shift and go to state 92
    AND             shift and go to state 93
    OR              shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 99

    comparador                     shift and go to state 82
    operadorLogico                 shift and go to state 83
    operator                       shift and go to state 84

state 40

    (99) for_statement -> FOR block .

    IDENTIFIER      reduce using rule 99 (for_statement -> FOR block .)
    VAR             reduce using rule 99 (for_statement -> FOR block .)
    TYPE            reduce using rule 99 (for_statement -> FOR block .)
    FOR             reduce using rule 99 (for_statement -> FOR block .)
    PACKAGE         reduce using rule 99 (for_statement -> FOR block .)
    IMPORT          reduce using rule 99 (for_statement -> FOR block .)
    SWITCH          reduce using rule 99 (for_statement -> FOR block .)
    IF              reduce using rule 99 (for_statement -> FOR block .)
    FUNC            reduce using rule 99 (for_statement -> FOR block .)
    $end            reduce using rule 99 (for_statement -> FOR block .)
    RBRACE          reduce using rule 99 (for_statement -> FOR block .)
    CASE            reduce using rule 99 (for_statement -> FOR block .)
    DEFAULT         reduce using rule 99 (for_statement -> FOR block .)
    RETURN          reduce using rule 99 (for_statement -> FOR block .)


state 41

    (97) shortAssignment -> identifier_list . DECLARE_ASSIGN expression

    DECLARE_ASSIGN  shift and go to state 100


state 42

    (101) block -> LBRACE . statement_list RBRACE
    (102) block -> LBRACE . RBRACE
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (37) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (38) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (39) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN slice_literal
    (40) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (94) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (98) for_statement -> . FOR condicion block
    (99) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (62) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (67) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (68) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (122) if_statement -> . IF condicion block
    (123) if_statement -> . IF condicion block ELSE block
    (124) if_statement -> . IF condicion_compleja block
    (125) if_statement -> . IF condicion_compleja block ELSE block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (76) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (79) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (93) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER DATATYPE
    (135) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (136) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    RBRACE          shift and go to state 102
    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29

    statement_list                 shift and go to state 101
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20

state 43

    (95) identifier_list -> IDENTIFIER .
    (96) identifier_list -> IDENTIFIER . COMMA identifier_list
    (104) expression -> IDENTIFIER .
    (41) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN

  ! shift/reduce conflict for DOT resolved as shift
    DECLARE_ASSIGN  reduce using rule 95 (identifier_list -> IDENTIFIER .)
    COMMA           shift and go to state 103
    LBRACKET        reduce using rule 104 (expression -> IDENTIFIER .)
    EQ              reduce using rule 104 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 104 (expression -> IDENTIFIER .)
    GT              reduce using rule 104 (expression -> IDENTIFIER .)
    LT              reduce using rule 104 (expression -> IDENTIFIER .)
    GE              reduce using rule 104 (expression -> IDENTIFIER .)
    LE              reduce using rule 104 (expression -> IDENTIFIER .)
    AND             reduce using rule 104 (expression -> IDENTIFIER .)
    OR              reduce using rule 104 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 104 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 104 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 104 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 104 (expression -> IDENTIFIER .)
    MOD             reduce using rule 104 (expression -> IDENTIFIER .)
    LPAREN          shift and go to state 34
    DOT             shift and go to state 104

  ! DOT             [ reduce using rule 104 (expression -> IDENTIFIER .) ]


state 44

    (103) expression -> NUMBER .

    DOT             reduce using rule 103 (expression -> NUMBER .)
    LBRACKET        reduce using rule 103 (expression -> NUMBER .)
    EQ              reduce using rule 103 (expression -> NUMBER .)
    NEQ             reduce using rule 103 (expression -> NUMBER .)
    GT              reduce using rule 103 (expression -> NUMBER .)
    LT              reduce using rule 103 (expression -> NUMBER .)
    GE              reduce using rule 103 (expression -> NUMBER .)
    LE              reduce using rule 103 (expression -> NUMBER .)
    AND             reduce using rule 103 (expression -> NUMBER .)
    OR              reduce using rule 103 (expression -> NUMBER .)
    PLUS            reduce using rule 103 (expression -> NUMBER .)
    MINUS           reduce using rule 103 (expression -> NUMBER .)
    TIMES           reduce using rule 103 (expression -> NUMBER .)
    DIVIDE          reduce using rule 103 (expression -> NUMBER .)
    MOD             reduce using rule 103 (expression -> NUMBER .)
    LBRACE          reduce using rule 103 (expression -> NUMBER .)
    IDENTIFIER      reduce using rule 103 (expression -> NUMBER .)
    VAR             reduce using rule 103 (expression -> NUMBER .)
    TYPE            reduce using rule 103 (expression -> NUMBER .)
    FOR             reduce using rule 103 (expression -> NUMBER .)
    PACKAGE         reduce using rule 103 (expression -> NUMBER .)
    IMPORT          reduce using rule 103 (expression -> NUMBER .)
    SWITCH          reduce using rule 103 (expression -> NUMBER .)
    IF              reduce using rule 103 (expression -> NUMBER .)
    FUNC            reduce using rule 103 (expression -> NUMBER .)
    $end            reduce using rule 103 (expression -> NUMBER .)
    RBRACE          reduce using rule 103 (expression -> NUMBER .)
    CASE            reduce using rule 103 (expression -> NUMBER .)
    DEFAULT         reduce using rule 103 (expression -> NUMBER .)
    RETURN          reduce using rule 103 (expression -> NUMBER .)
    COMMA           reduce using rule 103 (expression -> NUMBER .)
    RPAREN          reduce using rule 103 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 103 (expression -> NUMBER .)
    RBRACKET        reduce using rule 103 (expression -> NUMBER .)
    COLON           reduce using rule 103 (expression -> NUMBER .)


state 45

    (105) expression -> RUNE .

    DOT             reduce using rule 105 (expression -> RUNE .)
    LBRACKET        reduce using rule 105 (expression -> RUNE .)
    EQ              reduce using rule 105 (expression -> RUNE .)
    NEQ             reduce using rule 105 (expression -> RUNE .)
    GT              reduce using rule 105 (expression -> RUNE .)
    LT              reduce using rule 105 (expression -> RUNE .)
    GE              reduce using rule 105 (expression -> RUNE .)
    LE              reduce using rule 105 (expression -> RUNE .)
    AND             reduce using rule 105 (expression -> RUNE .)
    OR              reduce using rule 105 (expression -> RUNE .)
    PLUS            reduce using rule 105 (expression -> RUNE .)
    MINUS           reduce using rule 105 (expression -> RUNE .)
    TIMES           reduce using rule 105 (expression -> RUNE .)
    DIVIDE          reduce using rule 105 (expression -> RUNE .)
    MOD             reduce using rule 105 (expression -> RUNE .)
    LBRACE          reduce using rule 105 (expression -> RUNE .)
    IDENTIFIER      reduce using rule 105 (expression -> RUNE .)
    VAR             reduce using rule 105 (expression -> RUNE .)
    TYPE            reduce using rule 105 (expression -> RUNE .)
    FOR             reduce using rule 105 (expression -> RUNE .)
    PACKAGE         reduce using rule 105 (expression -> RUNE .)
    IMPORT          reduce using rule 105 (expression -> RUNE .)
    SWITCH          reduce using rule 105 (expression -> RUNE .)
    IF              reduce using rule 105 (expression -> RUNE .)
    FUNC            reduce using rule 105 (expression -> RUNE .)
    $end            reduce using rule 105 (expression -> RUNE .)
    RBRACE          reduce using rule 105 (expression -> RUNE .)
    CASE            reduce using rule 105 (expression -> RUNE .)
    DEFAULT         reduce using rule 105 (expression -> RUNE .)
    RETURN          reduce using rule 105 (expression -> RUNE .)
    COMMA           reduce using rule 105 (expression -> RUNE .)
    RPAREN          reduce using rule 105 (expression -> RUNE .)
    SEMICOLON       reduce using rule 105 (expression -> RUNE .)
    RBRACKET        reduce using rule 105 (expression -> RUNE .)
    COLON           reduce using rule 105 (expression -> RUNE .)


state 46

    (106) expression -> STRING .

    DOT             reduce using rule 106 (expression -> STRING .)
    LBRACKET        reduce using rule 106 (expression -> STRING .)
    EQ              reduce using rule 106 (expression -> STRING .)
    NEQ             reduce using rule 106 (expression -> STRING .)
    GT              reduce using rule 106 (expression -> STRING .)
    LT              reduce using rule 106 (expression -> STRING .)
    GE              reduce using rule 106 (expression -> STRING .)
    LE              reduce using rule 106 (expression -> STRING .)
    AND             reduce using rule 106 (expression -> STRING .)
    OR              reduce using rule 106 (expression -> STRING .)
    PLUS            reduce using rule 106 (expression -> STRING .)
    MINUS           reduce using rule 106 (expression -> STRING .)
    TIMES           reduce using rule 106 (expression -> STRING .)
    DIVIDE          reduce using rule 106 (expression -> STRING .)
    MOD             reduce using rule 106 (expression -> STRING .)
    LBRACE          reduce using rule 106 (expression -> STRING .)
    IDENTIFIER      reduce using rule 106 (expression -> STRING .)
    VAR             reduce using rule 106 (expression -> STRING .)
    TYPE            reduce using rule 106 (expression -> STRING .)
    FOR             reduce using rule 106 (expression -> STRING .)
    PACKAGE         reduce using rule 106 (expression -> STRING .)
    IMPORT          reduce using rule 106 (expression -> STRING .)
    SWITCH          reduce using rule 106 (expression -> STRING .)
    IF              reduce using rule 106 (expression -> STRING .)
    FUNC            reduce using rule 106 (expression -> STRING .)
    $end            reduce using rule 106 (expression -> STRING .)
    RBRACE          reduce using rule 106 (expression -> STRING .)
    CASE            reduce using rule 106 (expression -> STRING .)
    DEFAULT         reduce using rule 106 (expression -> STRING .)
    RETURN          reduce using rule 106 (expression -> STRING .)
    COMMA           reduce using rule 106 (expression -> STRING .)
    RPAREN          reduce using rule 106 (expression -> STRING .)
    SEMICOLON       reduce using rule 106 (expression -> STRING .)
    RBRACKET        reduce using rule 106 (expression -> STRING .)
    COLON           reduce using rule 106 (expression -> STRING .)


state 47

    (107) expression -> RAW_STRING .

    DOT             reduce using rule 107 (expression -> RAW_STRING .)
    LBRACKET        reduce using rule 107 (expression -> RAW_STRING .)
    EQ              reduce using rule 107 (expression -> RAW_STRING .)
    NEQ             reduce using rule 107 (expression -> RAW_STRING .)
    GT              reduce using rule 107 (expression -> RAW_STRING .)
    LT              reduce using rule 107 (expression -> RAW_STRING .)
    GE              reduce using rule 107 (expression -> RAW_STRING .)
    LE              reduce using rule 107 (expression -> RAW_STRING .)
    AND             reduce using rule 107 (expression -> RAW_STRING .)
    OR              reduce using rule 107 (expression -> RAW_STRING .)
    PLUS            reduce using rule 107 (expression -> RAW_STRING .)
    MINUS           reduce using rule 107 (expression -> RAW_STRING .)
    TIMES           reduce using rule 107 (expression -> RAW_STRING .)
    DIVIDE          reduce using rule 107 (expression -> RAW_STRING .)
    MOD             reduce using rule 107 (expression -> RAW_STRING .)
    LBRACE          reduce using rule 107 (expression -> RAW_STRING .)
    IDENTIFIER      reduce using rule 107 (expression -> RAW_STRING .)
    VAR             reduce using rule 107 (expression -> RAW_STRING .)
    TYPE            reduce using rule 107 (expression -> RAW_STRING .)
    FOR             reduce using rule 107 (expression -> RAW_STRING .)
    PACKAGE         reduce using rule 107 (expression -> RAW_STRING .)
    IMPORT          reduce using rule 107 (expression -> RAW_STRING .)
    SWITCH          reduce using rule 107 (expression -> RAW_STRING .)
    IF              reduce using rule 107 (expression -> RAW_STRING .)
    FUNC            reduce using rule 107 (expression -> RAW_STRING .)
    $end            reduce using rule 107 (expression -> RAW_STRING .)
    RBRACE          reduce using rule 107 (expression -> RAW_STRING .)
    CASE            reduce using rule 107 (expression -> RAW_STRING .)
    DEFAULT         reduce using rule 107 (expression -> RAW_STRING .)
    RETURN          reduce using rule 107 (expression -> RAW_STRING .)
    COMMA           reduce using rule 107 (expression -> RAW_STRING .)
    RPAREN          reduce using rule 107 (expression -> RAW_STRING .)
    SEMICOLON       reduce using rule 107 (expression -> RAW_STRING .)
    RBRACKET        reduce using rule 107 (expression -> RAW_STRING .)
    COLON           reduce using rule 107 (expression -> RAW_STRING .)


state 48

    (108) expression -> TRUE .

    DOT             reduce using rule 108 (expression -> TRUE .)
    LBRACKET        reduce using rule 108 (expression -> TRUE .)
    EQ              reduce using rule 108 (expression -> TRUE .)
    NEQ             reduce using rule 108 (expression -> TRUE .)
    GT              reduce using rule 108 (expression -> TRUE .)
    LT              reduce using rule 108 (expression -> TRUE .)
    GE              reduce using rule 108 (expression -> TRUE .)
    LE              reduce using rule 108 (expression -> TRUE .)
    AND             reduce using rule 108 (expression -> TRUE .)
    OR              reduce using rule 108 (expression -> TRUE .)
    PLUS            reduce using rule 108 (expression -> TRUE .)
    MINUS           reduce using rule 108 (expression -> TRUE .)
    TIMES           reduce using rule 108 (expression -> TRUE .)
    DIVIDE          reduce using rule 108 (expression -> TRUE .)
    MOD             reduce using rule 108 (expression -> TRUE .)
    LBRACE          reduce using rule 108 (expression -> TRUE .)
    IDENTIFIER      reduce using rule 108 (expression -> TRUE .)
    VAR             reduce using rule 108 (expression -> TRUE .)
    TYPE            reduce using rule 108 (expression -> TRUE .)
    FOR             reduce using rule 108 (expression -> TRUE .)
    PACKAGE         reduce using rule 108 (expression -> TRUE .)
    IMPORT          reduce using rule 108 (expression -> TRUE .)
    SWITCH          reduce using rule 108 (expression -> TRUE .)
    IF              reduce using rule 108 (expression -> TRUE .)
    FUNC            reduce using rule 108 (expression -> TRUE .)
    $end            reduce using rule 108 (expression -> TRUE .)
    RBRACE          reduce using rule 108 (expression -> TRUE .)
    CASE            reduce using rule 108 (expression -> TRUE .)
    DEFAULT         reduce using rule 108 (expression -> TRUE .)
    RETURN          reduce using rule 108 (expression -> TRUE .)
    COMMA           reduce using rule 108 (expression -> TRUE .)
    RPAREN          reduce using rule 108 (expression -> TRUE .)
    SEMICOLON       reduce using rule 108 (expression -> TRUE .)
    RBRACKET        reduce using rule 108 (expression -> TRUE .)
    COLON           reduce using rule 108 (expression -> TRUE .)


state 49

    (109) expression -> FALSE .

    DOT             reduce using rule 109 (expression -> FALSE .)
    LBRACKET        reduce using rule 109 (expression -> FALSE .)
    EQ              reduce using rule 109 (expression -> FALSE .)
    NEQ             reduce using rule 109 (expression -> FALSE .)
    GT              reduce using rule 109 (expression -> FALSE .)
    LT              reduce using rule 109 (expression -> FALSE .)
    GE              reduce using rule 109 (expression -> FALSE .)
    LE              reduce using rule 109 (expression -> FALSE .)
    AND             reduce using rule 109 (expression -> FALSE .)
    OR              reduce using rule 109 (expression -> FALSE .)
    PLUS            reduce using rule 109 (expression -> FALSE .)
    MINUS           reduce using rule 109 (expression -> FALSE .)
    TIMES           reduce using rule 109 (expression -> FALSE .)
    DIVIDE          reduce using rule 109 (expression -> FALSE .)
    MOD             reduce using rule 109 (expression -> FALSE .)
    LBRACE          reduce using rule 109 (expression -> FALSE .)
    IDENTIFIER      reduce using rule 109 (expression -> FALSE .)
    VAR             reduce using rule 109 (expression -> FALSE .)
    TYPE            reduce using rule 109 (expression -> FALSE .)
    FOR             reduce using rule 109 (expression -> FALSE .)
    PACKAGE         reduce using rule 109 (expression -> FALSE .)
    IMPORT          reduce using rule 109 (expression -> FALSE .)
    SWITCH          reduce using rule 109 (expression -> FALSE .)
    IF              reduce using rule 109 (expression -> FALSE .)
    FUNC            reduce using rule 109 (expression -> FALSE .)
    $end            reduce using rule 109 (expression -> FALSE .)
    RBRACE          reduce using rule 109 (expression -> FALSE .)
    CASE            reduce using rule 109 (expression -> FALSE .)
    DEFAULT         reduce using rule 109 (expression -> FALSE .)
    RETURN          reduce using rule 109 (expression -> FALSE .)
    COMMA           reduce using rule 109 (expression -> FALSE .)
    RPAREN          reduce using rule 109 (expression -> FALSE .)
    SEMICOLON       reduce using rule 109 (expression -> FALSE .)
    RBRACKET        reduce using rule 109 (expression -> FALSE .)
    COLON           reduce using rule 109 (expression -> FALSE .)


state 50

    (110) expression -> NIL .

    DOT             reduce using rule 110 (expression -> NIL .)
    LBRACKET        reduce using rule 110 (expression -> NIL .)
    EQ              reduce using rule 110 (expression -> NIL .)
    NEQ             reduce using rule 110 (expression -> NIL .)
    GT              reduce using rule 110 (expression -> NIL .)
    LT              reduce using rule 110 (expression -> NIL .)
    GE              reduce using rule 110 (expression -> NIL .)
    LE              reduce using rule 110 (expression -> NIL .)
    AND             reduce using rule 110 (expression -> NIL .)
    OR              reduce using rule 110 (expression -> NIL .)
    PLUS            reduce using rule 110 (expression -> NIL .)
    MINUS           reduce using rule 110 (expression -> NIL .)
    TIMES           reduce using rule 110 (expression -> NIL .)
    DIVIDE          reduce using rule 110 (expression -> NIL .)
    MOD             reduce using rule 110 (expression -> NIL .)
    LBRACE          reduce using rule 110 (expression -> NIL .)
    IDENTIFIER      reduce using rule 110 (expression -> NIL .)
    VAR             reduce using rule 110 (expression -> NIL .)
    TYPE            reduce using rule 110 (expression -> NIL .)
    FOR             reduce using rule 110 (expression -> NIL .)
    PACKAGE         reduce using rule 110 (expression -> NIL .)
    IMPORT          reduce using rule 110 (expression -> NIL .)
    SWITCH          reduce using rule 110 (expression -> NIL .)
    IF              reduce using rule 110 (expression -> NIL .)
    FUNC            reduce using rule 110 (expression -> NIL .)
    $end            reduce using rule 110 (expression -> NIL .)
    RBRACE          reduce using rule 110 (expression -> NIL .)
    CASE            reduce using rule 110 (expression -> NIL .)
    DEFAULT         reduce using rule 110 (expression -> NIL .)
    RETURN          reduce using rule 110 (expression -> NIL .)
    COMMA           reduce using rule 110 (expression -> NIL .)
    RPAREN          reduce using rule 110 (expression -> NIL .)
    SEMICOLON       reduce using rule 110 (expression -> NIL .)
    RBRACKET        reduce using rule 110 (expression -> NIL .)
    COLON           reduce using rule 110 (expression -> NIL .)


state 51

    (111) expression -> slice_literal .

    DOT             reduce using rule 111 (expression -> slice_literal .)
    LBRACKET        reduce using rule 111 (expression -> slice_literal .)
    EQ              reduce using rule 111 (expression -> slice_literal .)
    NEQ             reduce using rule 111 (expression -> slice_literal .)
    GT              reduce using rule 111 (expression -> slice_literal .)
    LT              reduce using rule 111 (expression -> slice_literal .)
    GE              reduce using rule 111 (expression -> slice_literal .)
    LE              reduce using rule 111 (expression -> slice_literal .)
    AND             reduce using rule 111 (expression -> slice_literal .)
    OR              reduce using rule 111 (expression -> slice_literal .)
    PLUS            reduce using rule 111 (expression -> slice_literal .)
    MINUS           reduce using rule 111 (expression -> slice_literal .)
    TIMES           reduce using rule 111 (expression -> slice_literal .)
    DIVIDE          reduce using rule 111 (expression -> slice_literal .)
    MOD             reduce using rule 111 (expression -> slice_literal .)
    LBRACE          reduce using rule 111 (expression -> slice_literal .)
    IDENTIFIER      reduce using rule 111 (expression -> slice_literal .)
    VAR             reduce using rule 111 (expression -> slice_literal .)
    TYPE            reduce using rule 111 (expression -> slice_literal .)
    FOR             reduce using rule 111 (expression -> slice_literal .)
    PACKAGE         reduce using rule 111 (expression -> slice_literal .)
    IMPORT          reduce using rule 111 (expression -> slice_literal .)
    SWITCH          reduce using rule 111 (expression -> slice_literal .)
    IF              reduce using rule 111 (expression -> slice_literal .)
    FUNC            reduce using rule 111 (expression -> slice_literal .)
    $end            reduce using rule 111 (expression -> slice_literal .)
    RBRACE          reduce using rule 111 (expression -> slice_literal .)
    CASE            reduce using rule 111 (expression -> slice_literal .)
    DEFAULT         reduce using rule 111 (expression -> slice_literal .)
    RETURN          reduce using rule 111 (expression -> slice_literal .)
    COMMA           reduce using rule 111 (expression -> slice_literal .)
    RPAREN          reduce using rule 111 (expression -> slice_literal .)
    SEMICOLON       reduce using rule 111 (expression -> slice_literal .)
    RBRACKET        reduce using rule 111 (expression -> slice_literal .)
    COLON           reduce using rule 111 (expression -> slice_literal .)


state 52

    (112) expression -> llamarFuncion .

    DOT             reduce using rule 112 (expression -> llamarFuncion .)
    LBRACKET        reduce using rule 112 (expression -> llamarFuncion .)
    EQ              reduce using rule 112 (expression -> llamarFuncion .)
    NEQ             reduce using rule 112 (expression -> llamarFuncion .)
    GT              reduce using rule 112 (expression -> llamarFuncion .)
    LT              reduce using rule 112 (expression -> llamarFuncion .)
    GE              reduce using rule 112 (expression -> llamarFuncion .)
    LE              reduce using rule 112 (expression -> llamarFuncion .)
    AND             reduce using rule 112 (expression -> llamarFuncion .)
    OR              reduce using rule 112 (expression -> llamarFuncion .)
    PLUS            reduce using rule 112 (expression -> llamarFuncion .)
    MINUS           reduce using rule 112 (expression -> llamarFuncion .)
    TIMES           reduce using rule 112 (expression -> llamarFuncion .)
    DIVIDE          reduce using rule 112 (expression -> llamarFuncion .)
    MOD             reduce using rule 112 (expression -> llamarFuncion .)
    LBRACE          reduce using rule 112 (expression -> llamarFuncion .)
    IDENTIFIER      reduce using rule 112 (expression -> llamarFuncion .)
    VAR             reduce using rule 112 (expression -> llamarFuncion .)
    TYPE            reduce using rule 112 (expression -> llamarFuncion .)
    FOR             reduce using rule 112 (expression -> llamarFuncion .)
    PACKAGE         reduce using rule 112 (expression -> llamarFuncion .)
    IMPORT          reduce using rule 112 (expression -> llamarFuncion .)
    SWITCH          reduce using rule 112 (expression -> llamarFuncion .)
    IF              reduce using rule 112 (expression -> llamarFuncion .)
    FUNC            reduce using rule 112 (expression -> llamarFuncion .)
    $end            reduce using rule 112 (expression -> llamarFuncion .)
    RBRACE          reduce using rule 112 (expression -> llamarFuncion .)
    CASE            reduce using rule 112 (expression -> llamarFuncion .)
    DEFAULT         reduce using rule 112 (expression -> llamarFuncion .)
    RETURN          reduce using rule 112 (expression -> llamarFuncion .)
    COMMA           reduce using rule 112 (expression -> llamarFuncion .)
    RPAREN          reduce using rule 112 (expression -> llamarFuncion .)
    SEMICOLON       reduce using rule 112 (expression -> llamarFuncion .)
    RBRACKET        reduce using rule 112 (expression -> llamarFuncion .)
    COLON           reduce using rule 112 (expression -> llamarFuncion .)


state 53

    (120) expression -> MINUS . expression
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    expression                     shift and go to state 105
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 54

    (121) expression -> LPAREN . expression RPAREN
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    expression                     shift and go to state 106
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 55

    (137) slice_literal -> LBRACKET . RBRACKET type_name LBRACE elements RBRACE

    RBRACKET        shift and go to state 107


state 56

    (23) package -> PACKAGE MAIN .

    IDENTIFIER      reduce using rule 23 (package -> PACKAGE MAIN .)
    VAR             reduce using rule 23 (package -> PACKAGE MAIN .)
    TYPE            reduce using rule 23 (package -> PACKAGE MAIN .)
    FOR             reduce using rule 23 (package -> PACKAGE MAIN .)
    PACKAGE         reduce using rule 23 (package -> PACKAGE MAIN .)
    IMPORT          reduce using rule 23 (package -> PACKAGE MAIN .)
    SWITCH          reduce using rule 23 (package -> PACKAGE MAIN .)
    IF              reduce using rule 23 (package -> PACKAGE MAIN .)
    FUNC            reduce using rule 23 (package -> PACKAGE MAIN .)
    $end            reduce using rule 23 (package -> PACKAGE MAIN .)
    RBRACE          reduce using rule 23 (package -> PACKAGE MAIN .)
    CASE            reduce using rule 23 (package -> PACKAGE MAIN .)
    DEFAULT         reduce using rule 23 (package -> PACKAGE MAIN .)
    RETURN          reduce using rule 23 (package -> PACKAGE MAIN .)


state 57

    (24) package -> PACKAGE IDENTIFIER .

    IDENTIFIER      reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    VAR             reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    TYPE            reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    FOR             reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    PACKAGE         reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    IMPORT          reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    SWITCH          reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    IF              reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    FUNC            reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    $end            reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    RBRACE          reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    CASE            reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    DEFAULT         reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    RETURN          reduce using rule 24 (package -> PACKAGE IDENTIFIER .)


state 58

    (25) import -> IMPORT STRING .

    IDENTIFIER      reduce using rule 25 (import -> IMPORT STRING .)
    VAR             reduce using rule 25 (import -> IMPORT STRING .)
    TYPE            reduce using rule 25 (import -> IMPORT STRING .)
    FOR             reduce using rule 25 (import -> IMPORT STRING .)
    PACKAGE         reduce using rule 25 (import -> IMPORT STRING .)
    IMPORT          reduce using rule 25 (import -> IMPORT STRING .)
    SWITCH          reduce using rule 25 (import -> IMPORT STRING .)
    IF              reduce using rule 25 (import -> IMPORT STRING .)
    FUNC            reduce using rule 25 (import -> IMPORT STRING .)
    $end            reduce using rule 25 (import -> IMPORT STRING .)
    RBRACE          reduce using rule 25 (import -> IMPORT STRING .)
    CASE            reduce using rule 25 (import -> IMPORT STRING .)
    DEFAULT         reduce using rule 25 (import -> IMPORT STRING .)
    RETURN          reduce using rule 25 (import -> IMPORT STRING .)


state 59

    (26) import -> IMPORT LPAREN . import_list RPAREN
    (27) import_list -> . STRING
    (28) import_list -> . import_list STRING

    STRING          shift and go to state 109

    import_list                    shift and go to state 108

state 60

    (62) switch -> SWITCH expression . LBRACE caseBlocks RBRACE
    (44) expression -> expression . comparador expression
    (45) expression -> expression . operadorLogico expression
    (113) expression -> expression . operator expression
    (114) expression -> expression . DOT IDENTIFIER
    (140) expression -> expression . LBRACKET expression RBRACKET
    (141) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (142) expression -> expression . LBRACKET COLON expression RBRACKET
    (143) expression -> expression . LBRACKET expression COLON RBRACKET
    (55) comparador -> . EQ
    (56) comparador -> . NEQ
    (57) comparador -> . GT
    (58) comparador -> . LT
    (59) comparador -> . GE
    (60) comparador -> . LE
    (53) operadorLogico -> . AND
    (54) operadorLogico -> . OR
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    LBRACE          shift and go to state 110
    DOT             shift and go to state 85
    LBRACKET        shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    GT              shift and go to state 89
    LT              shift and go to state 90
    GE              shift and go to state 91
    LE              shift and go to state 92
    AND             shift and go to state 93
    OR              shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 99

    comparador                     shift and go to state 111
    operadorLogico                 shift and go to state 83
    operator                       shift and go to state 84

state 61

    (104) expression -> IDENTIFIER .
    (41) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN

  ! shift/reduce conflict for DOT resolved as shift
    LBRACE          reduce using rule 104 (expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 104 (expression -> IDENTIFIER .)
    EQ              reduce using rule 104 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 104 (expression -> IDENTIFIER .)
    GT              reduce using rule 104 (expression -> IDENTIFIER .)
    LT              reduce using rule 104 (expression -> IDENTIFIER .)
    GE              reduce using rule 104 (expression -> IDENTIFIER .)
    LE              reduce using rule 104 (expression -> IDENTIFIER .)
    AND             reduce using rule 104 (expression -> IDENTIFIER .)
    OR              reduce using rule 104 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 104 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 104 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 104 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 104 (expression -> IDENTIFIER .)
    MOD             reduce using rule 104 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 104 (expression -> IDENTIFIER .)
    VAR             reduce using rule 104 (expression -> IDENTIFIER .)
    TYPE            reduce using rule 104 (expression -> IDENTIFIER .)
    FOR             reduce using rule 104 (expression -> IDENTIFIER .)
    PACKAGE         reduce using rule 104 (expression -> IDENTIFIER .)
    IMPORT          reduce using rule 104 (expression -> IDENTIFIER .)
    SWITCH          reduce using rule 104 (expression -> IDENTIFIER .)
    IF              reduce using rule 104 (expression -> IDENTIFIER .)
    FUNC            reduce using rule 104 (expression -> IDENTIFIER .)
    $end            reduce using rule 104 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 104 (expression -> IDENTIFIER .)
    CASE            reduce using rule 104 (expression -> IDENTIFIER .)
    DEFAULT         reduce using rule 104 (expression -> IDENTIFIER .)
    RETURN          reduce using rule 104 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 104 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 104 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 104 (expression -> IDENTIFIER .)
    RBRACKET        reduce using rule 104 (expression -> IDENTIFIER .)
    COLON           reduce using rule 104 (expression -> IDENTIFIER .)
    LPAREN          shift and go to state 34
    DOT             shift and go to state 104

  ! DOT             [ reduce using rule 104 (expression -> IDENTIFIER .) ]


state 62

    (122) if_statement -> IF condicion . block
    (123) if_statement -> IF condicion . block ELSE block
    (51) condicion_compleja -> condicion . operadorLogico condicion
    (52) condicion_compleja -> condicion . operadorLogico condicion_compleja
    (101) block -> . LBRACE statement_list RBRACE
    (102) block -> . LBRACE RBRACE
    (53) operadorLogico -> . AND
    (54) operadorLogico -> . OR

    LBRACE          shift and go to state 42
    AND             shift and go to state 93
    OR              shift and go to state 94

    block                          shift and go to state 112
    operadorLogico                 shift and go to state 113

state 63

    (124) if_statement -> IF condicion_compleja . block
    (125) if_statement -> IF condicion_compleja . block ELSE block
    (101) block -> . LBRACE statement_list RBRACE
    (102) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 42

    block                          shift and go to state 114

state 64

    (75) function -> FUNC IDENTIFIER . LPAREN params_opt RPAREN block
    (76) function -> FUNC IDENTIFIER . LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE

    LPAREN          shift and go to state 115


state 65

    (93) method_definition -> FUNC LPAREN . IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (126) function_literal -> FUNC LPAREN . parameters RPAREN return_type block
    (127) parameters -> . parameters COMMA parameter
    (128) parameters -> . parameter
    (129) parameters -> . empty
    (130) parameter -> . IDENTIFIER DATATYPE
    (131) parameter -> . IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE
    (61) empty -> .

    IDENTIFIER      shift and go to state 116
    RPAREN          reduce using rule 61 (empty -> .)
    COMMA           reduce using rule 61 (empty -> .)

    parameters                     shift and go to state 117
    parameter                      shift and go to state 118
    empty                          shift and go to state 119

state 66

    (79) function -> FUNC MAIN . LPAREN params_opt RPAREN block

    LPAREN          shift and go to state 120


state 67

    (35) assignment -> IDENTIFIER DECLARE_ASSIGN expression .
    (44) expression -> expression . comparador expression
    (45) expression -> expression . operadorLogico expression
    (113) expression -> expression . operator expression
    (114) expression -> expression . DOT IDENTIFIER
    (140) expression -> expression . LBRACKET expression RBRACKET
    (141) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (142) expression -> expression . LBRACKET COLON expression RBRACKET
    (143) expression -> expression . LBRACKET expression COLON RBRACKET
    (55) comparador -> . EQ
    (56) comparador -> . NEQ
    (57) comparador -> . GT
    (58) comparador -> . LT
    (59) comparador -> . GE
    (60) comparador -> . LE
    (53) operadorLogico -> . AND
    (54) operadorLogico -> . OR
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    IDENTIFIER      reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    VAR             reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    TYPE            reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    FOR             reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    PACKAGE         reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    IMPORT          reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    SWITCH          reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    IF              reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    FUNC            reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    $end            reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    RBRACE          reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    CASE            reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    DEFAULT         reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    RETURN          reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    DOT             shift and go to state 85
    LBRACKET        shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    GT              shift and go to state 89
    LT              shift and go to state 90
    GE              shift and go to state 91
    LE              shift and go to state 92
    AND             shift and go to state 93
    OR              shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 99

    comparador                     shift and go to state 111
    operadorLogico                 shift and go to state 83
    operator                       shift and go to state 84

state 68

    (38) assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .
    (136) declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .
    (111) expression -> slice_literal .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for VAR resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for TYPE resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for FOR resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IMPORT resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for SWITCH resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IF resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for FUNC resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for $end resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for RBRACE resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for CASE resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for RETURN resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for VAR resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for TYPE resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for FOR resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IMPORT resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for SWITCH resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IF resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for FUNC resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for $end resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for RBRACE resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for CASE resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for RETURN resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    IDENTIFIER      reduce using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    VAR             reduce using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    TYPE            reduce using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    FOR             reduce using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    PACKAGE         reduce using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    IMPORT          reduce using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    SWITCH          reduce using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    IF              reduce using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    FUNC            reduce using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    $end            reduce using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    RBRACE          reduce using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    CASE            reduce using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    DEFAULT         reduce using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    RETURN          reduce using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    DOT             reduce using rule 111 (expression -> slice_literal .)
    LBRACKET        reduce using rule 111 (expression -> slice_literal .)
    EQ              reduce using rule 111 (expression -> slice_literal .)
    NEQ             reduce using rule 111 (expression -> slice_literal .)
    GT              reduce using rule 111 (expression -> slice_literal .)
    LT              reduce using rule 111 (expression -> slice_literal .)
    GE              reduce using rule 111 (expression -> slice_literal .)
    LE              reduce using rule 111 (expression -> slice_literal .)
    AND             reduce using rule 111 (expression -> slice_literal .)
    OR              reduce using rule 111 (expression -> slice_literal .)
    PLUS            reduce using rule 111 (expression -> slice_literal .)
    MINUS           reduce using rule 111 (expression -> slice_literal .)
    TIMES           reduce using rule 111 (expression -> slice_literal .)
    DIVIDE          reduce using rule 111 (expression -> slice_literal .)
    MOD             reduce using rule 111 (expression -> slice_literal .)

  ! IDENTIFIER      [ reduce using rule 136 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! VAR             [ reduce using rule 136 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! TYPE            [ reduce using rule 136 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! FOR             [ reduce using rule 136 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! PACKAGE         [ reduce using rule 136 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! IMPORT          [ reduce using rule 136 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! SWITCH          [ reduce using rule 136 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! IF              [ reduce using rule 136 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! FUNC            [ reduce using rule 136 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! $end            [ reduce using rule 136 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! RBRACE          [ reduce using rule 136 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! CASE            [ reduce using rule 136 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! DEFAULT         [ reduce using rule 136 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! RETURN          [ reduce using rule 136 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! IDENTIFIER      [ reduce using rule 111 (expression -> slice_literal .) ]
  ! VAR             [ reduce using rule 111 (expression -> slice_literal .) ]
  ! TYPE            [ reduce using rule 111 (expression -> slice_literal .) ]
  ! FOR             [ reduce using rule 111 (expression -> slice_literal .) ]
  ! PACKAGE         [ reduce using rule 111 (expression -> slice_literal .) ]
  ! IMPORT          [ reduce using rule 111 (expression -> slice_literal .) ]
  ! SWITCH          [ reduce using rule 111 (expression -> slice_literal .) ]
  ! IF              [ reduce using rule 111 (expression -> slice_literal .) ]
  ! FUNC            [ reduce using rule 111 (expression -> slice_literal .) ]
  ! $end            [ reduce using rule 111 (expression -> slice_literal .) ]
  ! RBRACE          [ reduce using rule 111 (expression -> slice_literal .) ]
  ! CASE            [ reduce using rule 111 (expression -> slice_literal .) ]
  ! DEFAULT         [ reduce using rule 111 (expression -> slice_literal .) ]
  ! RETURN          [ reduce using rule 111 (expression -> slice_literal .) ]


state 69

    (67) map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .

    IDENTIFIER      reduce using rule 67 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    VAR             reduce using rule 67 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    TYPE            reduce using rule 67 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    FOR             reduce using rule 67 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    PACKAGE         reduce using rule 67 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    IMPORT          reduce using rule 67 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    SWITCH          reduce using rule 67 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    IF              reduce using rule 67 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    FUNC            reduce using rule 67 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    $end            reduce using rule 67 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    RBRACE          reduce using rule 67 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    CASE            reduce using rule 67 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    DEFAULT         reduce using rule 67 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    RETURN          reduce using rule 67 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)


state 70

    (69) mapLiteral -> MAP . LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE

    LBRACKET        shift and go to state 121


state 71

    (40) assignment -> IDENTIFIER ASSIGN expression .
    (44) expression -> expression . comparador expression
    (45) expression -> expression . operadorLogico expression
    (113) expression -> expression . operator expression
    (114) expression -> expression . DOT IDENTIFIER
    (140) expression -> expression . LBRACKET expression RBRACKET
    (141) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (142) expression -> expression . LBRACKET COLON expression RBRACKET
    (143) expression -> expression . LBRACKET expression COLON RBRACKET
    (55) comparador -> . EQ
    (56) comparador -> . NEQ
    (57) comparador -> . GT
    (58) comparador -> . LT
    (59) comparador -> . GE
    (60) comparador -> . LE
    (53) operadorLogico -> . AND
    (54) operadorLogico -> . OR
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    IDENTIFIER      reduce using rule 40 (assignment -> IDENTIFIER ASSIGN expression .)
    VAR             reduce using rule 40 (assignment -> IDENTIFIER ASSIGN expression .)
    TYPE            reduce using rule 40 (assignment -> IDENTIFIER ASSIGN expression .)
    FOR             reduce using rule 40 (assignment -> IDENTIFIER ASSIGN expression .)
    PACKAGE         reduce using rule 40 (assignment -> IDENTIFIER ASSIGN expression .)
    IMPORT          reduce using rule 40 (assignment -> IDENTIFIER ASSIGN expression .)
    SWITCH          reduce using rule 40 (assignment -> IDENTIFIER ASSIGN expression .)
    IF              reduce using rule 40 (assignment -> IDENTIFIER ASSIGN expression .)
    FUNC            reduce using rule 40 (assignment -> IDENTIFIER ASSIGN expression .)
    $end            reduce using rule 40 (assignment -> IDENTIFIER ASSIGN expression .)
    RBRACE          reduce using rule 40 (assignment -> IDENTIFIER ASSIGN expression .)
    CASE            reduce using rule 40 (assignment -> IDENTIFIER ASSIGN expression .)
    DEFAULT         reduce using rule 40 (assignment -> IDENTIFIER ASSIGN expression .)
    RETURN          reduce using rule 40 (assignment -> IDENTIFIER ASSIGN expression .)
    DOT             shift and go to state 85
    LBRACKET        shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    GT              shift and go to state 89
    LT              shift and go to state 90
    GE              shift and go to state 91
    LE              shift and go to state 92
    AND             shift and go to state 93
    OR              shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 99

    comparador                     shift and go to state 111
    operadorLogico                 shift and go to state 83
    operator                       shift and go to state 84

state 72

    (33) input -> IDENTIFIER DOT IDENTIFIER . LPAREN AMPERSAND IDENTIFIER RPAREN
    (43) llamarFuncion -> IDENTIFIER DOT IDENTIFIER . LPAREN argument_list_opt RPAREN
    (88) print_statement -> IDENTIFIER DOT IDENTIFIER . LPAREN argument_list_opt RPAREN

    LPAREN          shift and go to state 122


state 73

    (41) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt . RPAREN
    (42) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt . COMMA expression RPAREN

    RPAREN          shift and go to state 123
    COMMA           shift and go to state 124


state 74

    (46) argument_list -> expression .
    (44) expression -> expression . comparador expression
    (45) expression -> expression . operadorLogico expression
    (113) expression -> expression . operator expression
    (114) expression -> expression . DOT IDENTIFIER
    (140) expression -> expression . LBRACKET expression RBRACKET
    (141) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (142) expression -> expression . LBRACKET COLON expression RBRACKET
    (143) expression -> expression . LBRACKET expression COLON RBRACKET
    (55) comparador -> . EQ
    (56) comparador -> . NEQ
    (57) comparador -> . GT
    (58) comparador -> . LT
    (59) comparador -> . GE
    (60) comparador -> . LE
    (53) operadorLogico -> . AND
    (54) operadorLogico -> . OR
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    COMMA           reduce using rule 46 (argument_list -> expression .)
    RPAREN          reduce using rule 46 (argument_list -> expression .)
    DOT             shift and go to state 85
    LBRACKET        shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    GT              shift and go to state 89
    LT              shift and go to state 90
    GE              shift and go to state 91
    LE              shift and go to state 92
    AND             shift and go to state 93
    OR              shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 99

    comparador                     shift and go to state 111
    operadorLogico                 shift and go to state 83
    operator                       shift and go to state 84

state 75

    (48) argument_list_opt -> argument_list .
    (47) argument_list -> argument_list . COMMA expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 48 (argument_list_opt -> argument_list .)
    COMMA           shift and go to state 125

  ! COMMA           [ reduce using rule 48 (argument_list_opt -> argument_list .) ]


state 76

    (36) assignment -> VAR IDENTIFIER DATATYPE . ASSIGN expression
    (37) assignment -> VAR IDENTIFIER DATATYPE . ASSIGN llamarFuncion
    (39) assignment -> VAR IDENTIFIER DATATYPE . ASSIGN slice_literal
    (34) var_declaration -> VAR IDENTIFIER DATATYPE .

    ASSIGN          shift and go to state 126
    IDENTIFIER      reduce using rule 34 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    VAR             reduce using rule 34 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    TYPE            reduce using rule 34 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    FOR             reduce using rule 34 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    PACKAGE         reduce using rule 34 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    IMPORT          reduce using rule 34 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    SWITCH          reduce using rule 34 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    IF              reduce using rule 34 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    FUNC            reduce using rule 34 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    $end            reduce using rule 34 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    RBRACE          reduce using rule 34 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    CASE            reduce using rule 34 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    DEFAULT         reduce using rule 34 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    RETURN          reduce using rule 34 (var_declaration -> VAR IDENTIFIER DATATYPE .)


state 77

    (68) map -> VAR IDENTIFIER ASSIGN . mapLiteral
    (69) mapLiteral -> . MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE

    MAP             shift and go to state 70

    mapLiteral                     shift and go to state 127

state 78

    (135) slice_declaration -> VAR IDENTIFIER LBRACKET . RBRACKET type_name

    RBRACKET        shift and go to state 128


state 79

    (89) struct_definition -> TYPE IDENTIFIER STRUCT . LBRACE struct_fields RBRACE

    LBRACE          shift and go to state 129


state 80

    (94) for_statement -> FOR shortAssignment SEMICOLON . condicion SEMICOLON expression block
    (50) condicion -> . expression comparador expression
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    condicion                      shift and go to state 130
    expression                     shift and go to state 39
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 81

    (98) for_statement -> FOR condicion block .

    IDENTIFIER      reduce using rule 98 (for_statement -> FOR condicion block .)
    VAR             reduce using rule 98 (for_statement -> FOR condicion block .)
    TYPE            reduce using rule 98 (for_statement -> FOR condicion block .)
    FOR             reduce using rule 98 (for_statement -> FOR condicion block .)
    PACKAGE         reduce using rule 98 (for_statement -> FOR condicion block .)
    IMPORT          reduce using rule 98 (for_statement -> FOR condicion block .)
    SWITCH          reduce using rule 98 (for_statement -> FOR condicion block .)
    IF              reduce using rule 98 (for_statement -> FOR condicion block .)
    FUNC            reduce using rule 98 (for_statement -> FOR condicion block .)
    $end            reduce using rule 98 (for_statement -> FOR condicion block .)
    RBRACE          reduce using rule 98 (for_statement -> FOR condicion block .)
    CASE            reduce using rule 98 (for_statement -> FOR condicion block .)
    DEFAULT         reduce using rule 98 (for_statement -> FOR condicion block .)
    RETURN          reduce using rule 98 (for_statement -> FOR condicion block .)


state 82

    (50) condicion -> expression comparador . expression
    (44) expression -> expression comparador . expression
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    expression                     shift and go to state 131
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 83

    (45) expression -> expression operadorLogico . expression
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    expression                     shift and go to state 132
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 84

    (113) expression -> expression operator . expression
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    expression                     shift and go to state 133
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 85

    (114) expression -> expression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 134


state 86

    (140) expression -> expression LBRACKET . expression RBRACKET
    (141) expression -> expression LBRACKET . expression COLON expression RBRACKET
    (142) expression -> expression LBRACKET . COLON expression RBRACKET
    (143) expression -> expression LBRACKET . expression COLON RBRACKET
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    COLON           shift and go to state 136
    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    expression                     shift and go to state 135
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 87

    (55) comparador -> EQ .

    NUMBER          reduce using rule 55 (comparador -> EQ .)
    IDENTIFIER      reduce using rule 55 (comparador -> EQ .)
    RUNE            reduce using rule 55 (comparador -> EQ .)
    STRING          reduce using rule 55 (comparador -> EQ .)
    RAW_STRING      reduce using rule 55 (comparador -> EQ .)
    TRUE            reduce using rule 55 (comparador -> EQ .)
    FALSE           reduce using rule 55 (comparador -> EQ .)
    NIL             reduce using rule 55 (comparador -> EQ .)
    MINUS           reduce using rule 55 (comparador -> EQ .)
    LPAREN          reduce using rule 55 (comparador -> EQ .)
    LBRACKET        reduce using rule 55 (comparador -> EQ .)


state 88

    (56) comparador -> NEQ .

    NUMBER          reduce using rule 56 (comparador -> NEQ .)
    IDENTIFIER      reduce using rule 56 (comparador -> NEQ .)
    RUNE            reduce using rule 56 (comparador -> NEQ .)
    STRING          reduce using rule 56 (comparador -> NEQ .)
    RAW_STRING      reduce using rule 56 (comparador -> NEQ .)
    TRUE            reduce using rule 56 (comparador -> NEQ .)
    FALSE           reduce using rule 56 (comparador -> NEQ .)
    NIL             reduce using rule 56 (comparador -> NEQ .)
    MINUS           reduce using rule 56 (comparador -> NEQ .)
    LPAREN          reduce using rule 56 (comparador -> NEQ .)
    LBRACKET        reduce using rule 56 (comparador -> NEQ .)


state 89

    (57) comparador -> GT .

    NUMBER          reduce using rule 57 (comparador -> GT .)
    IDENTIFIER      reduce using rule 57 (comparador -> GT .)
    RUNE            reduce using rule 57 (comparador -> GT .)
    STRING          reduce using rule 57 (comparador -> GT .)
    RAW_STRING      reduce using rule 57 (comparador -> GT .)
    TRUE            reduce using rule 57 (comparador -> GT .)
    FALSE           reduce using rule 57 (comparador -> GT .)
    NIL             reduce using rule 57 (comparador -> GT .)
    MINUS           reduce using rule 57 (comparador -> GT .)
    LPAREN          reduce using rule 57 (comparador -> GT .)
    LBRACKET        reduce using rule 57 (comparador -> GT .)


state 90

    (58) comparador -> LT .

    NUMBER          reduce using rule 58 (comparador -> LT .)
    IDENTIFIER      reduce using rule 58 (comparador -> LT .)
    RUNE            reduce using rule 58 (comparador -> LT .)
    STRING          reduce using rule 58 (comparador -> LT .)
    RAW_STRING      reduce using rule 58 (comparador -> LT .)
    TRUE            reduce using rule 58 (comparador -> LT .)
    FALSE           reduce using rule 58 (comparador -> LT .)
    NIL             reduce using rule 58 (comparador -> LT .)
    MINUS           reduce using rule 58 (comparador -> LT .)
    LPAREN          reduce using rule 58 (comparador -> LT .)
    LBRACKET        reduce using rule 58 (comparador -> LT .)


state 91

    (59) comparador -> GE .

    NUMBER          reduce using rule 59 (comparador -> GE .)
    IDENTIFIER      reduce using rule 59 (comparador -> GE .)
    RUNE            reduce using rule 59 (comparador -> GE .)
    STRING          reduce using rule 59 (comparador -> GE .)
    RAW_STRING      reduce using rule 59 (comparador -> GE .)
    TRUE            reduce using rule 59 (comparador -> GE .)
    FALSE           reduce using rule 59 (comparador -> GE .)
    NIL             reduce using rule 59 (comparador -> GE .)
    MINUS           reduce using rule 59 (comparador -> GE .)
    LPAREN          reduce using rule 59 (comparador -> GE .)
    LBRACKET        reduce using rule 59 (comparador -> GE .)


state 92

    (60) comparador -> LE .

    NUMBER          reduce using rule 60 (comparador -> LE .)
    IDENTIFIER      reduce using rule 60 (comparador -> LE .)
    RUNE            reduce using rule 60 (comparador -> LE .)
    STRING          reduce using rule 60 (comparador -> LE .)
    RAW_STRING      reduce using rule 60 (comparador -> LE .)
    TRUE            reduce using rule 60 (comparador -> LE .)
    FALSE           reduce using rule 60 (comparador -> LE .)
    NIL             reduce using rule 60 (comparador -> LE .)
    MINUS           reduce using rule 60 (comparador -> LE .)
    LPAREN          reduce using rule 60 (comparador -> LE .)
    LBRACKET        reduce using rule 60 (comparador -> LE .)


state 93

    (53) operadorLogico -> AND .

    NUMBER          reduce using rule 53 (operadorLogico -> AND .)
    IDENTIFIER      reduce using rule 53 (operadorLogico -> AND .)
    RUNE            reduce using rule 53 (operadorLogico -> AND .)
    STRING          reduce using rule 53 (operadorLogico -> AND .)
    RAW_STRING      reduce using rule 53 (operadorLogico -> AND .)
    TRUE            reduce using rule 53 (operadorLogico -> AND .)
    FALSE           reduce using rule 53 (operadorLogico -> AND .)
    NIL             reduce using rule 53 (operadorLogico -> AND .)
    MINUS           reduce using rule 53 (operadorLogico -> AND .)
    LPAREN          reduce using rule 53 (operadorLogico -> AND .)
    LBRACKET        reduce using rule 53 (operadorLogico -> AND .)


state 94

    (54) operadorLogico -> OR .

    NUMBER          reduce using rule 54 (operadorLogico -> OR .)
    IDENTIFIER      reduce using rule 54 (operadorLogico -> OR .)
    RUNE            reduce using rule 54 (operadorLogico -> OR .)
    STRING          reduce using rule 54 (operadorLogico -> OR .)
    RAW_STRING      reduce using rule 54 (operadorLogico -> OR .)
    TRUE            reduce using rule 54 (operadorLogico -> OR .)
    FALSE           reduce using rule 54 (operadorLogico -> OR .)
    NIL             reduce using rule 54 (operadorLogico -> OR .)
    MINUS           reduce using rule 54 (operadorLogico -> OR .)
    LPAREN          reduce using rule 54 (operadorLogico -> OR .)
    LBRACKET        reduce using rule 54 (operadorLogico -> OR .)


state 95

    (115) operator -> PLUS .

    NUMBER          reduce using rule 115 (operator -> PLUS .)
    IDENTIFIER      reduce using rule 115 (operator -> PLUS .)
    RUNE            reduce using rule 115 (operator -> PLUS .)
    STRING          reduce using rule 115 (operator -> PLUS .)
    RAW_STRING      reduce using rule 115 (operator -> PLUS .)
    TRUE            reduce using rule 115 (operator -> PLUS .)
    FALSE           reduce using rule 115 (operator -> PLUS .)
    NIL             reduce using rule 115 (operator -> PLUS .)
    MINUS           reduce using rule 115 (operator -> PLUS .)
    LPAREN          reduce using rule 115 (operator -> PLUS .)
    LBRACKET        reduce using rule 115 (operator -> PLUS .)


state 96

    (116) operator -> MINUS .

    NUMBER          reduce using rule 116 (operator -> MINUS .)
    IDENTIFIER      reduce using rule 116 (operator -> MINUS .)
    RUNE            reduce using rule 116 (operator -> MINUS .)
    STRING          reduce using rule 116 (operator -> MINUS .)
    RAW_STRING      reduce using rule 116 (operator -> MINUS .)
    TRUE            reduce using rule 116 (operator -> MINUS .)
    FALSE           reduce using rule 116 (operator -> MINUS .)
    NIL             reduce using rule 116 (operator -> MINUS .)
    MINUS           reduce using rule 116 (operator -> MINUS .)
    LPAREN          reduce using rule 116 (operator -> MINUS .)
    LBRACKET        reduce using rule 116 (operator -> MINUS .)


state 97

    (117) operator -> TIMES .

    NUMBER          reduce using rule 117 (operator -> TIMES .)
    IDENTIFIER      reduce using rule 117 (operator -> TIMES .)
    RUNE            reduce using rule 117 (operator -> TIMES .)
    STRING          reduce using rule 117 (operator -> TIMES .)
    RAW_STRING      reduce using rule 117 (operator -> TIMES .)
    TRUE            reduce using rule 117 (operator -> TIMES .)
    FALSE           reduce using rule 117 (operator -> TIMES .)
    NIL             reduce using rule 117 (operator -> TIMES .)
    MINUS           reduce using rule 117 (operator -> TIMES .)
    LPAREN          reduce using rule 117 (operator -> TIMES .)
    LBRACKET        reduce using rule 117 (operator -> TIMES .)


state 98

    (118) operator -> DIVIDE .

    NUMBER          reduce using rule 118 (operator -> DIVIDE .)
    IDENTIFIER      reduce using rule 118 (operator -> DIVIDE .)
    RUNE            reduce using rule 118 (operator -> DIVIDE .)
    STRING          reduce using rule 118 (operator -> DIVIDE .)
    RAW_STRING      reduce using rule 118 (operator -> DIVIDE .)
    TRUE            reduce using rule 118 (operator -> DIVIDE .)
    FALSE           reduce using rule 118 (operator -> DIVIDE .)
    NIL             reduce using rule 118 (operator -> DIVIDE .)
    MINUS           reduce using rule 118 (operator -> DIVIDE .)
    LPAREN          reduce using rule 118 (operator -> DIVIDE .)
    LBRACKET        reduce using rule 118 (operator -> DIVIDE .)


state 99

    (119) operator -> MOD .

    NUMBER          reduce using rule 119 (operator -> MOD .)
    IDENTIFIER      reduce using rule 119 (operator -> MOD .)
    RUNE            reduce using rule 119 (operator -> MOD .)
    STRING          reduce using rule 119 (operator -> MOD .)
    RAW_STRING      reduce using rule 119 (operator -> MOD .)
    TRUE            reduce using rule 119 (operator -> MOD .)
    FALSE           reduce using rule 119 (operator -> MOD .)
    NIL             reduce using rule 119 (operator -> MOD .)
    MINUS           reduce using rule 119 (operator -> MOD .)
    LPAREN          reduce using rule 119 (operator -> MOD .)
    LBRACKET        reduce using rule 119 (operator -> MOD .)


state 100

    (97) shortAssignment -> identifier_list DECLARE_ASSIGN . expression
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    expression                     shift and go to state 137
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 101

    (101) block -> LBRACE statement_list . RBRACE
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (37) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (38) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (39) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN slice_literal
    (40) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (94) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (98) for_statement -> . FOR condicion block
    (99) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (62) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (67) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (68) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (122) if_statement -> . IF condicion block
    (123) if_statement -> . IF condicion block ELSE block
    (124) if_statement -> . IF condicion_compleja block
    (125) if_statement -> . IF condicion_compleja block ELSE block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (76) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (79) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (93) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER DATATYPE
    (135) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (136) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    RBRACE          shift and go to state 138
    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29

    statement                      shift and go to state 30
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20

state 102

    (102) block -> LBRACE RBRACE .

    IDENTIFIER      reduce using rule 102 (block -> LBRACE RBRACE .)
    VAR             reduce using rule 102 (block -> LBRACE RBRACE .)
    TYPE            reduce using rule 102 (block -> LBRACE RBRACE .)
    FOR             reduce using rule 102 (block -> LBRACE RBRACE .)
    PACKAGE         reduce using rule 102 (block -> LBRACE RBRACE .)
    IMPORT          reduce using rule 102 (block -> LBRACE RBRACE .)
    SWITCH          reduce using rule 102 (block -> LBRACE RBRACE .)
    IF              reduce using rule 102 (block -> LBRACE RBRACE .)
    FUNC            reduce using rule 102 (block -> LBRACE RBRACE .)
    $end            reduce using rule 102 (block -> LBRACE RBRACE .)
    RBRACE          reduce using rule 102 (block -> LBRACE RBRACE .)
    CASE            reduce using rule 102 (block -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 102 (block -> LBRACE RBRACE .)
    RETURN          reduce using rule 102 (block -> LBRACE RBRACE .)
    ELSE            reduce using rule 102 (block -> LBRACE RBRACE .)


state 103

    (96) identifier_list -> IDENTIFIER COMMA . identifier_list
    (95) identifier_list -> . IDENTIFIER
    (96) identifier_list -> . IDENTIFIER COMMA identifier_list

    IDENTIFIER      shift and go to state 139

    identifier_list                shift and go to state 140

state 104

    (43) llamarFuncion -> IDENTIFIER DOT . IDENTIFIER LPAREN argument_list_opt RPAREN

    IDENTIFIER      shift and go to state 141


state 105

    (120) expression -> MINUS expression .
    (44) expression -> expression . comparador expression
    (45) expression -> expression . operadorLogico expression
    (113) expression -> expression . operator expression
    (114) expression -> expression . DOT IDENTIFIER
    (140) expression -> expression . LBRACKET expression RBRACKET
    (141) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (142) expression -> expression . LBRACKET COLON expression RBRACKET
    (143) expression -> expression . LBRACKET expression COLON RBRACKET
    (55) comparador -> . EQ
    (56) comparador -> . NEQ
    (57) comparador -> . GT
    (58) comparador -> . LT
    (59) comparador -> . GE
    (60) comparador -> . LE
    (53) operadorLogico -> . AND
    (54) operadorLogico -> . OR
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    DOT             reduce using rule 120 (expression -> MINUS expression .)
    LBRACKET        reduce using rule 120 (expression -> MINUS expression .)
    EQ              reduce using rule 120 (expression -> MINUS expression .)
    NEQ             reduce using rule 120 (expression -> MINUS expression .)
    GT              reduce using rule 120 (expression -> MINUS expression .)
    LT              reduce using rule 120 (expression -> MINUS expression .)
    GE              reduce using rule 120 (expression -> MINUS expression .)
    LE              reduce using rule 120 (expression -> MINUS expression .)
    AND             reduce using rule 120 (expression -> MINUS expression .)
    OR              reduce using rule 120 (expression -> MINUS expression .)
    PLUS            reduce using rule 120 (expression -> MINUS expression .)
    MINUS           reduce using rule 120 (expression -> MINUS expression .)
    TIMES           reduce using rule 120 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 120 (expression -> MINUS expression .)
    MOD             reduce using rule 120 (expression -> MINUS expression .)
    LBRACE          reduce using rule 120 (expression -> MINUS expression .)
    IDENTIFIER      reduce using rule 120 (expression -> MINUS expression .)
    VAR             reduce using rule 120 (expression -> MINUS expression .)
    TYPE            reduce using rule 120 (expression -> MINUS expression .)
    FOR             reduce using rule 120 (expression -> MINUS expression .)
    PACKAGE         reduce using rule 120 (expression -> MINUS expression .)
    IMPORT          reduce using rule 120 (expression -> MINUS expression .)
    SWITCH          reduce using rule 120 (expression -> MINUS expression .)
    IF              reduce using rule 120 (expression -> MINUS expression .)
    FUNC            reduce using rule 120 (expression -> MINUS expression .)
    $end            reduce using rule 120 (expression -> MINUS expression .)
    RBRACE          reduce using rule 120 (expression -> MINUS expression .)
    CASE            reduce using rule 120 (expression -> MINUS expression .)
    DEFAULT         reduce using rule 120 (expression -> MINUS expression .)
    RETURN          reduce using rule 120 (expression -> MINUS expression .)
    COMMA           reduce using rule 120 (expression -> MINUS expression .)
    RPAREN          reduce using rule 120 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 120 (expression -> MINUS expression .)
    RBRACKET        reduce using rule 120 (expression -> MINUS expression .)
    COLON           reduce using rule 120 (expression -> MINUS expression .)

  ! DOT             [ shift and go to state 85 ]
  ! LBRACKET        [ shift and go to state 86 ]
  ! EQ              [ shift and go to state 87 ]
  ! NEQ             [ shift and go to state 88 ]
  ! GT              [ shift and go to state 89 ]
  ! LT              [ shift and go to state 90 ]
  ! GE              [ shift and go to state 91 ]
  ! LE              [ shift and go to state 92 ]
  ! AND             [ shift and go to state 93 ]
  ! OR              [ shift and go to state 94 ]
  ! PLUS            [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 96 ]
  ! TIMES           [ shift and go to state 97 ]
  ! DIVIDE          [ shift and go to state 98 ]
  ! MOD             [ shift and go to state 99 ]

    comparador                     shift and go to state 111
    operadorLogico                 shift and go to state 83
    operator                       shift and go to state 84

state 106

    (121) expression -> LPAREN expression . RPAREN
    (44) expression -> expression . comparador expression
    (45) expression -> expression . operadorLogico expression
    (113) expression -> expression . operator expression
    (114) expression -> expression . DOT IDENTIFIER
    (140) expression -> expression . LBRACKET expression RBRACKET
    (141) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (142) expression -> expression . LBRACKET COLON expression RBRACKET
    (143) expression -> expression . LBRACKET expression COLON RBRACKET
    (55) comparador -> . EQ
    (56) comparador -> . NEQ
    (57) comparador -> . GT
    (58) comparador -> . LT
    (59) comparador -> . GE
    (60) comparador -> . LE
    (53) operadorLogico -> . AND
    (54) operadorLogico -> . OR
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    RPAREN          shift and go to state 142
    DOT             shift and go to state 85
    LBRACKET        shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    GT              shift and go to state 89
    LT              shift and go to state 90
    GE              shift and go to state 91
    LE              shift and go to state 92
    AND             shift and go to state 93
    OR              shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 99

    comparador                     shift and go to state 111
    operadorLogico                 shift and go to state 83
    operator                       shift and go to state 84

state 107

    (137) slice_literal -> LBRACKET RBRACKET . type_name LBRACE elements RBRACE
    (86) type_name -> . DATATYPE
    (87) type_name -> . IDENTIFIER

    DATATYPE        shift and go to state 144
    IDENTIFIER      shift and go to state 145

    type_name                      shift and go to state 143

state 108

    (26) import -> IMPORT LPAREN import_list . RPAREN
    (28) import_list -> import_list . STRING

    RPAREN          shift and go to state 146
    STRING          shift and go to state 147


state 109

    (27) import_list -> STRING .

    RPAREN          reduce using rule 27 (import_list -> STRING .)
    STRING          reduce using rule 27 (import_list -> STRING .)


state 110

    (62) switch -> SWITCH expression LBRACE . caseBlocks RBRACE
    (63) caseBlocks -> . caseBlock
    (64) caseBlocks -> . caseBlock caseBlocks
    (65) caseBlock -> . CASE expression COLON statement_list
    (66) caseBlock -> . DEFAULT COLON statement_list

    CASE            shift and go to state 150
    DEFAULT         shift and go to state 151

    caseBlocks                     shift and go to state 148
    caseBlock                      shift and go to state 149

state 111

    (44) expression -> expression comparador . expression
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    expression                     shift and go to state 152
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 112

    (122) if_statement -> IF condicion block .
    (123) if_statement -> IF condicion block . ELSE block

    IDENTIFIER      reduce using rule 122 (if_statement -> IF condicion block .)
    VAR             reduce using rule 122 (if_statement -> IF condicion block .)
    TYPE            reduce using rule 122 (if_statement -> IF condicion block .)
    FOR             reduce using rule 122 (if_statement -> IF condicion block .)
    PACKAGE         reduce using rule 122 (if_statement -> IF condicion block .)
    IMPORT          reduce using rule 122 (if_statement -> IF condicion block .)
    SWITCH          reduce using rule 122 (if_statement -> IF condicion block .)
    IF              reduce using rule 122 (if_statement -> IF condicion block .)
    FUNC            reduce using rule 122 (if_statement -> IF condicion block .)
    $end            reduce using rule 122 (if_statement -> IF condicion block .)
    RBRACE          reduce using rule 122 (if_statement -> IF condicion block .)
    CASE            reduce using rule 122 (if_statement -> IF condicion block .)
    DEFAULT         reduce using rule 122 (if_statement -> IF condicion block .)
    RETURN          reduce using rule 122 (if_statement -> IF condicion block .)
    ELSE            shift and go to state 153


state 113

    (51) condicion_compleja -> condicion operadorLogico . condicion
    (52) condicion_compleja -> condicion operadorLogico . condicion_compleja
    (50) condicion -> . expression comparador expression
    (51) condicion_compleja -> . condicion operadorLogico condicion
    (52) condicion_compleja -> . condicion operadorLogico condicion_compleja
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    condicion                      shift and go to state 154
    condicion_compleja             shift and go to state 155
    expression                     shift and go to state 39
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 114

    (124) if_statement -> IF condicion_compleja block .
    (125) if_statement -> IF condicion_compleja block . ELSE block

    IDENTIFIER      reduce using rule 124 (if_statement -> IF condicion_compleja block .)
    VAR             reduce using rule 124 (if_statement -> IF condicion_compleja block .)
    TYPE            reduce using rule 124 (if_statement -> IF condicion_compleja block .)
    FOR             reduce using rule 124 (if_statement -> IF condicion_compleja block .)
    PACKAGE         reduce using rule 124 (if_statement -> IF condicion_compleja block .)
    IMPORT          reduce using rule 124 (if_statement -> IF condicion_compleja block .)
    SWITCH          reduce using rule 124 (if_statement -> IF condicion_compleja block .)
    IF              reduce using rule 124 (if_statement -> IF condicion_compleja block .)
    FUNC            reduce using rule 124 (if_statement -> IF condicion_compleja block .)
    $end            reduce using rule 124 (if_statement -> IF condicion_compleja block .)
    RBRACE          reduce using rule 124 (if_statement -> IF condicion_compleja block .)
    CASE            reduce using rule 124 (if_statement -> IF condicion_compleja block .)
    DEFAULT         reduce using rule 124 (if_statement -> IF condicion_compleja block .)
    RETURN          reduce using rule 124 (if_statement -> IF condicion_compleja block .)
    ELSE            shift and go to state 156


state 115

    (75) function -> FUNC IDENTIFIER LPAREN . params_opt RPAREN block
    (76) function -> FUNC IDENTIFIER LPAREN . params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (81) params_opt -> . params
    (82) params_opt -> .
    (83) params -> . param
    (84) params -> . param COMMA params
    (85) param -> . IDENTIFIER type_name

    RPAREN          reduce using rule 82 (params_opt -> .)
    IDENTIFIER      shift and go to state 157

    params_opt                     shift and go to state 158
    params                         shift and go to state 159
    param                          shift and go to state 160

state 116

    (93) method_definition -> FUNC LPAREN IDENTIFIER . IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (130) parameter -> IDENTIFIER . DATATYPE
    (131) parameter -> IDENTIFIER . FUNC LPAREN parameters RPAREN DATATYPE

    IDENTIFIER      shift and go to state 162
    DATATYPE        shift and go to state 163
    FUNC            shift and go to state 161


state 117

    (126) function_literal -> FUNC LPAREN parameters . RPAREN return_type block
    (127) parameters -> parameters . COMMA parameter

    RPAREN          shift and go to state 164
    COMMA           shift and go to state 165


state 118

    (128) parameters -> parameter .

    RPAREN          reduce using rule 128 (parameters -> parameter .)
    COMMA           reduce using rule 128 (parameters -> parameter .)


state 119

    (129) parameters -> empty .

    RPAREN          reduce using rule 129 (parameters -> empty .)
    COMMA           reduce using rule 129 (parameters -> empty .)


state 120

    (79) function -> FUNC MAIN LPAREN . params_opt RPAREN block
    (81) params_opt -> . params
    (82) params_opt -> .
    (83) params -> . param
    (84) params -> . param COMMA params
    (85) param -> . IDENTIFIER type_name

    RPAREN          reduce using rule 82 (params_opt -> .)
    IDENTIFIER      shift and go to state 157

    params_opt                     shift and go to state 166
    params                         shift and go to state 159
    param                          shift and go to state 160

state 121

    (69) mapLiteral -> MAP LBRACKET . DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE

    DATATYPE        shift and go to state 167


state 122

    (33) input -> IDENTIFIER DOT IDENTIFIER LPAREN . AMPERSAND IDENTIFIER RPAREN
    (43) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN . argument_list_opt RPAREN
    (88) print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN . argument_list_opt RPAREN
    (48) argument_list_opt -> . argument_list
    (49) argument_list_opt -> .
    (46) argument_list -> . expression
    (47) argument_list -> . argument_list COMMA expression
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    AMPERSAND       shift and go to state 168
    RPAREN          reduce using rule 49 (argument_list_opt -> .)
    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    argument_list_opt              shift and go to state 169
    argument_list                  shift and go to state 75
    expression                     shift and go to state 74
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 123

    (41) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .

    IDENTIFIER      reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    VAR             reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TYPE            reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FOR             reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PACKAGE         reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IMPORT          reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SWITCH          reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IF              reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FUNC            reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    $end            reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DOT             reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LBRACKET        reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    EQ              reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    NEQ             reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    GT              reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LT              reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    GE              reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LE              reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    AND             reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    OR              reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PLUS            reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    MINUS           reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TIMES           reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DIVIDE          reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    MOD             reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LBRACE          reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    CASE            reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DEFAULT         reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RETURN          reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RPAREN          reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SEMICOLON       reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACKET        reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    COLON           reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)


state 124

    (42) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA . expression RPAREN
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    expression                     shift and go to state 170
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 125

    (47) argument_list -> argument_list COMMA . expression
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    expression                     shift and go to state 171
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 126

    (36) assignment -> VAR IDENTIFIER DATATYPE ASSIGN . expression
    (37) assignment -> VAR IDENTIFIER DATATYPE ASSIGN . llamarFuncion
    (39) assignment -> VAR IDENTIFIER DATATYPE ASSIGN . slice_literal
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    expression                     shift and go to state 172
    llamarFuncion                  shift and go to state 173
    slice_literal                  shift and go to state 174

state 127

    (68) map -> VAR IDENTIFIER ASSIGN mapLiteral .

    IDENTIFIER      reduce using rule 68 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    VAR             reduce using rule 68 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    TYPE            reduce using rule 68 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    FOR             reduce using rule 68 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    PACKAGE         reduce using rule 68 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    IMPORT          reduce using rule 68 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    SWITCH          reduce using rule 68 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    IF              reduce using rule 68 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    FUNC            reduce using rule 68 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    $end            reduce using rule 68 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    RBRACE          reduce using rule 68 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    CASE            reduce using rule 68 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    DEFAULT         reduce using rule 68 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    RETURN          reduce using rule 68 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)


state 128

    (135) slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET . type_name
    (86) type_name -> . DATATYPE
    (87) type_name -> . IDENTIFIER

    DATATYPE        shift and go to state 144
    IDENTIFIER      shift and go to state 145

    type_name                      shift and go to state 175

state 129

    (89) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE . struct_fields RBRACE
    (91) struct_fields -> . struct_field
    (92) struct_fields -> . struct_fields struct_field
    (90) struct_field -> . IDENTIFIER DATATYPE

    IDENTIFIER      shift and go to state 176

    struct_fields                  shift and go to state 177
    struct_field                   shift and go to state 178

state 130

    (94) for_statement -> FOR shortAssignment SEMICOLON condicion . SEMICOLON expression block

    SEMICOLON       shift and go to state 179


state 131

    (50) condicion -> expression comparador expression .
    (44) expression -> expression comparador expression .
    (44) expression -> expression . comparador expression
    (45) expression -> expression . operadorLogico expression
    (113) expression -> expression . operator expression
    (114) expression -> expression . DOT IDENTIFIER
    (140) expression -> expression . LBRACKET expression RBRACKET
    (141) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (142) expression -> expression . LBRACKET COLON expression RBRACKET
    (143) expression -> expression . LBRACKET expression COLON RBRACKET
    (55) comparador -> . EQ
    (56) comparador -> . NEQ
    (57) comparador -> . GT
    (58) comparador -> . LT
    (59) comparador -> . GE
    (60) comparador -> . LE
    (53) operadorLogico -> . AND
    (54) operadorLogico -> . OR
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

  ! reduce/reduce conflict for AND resolved using rule 44 (expression -> expression comparador expression .)
  ! reduce/reduce conflict for OR resolved using rule 44 (expression -> expression comparador expression .)
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 50 (condicion -> expression comparador expression .)
    SEMICOLON       reduce using rule 50 (condicion -> expression comparador expression .)
    DOT             shift and go to state 85
    LBRACKET        shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    GT              shift and go to state 89
    LT              shift and go to state 90
    GE              shift and go to state 91
    LE              shift and go to state 92
    AND             shift and go to state 93
    OR              shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 99

  ! AND             [ reduce using rule 50 (condicion -> expression comparador expression .) ]
  ! OR              [ reduce using rule 50 (condicion -> expression comparador expression .) ]
  ! DOT             [ reduce using rule 44 (expression -> expression comparador expression .) ]
  ! LBRACKET        [ reduce using rule 44 (expression -> expression comparador expression .) ]
  ! EQ              [ reduce using rule 44 (expression -> expression comparador expression .) ]
  ! NEQ             [ reduce using rule 44 (expression -> expression comparador expression .) ]
  ! GT              [ reduce using rule 44 (expression -> expression comparador expression .) ]
  ! LT              [ reduce using rule 44 (expression -> expression comparador expression .) ]
  ! GE              [ reduce using rule 44 (expression -> expression comparador expression .) ]
  ! LE              [ reduce using rule 44 (expression -> expression comparador expression .) ]
  ! AND             [ reduce using rule 44 (expression -> expression comparador expression .) ]
  ! OR              [ reduce using rule 44 (expression -> expression comparador expression .) ]
  ! PLUS            [ reduce using rule 44 (expression -> expression comparador expression .) ]
  ! MINUS           [ reduce using rule 44 (expression -> expression comparador expression .) ]
  ! TIMES           [ reduce using rule 44 (expression -> expression comparador expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> expression comparador expression .) ]
  ! MOD             [ reduce using rule 44 (expression -> expression comparador expression .) ]

    comparador                     shift and go to state 111
    operadorLogico                 shift and go to state 83
    operator                       shift and go to state 84

state 132

    (45) expression -> expression operadorLogico expression .
    (44) expression -> expression . comparador expression
    (45) expression -> expression . operadorLogico expression
    (113) expression -> expression . operator expression
    (114) expression -> expression . DOT IDENTIFIER
    (140) expression -> expression . LBRACKET expression RBRACKET
    (141) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (142) expression -> expression . LBRACKET COLON expression RBRACKET
    (143) expression -> expression . LBRACKET expression COLON RBRACKET
    (55) comparador -> . EQ
    (56) comparador -> . NEQ
    (57) comparador -> . GT
    (58) comparador -> . LT
    (59) comparador -> . GE
    (60) comparador -> . LE
    (53) operadorLogico -> . AND
    (54) operadorLogico -> . OR
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 45 (expression -> expression operadorLogico expression .)
    IDENTIFIER      reduce using rule 45 (expression -> expression operadorLogico expression .)
    VAR             reduce using rule 45 (expression -> expression operadorLogico expression .)
    TYPE            reduce using rule 45 (expression -> expression operadorLogico expression .)
    FOR             reduce using rule 45 (expression -> expression operadorLogico expression .)
    PACKAGE         reduce using rule 45 (expression -> expression operadorLogico expression .)
    IMPORT          reduce using rule 45 (expression -> expression operadorLogico expression .)
    SWITCH          reduce using rule 45 (expression -> expression operadorLogico expression .)
    IF              reduce using rule 45 (expression -> expression operadorLogico expression .)
    FUNC            reduce using rule 45 (expression -> expression operadorLogico expression .)
    $end            reduce using rule 45 (expression -> expression operadorLogico expression .)
    RBRACE          reduce using rule 45 (expression -> expression operadorLogico expression .)
    CASE            reduce using rule 45 (expression -> expression operadorLogico expression .)
    DEFAULT         reduce using rule 45 (expression -> expression operadorLogico expression .)
    RETURN          reduce using rule 45 (expression -> expression operadorLogico expression .)
    COMMA           reduce using rule 45 (expression -> expression operadorLogico expression .)
    RPAREN          reduce using rule 45 (expression -> expression operadorLogico expression .)
    SEMICOLON       reduce using rule 45 (expression -> expression operadorLogico expression .)
    RBRACKET        reduce using rule 45 (expression -> expression operadorLogico expression .)
    COLON           reduce using rule 45 (expression -> expression operadorLogico expression .)
    DOT             shift and go to state 85
    LBRACKET        shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    GT              shift and go to state 89
    LT              shift and go to state 90
    GE              shift and go to state 91
    LE              shift and go to state 92
    AND             shift and go to state 93
    OR              shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 99

  ! DOT             [ reduce using rule 45 (expression -> expression operadorLogico expression .) ]
  ! LBRACKET        [ reduce using rule 45 (expression -> expression operadorLogico expression .) ]
  ! EQ              [ reduce using rule 45 (expression -> expression operadorLogico expression .) ]
  ! NEQ             [ reduce using rule 45 (expression -> expression operadorLogico expression .) ]
  ! GT              [ reduce using rule 45 (expression -> expression operadorLogico expression .) ]
  ! LT              [ reduce using rule 45 (expression -> expression operadorLogico expression .) ]
  ! GE              [ reduce using rule 45 (expression -> expression operadorLogico expression .) ]
  ! LE              [ reduce using rule 45 (expression -> expression operadorLogico expression .) ]
  ! AND             [ reduce using rule 45 (expression -> expression operadorLogico expression .) ]
  ! OR              [ reduce using rule 45 (expression -> expression operadorLogico expression .) ]
  ! PLUS            [ reduce using rule 45 (expression -> expression operadorLogico expression .) ]
  ! MINUS           [ reduce using rule 45 (expression -> expression operadorLogico expression .) ]
  ! TIMES           [ reduce using rule 45 (expression -> expression operadorLogico expression .) ]
  ! DIVIDE          [ reduce using rule 45 (expression -> expression operadorLogico expression .) ]
  ! MOD             [ reduce using rule 45 (expression -> expression operadorLogico expression .) ]

    operadorLogico                 shift and go to state 83
    comparador                     shift and go to state 111
    operator                       shift and go to state 84

state 133

    (113) expression -> expression operator expression .
    (44) expression -> expression . comparador expression
    (45) expression -> expression . operadorLogico expression
    (113) expression -> expression . operator expression
    (114) expression -> expression . DOT IDENTIFIER
    (140) expression -> expression . LBRACKET expression RBRACKET
    (141) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (142) expression -> expression . LBRACKET COLON expression RBRACKET
    (143) expression -> expression . LBRACKET expression COLON RBRACKET
    (55) comparador -> . EQ
    (56) comparador -> . NEQ
    (57) comparador -> . GT
    (58) comparador -> . LT
    (59) comparador -> . GE
    (60) comparador -> . LE
    (53) operadorLogico -> . AND
    (54) operadorLogico -> . OR
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 113 (expression -> expression operator expression .)
    IDENTIFIER      reduce using rule 113 (expression -> expression operator expression .)
    VAR             reduce using rule 113 (expression -> expression operator expression .)
    TYPE            reduce using rule 113 (expression -> expression operator expression .)
    FOR             reduce using rule 113 (expression -> expression operator expression .)
    PACKAGE         reduce using rule 113 (expression -> expression operator expression .)
    IMPORT          reduce using rule 113 (expression -> expression operator expression .)
    SWITCH          reduce using rule 113 (expression -> expression operator expression .)
    IF              reduce using rule 113 (expression -> expression operator expression .)
    FUNC            reduce using rule 113 (expression -> expression operator expression .)
    $end            reduce using rule 113 (expression -> expression operator expression .)
    RBRACE          reduce using rule 113 (expression -> expression operator expression .)
    CASE            reduce using rule 113 (expression -> expression operator expression .)
    DEFAULT         reduce using rule 113 (expression -> expression operator expression .)
    RETURN          reduce using rule 113 (expression -> expression operator expression .)
    COMMA           reduce using rule 113 (expression -> expression operator expression .)
    RPAREN          reduce using rule 113 (expression -> expression operator expression .)
    SEMICOLON       reduce using rule 113 (expression -> expression operator expression .)
    RBRACKET        reduce using rule 113 (expression -> expression operator expression .)
    COLON           reduce using rule 113 (expression -> expression operator expression .)
    DOT             shift and go to state 85
    LBRACKET        shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    GT              shift and go to state 89
    LT              shift and go to state 90
    GE              shift and go to state 91
    LE              shift and go to state 92
    AND             shift and go to state 93
    OR              shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 99

  ! DOT             [ reduce using rule 113 (expression -> expression operator expression .) ]
  ! LBRACKET        [ reduce using rule 113 (expression -> expression operator expression .) ]
  ! EQ              [ reduce using rule 113 (expression -> expression operator expression .) ]
  ! NEQ             [ reduce using rule 113 (expression -> expression operator expression .) ]
  ! GT              [ reduce using rule 113 (expression -> expression operator expression .) ]
  ! LT              [ reduce using rule 113 (expression -> expression operator expression .) ]
  ! GE              [ reduce using rule 113 (expression -> expression operator expression .) ]
  ! LE              [ reduce using rule 113 (expression -> expression operator expression .) ]
  ! AND             [ reduce using rule 113 (expression -> expression operator expression .) ]
  ! OR              [ reduce using rule 113 (expression -> expression operator expression .) ]
  ! PLUS            [ reduce using rule 113 (expression -> expression operator expression .) ]
  ! MINUS           [ reduce using rule 113 (expression -> expression operator expression .) ]
  ! TIMES           [ reduce using rule 113 (expression -> expression operator expression .) ]
  ! DIVIDE          [ reduce using rule 113 (expression -> expression operator expression .) ]
  ! MOD             [ reduce using rule 113 (expression -> expression operator expression .) ]

    operator                       shift and go to state 84
    comparador                     shift and go to state 111
    operadorLogico                 shift and go to state 83

state 134

    (114) expression -> expression DOT IDENTIFIER .

    DOT             reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    LBRACKET        reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    EQ              reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    NEQ             reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    GT              reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    LT              reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    GE              reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    LE              reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    AND             reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    OR              reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    PLUS            reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    MINUS           reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    TIMES           reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    DIVIDE          reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    MOD             reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    LBRACE          reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    VAR             reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    TYPE            reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    FOR             reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    PACKAGE         reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    IMPORT          reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    SWITCH          reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    IF              reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    FUNC            reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    $end            reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    RBRACE          reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    CASE            reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    DEFAULT         reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    RETURN          reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    COMMA           reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    RPAREN          reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    RBRACKET        reduce using rule 114 (expression -> expression DOT IDENTIFIER .)
    COLON           reduce using rule 114 (expression -> expression DOT IDENTIFIER .)


state 135

    (140) expression -> expression LBRACKET expression . RBRACKET
    (141) expression -> expression LBRACKET expression . COLON expression RBRACKET
    (143) expression -> expression LBRACKET expression . COLON RBRACKET
    (44) expression -> expression . comparador expression
    (45) expression -> expression . operadorLogico expression
    (113) expression -> expression . operator expression
    (114) expression -> expression . DOT IDENTIFIER
    (140) expression -> expression . LBRACKET expression RBRACKET
    (141) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (142) expression -> expression . LBRACKET COLON expression RBRACKET
    (143) expression -> expression . LBRACKET expression COLON RBRACKET
    (55) comparador -> . EQ
    (56) comparador -> . NEQ
    (57) comparador -> . GT
    (58) comparador -> . LT
    (59) comparador -> . GE
    (60) comparador -> . LE
    (53) operadorLogico -> . AND
    (54) operadorLogico -> . OR
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    RBRACKET        shift and go to state 180
    COLON           shift and go to state 181
    DOT             shift and go to state 85
    LBRACKET        shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    GT              shift and go to state 89
    LT              shift and go to state 90
    GE              shift and go to state 91
    LE              shift and go to state 92
    AND             shift and go to state 93
    OR              shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 99

    comparador                     shift and go to state 111
    operadorLogico                 shift and go to state 83
    operator                       shift and go to state 84

state 136

    (142) expression -> expression LBRACKET COLON . expression RBRACKET
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    expression                     shift and go to state 182
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 137

    (97) shortAssignment -> identifier_list DECLARE_ASSIGN expression .
    (44) expression -> expression . comparador expression
    (45) expression -> expression . operadorLogico expression
    (113) expression -> expression . operator expression
    (114) expression -> expression . DOT IDENTIFIER
    (140) expression -> expression . LBRACKET expression RBRACKET
    (141) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (142) expression -> expression . LBRACKET COLON expression RBRACKET
    (143) expression -> expression . LBRACKET expression COLON RBRACKET
    (55) comparador -> . EQ
    (56) comparador -> . NEQ
    (57) comparador -> . GT
    (58) comparador -> . LT
    (59) comparador -> . GE
    (60) comparador -> . LE
    (53) operadorLogico -> . AND
    (54) operadorLogico -> . OR
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    SEMICOLON       reduce using rule 97 (shortAssignment -> identifier_list DECLARE_ASSIGN expression .)
    DOT             shift and go to state 85
    LBRACKET        shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    GT              shift and go to state 89
    LT              shift and go to state 90
    GE              shift and go to state 91
    LE              shift and go to state 92
    AND             shift and go to state 93
    OR              shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 99

    comparador                     shift and go to state 111
    operadorLogico                 shift and go to state 83
    operator                       shift and go to state 84

state 138

    (101) block -> LBRACE statement_list RBRACE .

    IDENTIFIER      reduce using rule 101 (block -> LBRACE statement_list RBRACE .)
    VAR             reduce using rule 101 (block -> LBRACE statement_list RBRACE .)
    TYPE            reduce using rule 101 (block -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 101 (block -> LBRACE statement_list RBRACE .)
    PACKAGE         reduce using rule 101 (block -> LBRACE statement_list RBRACE .)
    IMPORT          reduce using rule 101 (block -> LBRACE statement_list RBRACE .)
    SWITCH          reduce using rule 101 (block -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 101 (block -> LBRACE statement_list RBRACE .)
    FUNC            reduce using rule 101 (block -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 101 (block -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 101 (block -> LBRACE statement_list RBRACE .)
    CASE            reduce using rule 101 (block -> LBRACE statement_list RBRACE .)
    DEFAULT         reduce using rule 101 (block -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 101 (block -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 101 (block -> LBRACE statement_list RBRACE .)


state 139

    (95) identifier_list -> IDENTIFIER .
    (96) identifier_list -> IDENTIFIER . COMMA identifier_list

    DECLARE_ASSIGN  reduce using rule 95 (identifier_list -> IDENTIFIER .)
    COMMA           shift and go to state 103


state 140

    (96) identifier_list -> IDENTIFIER COMMA identifier_list .

    DECLARE_ASSIGN  reduce using rule 96 (identifier_list -> IDENTIFIER COMMA identifier_list .)


state 141

    (43) llamarFuncion -> IDENTIFIER DOT IDENTIFIER . LPAREN argument_list_opt RPAREN

    LPAREN          shift and go to state 183


state 142

    (121) expression -> LPAREN expression RPAREN .

    DOT             reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    TYPE            reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    PACKAGE         reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    IMPORT          reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    FUNC            reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    CASE            reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 121 (expression -> LPAREN expression RPAREN .)


state 143

    (137) slice_literal -> LBRACKET RBRACKET type_name . LBRACE elements RBRACE

    LBRACE          shift and go to state 184


state 144

    (86) type_name -> DATATYPE .

    LBRACE          reduce using rule 86 (type_name -> DATATYPE .)
    IDENTIFIER      reduce using rule 86 (type_name -> DATATYPE .)
    VAR             reduce using rule 86 (type_name -> DATATYPE .)
    TYPE            reduce using rule 86 (type_name -> DATATYPE .)
    FOR             reduce using rule 86 (type_name -> DATATYPE .)
    PACKAGE         reduce using rule 86 (type_name -> DATATYPE .)
    IMPORT          reduce using rule 86 (type_name -> DATATYPE .)
    SWITCH          reduce using rule 86 (type_name -> DATATYPE .)
    IF              reduce using rule 86 (type_name -> DATATYPE .)
    FUNC            reduce using rule 86 (type_name -> DATATYPE .)
    $end            reduce using rule 86 (type_name -> DATATYPE .)
    RBRACE          reduce using rule 86 (type_name -> DATATYPE .)
    CASE            reduce using rule 86 (type_name -> DATATYPE .)
    DEFAULT         reduce using rule 86 (type_name -> DATATYPE .)
    RETURN          reduce using rule 86 (type_name -> DATATYPE .)
    COMMA           reduce using rule 86 (type_name -> DATATYPE .)
    RPAREN          reduce using rule 86 (type_name -> DATATYPE .)


state 145

    (87) type_name -> IDENTIFIER .

    LBRACE          reduce using rule 87 (type_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 87 (type_name -> IDENTIFIER .)
    VAR             reduce using rule 87 (type_name -> IDENTIFIER .)
    TYPE            reduce using rule 87 (type_name -> IDENTIFIER .)
    FOR             reduce using rule 87 (type_name -> IDENTIFIER .)
    PACKAGE         reduce using rule 87 (type_name -> IDENTIFIER .)
    IMPORT          reduce using rule 87 (type_name -> IDENTIFIER .)
    SWITCH          reduce using rule 87 (type_name -> IDENTIFIER .)
    IF              reduce using rule 87 (type_name -> IDENTIFIER .)
    FUNC            reduce using rule 87 (type_name -> IDENTIFIER .)
    $end            reduce using rule 87 (type_name -> IDENTIFIER .)
    RBRACE          reduce using rule 87 (type_name -> IDENTIFIER .)
    CASE            reduce using rule 87 (type_name -> IDENTIFIER .)
    DEFAULT         reduce using rule 87 (type_name -> IDENTIFIER .)
    RETURN          reduce using rule 87 (type_name -> IDENTIFIER .)
    COMMA           reduce using rule 87 (type_name -> IDENTIFIER .)
    RPAREN          reduce using rule 87 (type_name -> IDENTIFIER .)


state 146

    (26) import -> IMPORT LPAREN import_list RPAREN .

    IDENTIFIER      reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    VAR             reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    TYPE            reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    FOR             reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    PACKAGE         reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    IMPORT          reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    SWITCH          reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    IF              reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    FUNC            reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    $end            reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    RBRACE          reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    CASE            reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    DEFAULT         reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    RETURN          reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)


state 147

    (28) import_list -> import_list STRING .

    RPAREN          reduce using rule 28 (import_list -> import_list STRING .)
    STRING          reduce using rule 28 (import_list -> import_list STRING .)


state 148

    (62) switch -> SWITCH expression LBRACE caseBlocks . RBRACE

    RBRACE          shift and go to state 185


state 149

    (63) caseBlocks -> caseBlock .
    (64) caseBlocks -> caseBlock . caseBlocks
    (63) caseBlocks -> . caseBlock
    (64) caseBlocks -> . caseBlock caseBlocks
    (65) caseBlock -> . CASE expression COLON statement_list
    (66) caseBlock -> . DEFAULT COLON statement_list

    RBRACE          reduce using rule 63 (caseBlocks -> caseBlock .)
    CASE            shift and go to state 150
    DEFAULT         shift and go to state 151

    caseBlock                      shift and go to state 149
    caseBlocks                     shift and go to state 186

state 150

    (65) caseBlock -> CASE . expression COLON statement_list
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    expression                     shift and go to state 187
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 151

    (66) caseBlock -> DEFAULT . COLON statement_list

    COLON           shift and go to state 188


state 152

    (44) expression -> expression comparador expression .
    (44) expression -> expression . comparador expression
    (45) expression -> expression . operadorLogico expression
    (113) expression -> expression . operator expression
    (114) expression -> expression . DOT IDENTIFIER
    (140) expression -> expression . LBRACKET expression RBRACKET
    (141) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (142) expression -> expression . LBRACKET COLON expression RBRACKET
    (143) expression -> expression . LBRACKET expression COLON RBRACKET
    (55) comparador -> . EQ
    (56) comparador -> . NEQ
    (57) comparador -> . GT
    (58) comparador -> . LT
    (59) comparador -> . GE
    (60) comparador -> . LE
    (53) operadorLogico -> . AND
    (54) operadorLogico -> . OR
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 44 (expression -> expression comparador expression .)
    IDENTIFIER      reduce using rule 44 (expression -> expression comparador expression .)
    VAR             reduce using rule 44 (expression -> expression comparador expression .)
    TYPE            reduce using rule 44 (expression -> expression comparador expression .)
    FOR             reduce using rule 44 (expression -> expression comparador expression .)
    PACKAGE         reduce using rule 44 (expression -> expression comparador expression .)
    IMPORT          reduce using rule 44 (expression -> expression comparador expression .)
    SWITCH          reduce using rule 44 (expression -> expression comparador expression .)
    IF              reduce using rule 44 (expression -> expression comparador expression .)
    FUNC            reduce using rule 44 (expression -> expression comparador expression .)
    $end            reduce using rule 44 (expression -> expression comparador expression .)
    RBRACE          reduce using rule 44 (expression -> expression comparador expression .)
    CASE            reduce using rule 44 (expression -> expression comparador expression .)
    DEFAULT         reduce using rule 44 (expression -> expression comparador expression .)
    RETURN          reduce using rule 44 (expression -> expression comparador expression .)
    COMMA           reduce using rule 44 (expression -> expression comparador expression .)
    RPAREN          reduce using rule 44 (expression -> expression comparador expression .)
    SEMICOLON       reduce using rule 44 (expression -> expression comparador expression .)
    RBRACKET        reduce using rule 44 (expression -> expression comparador expression .)
    COLON           reduce using rule 44 (expression -> expression comparador expression .)
    DOT             shift and go to state 85
    LBRACKET        shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    GT              shift and go to state 89
    LT              shift and go to state 90
    GE              shift and go to state 91
    LE              shift and go to state 92
    AND             shift and go to state 93
    OR              shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 99

  ! DOT             [ reduce using rule 44 (expression -> expression comparador expression .) ]
  ! LBRACKET        [ reduce using rule 44 (expression -> expression comparador expression .) ]
  ! EQ              [ reduce using rule 44 (expression -> expression comparador expression .) ]
  ! NEQ             [ reduce using rule 44 (expression -> expression comparador expression .) ]
  ! GT              [ reduce using rule 44 (expression -> expression comparador expression .) ]
  ! LT              [ reduce using rule 44 (expression -> expression comparador expression .) ]
  ! GE              [ reduce using rule 44 (expression -> expression comparador expression .) ]
  ! LE              [ reduce using rule 44 (expression -> expression comparador expression .) ]
  ! AND             [ reduce using rule 44 (expression -> expression comparador expression .) ]
  ! OR              [ reduce using rule 44 (expression -> expression comparador expression .) ]
  ! PLUS            [ reduce using rule 44 (expression -> expression comparador expression .) ]
  ! MINUS           [ reduce using rule 44 (expression -> expression comparador expression .) ]
  ! TIMES           [ reduce using rule 44 (expression -> expression comparador expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> expression comparador expression .) ]
  ! MOD             [ reduce using rule 44 (expression -> expression comparador expression .) ]

    comparador                     shift and go to state 111
    operadorLogico                 shift and go to state 83
    operator                       shift and go to state 84

state 153

    (123) if_statement -> IF condicion block ELSE . block
    (101) block -> . LBRACE statement_list RBRACE
    (102) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 42

    block                          shift and go to state 189

state 154

    (51) condicion_compleja -> condicion operadorLogico condicion .
    (51) condicion_compleja -> condicion . operadorLogico condicion
    (52) condicion_compleja -> condicion . operadorLogico condicion_compleja
    (53) operadorLogico -> . AND
    (54) operadorLogico -> . OR

    LBRACE          reduce using rule 51 (condicion_compleja -> condicion operadorLogico condicion .)
    AND             shift and go to state 93
    OR              shift and go to state 94

    operadorLogico                 shift and go to state 113

state 155

    (52) condicion_compleja -> condicion operadorLogico condicion_compleja .

    LBRACE          reduce using rule 52 (condicion_compleja -> condicion operadorLogico condicion_compleja .)


state 156

    (125) if_statement -> IF condicion_compleja block ELSE . block
    (101) block -> . LBRACE statement_list RBRACE
    (102) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 42

    block                          shift and go to state 190

state 157

    (85) param -> IDENTIFIER . type_name
    (86) type_name -> . DATATYPE
    (87) type_name -> . IDENTIFIER

    DATATYPE        shift and go to state 144
    IDENTIFIER      shift and go to state 145

    type_name                      shift and go to state 191

state 158

    (75) function -> FUNC IDENTIFIER LPAREN params_opt . RPAREN block
    (76) function -> FUNC IDENTIFIER LPAREN params_opt . RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE

    RPAREN          shift and go to state 192


state 159

    (81) params_opt -> params .

    RPAREN          reduce using rule 81 (params_opt -> params .)


state 160

    (83) params -> param .
    (84) params -> param . COMMA params

    RPAREN          reduce using rule 83 (params -> param .)
    COMMA           shift and go to state 193


state 161

    (131) parameter -> IDENTIFIER FUNC . LPAREN parameters RPAREN DATATYPE

    LPAREN          shift and go to state 194


state 162

    (93) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER . RPAREN IDENTIFIER LPAREN arguments RPAREN block

    RPAREN          shift and go to state 195


state 163

    (130) parameter -> IDENTIFIER DATATYPE .

    RPAREN          reduce using rule 130 (parameter -> IDENTIFIER DATATYPE .)
    COMMA           reduce using rule 130 (parameter -> IDENTIFIER DATATYPE .)


state 164

    (126) function_literal -> FUNC LPAREN parameters RPAREN . return_type block
    (132) return_type -> . DATATYPE
    (133) return_type -> . empty
    (134) return_type -> . LPAREN DATATYPE COMMA return_type RPAREN
    (61) empty -> .

    DATATYPE        shift and go to state 198
    LPAREN          shift and go to state 196
    LBRACE          reduce using rule 61 (empty -> .)

    return_type                    shift and go to state 197
    empty                          shift and go to state 199

state 165

    (127) parameters -> parameters COMMA . parameter
    (130) parameter -> . IDENTIFIER DATATYPE
    (131) parameter -> . IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE

    IDENTIFIER      shift and go to state 201

    parameter                      shift and go to state 200

state 166

    (79) function -> FUNC MAIN LPAREN params_opt . RPAREN block

    RPAREN          shift and go to state 202


state 167

    (69) mapLiteral -> MAP LBRACKET DATATYPE . RBRACKET DATATYPE LBRACE mapEntries RBRACE

    RBRACKET        shift and go to state 203


state 168

    (33) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND . IDENTIFIER RPAREN

    IDENTIFIER      shift and go to state 204


state 169

    (43) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt . RPAREN
    (88) print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 205


state 170

    (42) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression . RPAREN
    (44) expression -> expression . comparador expression
    (45) expression -> expression . operadorLogico expression
    (113) expression -> expression . operator expression
    (114) expression -> expression . DOT IDENTIFIER
    (140) expression -> expression . LBRACKET expression RBRACKET
    (141) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (142) expression -> expression . LBRACKET COLON expression RBRACKET
    (143) expression -> expression . LBRACKET expression COLON RBRACKET
    (55) comparador -> . EQ
    (56) comparador -> . NEQ
    (57) comparador -> . GT
    (58) comparador -> . LT
    (59) comparador -> . GE
    (60) comparador -> . LE
    (53) operadorLogico -> . AND
    (54) operadorLogico -> . OR
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    RPAREN          shift and go to state 206
    DOT             shift and go to state 85
    LBRACKET        shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    GT              shift and go to state 89
    LT              shift and go to state 90
    GE              shift and go to state 91
    LE              shift and go to state 92
    AND             shift and go to state 93
    OR              shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 99

    comparador                     shift and go to state 111
    operadorLogico                 shift and go to state 83
    operator                       shift and go to state 84

state 171

    (47) argument_list -> argument_list COMMA expression .
    (44) expression -> expression . comparador expression
    (45) expression -> expression . operadorLogico expression
    (113) expression -> expression . operator expression
    (114) expression -> expression . DOT IDENTIFIER
    (140) expression -> expression . LBRACKET expression RBRACKET
    (141) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (142) expression -> expression . LBRACKET COLON expression RBRACKET
    (143) expression -> expression . LBRACKET expression COLON RBRACKET
    (55) comparador -> . EQ
    (56) comparador -> . NEQ
    (57) comparador -> . GT
    (58) comparador -> . LT
    (59) comparador -> . GE
    (60) comparador -> . LE
    (53) operadorLogico -> . AND
    (54) operadorLogico -> . OR
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    COMMA           reduce using rule 47 (argument_list -> argument_list COMMA expression .)
    RPAREN          reduce using rule 47 (argument_list -> argument_list COMMA expression .)
    DOT             shift and go to state 85
    LBRACKET        shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    GT              shift and go to state 89
    LT              shift and go to state 90
    GE              shift and go to state 91
    LE              shift and go to state 92
    AND             shift and go to state 93
    OR              shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 99

    comparador                     shift and go to state 111
    operadorLogico                 shift and go to state 83
    operator                       shift and go to state 84

state 172

    (36) assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .
    (44) expression -> expression . comparador expression
    (45) expression -> expression . operadorLogico expression
    (113) expression -> expression . operator expression
    (114) expression -> expression . DOT IDENTIFIER
    (140) expression -> expression . LBRACKET expression RBRACKET
    (141) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (142) expression -> expression . LBRACKET COLON expression RBRACKET
    (143) expression -> expression . LBRACKET expression COLON RBRACKET
    (55) comparador -> . EQ
    (56) comparador -> . NEQ
    (57) comparador -> . GT
    (58) comparador -> . LT
    (59) comparador -> . GE
    (60) comparador -> . LE
    (53) operadorLogico -> . AND
    (54) operadorLogico -> . OR
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    IDENTIFIER      reduce using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    VAR             reduce using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    TYPE            reduce using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    FOR             reduce using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    PACKAGE         reduce using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    IMPORT          reduce using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    SWITCH          reduce using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    IF              reduce using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    FUNC            reduce using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    $end            reduce using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    RBRACE          reduce using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    CASE            reduce using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    DEFAULT         reduce using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    RETURN          reduce using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    DOT             shift and go to state 85
    LBRACKET        shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    GT              shift and go to state 89
    LT              shift and go to state 90
    GE              shift and go to state 91
    LE              shift and go to state 92
    AND             shift and go to state 93
    OR              shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 99

    comparador                     shift and go to state 111
    operadorLogico                 shift and go to state 83
    operator                       shift and go to state 84

state 173

    (37) assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .
    (112) expression -> llamarFuncion .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 37 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for VAR resolved using rule 37 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for TYPE resolved using rule 37 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for FOR resolved using rule 37 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 37 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for IMPORT resolved using rule 37 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for SWITCH resolved using rule 37 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for IF resolved using rule 37 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for FUNC resolved using rule 37 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for $end resolved using rule 37 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for RBRACE resolved using rule 37 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for CASE resolved using rule 37 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 37 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for RETURN resolved using rule 37 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    IDENTIFIER      reduce using rule 37 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    VAR             reduce using rule 37 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    TYPE            reduce using rule 37 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    FOR             reduce using rule 37 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    PACKAGE         reduce using rule 37 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    IMPORT          reduce using rule 37 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    SWITCH          reduce using rule 37 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    IF              reduce using rule 37 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    FUNC            reduce using rule 37 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    $end            reduce using rule 37 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    RBRACE          reduce using rule 37 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    CASE            reduce using rule 37 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    DEFAULT         reduce using rule 37 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    RETURN          reduce using rule 37 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    DOT             reduce using rule 112 (expression -> llamarFuncion .)
    LBRACKET        reduce using rule 112 (expression -> llamarFuncion .)
    EQ              reduce using rule 112 (expression -> llamarFuncion .)
    NEQ             reduce using rule 112 (expression -> llamarFuncion .)
    GT              reduce using rule 112 (expression -> llamarFuncion .)
    LT              reduce using rule 112 (expression -> llamarFuncion .)
    GE              reduce using rule 112 (expression -> llamarFuncion .)
    LE              reduce using rule 112 (expression -> llamarFuncion .)
    AND             reduce using rule 112 (expression -> llamarFuncion .)
    OR              reduce using rule 112 (expression -> llamarFuncion .)
    PLUS            reduce using rule 112 (expression -> llamarFuncion .)
    MINUS           reduce using rule 112 (expression -> llamarFuncion .)
    TIMES           reduce using rule 112 (expression -> llamarFuncion .)
    DIVIDE          reduce using rule 112 (expression -> llamarFuncion .)
    MOD             reduce using rule 112 (expression -> llamarFuncion .)

  ! IDENTIFIER      [ reduce using rule 112 (expression -> llamarFuncion .) ]
  ! VAR             [ reduce using rule 112 (expression -> llamarFuncion .) ]
  ! TYPE            [ reduce using rule 112 (expression -> llamarFuncion .) ]
  ! FOR             [ reduce using rule 112 (expression -> llamarFuncion .) ]
  ! PACKAGE         [ reduce using rule 112 (expression -> llamarFuncion .) ]
  ! IMPORT          [ reduce using rule 112 (expression -> llamarFuncion .) ]
  ! SWITCH          [ reduce using rule 112 (expression -> llamarFuncion .) ]
  ! IF              [ reduce using rule 112 (expression -> llamarFuncion .) ]
  ! FUNC            [ reduce using rule 112 (expression -> llamarFuncion .) ]
  ! $end            [ reduce using rule 112 (expression -> llamarFuncion .) ]
  ! RBRACE          [ reduce using rule 112 (expression -> llamarFuncion .) ]
  ! CASE            [ reduce using rule 112 (expression -> llamarFuncion .) ]
  ! DEFAULT         [ reduce using rule 112 (expression -> llamarFuncion .) ]
  ! RETURN          [ reduce using rule 112 (expression -> llamarFuncion .) ]


state 174

    (39) assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .
    (111) expression -> slice_literal .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
  ! reduce/reduce conflict for VAR resolved using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
  ! reduce/reduce conflict for TYPE resolved using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
  ! reduce/reduce conflict for FOR resolved using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
  ! reduce/reduce conflict for IMPORT resolved using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
  ! reduce/reduce conflict for SWITCH resolved using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
  ! reduce/reduce conflict for IF resolved using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
  ! reduce/reduce conflict for FUNC resolved using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
  ! reduce/reduce conflict for $end resolved using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
  ! reduce/reduce conflict for RBRACE resolved using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
  ! reduce/reduce conflict for CASE resolved using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
  ! reduce/reduce conflict for RETURN resolved using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    IDENTIFIER      reduce using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    VAR             reduce using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    TYPE            reduce using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    FOR             reduce using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    PACKAGE         reduce using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    IMPORT          reduce using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    SWITCH          reduce using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    IF              reduce using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    FUNC            reduce using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    $end            reduce using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    RBRACE          reduce using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    CASE            reduce using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    DEFAULT         reduce using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    RETURN          reduce using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    DOT             reduce using rule 111 (expression -> slice_literal .)
    LBRACKET        reduce using rule 111 (expression -> slice_literal .)
    EQ              reduce using rule 111 (expression -> slice_literal .)
    NEQ             reduce using rule 111 (expression -> slice_literal .)
    GT              reduce using rule 111 (expression -> slice_literal .)
    LT              reduce using rule 111 (expression -> slice_literal .)
    GE              reduce using rule 111 (expression -> slice_literal .)
    LE              reduce using rule 111 (expression -> slice_literal .)
    AND             reduce using rule 111 (expression -> slice_literal .)
    OR              reduce using rule 111 (expression -> slice_literal .)
    PLUS            reduce using rule 111 (expression -> slice_literal .)
    MINUS           reduce using rule 111 (expression -> slice_literal .)
    TIMES           reduce using rule 111 (expression -> slice_literal .)
    DIVIDE          reduce using rule 111 (expression -> slice_literal .)
    MOD             reduce using rule 111 (expression -> slice_literal .)

  ! IDENTIFIER      [ reduce using rule 111 (expression -> slice_literal .) ]
  ! VAR             [ reduce using rule 111 (expression -> slice_literal .) ]
  ! TYPE            [ reduce using rule 111 (expression -> slice_literal .) ]
  ! FOR             [ reduce using rule 111 (expression -> slice_literal .) ]
  ! PACKAGE         [ reduce using rule 111 (expression -> slice_literal .) ]
  ! IMPORT          [ reduce using rule 111 (expression -> slice_literal .) ]
  ! SWITCH          [ reduce using rule 111 (expression -> slice_literal .) ]
  ! IF              [ reduce using rule 111 (expression -> slice_literal .) ]
  ! FUNC            [ reduce using rule 111 (expression -> slice_literal .) ]
  ! $end            [ reduce using rule 111 (expression -> slice_literal .) ]
  ! RBRACE          [ reduce using rule 111 (expression -> slice_literal .) ]
  ! CASE            [ reduce using rule 111 (expression -> slice_literal .) ]
  ! DEFAULT         [ reduce using rule 111 (expression -> slice_literal .) ]
  ! RETURN          [ reduce using rule 111 (expression -> slice_literal .) ]


state 175

    (135) slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .

    IDENTIFIER      reduce using rule 135 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .)
    VAR             reduce using rule 135 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .)
    TYPE            reduce using rule 135 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .)
    FOR             reduce using rule 135 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .)
    PACKAGE         reduce using rule 135 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .)
    IMPORT          reduce using rule 135 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .)
    SWITCH          reduce using rule 135 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .)
    IF              reduce using rule 135 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .)
    FUNC            reduce using rule 135 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .)
    $end            reduce using rule 135 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .)
    RBRACE          reduce using rule 135 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .)
    CASE            reduce using rule 135 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .)
    DEFAULT         reduce using rule 135 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .)
    RETURN          reduce using rule 135 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .)


state 176

    (90) struct_field -> IDENTIFIER . DATATYPE

    DATATYPE        shift and go to state 207


state 177

    (89) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields . RBRACE
    (92) struct_fields -> struct_fields . struct_field
    (90) struct_field -> . IDENTIFIER DATATYPE

    RBRACE          shift and go to state 208
    IDENTIFIER      shift and go to state 176

    struct_field                   shift and go to state 209

state 178

    (91) struct_fields -> struct_field .

    RBRACE          reduce using rule 91 (struct_fields -> struct_field .)
    IDENTIFIER      reduce using rule 91 (struct_fields -> struct_field .)


state 179

    (94) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON . expression block
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    expression                     shift and go to state 210
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 180

    (140) expression -> expression LBRACKET expression RBRACKET .

    DOT             reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    NEQ             reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    LBRACE          reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    IDENTIFIER      reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    VAR             reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    TYPE            reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    FOR             reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    PACKAGE         reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    IMPORT          reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    SWITCH          reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    IF              reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    FUNC            reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    $end            reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    CASE            reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    DEFAULT         reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    RETURN          reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 140 (expression -> expression LBRACKET expression RBRACKET .)


state 181

    (141) expression -> expression LBRACKET expression COLON . expression RBRACKET
    (143) expression -> expression LBRACKET expression COLON . RBRACKET
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    RBRACKET        shift and go to state 212
    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    expression                     shift and go to state 211
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 182

    (142) expression -> expression LBRACKET COLON expression . RBRACKET
    (44) expression -> expression . comparador expression
    (45) expression -> expression . operadorLogico expression
    (113) expression -> expression . operator expression
    (114) expression -> expression . DOT IDENTIFIER
    (140) expression -> expression . LBRACKET expression RBRACKET
    (141) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (142) expression -> expression . LBRACKET COLON expression RBRACKET
    (143) expression -> expression . LBRACKET expression COLON RBRACKET
    (55) comparador -> . EQ
    (56) comparador -> . NEQ
    (57) comparador -> . GT
    (58) comparador -> . LT
    (59) comparador -> . GE
    (60) comparador -> . LE
    (53) operadorLogico -> . AND
    (54) operadorLogico -> . OR
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    RBRACKET        shift and go to state 213
    DOT             shift and go to state 85
    LBRACKET        shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    GT              shift and go to state 89
    LT              shift and go to state 90
    GE              shift and go to state 91
    LE              shift and go to state 92
    AND             shift and go to state 93
    OR              shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 99

    comparador                     shift and go to state 111
    operadorLogico                 shift and go to state 83
    operator                       shift and go to state 84

state 183

    (43) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN . argument_list_opt RPAREN
    (48) argument_list_opt -> . argument_list
    (49) argument_list_opt -> .
    (46) argument_list -> . expression
    (47) argument_list -> . argument_list COMMA expression
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    RPAREN          reduce using rule 49 (argument_list_opt -> .)
    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    argument_list_opt              shift and go to state 214
    argument_list                  shift and go to state 75
    expression                     shift and go to state 74
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 184

    (137) slice_literal -> LBRACKET RBRACKET type_name LBRACE . elements RBRACE
    (138) elements -> . elements COMMA expression
    (139) elements -> . expression
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    elements                       shift and go to state 215
    expression                     shift and go to state 216
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 185

    (62) switch -> SWITCH expression LBRACE caseBlocks RBRACE .

    IDENTIFIER      reduce using rule 62 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    VAR             reduce using rule 62 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    TYPE            reduce using rule 62 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    FOR             reduce using rule 62 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    PACKAGE         reduce using rule 62 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    IMPORT          reduce using rule 62 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    SWITCH          reduce using rule 62 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    IF              reduce using rule 62 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    FUNC            reduce using rule 62 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    $end            reduce using rule 62 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    RBRACE          reduce using rule 62 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    CASE            reduce using rule 62 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    DEFAULT         reduce using rule 62 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    RETURN          reduce using rule 62 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)


state 186

    (64) caseBlocks -> caseBlock caseBlocks .

    RBRACE          reduce using rule 64 (caseBlocks -> caseBlock caseBlocks .)


state 187

    (65) caseBlock -> CASE expression . COLON statement_list
    (44) expression -> expression . comparador expression
    (45) expression -> expression . operadorLogico expression
    (113) expression -> expression . operator expression
    (114) expression -> expression . DOT IDENTIFIER
    (140) expression -> expression . LBRACKET expression RBRACKET
    (141) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (142) expression -> expression . LBRACKET COLON expression RBRACKET
    (143) expression -> expression . LBRACKET expression COLON RBRACKET
    (55) comparador -> . EQ
    (56) comparador -> . NEQ
    (57) comparador -> . GT
    (58) comparador -> . LT
    (59) comparador -> . GE
    (60) comparador -> . LE
    (53) operadorLogico -> . AND
    (54) operadorLogico -> . OR
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    COLON           shift and go to state 217
    DOT             shift and go to state 85
    LBRACKET        shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    GT              shift and go to state 89
    LT              shift and go to state 90
    GE              shift and go to state 91
    LE              shift and go to state 92
    AND             shift and go to state 93
    OR              shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 99

    comparador                     shift and go to state 111
    operadorLogico                 shift and go to state 83
    operator                       shift and go to state 84

state 188

    (66) caseBlock -> DEFAULT COLON . statement_list
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (37) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (38) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (39) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN slice_literal
    (40) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (94) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (98) for_statement -> . FOR condicion block
    (99) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (62) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (67) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (68) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (122) if_statement -> . IF condicion block
    (123) if_statement -> . IF condicion block ELSE block
    (124) if_statement -> . IF condicion_compleja block
    (125) if_statement -> . IF condicion_compleja block ELSE block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (76) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (79) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (93) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER DATATYPE
    (135) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (136) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29

    statement_list                 shift and go to state 218
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20

state 189

    (123) if_statement -> IF condicion block ELSE block .

    IDENTIFIER      reduce using rule 123 (if_statement -> IF condicion block ELSE block .)
    VAR             reduce using rule 123 (if_statement -> IF condicion block ELSE block .)
    TYPE            reduce using rule 123 (if_statement -> IF condicion block ELSE block .)
    FOR             reduce using rule 123 (if_statement -> IF condicion block ELSE block .)
    PACKAGE         reduce using rule 123 (if_statement -> IF condicion block ELSE block .)
    IMPORT          reduce using rule 123 (if_statement -> IF condicion block ELSE block .)
    SWITCH          reduce using rule 123 (if_statement -> IF condicion block ELSE block .)
    IF              reduce using rule 123 (if_statement -> IF condicion block ELSE block .)
    FUNC            reduce using rule 123 (if_statement -> IF condicion block ELSE block .)
    $end            reduce using rule 123 (if_statement -> IF condicion block ELSE block .)
    RBRACE          reduce using rule 123 (if_statement -> IF condicion block ELSE block .)
    CASE            reduce using rule 123 (if_statement -> IF condicion block ELSE block .)
    DEFAULT         reduce using rule 123 (if_statement -> IF condicion block ELSE block .)
    RETURN          reduce using rule 123 (if_statement -> IF condicion block ELSE block .)


state 190

    (125) if_statement -> IF condicion_compleja block ELSE block .

    IDENTIFIER      reduce using rule 125 (if_statement -> IF condicion_compleja block ELSE block .)
    VAR             reduce using rule 125 (if_statement -> IF condicion_compleja block ELSE block .)
    TYPE            reduce using rule 125 (if_statement -> IF condicion_compleja block ELSE block .)
    FOR             reduce using rule 125 (if_statement -> IF condicion_compleja block ELSE block .)
    PACKAGE         reduce using rule 125 (if_statement -> IF condicion_compleja block ELSE block .)
    IMPORT          reduce using rule 125 (if_statement -> IF condicion_compleja block ELSE block .)
    SWITCH          reduce using rule 125 (if_statement -> IF condicion_compleja block ELSE block .)
    IF              reduce using rule 125 (if_statement -> IF condicion_compleja block ELSE block .)
    FUNC            reduce using rule 125 (if_statement -> IF condicion_compleja block ELSE block .)
    $end            reduce using rule 125 (if_statement -> IF condicion_compleja block ELSE block .)
    RBRACE          reduce using rule 125 (if_statement -> IF condicion_compleja block ELSE block .)
    CASE            reduce using rule 125 (if_statement -> IF condicion_compleja block ELSE block .)
    DEFAULT         reduce using rule 125 (if_statement -> IF condicion_compleja block ELSE block .)
    RETURN          reduce using rule 125 (if_statement -> IF condicion_compleja block ELSE block .)


state 191

    (85) param -> IDENTIFIER type_name .

    COMMA           reduce using rule 85 (param -> IDENTIFIER type_name .)
    RPAREN          reduce using rule 85 (param -> IDENTIFIER type_name .)


state 192

    (75) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN . block
    (76) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN . return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (101) block -> . LBRACE statement_list RBRACE
    (102) block -> . LBRACE RBRACE
    (132) return_type -> . DATATYPE
    (133) return_type -> . empty
    (134) return_type -> . LPAREN DATATYPE COMMA return_type RPAREN
    (61) empty -> .

  ! shift/reduce conflict for LBRACE resolved as shift
    LBRACE          shift and go to state 42
    DATATYPE        shift and go to state 198
    LPAREN          shift and go to state 196

  ! LBRACE          [ reduce using rule 61 (empty -> .) ]

    block                          shift and go to state 219
    return_type                    shift and go to state 220
    empty                          shift and go to state 199

state 193

    (84) params -> param COMMA . params
    (83) params -> . param
    (84) params -> . param COMMA params
    (85) param -> . IDENTIFIER type_name

    IDENTIFIER      shift and go to state 157

    param                          shift and go to state 160
    params                         shift and go to state 221

state 194

    (131) parameter -> IDENTIFIER FUNC LPAREN . parameters RPAREN DATATYPE
    (127) parameters -> . parameters COMMA parameter
    (128) parameters -> . parameter
    (129) parameters -> . empty
    (130) parameter -> . IDENTIFIER DATATYPE
    (131) parameter -> . IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE
    (61) empty -> .

    IDENTIFIER      shift and go to state 201
    RPAREN          reduce using rule 61 (empty -> .)
    COMMA           reduce using rule 61 (empty -> .)

    parameters                     shift and go to state 222
    parameter                      shift and go to state 118
    empty                          shift and go to state 119

state 195

    (93) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN . IDENTIFIER LPAREN arguments RPAREN block

    IDENTIFIER      shift and go to state 223


state 196

    (134) return_type -> LPAREN . DATATYPE COMMA return_type RPAREN

    DATATYPE        shift and go to state 224


state 197

    (126) function_literal -> FUNC LPAREN parameters RPAREN return_type . block
    (101) block -> . LBRACE statement_list RBRACE
    (102) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 42

    block                          shift and go to state 225

state 198

    (132) return_type -> DATATYPE .

    LBRACE          reduce using rule 132 (return_type -> DATATYPE .)
    RPAREN          reduce using rule 132 (return_type -> DATATYPE .)


state 199

    (133) return_type -> empty .

    LBRACE          reduce using rule 133 (return_type -> empty .)
    RPAREN          reduce using rule 133 (return_type -> empty .)


state 200

    (127) parameters -> parameters COMMA parameter .

    RPAREN          reduce using rule 127 (parameters -> parameters COMMA parameter .)
    COMMA           reduce using rule 127 (parameters -> parameters COMMA parameter .)


state 201

    (130) parameter -> IDENTIFIER . DATATYPE
    (131) parameter -> IDENTIFIER . FUNC LPAREN parameters RPAREN DATATYPE

    DATATYPE        shift and go to state 163
    FUNC            shift and go to state 161


state 202

    (79) function -> FUNC MAIN LPAREN params_opt RPAREN . block
    (101) block -> . LBRACE statement_list RBRACE
    (102) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 42

    block                          shift and go to state 226

state 203

    (69) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET . DATATYPE LBRACE mapEntries RBRACE

    DATATYPE        shift and go to state 227


state 204

    (33) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER . RPAREN

    RPAREN          shift and go to state 228


state 205

    (43) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .
    (88) print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for VAR resolved using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for TYPE resolved using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for FOR resolved using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for IMPORT resolved using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for SWITCH resolved using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for IF resolved using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for FUNC resolved using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for RBRACE resolved using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for CASE resolved using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for RETURN resolved using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IDENTIFIER      reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    VAR             reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TYPE            reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FOR             reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PACKAGE         reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IMPORT          reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SWITCH          reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IF              reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FUNC            reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    $end            reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    CASE            reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DEFAULT         reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RETURN          reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)

  ! IDENTIFIER      [ reduce using rule 88 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! VAR             [ reduce using rule 88 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! TYPE            [ reduce using rule 88 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! FOR             [ reduce using rule 88 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! PACKAGE         [ reduce using rule 88 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! IMPORT          [ reduce using rule 88 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! SWITCH          [ reduce using rule 88 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! IF              [ reduce using rule 88 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! FUNC            [ reduce using rule 88 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! $end            [ reduce using rule 88 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! RBRACE          [ reduce using rule 88 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! CASE            [ reduce using rule 88 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! DEFAULT         [ reduce using rule 88 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! RETURN          [ reduce using rule 88 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]


state 206

    (42) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .

    IDENTIFIER      reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    VAR             reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    TYPE            reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    FOR             reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    PACKAGE         reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    IMPORT          reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    SWITCH          reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    IF              reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    FUNC            reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    $end            reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    DOT             reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    LBRACKET        reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    EQ              reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    NEQ             reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    GT              reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    LT              reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    GE              reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    LE              reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    AND             reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    OR              reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    PLUS            reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    MINUS           reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    TIMES           reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    DIVIDE          reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    MOD             reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    LBRACE          reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    RBRACE          reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    CASE            reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    DEFAULT         reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    RETURN          reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    COMMA           reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    RPAREN          reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    SEMICOLON       reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    RBRACKET        reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    COLON           reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)


state 207

    (90) struct_field -> IDENTIFIER DATATYPE .

    RBRACE          reduce using rule 90 (struct_field -> IDENTIFIER DATATYPE .)
    IDENTIFIER      reduce using rule 90 (struct_field -> IDENTIFIER DATATYPE .)


state 208

    (89) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .

    IDENTIFIER      reduce using rule 89 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    VAR             reduce using rule 89 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    TYPE            reduce using rule 89 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    FOR             reduce using rule 89 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    PACKAGE         reduce using rule 89 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    IMPORT          reduce using rule 89 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    SWITCH          reduce using rule 89 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    IF              reduce using rule 89 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    FUNC            reduce using rule 89 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    $end            reduce using rule 89 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    RBRACE          reduce using rule 89 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    CASE            reduce using rule 89 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    DEFAULT         reduce using rule 89 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    RETURN          reduce using rule 89 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)


state 209

    (92) struct_fields -> struct_fields struct_field .

    RBRACE          reduce using rule 92 (struct_fields -> struct_fields struct_field .)
    IDENTIFIER      reduce using rule 92 (struct_fields -> struct_fields struct_field .)


state 210

    (94) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression . block
    (44) expression -> expression . comparador expression
    (45) expression -> expression . operadorLogico expression
    (113) expression -> expression . operator expression
    (114) expression -> expression . DOT IDENTIFIER
    (140) expression -> expression . LBRACKET expression RBRACKET
    (141) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (142) expression -> expression . LBRACKET COLON expression RBRACKET
    (143) expression -> expression . LBRACKET expression COLON RBRACKET
    (101) block -> . LBRACE statement_list RBRACE
    (102) block -> . LBRACE RBRACE
    (55) comparador -> . EQ
    (56) comparador -> . NEQ
    (57) comparador -> . GT
    (58) comparador -> . LT
    (59) comparador -> . GE
    (60) comparador -> . LE
    (53) operadorLogico -> . AND
    (54) operadorLogico -> . OR
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    DOT             shift and go to state 85
    LBRACKET        shift and go to state 86
    LBRACE          shift and go to state 42
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    GT              shift and go to state 89
    LT              shift and go to state 90
    GE              shift and go to state 91
    LE              shift and go to state 92
    AND             shift and go to state 93
    OR              shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 99

    block                          shift and go to state 229
    comparador                     shift and go to state 111
    operadorLogico                 shift and go to state 83
    operator                       shift and go to state 84

state 211

    (141) expression -> expression LBRACKET expression COLON expression . RBRACKET
    (44) expression -> expression . comparador expression
    (45) expression -> expression . operadorLogico expression
    (113) expression -> expression . operator expression
    (114) expression -> expression . DOT IDENTIFIER
    (140) expression -> expression . LBRACKET expression RBRACKET
    (141) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (142) expression -> expression . LBRACKET COLON expression RBRACKET
    (143) expression -> expression . LBRACKET expression COLON RBRACKET
    (55) comparador -> . EQ
    (56) comparador -> . NEQ
    (57) comparador -> . GT
    (58) comparador -> . LT
    (59) comparador -> . GE
    (60) comparador -> . LE
    (53) operadorLogico -> . AND
    (54) operadorLogico -> . OR
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    RBRACKET        shift and go to state 230
    DOT             shift and go to state 85
    LBRACKET        shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    GT              shift and go to state 89
    LT              shift and go to state 90
    GE              shift and go to state 91
    LE              shift and go to state 92
    AND             shift and go to state 93
    OR              shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 99

    comparador                     shift and go to state 111
    operadorLogico                 shift and go to state 83
    operator                       shift and go to state 84

state 212

    (143) expression -> expression LBRACKET expression COLON RBRACKET .

    DOT             reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    LBRACKET        reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    EQ              reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    NEQ             reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    GT              reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    LT              reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    GE              reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    LE              reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    AND             reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    OR              reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    PLUS            reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    MINUS           reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    TIMES           reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    DIVIDE          reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    MOD             reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    LBRACE          reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    IDENTIFIER      reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    VAR             reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    TYPE            reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    FOR             reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    PACKAGE         reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    IMPORT          reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    SWITCH          reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    IF              reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    FUNC            reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    $end            reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    RBRACE          reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    CASE            reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    DEFAULT         reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    RETURN          reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    COMMA           reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    RPAREN          reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    SEMICOLON       reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    RBRACKET        reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)
    COLON           reduce using rule 143 (expression -> expression LBRACKET expression COLON RBRACKET .)


state 213

    (142) expression -> expression LBRACKET COLON expression RBRACKET .

    DOT             reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    LBRACKET        reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    EQ              reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    NEQ             reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    GT              reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    LT              reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    GE              reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    LE              reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    AND             reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    OR              reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    PLUS            reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    MINUS           reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    TIMES           reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    DIVIDE          reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    MOD             reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    LBRACE          reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    IDENTIFIER      reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    VAR             reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    TYPE            reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    FOR             reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    PACKAGE         reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    IMPORT          reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    SWITCH          reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    IF              reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    FUNC            reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    $end            reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    RBRACE          reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    CASE            reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    DEFAULT         reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    RETURN          reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    COMMA           reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    RPAREN          reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    SEMICOLON       reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    RBRACKET        reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)
    COLON           reduce using rule 142 (expression -> expression LBRACKET COLON expression RBRACKET .)


state 214

    (43) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 231


state 215

    (137) slice_literal -> LBRACKET RBRACKET type_name LBRACE elements . RBRACE
    (138) elements -> elements . COMMA expression

    RBRACE          shift and go to state 232
    COMMA           shift and go to state 233


state 216

    (139) elements -> expression .
    (44) expression -> expression . comparador expression
    (45) expression -> expression . operadorLogico expression
    (113) expression -> expression . operator expression
    (114) expression -> expression . DOT IDENTIFIER
    (140) expression -> expression . LBRACKET expression RBRACKET
    (141) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (142) expression -> expression . LBRACKET COLON expression RBRACKET
    (143) expression -> expression . LBRACKET expression COLON RBRACKET
    (55) comparador -> . EQ
    (56) comparador -> . NEQ
    (57) comparador -> . GT
    (58) comparador -> . LT
    (59) comparador -> . GE
    (60) comparador -> . LE
    (53) operadorLogico -> . AND
    (54) operadorLogico -> . OR
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    RBRACE          reduce using rule 139 (elements -> expression .)
    COMMA           reduce using rule 139 (elements -> expression .)
    DOT             shift and go to state 85
    LBRACKET        shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    GT              shift and go to state 89
    LT              shift and go to state 90
    GE              shift and go to state 91
    LE              shift and go to state 92
    AND             shift and go to state 93
    OR              shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 99

    comparador                     shift and go to state 111
    operadorLogico                 shift and go to state 83
    operator                       shift and go to state 84

state 217

    (65) caseBlock -> CASE expression COLON . statement_list
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (37) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (38) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (39) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN slice_literal
    (40) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (94) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (98) for_statement -> . FOR condicion block
    (99) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (62) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (67) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (68) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (122) if_statement -> . IF condicion block
    (123) if_statement -> . IF condicion block ELSE block
    (124) if_statement -> . IF condicion_compleja block
    (125) if_statement -> . IF condicion_compleja block ELSE block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (76) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (79) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (93) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER DATATYPE
    (135) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (136) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29

    statement_list                 shift and go to state 234
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20

state 218

    (66) caseBlock -> DEFAULT COLON statement_list .
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (37) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (38) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (39) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN slice_literal
    (40) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (94) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (98) for_statement -> . FOR condicion block
    (99) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (62) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (67) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (68) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (122) if_statement -> . IF condicion block
    (123) if_statement -> . IF condicion block ELSE block
    (124) if_statement -> . IF condicion_compleja block
    (125) if_statement -> . IF condicion_compleja block ELSE block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (76) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (79) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (93) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER DATATYPE
    (135) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (136) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    CASE            reduce using rule 66 (caseBlock -> DEFAULT COLON statement_list .)
    DEFAULT         reduce using rule 66 (caseBlock -> DEFAULT COLON statement_list .)
    RBRACE          reduce using rule 66 (caseBlock -> DEFAULT COLON statement_list .)
    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29

    statement                      shift and go to state 30
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20

state 219

    (75) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .

    IDENTIFIER      reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    VAR             reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    TYPE            reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    FOR             reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    PACKAGE         reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    IMPORT          reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    SWITCH          reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    IF              reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    FUNC            reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    $end            reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    RBRACE          reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    CASE            reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    DEFAULT         reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    RETURN          reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)


state 220

    (76) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type . LBRACE statement_list_opt RETURN return_values RBRACE

    LBRACE          shift and go to state 235


state 221

    (84) params -> param COMMA params .

    RPAREN          reduce using rule 84 (params -> param COMMA params .)


state 222

    (131) parameter -> IDENTIFIER FUNC LPAREN parameters . RPAREN DATATYPE
    (127) parameters -> parameters . COMMA parameter

    RPAREN          shift and go to state 236
    COMMA           shift and go to state 165


state 223

    (93) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER . LPAREN arguments RPAREN block

    LPAREN          shift and go to state 237


state 224

    (134) return_type -> LPAREN DATATYPE . COMMA return_type RPAREN

    COMMA           shift and go to state 238


state 225

    (126) function_literal -> FUNC LPAREN parameters RPAREN return_type block .

    IDENTIFIER      reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    VAR             reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    TYPE            reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    FOR             reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    PACKAGE         reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    IMPORT          reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    SWITCH          reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    IF              reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    FUNC            reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    $end            reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    RBRACE          reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    CASE            reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    DEFAULT         reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    RETURN          reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)


state 226

    (79) function -> FUNC MAIN LPAREN params_opt RPAREN block .

    IDENTIFIER      reduce using rule 79 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    VAR             reduce using rule 79 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    TYPE            reduce using rule 79 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    FOR             reduce using rule 79 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    PACKAGE         reduce using rule 79 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    IMPORT          reduce using rule 79 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    SWITCH          reduce using rule 79 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    IF              reduce using rule 79 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    FUNC            reduce using rule 79 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    $end            reduce using rule 79 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    RBRACE          reduce using rule 79 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    CASE            reduce using rule 79 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    DEFAULT         reduce using rule 79 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    RETURN          reduce using rule 79 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)


state 227

    (69) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE . LBRACE mapEntries RBRACE

    LBRACE          shift and go to state 239


state 228

    (33) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .

    IDENTIFIER      reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    VAR             reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    TYPE            reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    FOR             reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    PACKAGE         reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    IMPORT          reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    SWITCH          reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    IF              reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    FUNC            reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    $end            reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    RBRACE          reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    CASE            reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    DEFAULT         reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    RETURN          reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)


state 229

    (94) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .

    IDENTIFIER      reduce using rule 94 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    VAR             reduce using rule 94 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    TYPE            reduce using rule 94 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    FOR             reduce using rule 94 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    PACKAGE         reduce using rule 94 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    IMPORT          reduce using rule 94 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    SWITCH          reduce using rule 94 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    IF              reduce using rule 94 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    FUNC            reduce using rule 94 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    $end            reduce using rule 94 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    RBRACE          reduce using rule 94 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    CASE            reduce using rule 94 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    DEFAULT         reduce using rule 94 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    RETURN          reduce using rule 94 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)


state 230

    (141) expression -> expression LBRACKET expression COLON expression RBRACKET .

    DOT             reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    LBRACKET        reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    EQ              reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    NEQ             reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    GT              reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    LT              reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    GE              reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    LE              reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    AND             reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    OR              reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    PLUS            reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    MINUS           reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    TIMES           reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    DIVIDE          reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    MOD             reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    LBRACE          reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    IDENTIFIER      reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    VAR             reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    TYPE            reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    FOR             reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    PACKAGE         reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    IMPORT          reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    SWITCH          reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    IF              reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    FUNC            reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    $end            reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    RBRACE          reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    CASE            reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    DEFAULT         reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    RETURN          reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    RPAREN          reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    SEMICOLON       reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    RBRACKET        reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    COLON           reduce using rule 141 (expression -> expression LBRACKET expression COLON expression RBRACKET .)


state 231

    (43) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .

    DOT             reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LBRACKET        reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    EQ              reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    NEQ             reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    GT              reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LT              reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    GE              reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LE              reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    AND             reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    OR              reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PLUS            reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    MINUS           reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TIMES           reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DIVIDE          reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    MOD             reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LBRACE          reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IDENTIFIER      reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    VAR             reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TYPE            reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FOR             reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PACKAGE         reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IMPORT          reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SWITCH          reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IF              reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FUNC            reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    $end            reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    CASE            reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DEFAULT         reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RETURN          reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RPAREN          reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SEMICOLON       reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACKET        reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    COLON           reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)


state 232

    (137) slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .

    DOT             reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    LBRACKET        reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    EQ              reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    NEQ             reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    GT              reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    LT              reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    GE              reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    LE              reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    AND             reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    OR              reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    PLUS            reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    MINUS           reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    TIMES           reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    DIVIDE          reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    MOD             reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    LBRACE          reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    IDENTIFIER      reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    VAR             reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    TYPE            reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    FOR             reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    PACKAGE         reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    IMPORT          reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    SWITCH          reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    IF              reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    FUNC            reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    $end            reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    RBRACE          reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    CASE            reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    DEFAULT         reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    RETURN          reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    COMMA           reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    RPAREN          reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    SEMICOLON       reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    RBRACKET        reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    COLON           reduce using rule 137 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)


state 233

    (138) elements -> elements COMMA . expression
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    expression                     shift and go to state 240
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 234

    (65) caseBlock -> CASE expression COLON statement_list .
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (37) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (38) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (39) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN slice_literal
    (40) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (94) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (98) for_statement -> . FOR condicion block
    (99) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (62) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (67) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (68) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (122) if_statement -> . IF condicion block
    (123) if_statement -> . IF condicion block ELSE block
    (124) if_statement -> . IF condicion_compleja block
    (125) if_statement -> . IF condicion_compleja block ELSE block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (76) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (79) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (93) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER DATATYPE
    (135) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (136) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    CASE            reduce using rule 65 (caseBlock -> CASE expression COLON statement_list .)
    DEFAULT         reduce using rule 65 (caseBlock -> CASE expression COLON statement_list .)
    RBRACE          reduce using rule 65 (caseBlock -> CASE expression COLON statement_list .)
    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29

    statement                      shift and go to state 30
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20

state 235

    (76) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE . statement_list_opt RETURN return_values RBRACE
    (2) statement_list_opt -> . statement_list
    (3) statement_list_opt -> .
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (37) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (38) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (39) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN slice_literal
    (40) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (94) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (98) for_statement -> . FOR condicion block
    (99) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (62) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (67) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (68) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (122) if_statement -> . IF condicion block
    (123) if_statement -> . IF condicion block ELSE block
    (124) if_statement -> . IF condicion_compleja block
    (125) if_statement -> . IF condicion_compleja block ELSE block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (76) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (79) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (93) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER DATATYPE
    (135) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (136) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    RETURN          reduce using rule 3 (statement_list_opt -> .)
    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29

    statement_list_opt             shift and go to state 241
    statement_list                 shift and go to state 242
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20

state 236

    (131) parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN . DATATYPE

    DATATYPE        shift and go to state 243


state 237

    (93) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN . arguments RPAREN block
    (29) arguments -> . expression
    (30) arguments -> . arguments COMMA expression
    (31) arguments -> .
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    RPAREN          reduce using rule 31 (arguments -> .)
    COMMA           reduce using rule 31 (arguments -> .)
    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    arguments                      shift and go to state 244
    expression                     shift and go to state 245
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 238

    (134) return_type -> LPAREN DATATYPE COMMA . return_type RPAREN
    (132) return_type -> . DATATYPE
    (133) return_type -> . empty
    (134) return_type -> . LPAREN DATATYPE COMMA return_type RPAREN
    (61) empty -> .

    DATATYPE        shift and go to state 198
    LPAREN          shift and go to state 196
    RPAREN          reduce using rule 61 (empty -> .)

    return_type                    shift and go to state 246
    empty                          shift and go to state 199

state 239

    (69) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE . mapEntries RBRACE
    (70) mapEntries -> . mapEntry
    (71) mapEntries -> . mapEntry COMMA mapEntries
    (72) mapEntry -> . value_key COLON value_key
    (73) value_key -> . expression
    (74) value_key -> . STRING
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    STRING          shift and go to state 251
    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    mapEntries                     shift and go to state 247
    mapEntry                       shift and go to state 248
    value_key                      shift and go to state 249
    expression                     shift and go to state 250
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 240

    (138) elements -> elements COMMA expression .
    (44) expression -> expression . comparador expression
    (45) expression -> expression . operadorLogico expression
    (113) expression -> expression . operator expression
    (114) expression -> expression . DOT IDENTIFIER
    (140) expression -> expression . LBRACKET expression RBRACKET
    (141) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (142) expression -> expression . LBRACKET COLON expression RBRACKET
    (143) expression -> expression . LBRACKET expression COLON RBRACKET
    (55) comparador -> . EQ
    (56) comparador -> . NEQ
    (57) comparador -> . GT
    (58) comparador -> . LT
    (59) comparador -> . GE
    (60) comparador -> . LE
    (53) operadorLogico -> . AND
    (54) operadorLogico -> . OR
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    RBRACE          reduce using rule 138 (elements -> elements COMMA expression .)
    COMMA           reduce using rule 138 (elements -> elements COMMA expression .)
    DOT             shift and go to state 85
    LBRACKET        shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    GT              shift and go to state 89
    LT              shift and go to state 90
    GE              shift and go to state 91
    LE              shift and go to state 92
    AND             shift and go to state 93
    OR              shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 99

    comparador                     shift and go to state 111
    operadorLogico                 shift and go to state 83
    operator                       shift and go to state 84

state 241

    (76) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt . RETURN return_values RBRACE

    RETURN          shift and go to state 252


state 242

    (2) statement_list_opt -> statement_list .
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (37) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (38) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (39) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN slice_literal
    (40) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (94) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (98) for_statement -> . FOR condicion block
    (99) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (62) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (67) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (68) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (122) if_statement -> . IF condicion block
    (123) if_statement -> . IF condicion block ELSE block
    (124) if_statement -> . IF condicion_compleja block
    (125) if_statement -> . IF condicion_compleja block ELSE block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (76) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (79) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (93) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER DATATYPE
    (135) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (136) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    RETURN          reduce using rule 2 (statement_list_opt -> statement_list .)
    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29

    statement                      shift and go to state 30
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20

state 243

    (131) parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE .

    RPAREN          reduce using rule 131 (parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE .)
    COMMA           reduce using rule 131 (parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE .)


state 244

    (93) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments . RPAREN block
    (30) arguments -> arguments . COMMA expression

    RPAREN          shift and go to state 253
    COMMA           shift and go to state 254


state 245

    (29) arguments -> expression .
    (44) expression -> expression . comparador expression
    (45) expression -> expression . operadorLogico expression
    (113) expression -> expression . operator expression
    (114) expression -> expression . DOT IDENTIFIER
    (140) expression -> expression . LBRACKET expression RBRACKET
    (141) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (142) expression -> expression . LBRACKET COLON expression RBRACKET
    (143) expression -> expression . LBRACKET expression COLON RBRACKET
    (55) comparador -> . EQ
    (56) comparador -> . NEQ
    (57) comparador -> . GT
    (58) comparador -> . LT
    (59) comparador -> . GE
    (60) comparador -> . LE
    (53) operadorLogico -> . AND
    (54) operadorLogico -> . OR
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    RPAREN          reduce using rule 29 (arguments -> expression .)
    COMMA           reduce using rule 29 (arguments -> expression .)
    DOT             shift and go to state 85
    LBRACKET        shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    GT              shift and go to state 89
    LT              shift and go to state 90
    GE              shift and go to state 91
    LE              shift and go to state 92
    AND             shift and go to state 93
    OR              shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 99

    comparador                     shift and go to state 111
    operadorLogico                 shift and go to state 83
    operator                       shift and go to state 84

state 246

    (134) return_type -> LPAREN DATATYPE COMMA return_type . RPAREN

    RPAREN          shift and go to state 255


state 247

    (69) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries . RBRACE

    RBRACE          shift and go to state 256


state 248

    (70) mapEntries -> mapEntry .
    (71) mapEntries -> mapEntry . COMMA mapEntries

    RBRACE          reduce using rule 70 (mapEntries -> mapEntry .)
    COMMA           shift and go to state 257


state 249

    (72) mapEntry -> value_key . COLON value_key

    COLON           shift and go to state 258


state 250

    (73) value_key -> expression .
    (44) expression -> expression . comparador expression
    (45) expression -> expression . operadorLogico expression
    (113) expression -> expression . operator expression
    (114) expression -> expression . DOT IDENTIFIER
    (140) expression -> expression . LBRACKET expression RBRACKET
    (141) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (142) expression -> expression . LBRACKET COLON expression RBRACKET
    (143) expression -> expression . LBRACKET expression COLON RBRACKET
    (55) comparador -> . EQ
    (56) comparador -> . NEQ
    (57) comparador -> . GT
    (58) comparador -> . LT
    (59) comparador -> . GE
    (60) comparador -> . LE
    (53) operadorLogico -> . AND
    (54) operadorLogico -> . OR
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    COLON           reduce using rule 73 (value_key -> expression .)
    COMMA           reduce using rule 73 (value_key -> expression .)
    RBRACE          reduce using rule 73 (value_key -> expression .)
    DOT             shift and go to state 85
    LBRACKET        shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    GT              shift and go to state 89
    LT              shift and go to state 90
    GE              shift and go to state 91
    LE              shift and go to state 92
    AND             shift and go to state 93
    OR              shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 99

    comparador                     shift and go to state 111
    operadorLogico                 shift and go to state 83
    operator                       shift and go to state 84

state 251

    (74) value_key -> STRING .
    (106) expression -> STRING .

  ! reduce/reduce conflict for COLON resolved using rule 74 (value_key -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 74 (value_key -> STRING .)
  ! reduce/reduce conflict for RBRACE resolved using rule 74 (value_key -> STRING .)
    COLON           reduce using rule 74 (value_key -> STRING .)
    COMMA           reduce using rule 74 (value_key -> STRING .)
    RBRACE          reduce using rule 74 (value_key -> STRING .)
    DOT             reduce using rule 106 (expression -> STRING .)
    LBRACKET        reduce using rule 106 (expression -> STRING .)
    EQ              reduce using rule 106 (expression -> STRING .)
    NEQ             reduce using rule 106 (expression -> STRING .)
    GT              reduce using rule 106 (expression -> STRING .)
    LT              reduce using rule 106 (expression -> STRING .)
    GE              reduce using rule 106 (expression -> STRING .)
    LE              reduce using rule 106 (expression -> STRING .)
    AND             reduce using rule 106 (expression -> STRING .)
    OR              reduce using rule 106 (expression -> STRING .)
    PLUS            reduce using rule 106 (expression -> STRING .)
    MINUS           reduce using rule 106 (expression -> STRING .)
    TIMES           reduce using rule 106 (expression -> STRING .)
    DIVIDE          reduce using rule 106 (expression -> STRING .)
    MOD             reduce using rule 106 (expression -> STRING .)

  ! COLON           [ reduce using rule 106 (expression -> STRING .) ]
  ! COMMA           [ reduce using rule 106 (expression -> STRING .) ]
  ! RBRACE          [ reduce using rule 106 (expression -> STRING .) ]


state 252

    (76) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN . return_values RBRACE
    (77) return_values -> . expression
    (78) return_values -> . return_values COMMA expression
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    return_values                  shift and go to state 259
    expression                     shift and go to state 260
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 253

    (93) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN . block
    (101) block -> . LBRACE statement_list RBRACE
    (102) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 42

    block                          shift and go to state 261

state 254

    (30) arguments -> arguments COMMA . expression
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    expression                     shift and go to state 262
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 255

    (134) return_type -> LPAREN DATATYPE COMMA return_type RPAREN .

    LBRACE          reduce using rule 134 (return_type -> LPAREN DATATYPE COMMA return_type RPAREN .)
    RPAREN          reduce using rule 134 (return_type -> LPAREN DATATYPE COMMA return_type RPAREN .)


state 256

    (69) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .

    IDENTIFIER      reduce using rule 69 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    VAR             reduce using rule 69 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    TYPE            reduce using rule 69 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    FOR             reduce using rule 69 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    PACKAGE         reduce using rule 69 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    IMPORT          reduce using rule 69 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    SWITCH          reduce using rule 69 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    IF              reduce using rule 69 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    FUNC            reduce using rule 69 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    $end            reduce using rule 69 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    RBRACE          reduce using rule 69 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    CASE            reduce using rule 69 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    DEFAULT         reduce using rule 69 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    RETURN          reduce using rule 69 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)


state 257

    (71) mapEntries -> mapEntry COMMA . mapEntries
    (70) mapEntries -> . mapEntry
    (71) mapEntries -> . mapEntry COMMA mapEntries
    (72) mapEntry -> . value_key COLON value_key
    (73) value_key -> . expression
    (74) value_key -> . STRING
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    STRING          shift and go to state 251
    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    mapEntry                       shift and go to state 248
    mapEntries                     shift and go to state 263
    value_key                      shift and go to state 249
    expression                     shift and go to state 250
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 258

    (72) mapEntry -> value_key COLON . value_key
    (73) value_key -> . expression
    (74) value_key -> . STRING
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    STRING          shift and go to state 251
    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    value_key                      shift and go to state 264
    expression                     shift and go to state 250
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 259

    (76) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values . RBRACE
    (78) return_values -> return_values . COMMA expression

    RBRACE          shift and go to state 265
    COMMA           shift and go to state 266


state 260

    (77) return_values -> expression .
    (44) expression -> expression . comparador expression
    (45) expression -> expression . operadorLogico expression
    (113) expression -> expression . operator expression
    (114) expression -> expression . DOT IDENTIFIER
    (140) expression -> expression . LBRACKET expression RBRACKET
    (141) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (142) expression -> expression . LBRACKET COLON expression RBRACKET
    (143) expression -> expression . LBRACKET expression COLON RBRACKET
    (55) comparador -> . EQ
    (56) comparador -> . NEQ
    (57) comparador -> . GT
    (58) comparador -> . LT
    (59) comparador -> . GE
    (60) comparador -> . LE
    (53) operadorLogico -> . AND
    (54) operadorLogico -> . OR
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    RBRACE          reduce using rule 77 (return_values -> expression .)
    COMMA           reduce using rule 77 (return_values -> expression .)
    DOT             shift and go to state 85
    LBRACKET        shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    GT              shift and go to state 89
    LT              shift and go to state 90
    GE              shift and go to state 91
    LE              shift and go to state 92
    AND             shift and go to state 93
    OR              shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 99

    comparador                     shift and go to state 111
    operadorLogico                 shift and go to state 83
    operator                       shift and go to state 84

state 261

    (93) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .

    IDENTIFIER      reduce using rule 93 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    VAR             reduce using rule 93 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    TYPE            reduce using rule 93 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    FOR             reduce using rule 93 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    PACKAGE         reduce using rule 93 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    IMPORT          reduce using rule 93 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    SWITCH          reduce using rule 93 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    IF              reduce using rule 93 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    FUNC            reduce using rule 93 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    $end            reduce using rule 93 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    RBRACE          reduce using rule 93 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    CASE            reduce using rule 93 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    DEFAULT         reduce using rule 93 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    RETURN          reduce using rule 93 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)


state 262

    (30) arguments -> arguments COMMA expression .
    (44) expression -> expression . comparador expression
    (45) expression -> expression . operadorLogico expression
    (113) expression -> expression . operator expression
    (114) expression -> expression . DOT IDENTIFIER
    (140) expression -> expression . LBRACKET expression RBRACKET
    (141) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (142) expression -> expression . LBRACKET COLON expression RBRACKET
    (143) expression -> expression . LBRACKET expression COLON RBRACKET
    (55) comparador -> . EQ
    (56) comparador -> . NEQ
    (57) comparador -> . GT
    (58) comparador -> . LT
    (59) comparador -> . GE
    (60) comparador -> . LE
    (53) operadorLogico -> . AND
    (54) operadorLogico -> . OR
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    RPAREN          reduce using rule 30 (arguments -> arguments COMMA expression .)
    COMMA           reduce using rule 30 (arguments -> arguments COMMA expression .)
    DOT             shift and go to state 85
    LBRACKET        shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    GT              shift and go to state 89
    LT              shift and go to state 90
    GE              shift and go to state 91
    LE              shift and go to state 92
    AND             shift and go to state 93
    OR              shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 99

    comparador                     shift and go to state 111
    operadorLogico                 shift and go to state 83
    operator                       shift and go to state 84

state 263

    (71) mapEntries -> mapEntry COMMA mapEntries .

    RBRACE          reduce using rule 71 (mapEntries -> mapEntry COMMA mapEntries .)


state 264

    (72) mapEntry -> value_key COLON value_key .

    COMMA           reduce using rule 72 (mapEntry -> value_key COLON value_key .)
    RBRACE          reduce using rule 72 (mapEntry -> value_key COLON value_key .)


state 265

    (76) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .

    IDENTIFIER      reduce using rule 76 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    VAR             reduce using rule 76 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    TYPE            reduce using rule 76 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    FOR             reduce using rule 76 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    PACKAGE         reduce using rule 76 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    IMPORT          reduce using rule 76 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    SWITCH          reduce using rule 76 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    IF              reduce using rule 76 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    FUNC            reduce using rule 76 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    $end            reduce using rule 76 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    RBRACE          reduce using rule 76 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    CASE            reduce using rule 76 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    DEFAULT         reduce using rule 76 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    RETURN          reduce using rule 76 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)


state 266

    (78) return_values -> return_values COMMA . expression
    (44) expression -> . expression comparador expression
    (45) expression -> . expression operadorLogico expression
    (103) expression -> . NUMBER
    (104) expression -> . IDENTIFIER
    (105) expression -> . RUNE
    (106) expression -> . STRING
    (107) expression -> . RAW_STRING
    (108) expression -> . TRUE
    (109) expression -> . FALSE
    (110) expression -> . NIL
    (111) expression -> . slice_literal
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operator expression
    (114) expression -> . expression DOT IDENTIFIER
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (140) expression -> . expression LBRACKET expression RBRACKET
    (141) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (142) expression -> . expression LBRACKET COLON expression RBRACKET
    (143) expression -> . expression LBRACKET expression COLON RBRACKET
    (137) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 61
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    expression                     shift and go to state 267
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52

state 267

    (78) return_values -> return_values COMMA expression .
    (44) expression -> expression . comparador expression
    (45) expression -> expression . operadorLogico expression
    (113) expression -> expression . operator expression
    (114) expression -> expression . DOT IDENTIFIER
    (140) expression -> expression . LBRACKET expression RBRACKET
    (141) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (142) expression -> expression . LBRACKET COLON expression RBRACKET
    (143) expression -> expression . LBRACKET expression COLON RBRACKET
    (55) comparador -> . EQ
    (56) comparador -> . NEQ
    (57) comparador -> . GT
    (58) comparador -> . LT
    (59) comparador -> . GE
    (60) comparador -> . LE
    (53) operadorLogico -> . AND
    (54) operadorLogico -> . OR
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    RBRACE          reduce using rule 78 (return_values -> return_values COMMA expression .)
    COMMA           reduce using rule 78 (return_values -> return_values COMMA expression .)
    DOT             shift and go to state 85
    LBRACKET        shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    GT              shift and go to state 89
    LT              shift and go to state 90
    GE              shift and go to state 91
    LE              shift and go to state 92
    AND             shift and go to state 93
    OR              shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 99

    comparador                     shift and go to state 111
    operadorLogico                 shift and go to state 83
    operator                       shift and go to state 84
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOT in state 43 resolved as shift
WARNING: shift/reduce conflict for DOT in state 61 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 75 resolved as shift
WARNING: shift/reduce conflict for DOT in state 131 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 131 resolved as shift
WARNING: shift/reduce conflict for EQ in state 131 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 131 resolved as shift
WARNING: shift/reduce conflict for GT in state 131 resolved as shift
WARNING: shift/reduce conflict for LT in state 131 resolved as shift
WARNING: shift/reduce conflict for GE in state 131 resolved as shift
WARNING: shift/reduce conflict for LE in state 131 resolved as shift
WARNING: shift/reduce conflict for AND in state 131 resolved as shift
WARNING: shift/reduce conflict for OR in state 131 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 131 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 131 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 131 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 131 resolved as shift
WARNING: shift/reduce conflict for MOD in state 131 resolved as shift
WARNING: shift/reduce conflict for DOT in state 132 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 132 resolved as shift
WARNING: shift/reduce conflict for EQ in state 132 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 132 resolved as shift
WARNING: shift/reduce conflict for GT in state 132 resolved as shift
WARNING: shift/reduce conflict for LT in state 132 resolved as shift
WARNING: shift/reduce conflict for GE in state 132 resolved as shift
WARNING: shift/reduce conflict for LE in state 132 resolved as shift
WARNING: shift/reduce conflict for AND in state 132 resolved as shift
WARNING: shift/reduce conflict for OR in state 132 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 132 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 132 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 132 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 132 resolved as shift
WARNING: shift/reduce conflict for MOD in state 132 resolved as shift
WARNING: shift/reduce conflict for DOT in state 133 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 133 resolved as shift
WARNING: shift/reduce conflict for EQ in state 133 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 133 resolved as shift
WARNING: shift/reduce conflict for GT in state 133 resolved as shift
WARNING: shift/reduce conflict for LT in state 133 resolved as shift
WARNING: shift/reduce conflict for GE in state 133 resolved as shift
WARNING: shift/reduce conflict for LE in state 133 resolved as shift
WARNING: shift/reduce conflict for AND in state 133 resolved as shift
WARNING: shift/reduce conflict for OR in state 133 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 133 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 133 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 133 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 133 resolved as shift
WARNING: shift/reduce conflict for MOD in state 133 resolved as shift
WARNING: shift/reduce conflict for DOT in state 152 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 152 resolved as shift
WARNING: shift/reduce conflict for EQ in state 152 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 152 resolved as shift
WARNING: shift/reduce conflict for GT in state 152 resolved as shift
WARNING: shift/reduce conflict for LT in state 152 resolved as shift
WARNING: shift/reduce conflict for GE in state 152 resolved as shift
WARNING: shift/reduce conflict for LE in state 152 resolved as shift
WARNING: shift/reduce conflict for AND in state 152 resolved as shift
WARNING: shift/reduce conflict for OR in state 152 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 152 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 152 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 152 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 152 resolved as shift
WARNING: shift/reduce conflict for MOD in state 152 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 192 resolved as shift
WARNING: reduce/reduce conflict in state 68 resolved using rule (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal)
WARNING: rejected rule (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal) in state 68
WARNING: reduce/reduce conflict in state 68 resolved using rule (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal)
WARNING: rejected rule (expression -> slice_literal) in state 68
WARNING: reduce/reduce conflict in state 131 resolved using rule (expression -> expression comparador expression)
WARNING: rejected rule (condicion -> expression comparador expression) in state 131
WARNING: reduce/reduce conflict in state 173 resolved using rule (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion)
WARNING: rejected rule (expression -> llamarFuncion) in state 173
WARNING: reduce/reduce conflict in state 174 resolved using rule (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal)
WARNING: rejected rule (expression -> slice_literal) in state 174
WARNING: reduce/reduce conflict in state 205 resolved using rule (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN)
WARNING: rejected rule (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN) in state 205
WARNING: reduce/reduce conflict in state 251 resolved using rule (value_key -> STRING)
WARNING: rejected rule (expression -> STRING) in state 251
WARNING: Rule (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal) is never reduced
WARNING: Rule (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN) is never reduced
