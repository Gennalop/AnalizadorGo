Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CONTINUE
    DEFER
    FALLTHROUGH
    GO
    INTERFACE
    SELECT
    STRING_UNCLOSED

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list_opt -> statement_list
Rule 3     statement_list_opt -> <empty>
Rule 4     statement_list -> statement
Rule 5     statement_list -> statement_list statement
Rule 6     statement -> assignment
Rule 7     statement -> input
Rule 8     statement -> llamarFuncion
Rule 9     statement -> print_statement
Rule 10    statement -> struct_definition
Rule 11    statement -> for_statement
Rule 12    statement -> package
Rule 13    statement -> import
Rule 14    statement -> switch
Rule 15    statement -> map
Rule 16    statement -> if_statement
Rule 17    statement -> function
Rule 18    statement -> method_definition
Rule 19    statement -> function_literal
Rule 20    statement -> var_declaration
Rule 21    statement -> slice_declaration
Rule 22    statement -> declare_assign
Rule 23    package -> PACKAGE MAIN
Rule 24    package -> PACKAGE IDENTIFIER
Rule 25    import -> IMPORT STRING
Rule 26    import -> IMPORT LPAREN import_list RPAREN
Rule 27    import_list -> STRING
Rule 28    import_list -> import_list STRING
Rule 29    arguments -> expression
Rule 30    arguments -> arguments COMMA expression
Rule 31    arguments -> <empty>
Rule 32    const_declaration -> CONST IDENTIFIER ASSIGN expression
Rule 33    input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
Rule 34    var_declaration -> VAR IDENTIFIER type_name
Rule 35    assignment -> IDENTIFIER DECLARE_ASSIGN expression
Rule 36    assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal
Rule 37    assignment -> VAR IDENTIFIER type_name ASSIGN expression
Rule 38    assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion
Rule 39    assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal
Rule 40    assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal
Rule 41    assignment -> IDENTIFIER ASSIGN expression
Rule 42    llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN
Rule 43    llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
Rule 44    llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
Rule 45    expression -> expression comparador expression
Rule 46    expression -> expression operadorLogico expression
Rule 47    argument_list -> expression
Rule 48    argument_list -> argument_list COMMA expression
Rule 49    argument_list_opt -> argument_list
Rule 50    argument_list_opt -> <empty>
Rule 51    condicion -> expression comparador expression
Rule 52    condicion_compleja -> condicion operadorLogico condicion
Rule 53    condicion_compleja -> condicion operadorLogico condicion_compleja
Rule 54    operadorLogico -> AND
Rule 55    operadorLogico -> OR
Rule 56    comparador -> EQ
Rule 57    comparador -> NEQ
Rule 58    comparador -> GT
Rule 59    comparador -> LT
Rule 60    comparador -> GE
Rule 61    comparador -> LE
Rule 62    empty -> <empty>
Rule 63    switch -> SWITCH expression LBRACE caseBlocks RBRACE
Rule 64    caseBlocks -> caseBlock
Rule 65    caseBlocks -> caseBlock caseBlocks
Rule 66    caseBlock -> CASE expression COLON statement_list
Rule 67    caseBlock -> DEFAULT COLON statement_list
Rule 68    map -> IDENTIFIER DECLARE_ASSIGN mapLiteral
Rule 69    map -> VAR IDENTIFIER ASSIGN mapLiteral
Rule 70    mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE
Rule 71    mapEntries -> mapEntry
Rule 72    mapEntries -> mapEntry COMMA mapEntries
Rule 73    mapEntry -> value_key COLON value_key
Rule 74    value_key -> expression
Rule 75    value_key -> STRING
Rule 76    function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block
Rule 77    function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
Rule 78    return_values -> expression
Rule 79    return_values -> return_values COMMA expression
Rule 80    function -> FUNC MAIN LPAREN params_opt RPAREN block
Rule 81    return_statement -> RETURN expression
Rule 82    params_opt -> params
Rule 83    params_opt -> <empty>
Rule 84    params -> param
Rule 85    params -> param COMMA params
Rule 86    param -> IDENTIFIER type_name
Rule 87    param -> identifier_list type_name
Rule 88    print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
Rule 89    struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
Rule 90    struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE
Rule 91    struct_field_assignments -> struct_field_assignment
Rule 92    struct_field_assignments -> struct_field_assignments COMMA struct_field_assignment
Rule 93    struct_field_assignment -> IDENTIFIER COLON expression
Rule 94    struct_field -> IDENTIFIER type_name
Rule 95    struct_fields -> struct_field
Rule 96    struct_fields -> struct_fields struct_field
Rule 97    method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
Rule 98    for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
Rule 99    shortAssignment -> identifier_list DECLARE_ASSIGN expression
Rule 100   for_statement -> FOR condicion block
Rule 101   for_statement -> FOR block
Rule 102   for_range_clause -> shortAssignment RANGE expression
Rule 103   block -> LBRACE statement_list RBRACE
Rule 104   block -> LBRACE RBRACE
Rule 105   expression -> NUMBER
Rule 106   expression -> IDENTIFIER
Rule 107   expression -> RUNE
Rule 108   expression -> STRING
Rule 109   expression -> RAW_STRING
Rule 110   expression -> TRUE
Rule 111   expression -> FALSE
Rule 112   expression -> NIL
Rule 113   expression -> slice_literal
Rule 114   expression -> llamarFuncion
Rule 115   expression -> expression operator expression
Rule 116   expression -> expression DOT IDENTIFIER
Rule 117   operator -> PLUS
Rule 118   operator -> MINUS
Rule 119   operator -> TIMES
Rule 120   operator -> DIVIDE
Rule 121   operator -> MOD
Rule 122   expression -> MINUS expression
Rule 123   expression -> LPAREN expression RPAREN
Rule 124   if_statement -> IF condicion block
Rule 125   if_statement -> IF condicion block ELSE block
Rule 126   if_statement -> IF condicion_compleja block
Rule 127   if_statement -> IF condicion_compleja block ELSE block
Rule 128   function_literal -> FUNC LPAREN parameters RPAREN return_type block
Rule 129   parameters -> parameters COMMA parameter
Rule 130   parameters -> parameter
Rule 131   parameters -> empty
Rule 132   parameter -> IDENTIFIER type_name
Rule 133   parameter -> identifier_list type_name
Rule 134   identifier_list -> IDENTIFIER
Rule 135   identifier_list -> IDENTIFIER COMMA identifier_list
Rule 136   type_name -> DATATYPE
Rule 137   type_name -> IDENTIFIER
Rule 138   type_name -> LBRACKET RBRACKET type_name
Rule 139   type_name -> FUNC LPAREN parameters RPAREN return_type
Rule 140   return_type -> type_name
Rule 141   return_type -> empty
Rule 142   return_type -> LPAREN type_name COMMA return_type RPAREN
Rule 143   expression -> function_literal
Rule 144   slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name
Rule 145   declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal
Rule 146   slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE
Rule 147   elements -> elements COMMA expression
Rule 148   elements -> expression
Rule 149   expression -> expression LBRACKET expression RBRACKET
Rule 150   expression -> expression LBRACKET expression COLON expression RBRACKET
Rule 151   expression -> expression LBRACKET COLON expression RBRACKET
Rule 152   expression -> expression LBRACKET expression COLON RBRACKET

Terminals, with rules where they appear

AMPERSAND            : 33
AND                  : 54
ASSIGN               : 32 37 38 40 41 69
BREAK                : 
CASE                 : 66
COLON                : 66 67 73 93 150 151 152
COMMA                : 30 43 48 72 79 85 92 129 135 142 147
CONST                : 32
CONTINUE             : 
DATATYPE             : 136
DECLARE_ASSIGN       : 35 36 39 68 99 145
DEFAULT              : 67
DEFER                : 
DIVIDE               : 120
DOT                  : 33 44 88 116
ELSE                 : 125 127
EQ                   : 56
FALLTHROUGH          : 
FALSE                : 111
FOR                  : 98 100 101
FUNC                 : 76 77 80 97 128 139
GE                   : 60
GO                   : 
GT                   : 58
IDENTIFIER           : 24 32 33 33 33 34 35 36 37 38 39 40 41 42 43 44 44 68 69 76 77 86 88 88 89 90 93 94 97 97 97 106 116 132 134 135 137 144 145
IF                   : 124 125 126 127
IMPORT               : 25 26
INTERFACE            : 
LBRACE               : 63 70 77 89 90 103 104 146
LBRACKET             : 70 138 144 146 149 150 151 152
LE                   : 61
LPAREN               : 26 33 42 43 44 76 77 80 88 97 97 123 128 139 142
LT                   : 59
MAIN                 : 23 80
MAP                  : 70
MINUS                : 118 122
MOD                  : 121
NEQ                  : 57
NIL                  : 112
NUMBER               : 105
OR                   : 55
PACKAGE              : 23 24
PLUS                 : 117
RANGE                : 102
RAW_STRING           : 109
RBRACE               : 63 70 77 89 90 103 104 146
RBRACKET             : 70 138 144 146 149 150 151 152
RETURN               : 77 81
RPAREN               : 26 33 42 43 44 76 77 80 88 97 97 123 128 139 142
RUNE                 : 107
SELECT               : 
SEMICOLON            : 98 98
STRING               : 25 27 28 75 108
STRING_UNCLOSED      : 
STRUCT               : 89
SWITCH               : 63
TIMES                : 119
TRUE                 : 110
TYPE                 : 89
VAR                  : 34 37 38 40 69 144
error                : 

Nonterminals, with rules where they appear

argument_list        : 48 49
argument_list_opt    : 42 43 44 88
arguments            : 30 97
assignment           : 6
block                : 76 80 97 98 100 101 124 125 125 126 127 127 128
caseBlock            : 64 65
caseBlocks           : 63 65
comparador           : 45 51
condicion            : 52 52 53 98 100 124 125
condicion_compleja   : 53 126 127
const_declaration    : 
declare_assign       : 22
elements             : 146 147
empty                : 131 141
expression           : 29 30 32 35 37 41 43 45 45 46 46 47 48 51 51 63 66 74 78 79 81 93 98 99 102 115 115 116 122 123 147 148 149 149 150 150 150 151 151 152 152
for_range_clause     : 
for_statement        : 11
function             : 17
function_literal     : 19 143
identifier_list      : 87 99 133 135
if_statement         : 16
import               : 13
import_list          : 26 28
input                : 7
llamarFuncion        : 8 38 114
map                  : 15
mapEntries           : 70 72
mapEntry             : 71 72
mapLiteral           : 68 69
method_definition    : 18
operadorLogico       : 46 52 53
operator             : 115
package              : 12
param                : 84 85
parameter            : 129 130
parameters           : 128 129 139
params               : 82 85
params_opt           : 76 77 80
print_statement      : 9
program              : 0
return_statement     : 
return_type          : 77 128 139 142
return_values        : 77 79
shortAssignment      : 98 102
slice_declaration    : 21
slice_literal        : 39 40 113 145
statement            : 4 5
statement_list       : 1 2 5 66 67 103
statement_list_opt   : 77
struct_definition    : 10
struct_field         : 95 96
struct_field_assignment : 91 92
struct_field_assignments : 90 92
struct_fields        : 89 96
struct_literal       : 36
switch               : 14
type_name            : 34 37 38 40 70 70 86 87 94 132 133 138 140 142 144 146
value_key            : 73 73
var_declaration      : 20

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (39) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (40) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (41) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (98) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (100) for_statement -> . FOR condicion block
    (101) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (63) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (68) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (69) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (124) if_statement -> . IF condicion block
    (125) if_statement -> . IF condicion block ELSE block
    (126) if_statement -> . IF condicion_compleja block
    (127) if_statement -> . IF condicion_compleja block ELSE block
    (76) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (77) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (80) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (97) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER type_name
    (144) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (145) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (39) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (40) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (41) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (98) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (100) for_statement -> . FOR condicion block
    (101) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (63) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (68) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (69) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (124) if_statement -> . IF condicion block
    (125) if_statement -> . IF condicion block ELSE block
    (126) if_statement -> . IF condicion_compleja block
    (127) if_statement -> . IF condicion_compleja block ELSE block
    (76) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (77) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (80) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (97) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER type_name
    (144) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (145) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    $end            reduce using rule 1 (program -> statement_list .)
    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29

    statement                      shift and go to state 30
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20

state 3

    (4) statement_list -> statement .

    IDENTIFIER      reduce using rule 4 (statement_list -> statement .)
    VAR             reduce using rule 4 (statement_list -> statement .)
    TYPE            reduce using rule 4 (statement_list -> statement .)
    FOR             reduce using rule 4 (statement_list -> statement .)
    PACKAGE         reduce using rule 4 (statement_list -> statement .)
    IMPORT          reduce using rule 4 (statement_list -> statement .)
    SWITCH          reduce using rule 4 (statement_list -> statement .)
    IF              reduce using rule 4 (statement_list -> statement .)
    FUNC            reduce using rule 4 (statement_list -> statement .)
    $end            reduce using rule 4 (statement_list -> statement .)
    RBRACE          reduce using rule 4 (statement_list -> statement .)
    CASE            reduce using rule 4 (statement_list -> statement .)
    DEFAULT         reduce using rule 4 (statement_list -> statement .)
    RETURN          reduce using rule 4 (statement_list -> statement .)


state 4

    (6) statement -> assignment .

    IDENTIFIER      reduce using rule 6 (statement -> assignment .)
    VAR             reduce using rule 6 (statement -> assignment .)
    TYPE            reduce using rule 6 (statement -> assignment .)
    FOR             reduce using rule 6 (statement -> assignment .)
    PACKAGE         reduce using rule 6 (statement -> assignment .)
    IMPORT          reduce using rule 6 (statement -> assignment .)
    SWITCH          reduce using rule 6 (statement -> assignment .)
    IF              reduce using rule 6 (statement -> assignment .)
    FUNC            reduce using rule 6 (statement -> assignment .)
    $end            reduce using rule 6 (statement -> assignment .)
    RBRACE          reduce using rule 6 (statement -> assignment .)
    CASE            reduce using rule 6 (statement -> assignment .)
    DEFAULT         reduce using rule 6 (statement -> assignment .)
    RETURN          reduce using rule 6 (statement -> assignment .)


state 5

    (7) statement -> input .

    IDENTIFIER      reduce using rule 7 (statement -> input .)
    VAR             reduce using rule 7 (statement -> input .)
    TYPE            reduce using rule 7 (statement -> input .)
    FOR             reduce using rule 7 (statement -> input .)
    PACKAGE         reduce using rule 7 (statement -> input .)
    IMPORT          reduce using rule 7 (statement -> input .)
    SWITCH          reduce using rule 7 (statement -> input .)
    IF              reduce using rule 7 (statement -> input .)
    FUNC            reduce using rule 7 (statement -> input .)
    $end            reduce using rule 7 (statement -> input .)
    RBRACE          reduce using rule 7 (statement -> input .)
    CASE            reduce using rule 7 (statement -> input .)
    DEFAULT         reduce using rule 7 (statement -> input .)
    RETURN          reduce using rule 7 (statement -> input .)


state 6

    (8) statement -> llamarFuncion .

    IDENTIFIER      reduce using rule 8 (statement -> llamarFuncion .)
    VAR             reduce using rule 8 (statement -> llamarFuncion .)
    TYPE            reduce using rule 8 (statement -> llamarFuncion .)
    FOR             reduce using rule 8 (statement -> llamarFuncion .)
    PACKAGE         reduce using rule 8 (statement -> llamarFuncion .)
    IMPORT          reduce using rule 8 (statement -> llamarFuncion .)
    SWITCH          reduce using rule 8 (statement -> llamarFuncion .)
    IF              reduce using rule 8 (statement -> llamarFuncion .)
    FUNC            reduce using rule 8 (statement -> llamarFuncion .)
    $end            reduce using rule 8 (statement -> llamarFuncion .)
    RBRACE          reduce using rule 8 (statement -> llamarFuncion .)
    CASE            reduce using rule 8 (statement -> llamarFuncion .)
    DEFAULT         reduce using rule 8 (statement -> llamarFuncion .)
    RETURN          reduce using rule 8 (statement -> llamarFuncion .)


state 7

    (9) statement -> print_statement .

    IDENTIFIER      reduce using rule 9 (statement -> print_statement .)
    VAR             reduce using rule 9 (statement -> print_statement .)
    TYPE            reduce using rule 9 (statement -> print_statement .)
    FOR             reduce using rule 9 (statement -> print_statement .)
    PACKAGE         reduce using rule 9 (statement -> print_statement .)
    IMPORT          reduce using rule 9 (statement -> print_statement .)
    SWITCH          reduce using rule 9 (statement -> print_statement .)
    IF              reduce using rule 9 (statement -> print_statement .)
    FUNC            reduce using rule 9 (statement -> print_statement .)
    $end            reduce using rule 9 (statement -> print_statement .)
    RBRACE          reduce using rule 9 (statement -> print_statement .)
    CASE            reduce using rule 9 (statement -> print_statement .)
    DEFAULT         reduce using rule 9 (statement -> print_statement .)
    RETURN          reduce using rule 9 (statement -> print_statement .)


state 8

    (10) statement -> struct_definition .

    IDENTIFIER      reduce using rule 10 (statement -> struct_definition .)
    VAR             reduce using rule 10 (statement -> struct_definition .)
    TYPE            reduce using rule 10 (statement -> struct_definition .)
    FOR             reduce using rule 10 (statement -> struct_definition .)
    PACKAGE         reduce using rule 10 (statement -> struct_definition .)
    IMPORT          reduce using rule 10 (statement -> struct_definition .)
    SWITCH          reduce using rule 10 (statement -> struct_definition .)
    IF              reduce using rule 10 (statement -> struct_definition .)
    FUNC            reduce using rule 10 (statement -> struct_definition .)
    $end            reduce using rule 10 (statement -> struct_definition .)
    RBRACE          reduce using rule 10 (statement -> struct_definition .)
    CASE            reduce using rule 10 (statement -> struct_definition .)
    DEFAULT         reduce using rule 10 (statement -> struct_definition .)
    RETURN          reduce using rule 10 (statement -> struct_definition .)


state 9

    (11) statement -> for_statement .

    IDENTIFIER      reduce using rule 11 (statement -> for_statement .)
    VAR             reduce using rule 11 (statement -> for_statement .)
    TYPE            reduce using rule 11 (statement -> for_statement .)
    FOR             reduce using rule 11 (statement -> for_statement .)
    PACKAGE         reduce using rule 11 (statement -> for_statement .)
    IMPORT          reduce using rule 11 (statement -> for_statement .)
    SWITCH          reduce using rule 11 (statement -> for_statement .)
    IF              reduce using rule 11 (statement -> for_statement .)
    FUNC            reduce using rule 11 (statement -> for_statement .)
    $end            reduce using rule 11 (statement -> for_statement .)
    RBRACE          reduce using rule 11 (statement -> for_statement .)
    CASE            reduce using rule 11 (statement -> for_statement .)
    DEFAULT         reduce using rule 11 (statement -> for_statement .)
    RETURN          reduce using rule 11 (statement -> for_statement .)


state 10

    (12) statement -> package .

    IDENTIFIER      reduce using rule 12 (statement -> package .)
    VAR             reduce using rule 12 (statement -> package .)
    TYPE            reduce using rule 12 (statement -> package .)
    FOR             reduce using rule 12 (statement -> package .)
    PACKAGE         reduce using rule 12 (statement -> package .)
    IMPORT          reduce using rule 12 (statement -> package .)
    SWITCH          reduce using rule 12 (statement -> package .)
    IF              reduce using rule 12 (statement -> package .)
    FUNC            reduce using rule 12 (statement -> package .)
    $end            reduce using rule 12 (statement -> package .)
    RBRACE          reduce using rule 12 (statement -> package .)
    CASE            reduce using rule 12 (statement -> package .)
    DEFAULT         reduce using rule 12 (statement -> package .)
    RETURN          reduce using rule 12 (statement -> package .)


state 11

    (13) statement -> import .

    IDENTIFIER      reduce using rule 13 (statement -> import .)
    VAR             reduce using rule 13 (statement -> import .)
    TYPE            reduce using rule 13 (statement -> import .)
    FOR             reduce using rule 13 (statement -> import .)
    PACKAGE         reduce using rule 13 (statement -> import .)
    IMPORT          reduce using rule 13 (statement -> import .)
    SWITCH          reduce using rule 13 (statement -> import .)
    IF              reduce using rule 13 (statement -> import .)
    FUNC            reduce using rule 13 (statement -> import .)
    $end            reduce using rule 13 (statement -> import .)
    RBRACE          reduce using rule 13 (statement -> import .)
    CASE            reduce using rule 13 (statement -> import .)
    DEFAULT         reduce using rule 13 (statement -> import .)
    RETURN          reduce using rule 13 (statement -> import .)


state 12

    (14) statement -> switch .

    IDENTIFIER      reduce using rule 14 (statement -> switch .)
    VAR             reduce using rule 14 (statement -> switch .)
    TYPE            reduce using rule 14 (statement -> switch .)
    FOR             reduce using rule 14 (statement -> switch .)
    PACKAGE         reduce using rule 14 (statement -> switch .)
    IMPORT          reduce using rule 14 (statement -> switch .)
    SWITCH          reduce using rule 14 (statement -> switch .)
    IF              reduce using rule 14 (statement -> switch .)
    FUNC            reduce using rule 14 (statement -> switch .)
    $end            reduce using rule 14 (statement -> switch .)
    RBRACE          reduce using rule 14 (statement -> switch .)
    CASE            reduce using rule 14 (statement -> switch .)
    DEFAULT         reduce using rule 14 (statement -> switch .)
    RETURN          reduce using rule 14 (statement -> switch .)


state 13

    (15) statement -> map .

    IDENTIFIER      reduce using rule 15 (statement -> map .)
    VAR             reduce using rule 15 (statement -> map .)
    TYPE            reduce using rule 15 (statement -> map .)
    FOR             reduce using rule 15 (statement -> map .)
    PACKAGE         reduce using rule 15 (statement -> map .)
    IMPORT          reduce using rule 15 (statement -> map .)
    SWITCH          reduce using rule 15 (statement -> map .)
    IF              reduce using rule 15 (statement -> map .)
    FUNC            reduce using rule 15 (statement -> map .)
    $end            reduce using rule 15 (statement -> map .)
    RBRACE          reduce using rule 15 (statement -> map .)
    CASE            reduce using rule 15 (statement -> map .)
    DEFAULT         reduce using rule 15 (statement -> map .)
    RETURN          reduce using rule 15 (statement -> map .)


state 14

    (16) statement -> if_statement .

    IDENTIFIER      reduce using rule 16 (statement -> if_statement .)
    VAR             reduce using rule 16 (statement -> if_statement .)
    TYPE            reduce using rule 16 (statement -> if_statement .)
    FOR             reduce using rule 16 (statement -> if_statement .)
    PACKAGE         reduce using rule 16 (statement -> if_statement .)
    IMPORT          reduce using rule 16 (statement -> if_statement .)
    SWITCH          reduce using rule 16 (statement -> if_statement .)
    IF              reduce using rule 16 (statement -> if_statement .)
    FUNC            reduce using rule 16 (statement -> if_statement .)
    $end            reduce using rule 16 (statement -> if_statement .)
    RBRACE          reduce using rule 16 (statement -> if_statement .)
    CASE            reduce using rule 16 (statement -> if_statement .)
    DEFAULT         reduce using rule 16 (statement -> if_statement .)
    RETURN          reduce using rule 16 (statement -> if_statement .)


state 15

    (17) statement -> function .

    IDENTIFIER      reduce using rule 17 (statement -> function .)
    VAR             reduce using rule 17 (statement -> function .)
    TYPE            reduce using rule 17 (statement -> function .)
    FOR             reduce using rule 17 (statement -> function .)
    PACKAGE         reduce using rule 17 (statement -> function .)
    IMPORT          reduce using rule 17 (statement -> function .)
    SWITCH          reduce using rule 17 (statement -> function .)
    IF              reduce using rule 17 (statement -> function .)
    FUNC            reduce using rule 17 (statement -> function .)
    $end            reduce using rule 17 (statement -> function .)
    RBRACE          reduce using rule 17 (statement -> function .)
    CASE            reduce using rule 17 (statement -> function .)
    DEFAULT         reduce using rule 17 (statement -> function .)
    RETURN          reduce using rule 17 (statement -> function .)


state 16

    (18) statement -> method_definition .

    IDENTIFIER      reduce using rule 18 (statement -> method_definition .)
    VAR             reduce using rule 18 (statement -> method_definition .)
    TYPE            reduce using rule 18 (statement -> method_definition .)
    FOR             reduce using rule 18 (statement -> method_definition .)
    PACKAGE         reduce using rule 18 (statement -> method_definition .)
    IMPORT          reduce using rule 18 (statement -> method_definition .)
    SWITCH          reduce using rule 18 (statement -> method_definition .)
    IF              reduce using rule 18 (statement -> method_definition .)
    FUNC            reduce using rule 18 (statement -> method_definition .)
    $end            reduce using rule 18 (statement -> method_definition .)
    RBRACE          reduce using rule 18 (statement -> method_definition .)
    CASE            reduce using rule 18 (statement -> method_definition .)
    DEFAULT         reduce using rule 18 (statement -> method_definition .)
    RETURN          reduce using rule 18 (statement -> method_definition .)


state 17

    (19) statement -> function_literal .

    IDENTIFIER      reduce using rule 19 (statement -> function_literal .)
    VAR             reduce using rule 19 (statement -> function_literal .)
    TYPE            reduce using rule 19 (statement -> function_literal .)
    FOR             reduce using rule 19 (statement -> function_literal .)
    PACKAGE         reduce using rule 19 (statement -> function_literal .)
    IMPORT          reduce using rule 19 (statement -> function_literal .)
    SWITCH          reduce using rule 19 (statement -> function_literal .)
    IF              reduce using rule 19 (statement -> function_literal .)
    FUNC            reduce using rule 19 (statement -> function_literal .)
    $end            reduce using rule 19 (statement -> function_literal .)
    RBRACE          reduce using rule 19 (statement -> function_literal .)
    CASE            reduce using rule 19 (statement -> function_literal .)
    DEFAULT         reduce using rule 19 (statement -> function_literal .)
    RETURN          reduce using rule 19 (statement -> function_literal .)


state 18

    (20) statement -> var_declaration .

    IDENTIFIER      reduce using rule 20 (statement -> var_declaration .)
    VAR             reduce using rule 20 (statement -> var_declaration .)
    TYPE            reduce using rule 20 (statement -> var_declaration .)
    FOR             reduce using rule 20 (statement -> var_declaration .)
    PACKAGE         reduce using rule 20 (statement -> var_declaration .)
    IMPORT          reduce using rule 20 (statement -> var_declaration .)
    SWITCH          reduce using rule 20 (statement -> var_declaration .)
    IF              reduce using rule 20 (statement -> var_declaration .)
    FUNC            reduce using rule 20 (statement -> var_declaration .)
    $end            reduce using rule 20 (statement -> var_declaration .)
    RBRACE          reduce using rule 20 (statement -> var_declaration .)
    CASE            reduce using rule 20 (statement -> var_declaration .)
    DEFAULT         reduce using rule 20 (statement -> var_declaration .)
    RETURN          reduce using rule 20 (statement -> var_declaration .)


state 19

    (21) statement -> slice_declaration .

    IDENTIFIER      reduce using rule 21 (statement -> slice_declaration .)
    VAR             reduce using rule 21 (statement -> slice_declaration .)
    TYPE            reduce using rule 21 (statement -> slice_declaration .)
    FOR             reduce using rule 21 (statement -> slice_declaration .)
    PACKAGE         reduce using rule 21 (statement -> slice_declaration .)
    IMPORT          reduce using rule 21 (statement -> slice_declaration .)
    SWITCH          reduce using rule 21 (statement -> slice_declaration .)
    IF              reduce using rule 21 (statement -> slice_declaration .)
    FUNC            reduce using rule 21 (statement -> slice_declaration .)
    $end            reduce using rule 21 (statement -> slice_declaration .)
    RBRACE          reduce using rule 21 (statement -> slice_declaration .)
    CASE            reduce using rule 21 (statement -> slice_declaration .)
    DEFAULT         reduce using rule 21 (statement -> slice_declaration .)
    RETURN          reduce using rule 21 (statement -> slice_declaration .)


state 20

    (22) statement -> declare_assign .

    IDENTIFIER      reduce using rule 22 (statement -> declare_assign .)
    VAR             reduce using rule 22 (statement -> declare_assign .)
    TYPE            reduce using rule 22 (statement -> declare_assign .)
    FOR             reduce using rule 22 (statement -> declare_assign .)
    PACKAGE         reduce using rule 22 (statement -> declare_assign .)
    IMPORT          reduce using rule 22 (statement -> declare_assign .)
    SWITCH          reduce using rule 22 (statement -> declare_assign .)
    IF              reduce using rule 22 (statement -> declare_assign .)
    FUNC            reduce using rule 22 (statement -> declare_assign .)
    $end            reduce using rule 22 (statement -> declare_assign .)
    RBRACE          reduce using rule 22 (statement -> declare_assign .)
    CASE            reduce using rule 22 (statement -> declare_assign .)
    DEFAULT         reduce using rule 22 (statement -> declare_assign .)
    RETURN          reduce using rule 22 (statement -> declare_assign .)


state 21

    (35) assignment -> IDENTIFIER . DECLARE_ASSIGN expression
    (36) assignment -> IDENTIFIER . DECLARE_ASSIGN struct_literal
    (39) assignment -> IDENTIFIER . DECLARE_ASSIGN slice_literal
    (41) assignment -> IDENTIFIER . ASSIGN expression
    (33) input -> IDENTIFIER . DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (42) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) print_statement -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (68) map -> IDENTIFIER . DECLARE_ASSIGN mapLiteral
    (145) declare_assign -> IDENTIFIER . DECLARE_ASSIGN slice_literal

    DECLARE_ASSIGN  shift and go to state 31
    ASSIGN          shift and go to state 32
    DOT             shift and go to state 33
    LPAREN          shift and go to state 34


state 22

    (37) assignment -> VAR . IDENTIFIER type_name ASSIGN expression
    (38) assignment -> VAR . IDENTIFIER type_name ASSIGN llamarFuncion
    (40) assignment -> VAR . IDENTIFIER type_name ASSIGN slice_literal
    (69) map -> VAR . IDENTIFIER ASSIGN mapLiteral
    (34) var_declaration -> VAR . IDENTIFIER type_name
    (144) slice_declaration -> VAR . IDENTIFIER LBRACKET RBRACKET type_name

    IDENTIFIER      shift and go to state 35


state 23

    (89) struct_definition -> TYPE . IDENTIFIER STRUCT LBRACE struct_fields RBRACE

    IDENTIFIER      shift and go to state 36


state 24

    (98) for_statement -> FOR . shortAssignment SEMICOLON condicion SEMICOLON expression block
    (100) for_statement -> FOR . condicion block
    (101) for_statement -> FOR . block
    (99) shortAssignment -> . identifier_list DECLARE_ASSIGN expression
    (51) condicion -> . expression comparador expression
    (103) block -> . LBRACE statement_list RBRACE
    (104) block -> . LBRACE RBRACE
    (134) identifier_list -> . IDENTIFIER
    (135) identifier_list -> . IDENTIFIER COMMA identifier_list
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    LBRACE          shift and go to state 42
    IDENTIFIER      shift and go to state 43
    NUMBER          shift and go to state 44
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    shortAssignment                shift and go to state 37
    condicion                      shift and go to state 38
    expression                     shift and go to state 39
    block                          shift and go to state 40
    identifier_list                shift and go to state 41
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 25

    (23) package -> PACKAGE . MAIN
    (24) package -> PACKAGE . IDENTIFIER

    MAIN            shift and go to state 58
    IDENTIFIER      shift and go to state 59


state 26

    (25) import -> IMPORT . STRING
    (26) import -> IMPORT . LPAREN import_list RPAREN

    STRING          shift and go to state 60
    LPAREN          shift and go to state 61


state 27

    (63) switch -> SWITCH . expression LBRACE caseBlocks RBRACE
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    expression                     shift and go to state 62
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 28

    (124) if_statement -> IF . condicion block
    (125) if_statement -> IF . condicion block ELSE block
    (126) if_statement -> IF . condicion_compleja block
    (127) if_statement -> IF . condicion_compleja block ELSE block
    (51) condicion -> . expression comparador expression
    (52) condicion_compleja -> . condicion operadorLogico condicion
    (53) condicion_compleja -> . condicion operadorLogico condicion_compleja
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    condicion                      shift and go to state 64
    condicion_compleja             shift and go to state 65
    expression                     shift and go to state 39
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 29

    (76) function -> FUNC . IDENTIFIER LPAREN params_opt RPAREN block
    (77) function -> FUNC . IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (80) function -> FUNC . MAIN LPAREN params_opt RPAREN block
    (97) method_definition -> FUNC . LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (128) function_literal -> FUNC . LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 66
    MAIN            shift and go to state 68
    LPAREN          shift and go to state 67


state 30

    (5) statement_list -> statement_list statement .

    IDENTIFIER      reduce using rule 5 (statement_list -> statement_list statement .)
    VAR             reduce using rule 5 (statement_list -> statement_list statement .)
    TYPE            reduce using rule 5 (statement_list -> statement_list statement .)
    FOR             reduce using rule 5 (statement_list -> statement_list statement .)
    PACKAGE         reduce using rule 5 (statement_list -> statement_list statement .)
    IMPORT          reduce using rule 5 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 5 (statement_list -> statement_list statement .)
    IF              reduce using rule 5 (statement_list -> statement_list statement .)
    FUNC            reduce using rule 5 (statement_list -> statement_list statement .)
    $end            reduce using rule 5 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 5 (statement_list -> statement_list statement .)
    CASE            reduce using rule 5 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 5 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 5 (statement_list -> statement_list statement .)


state 31

    (35) assignment -> IDENTIFIER DECLARE_ASSIGN . expression
    (36) assignment -> IDENTIFIER DECLARE_ASSIGN . struct_literal
    (39) assignment -> IDENTIFIER DECLARE_ASSIGN . slice_literal
    (68) map -> IDENTIFIER DECLARE_ASSIGN . mapLiteral
    (145) declare_assign -> IDENTIFIER DECLARE_ASSIGN . slice_literal
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (90) struct_literal -> . IDENTIFIER LBRACE struct_field_assignments RBRACE
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (70) mapLiteral -> . MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 69
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    MAP             shift and go to state 74
    FUNC            shift and go to state 57

    expression                     shift and go to state 70
    struct_literal                 shift and go to state 71
    slice_literal                  shift and go to state 72
    mapLiteral                     shift and go to state 73
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 32

    (41) assignment -> IDENTIFIER ASSIGN . expression
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    expression                     shift and go to state 75
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 33

    (33) input -> IDENTIFIER DOT . IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (44) llamarFuncion -> IDENTIFIER DOT . IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) print_statement -> IDENTIFIER DOT . IDENTIFIER LPAREN argument_list_opt RPAREN

    IDENTIFIER      shift and go to state 76


state 34

    (42) llamarFuncion -> IDENTIFIER LPAREN . argument_list_opt RPAREN
    (43) llamarFuncion -> IDENTIFIER LPAREN . argument_list_opt COMMA expression RPAREN
    (49) argument_list_opt -> . argument_list
    (50) argument_list_opt -> .
    (47) argument_list -> . expression
    (48) argument_list -> . argument_list COMMA expression
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    RPAREN          reduce using rule 50 (argument_list_opt -> .)
    COMMA           reduce using rule 50 (argument_list_opt -> .)
    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    argument_list_opt              shift and go to state 77
    expression                     shift and go to state 78
    argument_list                  shift and go to state 79
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 35

    (37) assignment -> VAR IDENTIFIER . type_name ASSIGN expression
    (38) assignment -> VAR IDENTIFIER . type_name ASSIGN llamarFuncion
    (40) assignment -> VAR IDENTIFIER . type_name ASSIGN slice_literal
    (69) map -> VAR IDENTIFIER . ASSIGN mapLiteral
    (34) var_declaration -> VAR IDENTIFIER . type_name
    (144) slice_declaration -> VAR IDENTIFIER . LBRACKET RBRACKET type_name
    (136) type_name -> . DATATYPE
    (137) type_name -> . IDENTIFIER
    (138) type_name -> . LBRACKET RBRACKET type_name
    (139) type_name -> . FUNC LPAREN parameters RPAREN return_type

    ASSIGN          shift and go to state 82
    LBRACKET        shift and go to state 83
    DATATYPE        shift and go to state 84
    IDENTIFIER      shift and go to state 80
    FUNC            shift and go to state 85

    type_name                      shift and go to state 81

state 36

    (89) struct_definition -> TYPE IDENTIFIER . STRUCT LBRACE struct_fields RBRACE

    STRUCT          shift and go to state 86


state 37

    (98) for_statement -> FOR shortAssignment . SEMICOLON condicion SEMICOLON expression block

    SEMICOLON       shift and go to state 87


state 38

    (100) for_statement -> FOR condicion . block
    (103) block -> . LBRACE statement_list RBRACE
    (104) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 42

    block                          shift and go to state 88

state 39

    (51) condicion -> expression . comparador expression
    (45) expression -> expression . comparador expression
    (46) expression -> expression . operadorLogico expression
    (115) expression -> expression . operator expression
    (116) expression -> expression . DOT IDENTIFIER
    (149) expression -> expression . LBRACKET expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (151) expression -> expression . LBRACKET COLON expression RBRACKET
    (152) expression -> expression . LBRACKET expression COLON RBRACKET
    (56) comparador -> . EQ
    (57) comparador -> . NEQ
    (58) comparador -> . GT
    (59) comparador -> . LT
    (60) comparador -> . GE
    (61) comparador -> . LE
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR
    (117) operator -> . PLUS
    (118) operator -> . MINUS
    (119) operator -> . TIMES
    (120) operator -> . DIVIDE
    (121) operator -> . MOD

    DOT             shift and go to state 92
    LBRACKET        shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    GT              shift and go to state 96
    LT              shift and go to state 97
    GE              shift and go to state 98
    LE              shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

    comparador                     shift and go to state 89
    operadorLogico                 shift and go to state 90
    operator                       shift and go to state 91

state 40

    (101) for_statement -> FOR block .

    IDENTIFIER      reduce using rule 101 (for_statement -> FOR block .)
    VAR             reduce using rule 101 (for_statement -> FOR block .)
    TYPE            reduce using rule 101 (for_statement -> FOR block .)
    FOR             reduce using rule 101 (for_statement -> FOR block .)
    PACKAGE         reduce using rule 101 (for_statement -> FOR block .)
    IMPORT          reduce using rule 101 (for_statement -> FOR block .)
    SWITCH          reduce using rule 101 (for_statement -> FOR block .)
    IF              reduce using rule 101 (for_statement -> FOR block .)
    FUNC            reduce using rule 101 (for_statement -> FOR block .)
    $end            reduce using rule 101 (for_statement -> FOR block .)
    RBRACE          reduce using rule 101 (for_statement -> FOR block .)
    CASE            reduce using rule 101 (for_statement -> FOR block .)
    DEFAULT         reduce using rule 101 (for_statement -> FOR block .)
    RETURN          reduce using rule 101 (for_statement -> FOR block .)


state 41

    (99) shortAssignment -> identifier_list . DECLARE_ASSIGN expression

    DECLARE_ASSIGN  shift and go to state 107


state 42

    (103) block -> LBRACE . statement_list RBRACE
    (104) block -> LBRACE . RBRACE
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (39) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (40) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (41) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (98) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (100) for_statement -> . FOR condicion block
    (101) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (63) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (68) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (69) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (124) if_statement -> . IF condicion block
    (125) if_statement -> . IF condicion block ELSE block
    (126) if_statement -> . IF condicion_compleja block
    (127) if_statement -> . IF condicion_compleja block ELSE block
    (76) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (77) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (80) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (97) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER type_name
    (144) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (145) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    RBRACE          shift and go to state 109
    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29

    statement_list                 shift and go to state 108
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20

state 43

    (134) identifier_list -> IDENTIFIER .
    (135) identifier_list -> IDENTIFIER . COMMA identifier_list
    (106) expression -> IDENTIFIER .
    (42) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN

  ! shift/reduce conflict for DOT resolved as shift
    DECLARE_ASSIGN  reduce using rule 134 (identifier_list -> IDENTIFIER .)
    COMMA           shift and go to state 110
    LBRACKET        reduce using rule 106 (expression -> IDENTIFIER .)
    EQ              reduce using rule 106 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 106 (expression -> IDENTIFIER .)
    GT              reduce using rule 106 (expression -> IDENTIFIER .)
    LT              reduce using rule 106 (expression -> IDENTIFIER .)
    GE              reduce using rule 106 (expression -> IDENTIFIER .)
    LE              reduce using rule 106 (expression -> IDENTIFIER .)
    AND             reduce using rule 106 (expression -> IDENTIFIER .)
    OR              reduce using rule 106 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 106 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 106 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 106 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 106 (expression -> IDENTIFIER .)
    MOD             reduce using rule 106 (expression -> IDENTIFIER .)
    LPAREN          shift and go to state 34
    DOT             shift and go to state 111

  ! DOT             [ reduce using rule 106 (expression -> IDENTIFIER .) ]


state 44

    (105) expression -> NUMBER .

    DOT             reduce using rule 105 (expression -> NUMBER .)
    LBRACKET        reduce using rule 105 (expression -> NUMBER .)
    EQ              reduce using rule 105 (expression -> NUMBER .)
    NEQ             reduce using rule 105 (expression -> NUMBER .)
    GT              reduce using rule 105 (expression -> NUMBER .)
    LT              reduce using rule 105 (expression -> NUMBER .)
    GE              reduce using rule 105 (expression -> NUMBER .)
    LE              reduce using rule 105 (expression -> NUMBER .)
    AND             reduce using rule 105 (expression -> NUMBER .)
    OR              reduce using rule 105 (expression -> NUMBER .)
    PLUS            reduce using rule 105 (expression -> NUMBER .)
    MINUS           reduce using rule 105 (expression -> NUMBER .)
    TIMES           reduce using rule 105 (expression -> NUMBER .)
    DIVIDE          reduce using rule 105 (expression -> NUMBER .)
    MOD             reduce using rule 105 (expression -> NUMBER .)
    LBRACE          reduce using rule 105 (expression -> NUMBER .)
    IDENTIFIER      reduce using rule 105 (expression -> NUMBER .)
    VAR             reduce using rule 105 (expression -> NUMBER .)
    TYPE            reduce using rule 105 (expression -> NUMBER .)
    FOR             reduce using rule 105 (expression -> NUMBER .)
    PACKAGE         reduce using rule 105 (expression -> NUMBER .)
    IMPORT          reduce using rule 105 (expression -> NUMBER .)
    SWITCH          reduce using rule 105 (expression -> NUMBER .)
    IF              reduce using rule 105 (expression -> NUMBER .)
    FUNC            reduce using rule 105 (expression -> NUMBER .)
    $end            reduce using rule 105 (expression -> NUMBER .)
    RBRACE          reduce using rule 105 (expression -> NUMBER .)
    CASE            reduce using rule 105 (expression -> NUMBER .)
    DEFAULT         reduce using rule 105 (expression -> NUMBER .)
    RETURN          reduce using rule 105 (expression -> NUMBER .)
    COMMA           reduce using rule 105 (expression -> NUMBER .)
    RPAREN          reduce using rule 105 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 105 (expression -> NUMBER .)
    RBRACKET        reduce using rule 105 (expression -> NUMBER .)
    COLON           reduce using rule 105 (expression -> NUMBER .)


state 45

    (107) expression -> RUNE .

    DOT             reduce using rule 107 (expression -> RUNE .)
    LBRACKET        reduce using rule 107 (expression -> RUNE .)
    EQ              reduce using rule 107 (expression -> RUNE .)
    NEQ             reduce using rule 107 (expression -> RUNE .)
    GT              reduce using rule 107 (expression -> RUNE .)
    LT              reduce using rule 107 (expression -> RUNE .)
    GE              reduce using rule 107 (expression -> RUNE .)
    LE              reduce using rule 107 (expression -> RUNE .)
    AND             reduce using rule 107 (expression -> RUNE .)
    OR              reduce using rule 107 (expression -> RUNE .)
    PLUS            reduce using rule 107 (expression -> RUNE .)
    MINUS           reduce using rule 107 (expression -> RUNE .)
    TIMES           reduce using rule 107 (expression -> RUNE .)
    DIVIDE          reduce using rule 107 (expression -> RUNE .)
    MOD             reduce using rule 107 (expression -> RUNE .)
    LBRACE          reduce using rule 107 (expression -> RUNE .)
    IDENTIFIER      reduce using rule 107 (expression -> RUNE .)
    VAR             reduce using rule 107 (expression -> RUNE .)
    TYPE            reduce using rule 107 (expression -> RUNE .)
    FOR             reduce using rule 107 (expression -> RUNE .)
    PACKAGE         reduce using rule 107 (expression -> RUNE .)
    IMPORT          reduce using rule 107 (expression -> RUNE .)
    SWITCH          reduce using rule 107 (expression -> RUNE .)
    IF              reduce using rule 107 (expression -> RUNE .)
    FUNC            reduce using rule 107 (expression -> RUNE .)
    $end            reduce using rule 107 (expression -> RUNE .)
    RBRACE          reduce using rule 107 (expression -> RUNE .)
    CASE            reduce using rule 107 (expression -> RUNE .)
    DEFAULT         reduce using rule 107 (expression -> RUNE .)
    RETURN          reduce using rule 107 (expression -> RUNE .)
    COMMA           reduce using rule 107 (expression -> RUNE .)
    RPAREN          reduce using rule 107 (expression -> RUNE .)
    SEMICOLON       reduce using rule 107 (expression -> RUNE .)
    RBRACKET        reduce using rule 107 (expression -> RUNE .)
    COLON           reduce using rule 107 (expression -> RUNE .)


state 46

    (108) expression -> STRING .

    DOT             reduce using rule 108 (expression -> STRING .)
    LBRACKET        reduce using rule 108 (expression -> STRING .)
    EQ              reduce using rule 108 (expression -> STRING .)
    NEQ             reduce using rule 108 (expression -> STRING .)
    GT              reduce using rule 108 (expression -> STRING .)
    LT              reduce using rule 108 (expression -> STRING .)
    GE              reduce using rule 108 (expression -> STRING .)
    LE              reduce using rule 108 (expression -> STRING .)
    AND             reduce using rule 108 (expression -> STRING .)
    OR              reduce using rule 108 (expression -> STRING .)
    PLUS            reduce using rule 108 (expression -> STRING .)
    MINUS           reduce using rule 108 (expression -> STRING .)
    TIMES           reduce using rule 108 (expression -> STRING .)
    DIVIDE          reduce using rule 108 (expression -> STRING .)
    MOD             reduce using rule 108 (expression -> STRING .)
    LBRACE          reduce using rule 108 (expression -> STRING .)
    IDENTIFIER      reduce using rule 108 (expression -> STRING .)
    VAR             reduce using rule 108 (expression -> STRING .)
    TYPE            reduce using rule 108 (expression -> STRING .)
    FOR             reduce using rule 108 (expression -> STRING .)
    PACKAGE         reduce using rule 108 (expression -> STRING .)
    IMPORT          reduce using rule 108 (expression -> STRING .)
    SWITCH          reduce using rule 108 (expression -> STRING .)
    IF              reduce using rule 108 (expression -> STRING .)
    FUNC            reduce using rule 108 (expression -> STRING .)
    $end            reduce using rule 108 (expression -> STRING .)
    RBRACE          reduce using rule 108 (expression -> STRING .)
    CASE            reduce using rule 108 (expression -> STRING .)
    DEFAULT         reduce using rule 108 (expression -> STRING .)
    RETURN          reduce using rule 108 (expression -> STRING .)
    COMMA           reduce using rule 108 (expression -> STRING .)
    RPAREN          reduce using rule 108 (expression -> STRING .)
    SEMICOLON       reduce using rule 108 (expression -> STRING .)
    RBRACKET        reduce using rule 108 (expression -> STRING .)
    COLON           reduce using rule 108 (expression -> STRING .)


state 47

    (109) expression -> RAW_STRING .

    DOT             reduce using rule 109 (expression -> RAW_STRING .)
    LBRACKET        reduce using rule 109 (expression -> RAW_STRING .)
    EQ              reduce using rule 109 (expression -> RAW_STRING .)
    NEQ             reduce using rule 109 (expression -> RAW_STRING .)
    GT              reduce using rule 109 (expression -> RAW_STRING .)
    LT              reduce using rule 109 (expression -> RAW_STRING .)
    GE              reduce using rule 109 (expression -> RAW_STRING .)
    LE              reduce using rule 109 (expression -> RAW_STRING .)
    AND             reduce using rule 109 (expression -> RAW_STRING .)
    OR              reduce using rule 109 (expression -> RAW_STRING .)
    PLUS            reduce using rule 109 (expression -> RAW_STRING .)
    MINUS           reduce using rule 109 (expression -> RAW_STRING .)
    TIMES           reduce using rule 109 (expression -> RAW_STRING .)
    DIVIDE          reduce using rule 109 (expression -> RAW_STRING .)
    MOD             reduce using rule 109 (expression -> RAW_STRING .)
    LBRACE          reduce using rule 109 (expression -> RAW_STRING .)
    IDENTIFIER      reduce using rule 109 (expression -> RAW_STRING .)
    VAR             reduce using rule 109 (expression -> RAW_STRING .)
    TYPE            reduce using rule 109 (expression -> RAW_STRING .)
    FOR             reduce using rule 109 (expression -> RAW_STRING .)
    PACKAGE         reduce using rule 109 (expression -> RAW_STRING .)
    IMPORT          reduce using rule 109 (expression -> RAW_STRING .)
    SWITCH          reduce using rule 109 (expression -> RAW_STRING .)
    IF              reduce using rule 109 (expression -> RAW_STRING .)
    FUNC            reduce using rule 109 (expression -> RAW_STRING .)
    $end            reduce using rule 109 (expression -> RAW_STRING .)
    RBRACE          reduce using rule 109 (expression -> RAW_STRING .)
    CASE            reduce using rule 109 (expression -> RAW_STRING .)
    DEFAULT         reduce using rule 109 (expression -> RAW_STRING .)
    RETURN          reduce using rule 109 (expression -> RAW_STRING .)
    COMMA           reduce using rule 109 (expression -> RAW_STRING .)
    RPAREN          reduce using rule 109 (expression -> RAW_STRING .)
    SEMICOLON       reduce using rule 109 (expression -> RAW_STRING .)
    RBRACKET        reduce using rule 109 (expression -> RAW_STRING .)
    COLON           reduce using rule 109 (expression -> RAW_STRING .)


state 48

    (110) expression -> TRUE .

    DOT             reduce using rule 110 (expression -> TRUE .)
    LBRACKET        reduce using rule 110 (expression -> TRUE .)
    EQ              reduce using rule 110 (expression -> TRUE .)
    NEQ             reduce using rule 110 (expression -> TRUE .)
    GT              reduce using rule 110 (expression -> TRUE .)
    LT              reduce using rule 110 (expression -> TRUE .)
    GE              reduce using rule 110 (expression -> TRUE .)
    LE              reduce using rule 110 (expression -> TRUE .)
    AND             reduce using rule 110 (expression -> TRUE .)
    OR              reduce using rule 110 (expression -> TRUE .)
    PLUS            reduce using rule 110 (expression -> TRUE .)
    MINUS           reduce using rule 110 (expression -> TRUE .)
    TIMES           reduce using rule 110 (expression -> TRUE .)
    DIVIDE          reduce using rule 110 (expression -> TRUE .)
    MOD             reduce using rule 110 (expression -> TRUE .)
    LBRACE          reduce using rule 110 (expression -> TRUE .)
    IDENTIFIER      reduce using rule 110 (expression -> TRUE .)
    VAR             reduce using rule 110 (expression -> TRUE .)
    TYPE            reduce using rule 110 (expression -> TRUE .)
    FOR             reduce using rule 110 (expression -> TRUE .)
    PACKAGE         reduce using rule 110 (expression -> TRUE .)
    IMPORT          reduce using rule 110 (expression -> TRUE .)
    SWITCH          reduce using rule 110 (expression -> TRUE .)
    IF              reduce using rule 110 (expression -> TRUE .)
    FUNC            reduce using rule 110 (expression -> TRUE .)
    $end            reduce using rule 110 (expression -> TRUE .)
    RBRACE          reduce using rule 110 (expression -> TRUE .)
    CASE            reduce using rule 110 (expression -> TRUE .)
    DEFAULT         reduce using rule 110 (expression -> TRUE .)
    RETURN          reduce using rule 110 (expression -> TRUE .)
    COMMA           reduce using rule 110 (expression -> TRUE .)
    RPAREN          reduce using rule 110 (expression -> TRUE .)
    SEMICOLON       reduce using rule 110 (expression -> TRUE .)
    RBRACKET        reduce using rule 110 (expression -> TRUE .)
    COLON           reduce using rule 110 (expression -> TRUE .)


state 49

    (111) expression -> FALSE .

    DOT             reduce using rule 111 (expression -> FALSE .)
    LBRACKET        reduce using rule 111 (expression -> FALSE .)
    EQ              reduce using rule 111 (expression -> FALSE .)
    NEQ             reduce using rule 111 (expression -> FALSE .)
    GT              reduce using rule 111 (expression -> FALSE .)
    LT              reduce using rule 111 (expression -> FALSE .)
    GE              reduce using rule 111 (expression -> FALSE .)
    LE              reduce using rule 111 (expression -> FALSE .)
    AND             reduce using rule 111 (expression -> FALSE .)
    OR              reduce using rule 111 (expression -> FALSE .)
    PLUS            reduce using rule 111 (expression -> FALSE .)
    MINUS           reduce using rule 111 (expression -> FALSE .)
    TIMES           reduce using rule 111 (expression -> FALSE .)
    DIVIDE          reduce using rule 111 (expression -> FALSE .)
    MOD             reduce using rule 111 (expression -> FALSE .)
    LBRACE          reduce using rule 111 (expression -> FALSE .)
    IDENTIFIER      reduce using rule 111 (expression -> FALSE .)
    VAR             reduce using rule 111 (expression -> FALSE .)
    TYPE            reduce using rule 111 (expression -> FALSE .)
    FOR             reduce using rule 111 (expression -> FALSE .)
    PACKAGE         reduce using rule 111 (expression -> FALSE .)
    IMPORT          reduce using rule 111 (expression -> FALSE .)
    SWITCH          reduce using rule 111 (expression -> FALSE .)
    IF              reduce using rule 111 (expression -> FALSE .)
    FUNC            reduce using rule 111 (expression -> FALSE .)
    $end            reduce using rule 111 (expression -> FALSE .)
    RBRACE          reduce using rule 111 (expression -> FALSE .)
    CASE            reduce using rule 111 (expression -> FALSE .)
    DEFAULT         reduce using rule 111 (expression -> FALSE .)
    RETURN          reduce using rule 111 (expression -> FALSE .)
    COMMA           reduce using rule 111 (expression -> FALSE .)
    RPAREN          reduce using rule 111 (expression -> FALSE .)
    SEMICOLON       reduce using rule 111 (expression -> FALSE .)
    RBRACKET        reduce using rule 111 (expression -> FALSE .)
    COLON           reduce using rule 111 (expression -> FALSE .)


state 50

    (112) expression -> NIL .

    DOT             reduce using rule 112 (expression -> NIL .)
    LBRACKET        reduce using rule 112 (expression -> NIL .)
    EQ              reduce using rule 112 (expression -> NIL .)
    NEQ             reduce using rule 112 (expression -> NIL .)
    GT              reduce using rule 112 (expression -> NIL .)
    LT              reduce using rule 112 (expression -> NIL .)
    GE              reduce using rule 112 (expression -> NIL .)
    LE              reduce using rule 112 (expression -> NIL .)
    AND             reduce using rule 112 (expression -> NIL .)
    OR              reduce using rule 112 (expression -> NIL .)
    PLUS            reduce using rule 112 (expression -> NIL .)
    MINUS           reduce using rule 112 (expression -> NIL .)
    TIMES           reduce using rule 112 (expression -> NIL .)
    DIVIDE          reduce using rule 112 (expression -> NIL .)
    MOD             reduce using rule 112 (expression -> NIL .)
    LBRACE          reduce using rule 112 (expression -> NIL .)
    IDENTIFIER      reduce using rule 112 (expression -> NIL .)
    VAR             reduce using rule 112 (expression -> NIL .)
    TYPE            reduce using rule 112 (expression -> NIL .)
    FOR             reduce using rule 112 (expression -> NIL .)
    PACKAGE         reduce using rule 112 (expression -> NIL .)
    IMPORT          reduce using rule 112 (expression -> NIL .)
    SWITCH          reduce using rule 112 (expression -> NIL .)
    IF              reduce using rule 112 (expression -> NIL .)
    FUNC            reduce using rule 112 (expression -> NIL .)
    $end            reduce using rule 112 (expression -> NIL .)
    RBRACE          reduce using rule 112 (expression -> NIL .)
    CASE            reduce using rule 112 (expression -> NIL .)
    DEFAULT         reduce using rule 112 (expression -> NIL .)
    RETURN          reduce using rule 112 (expression -> NIL .)
    COMMA           reduce using rule 112 (expression -> NIL .)
    RPAREN          reduce using rule 112 (expression -> NIL .)
    SEMICOLON       reduce using rule 112 (expression -> NIL .)
    RBRACKET        reduce using rule 112 (expression -> NIL .)
    COLON           reduce using rule 112 (expression -> NIL .)


state 51

    (113) expression -> slice_literal .

    DOT             reduce using rule 113 (expression -> slice_literal .)
    LBRACKET        reduce using rule 113 (expression -> slice_literal .)
    EQ              reduce using rule 113 (expression -> slice_literal .)
    NEQ             reduce using rule 113 (expression -> slice_literal .)
    GT              reduce using rule 113 (expression -> slice_literal .)
    LT              reduce using rule 113 (expression -> slice_literal .)
    GE              reduce using rule 113 (expression -> slice_literal .)
    LE              reduce using rule 113 (expression -> slice_literal .)
    AND             reduce using rule 113 (expression -> slice_literal .)
    OR              reduce using rule 113 (expression -> slice_literal .)
    PLUS            reduce using rule 113 (expression -> slice_literal .)
    MINUS           reduce using rule 113 (expression -> slice_literal .)
    TIMES           reduce using rule 113 (expression -> slice_literal .)
    DIVIDE          reduce using rule 113 (expression -> slice_literal .)
    MOD             reduce using rule 113 (expression -> slice_literal .)
    LBRACE          reduce using rule 113 (expression -> slice_literal .)
    IDENTIFIER      reduce using rule 113 (expression -> slice_literal .)
    VAR             reduce using rule 113 (expression -> slice_literal .)
    TYPE            reduce using rule 113 (expression -> slice_literal .)
    FOR             reduce using rule 113 (expression -> slice_literal .)
    PACKAGE         reduce using rule 113 (expression -> slice_literal .)
    IMPORT          reduce using rule 113 (expression -> slice_literal .)
    SWITCH          reduce using rule 113 (expression -> slice_literal .)
    IF              reduce using rule 113 (expression -> slice_literal .)
    FUNC            reduce using rule 113 (expression -> slice_literal .)
    $end            reduce using rule 113 (expression -> slice_literal .)
    RBRACE          reduce using rule 113 (expression -> slice_literal .)
    CASE            reduce using rule 113 (expression -> slice_literal .)
    DEFAULT         reduce using rule 113 (expression -> slice_literal .)
    RETURN          reduce using rule 113 (expression -> slice_literal .)
    COMMA           reduce using rule 113 (expression -> slice_literal .)
    RPAREN          reduce using rule 113 (expression -> slice_literal .)
    SEMICOLON       reduce using rule 113 (expression -> slice_literal .)
    RBRACKET        reduce using rule 113 (expression -> slice_literal .)
    COLON           reduce using rule 113 (expression -> slice_literal .)


state 52

    (114) expression -> llamarFuncion .

    DOT             reduce using rule 114 (expression -> llamarFuncion .)
    LBRACKET        reduce using rule 114 (expression -> llamarFuncion .)
    EQ              reduce using rule 114 (expression -> llamarFuncion .)
    NEQ             reduce using rule 114 (expression -> llamarFuncion .)
    GT              reduce using rule 114 (expression -> llamarFuncion .)
    LT              reduce using rule 114 (expression -> llamarFuncion .)
    GE              reduce using rule 114 (expression -> llamarFuncion .)
    LE              reduce using rule 114 (expression -> llamarFuncion .)
    AND             reduce using rule 114 (expression -> llamarFuncion .)
    OR              reduce using rule 114 (expression -> llamarFuncion .)
    PLUS            reduce using rule 114 (expression -> llamarFuncion .)
    MINUS           reduce using rule 114 (expression -> llamarFuncion .)
    TIMES           reduce using rule 114 (expression -> llamarFuncion .)
    DIVIDE          reduce using rule 114 (expression -> llamarFuncion .)
    MOD             reduce using rule 114 (expression -> llamarFuncion .)
    LBRACE          reduce using rule 114 (expression -> llamarFuncion .)
    IDENTIFIER      reduce using rule 114 (expression -> llamarFuncion .)
    VAR             reduce using rule 114 (expression -> llamarFuncion .)
    TYPE            reduce using rule 114 (expression -> llamarFuncion .)
    FOR             reduce using rule 114 (expression -> llamarFuncion .)
    PACKAGE         reduce using rule 114 (expression -> llamarFuncion .)
    IMPORT          reduce using rule 114 (expression -> llamarFuncion .)
    SWITCH          reduce using rule 114 (expression -> llamarFuncion .)
    IF              reduce using rule 114 (expression -> llamarFuncion .)
    FUNC            reduce using rule 114 (expression -> llamarFuncion .)
    $end            reduce using rule 114 (expression -> llamarFuncion .)
    RBRACE          reduce using rule 114 (expression -> llamarFuncion .)
    CASE            reduce using rule 114 (expression -> llamarFuncion .)
    DEFAULT         reduce using rule 114 (expression -> llamarFuncion .)
    RETURN          reduce using rule 114 (expression -> llamarFuncion .)
    COMMA           reduce using rule 114 (expression -> llamarFuncion .)
    RPAREN          reduce using rule 114 (expression -> llamarFuncion .)
    SEMICOLON       reduce using rule 114 (expression -> llamarFuncion .)
    RBRACKET        reduce using rule 114 (expression -> llamarFuncion .)
    COLON           reduce using rule 114 (expression -> llamarFuncion .)


state 53

    (122) expression -> MINUS . expression
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    expression                     shift and go to state 112
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 54

    (123) expression -> LPAREN . expression RPAREN
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    expression                     shift and go to state 113
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 55

    (143) expression -> function_literal .

    DOT             reduce using rule 143 (expression -> function_literal .)
    LBRACKET        reduce using rule 143 (expression -> function_literal .)
    EQ              reduce using rule 143 (expression -> function_literal .)
    NEQ             reduce using rule 143 (expression -> function_literal .)
    GT              reduce using rule 143 (expression -> function_literal .)
    LT              reduce using rule 143 (expression -> function_literal .)
    GE              reduce using rule 143 (expression -> function_literal .)
    LE              reduce using rule 143 (expression -> function_literal .)
    AND             reduce using rule 143 (expression -> function_literal .)
    OR              reduce using rule 143 (expression -> function_literal .)
    PLUS            reduce using rule 143 (expression -> function_literal .)
    MINUS           reduce using rule 143 (expression -> function_literal .)
    TIMES           reduce using rule 143 (expression -> function_literal .)
    DIVIDE          reduce using rule 143 (expression -> function_literal .)
    MOD             reduce using rule 143 (expression -> function_literal .)
    LBRACE          reduce using rule 143 (expression -> function_literal .)
    IDENTIFIER      reduce using rule 143 (expression -> function_literal .)
    VAR             reduce using rule 143 (expression -> function_literal .)
    TYPE            reduce using rule 143 (expression -> function_literal .)
    FOR             reduce using rule 143 (expression -> function_literal .)
    PACKAGE         reduce using rule 143 (expression -> function_literal .)
    IMPORT          reduce using rule 143 (expression -> function_literal .)
    SWITCH          reduce using rule 143 (expression -> function_literal .)
    IF              reduce using rule 143 (expression -> function_literal .)
    FUNC            reduce using rule 143 (expression -> function_literal .)
    $end            reduce using rule 143 (expression -> function_literal .)
    RBRACE          reduce using rule 143 (expression -> function_literal .)
    CASE            reduce using rule 143 (expression -> function_literal .)
    DEFAULT         reduce using rule 143 (expression -> function_literal .)
    RETURN          reduce using rule 143 (expression -> function_literal .)
    COMMA           reduce using rule 143 (expression -> function_literal .)
    RPAREN          reduce using rule 143 (expression -> function_literal .)
    SEMICOLON       reduce using rule 143 (expression -> function_literal .)
    RBRACKET        reduce using rule 143 (expression -> function_literal .)
    COLON           reduce using rule 143 (expression -> function_literal .)


state 56

    (146) slice_literal -> LBRACKET . RBRACKET type_name LBRACE elements RBRACE

    RBRACKET        shift and go to state 114


state 57

    (128) function_literal -> FUNC . LPAREN parameters RPAREN return_type block

    LPAREN          shift and go to state 115


state 58

    (23) package -> PACKAGE MAIN .

    IDENTIFIER      reduce using rule 23 (package -> PACKAGE MAIN .)
    VAR             reduce using rule 23 (package -> PACKAGE MAIN .)
    TYPE            reduce using rule 23 (package -> PACKAGE MAIN .)
    FOR             reduce using rule 23 (package -> PACKAGE MAIN .)
    PACKAGE         reduce using rule 23 (package -> PACKAGE MAIN .)
    IMPORT          reduce using rule 23 (package -> PACKAGE MAIN .)
    SWITCH          reduce using rule 23 (package -> PACKAGE MAIN .)
    IF              reduce using rule 23 (package -> PACKAGE MAIN .)
    FUNC            reduce using rule 23 (package -> PACKAGE MAIN .)
    $end            reduce using rule 23 (package -> PACKAGE MAIN .)
    RBRACE          reduce using rule 23 (package -> PACKAGE MAIN .)
    CASE            reduce using rule 23 (package -> PACKAGE MAIN .)
    DEFAULT         reduce using rule 23 (package -> PACKAGE MAIN .)
    RETURN          reduce using rule 23 (package -> PACKAGE MAIN .)


state 59

    (24) package -> PACKAGE IDENTIFIER .

    IDENTIFIER      reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    VAR             reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    TYPE            reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    FOR             reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    PACKAGE         reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    IMPORT          reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    SWITCH          reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    IF              reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    FUNC            reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    $end            reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    RBRACE          reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    CASE            reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    DEFAULT         reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    RETURN          reduce using rule 24 (package -> PACKAGE IDENTIFIER .)


state 60

    (25) import -> IMPORT STRING .

    IDENTIFIER      reduce using rule 25 (import -> IMPORT STRING .)
    VAR             reduce using rule 25 (import -> IMPORT STRING .)
    TYPE            reduce using rule 25 (import -> IMPORT STRING .)
    FOR             reduce using rule 25 (import -> IMPORT STRING .)
    PACKAGE         reduce using rule 25 (import -> IMPORT STRING .)
    IMPORT          reduce using rule 25 (import -> IMPORT STRING .)
    SWITCH          reduce using rule 25 (import -> IMPORT STRING .)
    IF              reduce using rule 25 (import -> IMPORT STRING .)
    FUNC            reduce using rule 25 (import -> IMPORT STRING .)
    $end            reduce using rule 25 (import -> IMPORT STRING .)
    RBRACE          reduce using rule 25 (import -> IMPORT STRING .)
    CASE            reduce using rule 25 (import -> IMPORT STRING .)
    DEFAULT         reduce using rule 25 (import -> IMPORT STRING .)
    RETURN          reduce using rule 25 (import -> IMPORT STRING .)


state 61

    (26) import -> IMPORT LPAREN . import_list RPAREN
    (27) import_list -> . STRING
    (28) import_list -> . import_list STRING

    STRING          shift and go to state 117

    import_list                    shift and go to state 116

state 62

    (63) switch -> SWITCH expression . LBRACE caseBlocks RBRACE
    (45) expression -> expression . comparador expression
    (46) expression -> expression . operadorLogico expression
    (115) expression -> expression . operator expression
    (116) expression -> expression . DOT IDENTIFIER
    (149) expression -> expression . LBRACKET expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (151) expression -> expression . LBRACKET COLON expression RBRACKET
    (152) expression -> expression . LBRACKET expression COLON RBRACKET
    (56) comparador -> . EQ
    (57) comparador -> . NEQ
    (58) comparador -> . GT
    (59) comparador -> . LT
    (60) comparador -> . GE
    (61) comparador -> . LE
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR
    (117) operator -> . PLUS
    (118) operator -> . MINUS
    (119) operator -> . TIMES
    (120) operator -> . DIVIDE
    (121) operator -> . MOD

    LBRACE          shift and go to state 118
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    GT              shift and go to state 96
    LT              shift and go to state 97
    GE              shift and go to state 98
    LE              shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

    comparador                     shift and go to state 119
    operadorLogico                 shift and go to state 90
    operator                       shift and go to state 91

state 63

    (106) expression -> IDENTIFIER .
    (42) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN

  ! shift/reduce conflict for DOT resolved as shift
    LBRACE          reduce using rule 106 (expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 106 (expression -> IDENTIFIER .)
    EQ              reduce using rule 106 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 106 (expression -> IDENTIFIER .)
    GT              reduce using rule 106 (expression -> IDENTIFIER .)
    LT              reduce using rule 106 (expression -> IDENTIFIER .)
    GE              reduce using rule 106 (expression -> IDENTIFIER .)
    LE              reduce using rule 106 (expression -> IDENTIFIER .)
    AND             reduce using rule 106 (expression -> IDENTIFIER .)
    OR              reduce using rule 106 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 106 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 106 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 106 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 106 (expression -> IDENTIFIER .)
    MOD             reduce using rule 106 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 106 (expression -> IDENTIFIER .)
    VAR             reduce using rule 106 (expression -> IDENTIFIER .)
    TYPE            reduce using rule 106 (expression -> IDENTIFIER .)
    FOR             reduce using rule 106 (expression -> IDENTIFIER .)
    PACKAGE         reduce using rule 106 (expression -> IDENTIFIER .)
    IMPORT          reduce using rule 106 (expression -> IDENTIFIER .)
    SWITCH          reduce using rule 106 (expression -> IDENTIFIER .)
    IF              reduce using rule 106 (expression -> IDENTIFIER .)
    FUNC            reduce using rule 106 (expression -> IDENTIFIER .)
    $end            reduce using rule 106 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 106 (expression -> IDENTIFIER .)
    CASE            reduce using rule 106 (expression -> IDENTIFIER .)
    DEFAULT         reduce using rule 106 (expression -> IDENTIFIER .)
    RETURN          reduce using rule 106 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 106 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 106 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 106 (expression -> IDENTIFIER .)
    RBRACKET        reduce using rule 106 (expression -> IDENTIFIER .)
    COLON           reduce using rule 106 (expression -> IDENTIFIER .)
    LPAREN          shift and go to state 34
    DOT             shift and go to state 111

  ! DOT             [ reduce using rule 106 (expression -> IDENTIFIER .) ]


state 64

    (124) if_statement -> IF condicion . block
    (125) if_statement -> IF condicion . block ELSE block
    (52) condicion_compleja -> condicion . operadorLogico condicion
    (53) condicion_compleja -> condicion . operadorLogico condicion_compleja
    (103) block -> . LBRACE statement_list RBRACE
    (104) block -> . LBRACE RBRACE
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR

    LBRACE          shift and go to state 42
    AND             shift and go to state 100
    OR              shift and go to state 101

    block                          shift and go to state 120
    operadorLogico                 shift and go to state 121

state 65

    (126) if_statement -> IF condicion_compleja . block
    (127) if_statement -> IF condicion_compleja . block ELSE block
    (103) block -> . LBRACE statement_list RBRACE
    (104) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 42

    block                          shift and go to state 122

state 66

    (76) function -> FUNC IDENTIFIER . LPAREN params_opt RPAREN block
    (77) function -> FUNC IDENTIFIER . LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE

    LPAREN          shift and go to state 123


state 67

    (97) method_definition -> FUNC LPAREN . IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (128) function_literal -> FUNC LPAREN . parameters RPAREN return_type block
    (129) parameters -> . parameters COMMA parameter
    (130) parameters -> . parameter
    (131) parameters -> . empty
    (132) parameter -> . IDENTIFIER type_name
    (133) parameter -> . identifier_list type_name
    (62) empty -> .
    (134) identifier_list -> . IDENTIFIER
    (135) identifier_list -> . IDENTIFIER COMMA identifier_list

    IDENTIFIER      shift and go to state 124
    RPAREN          reduce using rule 62 (empty -> .)
    COMMA           reduce using rule 62 (empty -> .)

    parameters                     shift and go to state 125
    parameter                      shift and go to state 126
    empty                          shift and go to state 127
    identifier_list                shift and go to state 128

state 68

    (80) function -> FUNC MAIN . LPAREN params_opt RPAREN block

    LPAREN          shift and go to state 129


state 69

    (106) expression -> IDENTIFIER .
    (90) struct_literal -> IDENTIFIER . LBRACE struct_field_assignments RBRACE
    (42) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN

  ! shift/reduce conflict for DOT resolved as shift
    LBRACKET        reduce using rule 106 (expression -> IDENTIFIER .)
    EQ              reduce using rule 106 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 106 (expression -> IDENTIFIER .)
    GT              reduce using rule 106 (expression -> IDENTIFIER .)
    LT              reduce using rule 106 (expression -> IDENTIFIER .)
    GE              reduce using rule 106 (expression -> IDENTIFIER .)
    LE              reduce using rule 106 (expression -> IDENTIFIER .)
    AND             reduce using rule 106 (expression -> IDENTIFIER .)
    OR              reduce using rule 106 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 106 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 106 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 106 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 106 (expression -> IDENTIFIER .)
    MOD             reduce using rule 106 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 106 (expression -> IDENTIFIER .)
    VAR             reduce using rule 106 (expression -> IDENTIFIER .)
    TYPE            reduce using rule 106 (expression -> IDENTIFIER .)
    FOR             reduce using rule 106 (expression -> IDENTIFIER .)
    PACKAGE         reduce using rule 106 (expression -> IDENTIFIER .)
    IMPORT          reduce using rule 106 (expression -> IDENTIFIER .)
    SWITCH          reduce using rule 106 (expression -> IDENTIFIER .)
    IF              reduce using rule 106 (expression -> IDENTIFIER .)
    FUNC            reduce using rule 106 (expression -> IDENTIFIER .)
    $end            reduce using rule 106 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 106 (expression -> IDENTIFIER .)
    CASE            reduce using rule 106 (expression -> IDENTIFIER .)
    DEFAULT         reduce using rule 106 (expression -> IDENTIFIER .)
    RETURN          reduce using rule 106 (expression -> IDENTIFIER .)
    LBRACE          shift and go to state 130
    LPAREN          shift and go to state 34
    DOT             shift and go to state 111

  ! DOT             [ reduce using rule 106 (expression -> IDENTIFIER .) ]


state 70

    (35) assignment -> IDENTIFIER DECLARE_ASSIGN expression .
    (45) expression -> expression . comparador expression
    (46) expression -> expression . operadorLogico expression
    (115) expression -> expression . operator expression
    (116) expression -> expression . DOT IDENTIFIER
    (149) expression -> expression . LBRACKET expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (151) expression -> expression . LBRACKET COLON expression RBRACKET
    (152) expression -> expression . LBRACKET expression COLON RBRACKET
    (56) comparador -> . EQ
    (57) comparador -> . NEQ
    (58) comparador -> . GT
    (59) comparador -> . LT
    (60) comparador -> . GE
    (61) comparador -> . LE
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR
    (117) operator -> . PLUS
    (118) operator -> . MINUS
    (119) operator -> . TIMES
    (120) operator -> . DIVIDE
    (121) operator -> . MOD

    IDENTIFIER      reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    VAR             reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    TYPE            reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    FOR             reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    PACKAGE         reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    IMPORT          reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    SWITCH          reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    IF              reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    FUNC            reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    $end            reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    RBRACE          reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    CASE            reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    DEFAULT         reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    RETURN          reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    GT              shift and go to state 96
    LT              shift and go to state 97
    GE              shift and go to state 98
    LE              shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

    comparador                     shift and go to state 119
    operadorLogico                 shift and go to state 90
    operator                       shift and go to state 91

state 71

    (36) assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .

    IDENTIFIER      reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    VAR             reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    TYPE            reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    FOR             reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    PACKAGE         reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    IMPORT          reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    SWITCH          reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    IF              reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    FUNC            reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    $end            reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    RBRACE          reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    CASE            reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    DEFAULT         reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    RETURN          reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)


state 72

    (39) assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .
    (145) declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .
    (113) expression -> slice_literal .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for VAR resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for TYPE resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for FOR resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IMPORT resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for SWITCH resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IF resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for FUNC resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for $end resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for RBRACE resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for CASE resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for RETURN resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for VAR resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for TYPE resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for FOR resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IMPORT resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for SWITCH resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IF resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for FUNC resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for $end resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for RBRACE resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for CASE resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for RETURN resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    IDENTIFIER      reduce using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    VAR             reduce using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    TYPE            reduce using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    FOR             reduce using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    PACKAGE         reduce using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    IMPORT          reduce using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    SWITCH          reduce using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    IF              reduce using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    FUNC            reduce using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    $end            reduce using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    RBRACE          reduce using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    CASE            reduce using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    DEFAULT         reduce using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    RETURN          reduce using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    DOT             reduce using rule 113 (expression -> slice_literal .)
    LBRACKET        reduce using rule 113 (expression -> slice_literal .)
    EQ              reduce using rule 113 (expression -> slice_literal .)
    NEQ             reduce using rule 113 (expression -> slice_literal .)
    GT              reduce using rule 113 (expression -> slice_literal .)
    LT              reduce using rule 113 (expression -> slice_literal .)
    GE              reduce using rule 113 (expression -> slice_literal .)
    LE              reduce using rule 113 (expression -> slice_literal .)
    AND             reduce using rule 113 (expression -> slice_literal .)
    OR              reduce using rule 113 (expression -> slice_literal .)
    PLUS            reduce using rule 113 (expression -> slice_literal .)
    MINUS           reduce using rule 113 (expression -> slice_literal .)
    TIMES           reduce using rule 113 (expression -> slice_literal .)
    DIVIDE          reduce using rule 113 (expression -> slice_literal .)
    MOD             reduce using rule 113 (expression -> slice_literal .)

  ! IDENTIFIER      [ reduce using rule 145 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! VAR             [ reduce using rule 145 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! TYPE            [ reduce using rule 145 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! FOR             [ reduce using rule 145 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! PACKAGE         [ reduce using rule 145 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! IMPORT          [ reduce using rule 145 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! SWITCH          [ reduce using rule 145 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! IF              [ reduce using rule 145 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! FUNC            [ reduce using rule 145 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! $end            [ reduce using rule 145 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! RBRACE          [ reduce using rule 145 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! CASE            [ reduce using rule 145 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! DEFAULT         [ reduce using rule 145 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! RETURN          [ reduce using rule 145 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! IDENTIFIER      [ reduce using rule 113 (expression -> slice_literal .) ]
  ! VAR             [ reduce using rule 113 (expression -> slice_literal .) ]
  ! TYPE            [ reduce using rule 113 (expression -> slice_literal .) ]
  ! FOR             [ reduce using rule 113 (expression -> slice_literal .) ]
  ! PACKAGE         [ reduce using rule 113 (expression -> slice_literal .) ]
  ! IMPORT          [ reduce using rule 113 (expression -> slice_literal .) ]
  ! SWITCH          [ reduce using rule 113 (expression -> slice_literal .) ]
  ! IF              [ reduce using rule 113 (expression -> slice_literal .) ]
  ! FUNC            [ reduce using rule 113 (expression -> slice_literal .) ]
  ! $end            [ reduce using rule 113 (expression -> slice_literal .) ]
  ! RBRACE          [ reduce using rule 113 (expression -> slice_literal .) ]
  ! CASE            [ reduce using rule 113 (expression -> slice_literal .) ]
  ! DEFAULT         [ reduce using rule 113 (expression -> slice_literal .) ]
  ! RETURN          [ reduce using rule 113 (expression -> slice_literal .) ]


state 73

    (68) map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .

    IDENTIFIER      reduce using rule 68 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    VAR             reduce using rule 68 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    TYPE            reduce using rule 68 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    FOR             reduce using rule 68 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    PACKAGE         reduce using rule 68 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    IMPORT          reduce using rule 68 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    SWITCH          reduce using rule 68 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    IF              reduce using rule 68 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    FUNC            reduce using rule 68 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    $end            reduce using rule 68 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    RBRACE          reduce using rule 68 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    CASE            reduce using rule 68 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    DEFAULT         reduce using rule 68 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    RETURN          reduce using rule 68 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)


state 74

    (70) mapLiteral -> MAP . LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE

    LBRACKET        shift and go to state 131


state 75

    (41) assignment -> IDENTIFIER ASSIGN expression .
    (45) expression -> expression . comparador expression
    (46) expression -> expression . operadorLogico expression
    (115) expression -> expression . operator expression
    (116) expression -> expression . DOT IDENTIFIER
    (149) expression -> expression . LBRACKET expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (151) expression -> expression . LBRACKET COLON expression RBRACKET
    (152) expression -> expression . LBRACKET expression COLON RBRACKET
    (56) comparador -> . EQ
    (57) comparador -> . NEQ
    (58) comparador -> . GT
    (59) comparador -> . LT
    (60) comparador -> . GE
    (61) comparador -> . LE
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR
    (117) operator -> . PLUS
    (118) operator -> . MINUS
    (119) operator -> . TIMES
    (120) operator -> . DIVIDE
    (121) operator -> . MOD

    IDENTIFIER      reduce using rule 41 (assignment -> IDENTIFIER ASSIGN expression .)
    VAR             reduce using rule 41 (assignment -> IDENTIFIER ASSIGN expression .)
    TYPE            reduce using rule 41 (assignment -> IDENTIFIER ASSIGN expression .)
    FOR             reduce using rule 41 (assignment -> IDENTIFIER ASSIGN expression .)
    PACKAGE         reduce using rule 41 (assignment -> IDENTIFIER ASSIGN expression .)
    IMPORT          reduce using rule 41 (assignment -> IDENTIFIER ASSIGN expression .)
    SWITCH          reduce using rule 41 (assignment -> IDENTIFIER ASSIGN expression .)
    IF              reduce using rule 41 (assignment -> IDENTIFIER ASSIGN expression .)
    FUNC            reduce using rule 41 (assignment -> IDENTIFIER ASSIGN expression .)
    $end            reduce using rule 41 (assignment -> IDENTIFIER ASSIGN expression .)
    RBRACE          reduce using rule 41 (assignment -> IDENTIFIER ASSIGN expression .)
    CASE            reduce using rule 41 (assignment -> IDENTIFIER ASSIGN expression .)
    DEFAULT         reduce using rule 41 (assignment -> IDENTIFIER ASSIGN expression .)
    RETURN          reduce using rule 41 (assignment -> IDENTIFIER ASSIGN expression .)
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    GT              shift and go to state 96
    LT              shift and go to state 97
    GE              shift and go to state 98
    LE              shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

    comparador                     shift and go to state 119
    operadorLogico                 shift and go to state 90
    operator                       shift and go to state 91

state 76

    (33) input -> IDENTIFIER DOT IDENTIFIER . LPAREN AMPERSAND IDENTIFIER RPAREN
    (44) llamarFuncion -> IDENTIFIER DOT IDENTIFIER . LPAREN argument_list_opt RPAREN
    (88) print_statement -> IDENTIFIER DOT IDENTIFIER . LPAREN argument_list_opt RPAREN

    LPAREN          shift and go to state 132


state 77

    (42) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt . RPAREN
    (43) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt . COMMA expression RPAREN

    RPAREN          shift and go to state 133
    COMMA           shift and go to state 134


state 78

    (47) argument_list -> expression .
    (45) expression -> expression . comparador expression
    (46) expression -> expression . operadorLogico expression
    (115) expression -> expression . operator expression
    (116) expression -> expression . DOT IDENTIFIER
    (149) expression -> expression . LBRACKET expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (151) expression -> expression . LBRACKET COLON expression RBRACKET
    (152) expression -> expression . LBRACKET expression COLON RBRACKET
    (56) comparador -> . EQ
    (57) comparador -> . NEQ
    (58) comparador -> . GT
    (59) comparador -> . LT
    (60) comparador -> . GE
    (61) comparador -> . LE
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR
    (117) operator -> . PLUS
    (118) operator -> . MINUS
    (119) operator -> . TIMES
    (120) operator -> . DIVIDE
    (121) operator -> . MOD

    COMMA           reduce using rule 47 (argument_list -> expression .)
    RPAREN          reduce using rule 47 (argument_list -> expression .)
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    GT              shift and go to state 96
    LT              shift and go to state 97
    GE              shift and go to state 98
    LE              shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

    comparador                     shift and go to state 119
    operadorLogico                 shift and go to state 90
    operator                       shift and go to state 91

state 79

    (49) argument_list_opt -> argument_list .
    (48) argument_list -> argument_list . COMMA expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 49 (argument_list_opt -> argument_list .)
    COMMA           shift and go to state 135

  ! COMMA           [ reduce using rule 49 (argument_list_opt -> argument_list .) ]


state 80

    (137) type_name -> IDENTIFIER .

    ASSIGN          reduce using rule 137 (type_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 137 (type_name -> IDENTIFIER .)
    VAR             reduce using rule 137 (type_name -> IDENTIFIER .)
    TYPE            reduce using rule 137 (type_name -> IDENTIFIER .)
    FOR             reduce using rule 137 (type_name -> IDENTIFIER .)
    PACKAGE         reduce using rule 137 (type_name -> IDENTIFIER .)
    IMPORT          reduce using rule 137 (type_name -> IDENTIFIER .)
    SWITCH          reduce using rule 137 (type_name -> IDENTIFIER .)
    IF              reduce using rule 137 (type_name -> IDENTIFIER .)
    FUNC            reduce using rule 137 (type_name -> IDENTIFIER .)
    $end            reduce using rule 137 (type_name -> IDENTIFIER .)
    RBRACE          reduce using rule 137 (type_name -> IDENTIFIER .)
    CASE            reduce using rule 137 (type_name -> IDENTIFIER .)
    DEFAULT         reduce using rule 137 (type_name -> IDENTIFIER .)
    RETURN          reduce using rule 137 (type_name -> IDENTIFIER .)
    LBRACE          reduce using rule 137 (type_name -> IDENTIFIER .)
    RPAREN          reduce using rule 137 (type_name -> IDENTIFIER .)
    COMMA           reduce using rule 137 (type_name -> IDENTIFIER .)
    RBRACKET        reduce using rule 137 (type_name -> IDENTIFIER .)


state 81

    (37) assignment -> VAR IDENTIFIER type_name . ASSIGN expression
    (38) assignment -> VAR IDENTIFIER type_name . ASSIGN llamarFuncion
    (40) assignment -> VAR IDENTIFIER type_name . ASSIGN slice_literal
    (34) var_declaration -> VAR IDENTIFIER type_name .

    ASSIGN          shift and go to state 136
    IDENTIFIER      reduce using rule 34 (var_declaration -> VAR IDENTIFIER type_name .)
    VAR             reduce using rule 34 (var_declaration -> VAR IDENTIFIER type_name .)
    TYPE            reduce using rule 34 (var_declaration -> VAR IDENTIFIER type_name .)
    FOR             reduce using rule 34 (var_declaration -> VAR IDENTIFIER type_name .)
    PACKAGE         reduce using rule 34 (var_declaration -> VAR IDENTIFIER type_name .)
    IMPORT          reduce using rule 34 (var_declaration -> VAR IDENTIFIER type_name .)
    SWITCH          reduce using rule 34 (var_declaration -> VAR IDENTIFIER type_name .)
    IF              reduce using rule 34 (var_declaration -> VAR IDENTIFIER type_name .)
    FUNC            reduce using rule 34 (var_declaration -> VAR IDENTIFIER type_name .)
    $end            reduce using rule 34 (var_declaration -> VAR IDENTIFIER type_name .)
    RBRACE          reduce using rule 34 (var_declaration -> VAR IDENTIFIER type_name .)
    CASE            reduce using rule 34 (var_declaration -> VAR IDENTIFIER type_name .)
    DEFAULT         reduce using rule 34 (var_declaration -> VAR IDENTIFIER type_name .)
    RETURN          reduce using rule 34 (var_declaration -> VAR IDENTIFIER type_name .)


state 82

    (69) map -> VAR IDENTIFIER ASSIGN . mapLiteral
    (70) mapLiteral -> . MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE

    MAP             shift and go to state 74

    mapLiteral                     shift and go to state 137

state 83

    (144) slice_declaration -> VAR IDENTIFIER LBRACKET . RBRACKET type_name
    (138) type_name -> LBRACKET . RBRACKET type_name

    RBRACKET        shift and go to state 138


state 84

    (136) type_name -> DATATYPE .

    ASSIGN          reduce using rule 136 (type_name -> DATATYPE .)
    IDENTIFIER      reduce using rule 136 (type_name -> DATATYPE .)
    VAR             reduce using rule 136 (type_name -> DATATYPE .)
    TYPE            reduce using rule 136 (type_name -> DATATYPE .)
    FOR             reduce using rule 136 (type_name -> DATATYPE .)
    PACKAGE         reduce using rule 136 (type_name -> DATATYPE .)
    IMPORT          reduce using rule 136 (type_name -> DATATYPE .)
    SWITCH          reduce using rule 136 (type_name -> DATATYPE .)
    IF              reduce using rule 136 (type_name -> DATATYPE .)
    FUNC            reduce using rule 136 (type_name -> DATATYPE .)
    $end            reduce using rule 136 (type_name -> DATATYPE .)
    RBRACE          reduce using rule 136 (type_name -> DATATYPE .)
    CASE            reduce using rule 136 (type_name -> DATATYPE .)
    DEFAULT         reduce using rule 136 (type_name -> DATATYPE .)
    RETURN          reduce using rule 136 (type_name -> DATATYPE .)
    LBRACE          reduce using rule 136 (type_name -> DATATYPE .)
    RPAREN          reduce using rule 136 (type_name -> DATATYPE .)
    COMMA           reduce using rule 136 (type_name -> DATATYPE .)
    RBRACKET        reduce using rule 136 (type_name -> DATATYPE .)


state 85

    (139) type_name -> FUNC . LPAREN parameters RPAREN return_type

    LPAREN          shift and go to state 139


state 86

    (89) struct_definition -> TYPE IDENTIFIER STRUCT . LBRACE struct_fields RBRACE

    LBRACE          shift and go to state 140


state 87

    (98) for_statement -> FOR shortAssignment SEMICOLON . condicion SEMICOLON expression block
    (51) condicion -> . expression comparador expression
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    condicion                      shift and go to state 141
    expression                     shift and go to state 39
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 88

    (100) for_statement -> FOR condicion block .

    IDENTIFIER      reduce using rule 100 (for_statement -> FOR condicion block .)
    VAR             reduce using rule 100 (for_statement -> FOR condicion block .)
    TYPE            reduce using rule 100 (for_statement -> FOR condicion block .)
    FOR             reduce using rule 100 (for_statement -> FOR condicion block .)
    PACKAGE         reduce using rule 100 (for_statement -> FOR condicion block .)
    IMPORT          reduce using rule 100 (for_statement -> FOR condicion block .)
    SWITCH          reduce using rule 100 (for_statement -> FOR condicion block .)
    IF              reduce using rule 100 (for_statement -> FOR condicion block .)
    FUNC            reduce using rule 100 (for_statement -> FOR condicion block .)
    $end            reduce using rule 100 (for_statement -> FOR condicion block .)
    RBRACE          reduce using rule 100 (for_statement -> FOR condicion block .)
    CASE            reduce using rule 100 (for_statement -> FOR condicion block .)
    DEFAULT         reduce using rule 100 (for_statement -> FOR condicion block .)
    RETURN          reduce using rule 100 (for_statement -> FOR condicion block .)


state 89

    (51) condicion -> expression comparador . expression
    (45) expression -> expression comparador . expression
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    expression                     shift and go to state 142
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 90

    (46) expression -> expression operadorLogico . expression
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    expression                     shift and go to state 143
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 91

    (115) expression -> expression operator . expression
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    expression                     shift and go to state 144
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 92

    (116) expression -> expression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 145


state 93

    (149) expression -> expression LBRACKET . expression RBRACKET
    (150) expression -> expression LBRACKET . expression COLON expression RBRACKET
    (151) expression -> expression LBRACKET . COLON expression RBRACKET
    (152) expression -> expression LBRACKET . expression COLON RBRACKET
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    COLON           shift and go to state 147
    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    expression                     shift and go to state 146
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 94

    (56) comparador -> EQ .

    NUMBER          reduce using rule 56 (comparador -> EQ .)
    IDENTIFIER      reduce using rule 56 (comparador -> EQ .)
    RUNE            reduce using rule 56 (comparador -> EQ .)
    STRING          reduce using rule 56 (comparador -> EQ .)
    RAW_STRING      reduce using rule 56 (comparador -> EQ .)
    TRUE            reduce using rule 56 (comparador -> EQ .)
    FALSE           reduce using rule 56 (comparador -> EQ .)
    NIL             reduce using rule 56 (comparador -> EQ .)
    MINUS           reduce using rule 56 (comparador -> EQ .)
    LPAREN          reduce using rule 56 (comparador -> EQ .)
    LBRACKET        reduce using rule 56 (comparador -> EQ .)
    FUNC            reduce using rule 56 (comparador -> EQ .)


state 95

    (57) comparador -> NEQ .

    NUMBER          reduce using rule 57 (comparador -> NEQ .)
    IDENTIFIER      reduce using rule 57 (comparador -> NEQ .)
    RUNE            reduce using rule 57 (comparador -> NEQ .)
    STRING          reduce using rule 57 (comparador -> NEQ .)
    RAW_STRING      reduce using rule 57 (comparador -> NEQ .)
    TRUE            reduce using rule 57 (comparador -> NEQ .)
    FALSE           reduce using rule 57 (comparador -> NEQ .)
    NIL             reduce using rule 57 (comparador -> NEQ .)
    MINUS           reduce using rule 57 (comparador -> NEQ .)
    LPAREN          reduce using rule 57 (comparador -> NEQ .)
    LBRACKET        reduce using rule 57 (comparador -> NEQ .)
    FUNC            reduce using rule 57 (comparador -> NEQ .)


state 96

    (58) comparador -> GT .

    NUMBER          reduce using rule 58 (comparador -> GT .)
    IDENTIFIER      reduce using rule 58 (comparador -> GT .)
    RUNE            reduce using rule 58 (comparador -> GT .)
    STRING          reduce using rule 58 (comparador -> GT .)
    RAW_STRING      reduce using rule 58 (comparador -> GT .)
    TRUE            reduce using rule 58 (comparador -> GT .)
    FALSE           reduce using rule 58 (comparador -> GT .)
    NIL             reduce using rule 58 (comparador -> GT .)
    MINUS           reduce using rule 58 (comparador -> GT .)
    LPAREN          reduce using rule 58 (comparador -> GT .)
    LBRACKET        reduce using rule 58 (comparador -> GT .)
    FUNC            reduce using rule 58 (comparador -> GT .)


state 97

    (59) comparador -> LT .

    NUMBER          reduce using rule 59 (comparador -> LT .)
    IDENTIFIER      reduce using rule 59 (comparador -> LT .)
    RUNE            reduce using rule 59 (comparador -> LT .)
    STRING          reduce using rule 59 (comparador -> LT .)
    RAW_STRING      reduce using rule 59 (comparador -> LT .)
    TRUE            reduce using rule 59 (comparador -> LT .)
    FALSE           reduce using rule 59 (comparador -> LT .)
    NIL             reduce using rule 59 (comparador -> LT .)
    MINUS           reduce using rule 59 (comparador -> LT .)
    LPAREN          reduce using rule 59 (comparador -> LT .)
    LBRACKET        reduce using rule 59 (comparador -> LT .)
    FUNC            reduce using rule 59 (comparador -> LT .)


state 98

    (60) comparador -> GE .

    NUMBER          reduce using rule 60 (comparador -> GE .)
    IDENTIFIER      reduce using rule 60 (comparador -> GE .)
    RUNE            reduce using rule 60 (comparador -> GE .)
    STRING          reduce using rule 60 (comparador -> GE .)
    RAW_STRING      reduce using rule 60 (comparador -> GE .)
    TRUE            reduce using rule 60 (comparador -> GE .)
    FALSE           reduce using rule 60 (comparador -> GE .)
    NIL             reduce using rule 60 (comparador -> GE .)
    MINUS           reduce using rule 60 (comparador -> GE .)
    LPAREN          reduce using rule 60 (comparador -> GE .)
    LBRACKET        reduce using rule 60 (comparador -> GE .)
    FUNC            reduce using rule 60 (comparador -> GE .)


state 99

    (61) comparador -> LE .

    NUMBER          reduce using rule 61 (comparador -> LE .)
    IDENTIFIER      reduce using rule 61 (comparador -> LE .)
    RUNE            reduce using rule 61 (comparador -> LE .)
    STRING          reduce using rule 61 (comparador -> LE .)
    RAW_STRING      reduce using rule 61 (comparador -> LE .)
    TRUE            reduce using rule 61 (comparador -> LE .)
    FALSE           reduce using rule 61 (comparador -> LE .)
    NIL             reduce using rule 61 (comparador -> LE .)
    MINUS           reduce using rule 61 (comparador -> LE .)
    LPAREN          reduce using rule 61 (comparador -> LE .)
    LBRACKET        reduce using rule 61 (comparador -> LE .)
    FUNC            reduce using rule 61 (comparador -> LE .)


state 100

    (54) operadorLogico -> AND .

    NUMBER          reduce using rule 54 (operadorLogico -> AND .)
    IDENTIFIER      reduce using rule 54 (operadorLogico -> AND .)
    RUNE            reduce using rule 54 (operadorLogico -> AND .)
    STRING          reduce using rule 54 (operadorLogico -> AND .)
    RAW_STRING      reduce using rule 54 (operadorLogico -> AND .)
    TRUE            reduce using rule 54 (operadorLogico -> AND .)
    FALSE           reduce using rule 54 (operadorLogico -> AND .)
    NIL             reduce using rule 54 (operadorLogico -> AND .)
    MINUS           reduce using rule 54 (operadorLogico -> AND .)
    LPAREN          reduce using rule 54 (operadorLogico -> AND .)
    LBRACKET        reduce using rule 54 (operadorLogico -> AND .)
    FUNC            reduce using rule 54 (operadorLogico -> AND .)


state 101

    (55) operadorLogico -> OR .

    NUMBER          reduce using rule 55 (operadorLogico -> OR .)
    IDENTIFIER      reduce using rule 55 (operadorLogico -> OR .)
    RUNE            reduce using rule 55 (operadorLogico -> OR .)
    STRING          reduce using rule 55 (operadorLogico -> OR .)
    RAW_STRING      reduce using rule 55 (operadorLogico -> OR .)
    TRUE            reduce using rule 55 (operadorLogico -> OR .)
    FALSE           reduce using rule 55 (operadorLogico -> OR .)
    NIL             reduce using rule 55 (operadorLogico -> OR .)
    MINUS           reduce using rule 55 (operadorLogico -> OR .)
    LPAREN          reduce using rule 55 (operadorLogico -> OR .)
    LBRACKET        reduce using rule 55 (operadorLogico -> OR .)
    FUNC            reduce using rule 55 (operadorLogico -> OR .)


state 102

    (117) operator -> PLUS .

    NUMBER          reduce using rule 117 (operator -> PLUS .)
    IDENTIFIER      reduce using rule 117 (operator -> PLUS .)
    RUNE            reduce using rule 117 (operator -> PLUS .)
    STRING          reduce using rule 117 (operator -> PLUS .)
    RAW_STRING      reduce using rule 117 (operator -> PLUS .)
    TRUE            reduce using rule 117 (operator -> PLUS .)
    FALSE           reduce using rule 117 (operator -> PLUS .)
    NIL             reduce using rule 117 (operator -> PLUS .)
    MINUS           reduce using rule 117 (operator -> PLUS .)
    LPAREN          reduce using rule 117 (operator -> PLUS .)
    LBRACKET        reduce using rule 117 (operator -> PLUS .)
    FUNC            reduce using rule 117 (operator -> PLUS .)


state 103

    (118) operator -> MINUS .

    NUMBER          reduce using rule 118 (operator -> MINUS .)
    IDENTIFIER      reduce using rule 118 (operator -> MINUS .)
    RUNE            reduce using rule 118 (operator -> MINUS .)
    STRING          reduce using rule 118 (operator -> MINUS .)
    RAW_STRING      reduce using rule 118 (operator -> MINUS .)
    TRUE            reduce using rule 118 (operator -> MINUS .)
    FALSE           reduce using rule 118 (operator -> MINUS .)
    NIL             reduce using rule 118 (operator -> MINUS .)
    MINUS           reduce using rule 118 (operator -> MINUS .)
    LPAREN          reduce using rule 118 (operator -> MINUS .)
    LBRACKET        reduce using rule 118 (operator -> MINUS .)
    FUNC            reduce using rule 118 (operator -> MINUS .)


state 104

    (119) operator -> TIMES .

    NUMBER          reduce using rule 119 (operator -> TIMES .)
    IDENTIFIER      reduce using rule 119 (operator -> TIMES .)
    RUNE            reduce using rule 119 (operator -> TIMES .)
    STRING          reduce using rule 119 (operator -> TIMES .)
    RAW_STRING      reduce using rule 119 (operator -> TIMES .)
    TRUE            reduce using rule 119 (operator -> TIMES .)
    FALSE           reduce using rule 119 (operator -> TIMES .)
    NIL             reduce using rule 119 (operator -> TIMES .)
    MINUS           reduce using rule 119 (operator -> TIMES .)
    LPAREN          reduce using rule 119 (operator -> TIMES .)
    LBRACKET        reduce using rule 119 (operator -> TIMES .)
    FUNC            reduce using rule 119 (operator -> TIMES .)


state 105

    (120) operator -> DIVIDE .

    NUMBER          reduce using rule 120 (operator -> DIVIDE .)
    IDENTIFIER      reduce using rule 120 (operator -> DIVIDE .)
    RUNE            reduce using rule 120 (operator -> DIVIDE .)
    STRING          reduce using rule 120 (operator -> DIVIDE .)
    RAW_STRING      reduce using rule 120 (operator -> DIVIDE .)
    TRUE            reduce using rule 120 (operator -> DIVIDE .)
    FALSE           reduce using rule 120 (operator -> DIVIDE .)
    NIL             reduce using rule 120 (operator -> DIVIDE .)
    MINUS           reduce using rule 120 (operator -> DIVIDE .)
    LPAREN          reduce using rule 120 (operator -> DIVIDE .)
    LBRACKET        reduce using rule 120 (operator -> DIVIDE .)
    FUNC            reduce using rule 120 (operator -> DIVIDE .)


state 106

    (121) operator -> MOD .

    NUMBER          reduce using rule 121 (operator -> MOD .)
    IDENTIFIER      reduce using rule 121 (operator -> MOD .)
    RUNE            reduce using rule 121 (operator -> MOD .)
    STRING          reduce using rule 121 (operator -> MOD .)
    RAW_STRING      reduce using rule 121 (operator -> MOD .)
    TRUE            reduce using rule 121 (operator -> MOD .)
    FALSE           reduce using rule 121 (operator -> MOD .)
    NIL             reduce using rule 121 (operator -> MOD .)
    MINUS           reduce using rule 121 (operator -> MOD .)
    LPAREN          reduce using rule 121 (operator -> MOD .)
    LBRACKET        reduce using rule 121 (operator -> MOD .)
    FUNC            reduce using rule 121 (operator -> MOD .)


state 107

    (99) shortAssignment -> identifier_list DECLARE_ASSIGN . expression
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    expression                     shift and go to state 148
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 108

    (103) block -> LBRACE statement_list . RBRACE
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (39) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (40) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (41) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (98) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (100) for_statement -> . FOR condicion block
    (101) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (63) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (68) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (69) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (124) if_statement -> . IF condicion block
    (125) if_statement -> . IF condicion block ELSE block
    (126) if_statement -> . IF condicion_compleja block
    (127) if_statement -> . IF condicion_compleja block ELSE block
    (76) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (77) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (80) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (97) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER type_name
    (144) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (145) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    RBRACE          shift and go to state 149
    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29

    statement                      shift and go to state 30
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20

state 109

    (104) block -> LBRACE RBRACE .

    IDENTIFIER      reduce using rule 104 (block -> LBRACE RBRACE .)
    VAR             reduce using rule 104 (block -> LBRACE RBRACE .)
    TYPE            reduce using rule 104 (block -> LBRACE RBRACE .)
    FOR             reduce using rule 104 (block -> LBRACE RBRACE .)
    PACKAGE         reduce using rule 104 (block -> LBRACE RBRACE .)
    IMPORT          reduce using rule 104 (block -> LBRACE RBRACE .)
    SWITCH          reduce using rule 104 (block -> LBRACE RBRACE .)
    IF              reduce using rule 104 (block -> LBRACE RBRACE .)
    FUNC            reduce using rule 104 (block -> LBRACE RBRACE .)
    $end            reduce using rule 104 (block -> LBRACE RBRACE .)
    RBRACE          reduce using rule 104 (block -> LBRACE RBRACE .)
    CASE            reduce using rule 104 (block -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 104 (block -> LBRACE RBRACE .)
    RETURN          reduce using rule 104 (block -> LBRACE RBRACE .)
    ELSE            reduce using rule 104 (block -> LBRACE RBRACE .)
    DOT             reduce using rule 104 (block -> LBRACE RBRACE .)
    LBRACKET        reduce using rule 104 (block -> LBRACE RBRACE .)
    EQ              reduce using rule 104 (block -> LBRACE RBRACE .)
    NEQ             reduce using rule 104 (block -> LBRACE RBRACE .)
    GT              reduce using rule 104 (block -> LBRACE RBRACE .)
    LT              reduce using rule 104 (block -> LBRACE RBRACE .)
    GE              reduce using rule 104 (block -> LBRACE RBRACE .)
    LE              reduce using rule 104 (block -> LBRACE RBRACE .)
    AND             reduce using rule 104 (block -> LBRACE RBRACE .)
    OR              reduce using rule 104 (block -> LBRACE RBRACE .)
    PLUS            reduce using rule 104 (block -> LBRACE RBRACE .)
    MINUS           reduce using rule 104 (block -> LBRACE RBRACE .)
    TIMES           reduce using rule 104 (block -> LBRACE RBRACE .)
    DIVIDE          reduce using rule 104 (block -> LBRACE RBRACE .)
    MOD             reduce using rule 104 (block -> LBRACE RBRACE .)
    LBRACE          reduce using rule 104 (block -> LBRACE RBRACE .)
    COMMA           reduce using rule 104 (block -> LBRACE RBRACE .)
    RPAREN          reduce using rule 104 (block -> LBRACE RBRACE .)
    SEMICOLON       reduce using rule 104 (block -> LBRACE RBRACE .)
    RBRACKET        reduce using rule 104 (block -> LBRACE RBRACE .)
    COLON           reduce using rule 104 (block -> LBRACE RBRACE .)


state 110

    (135) identifier_list -> IDENTIFIER COMMA . identifier_list
    (134) identifier_list -> . IDENTIFIER
    (135) identifier_list -> . IDENTIFIER COMMA identifier_list

    IDENTIFIER      shift and go to state 150

    identifier_list                shift and go to state 151

state 111

    (44) llamarFuncion -> IDENTIFIER DOT . IDENTIFIER LPAREN argument_list_opt RPAREN

    IDENTIFIER      shift and go to state 152


state 112

    (122) expression -> MINUS expression .
    (45) expression -> expression . comparador expression
    (46) expression -> expression . operadorLogico expression
    (115) expression -> expression . operator expression
    (116) expression -> expression . DOT IDENTIFIER
    (149) expression -> expression . LBRACKET expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (151) expression -> expression . LBRACKET COLON expression RBRACKET
    (152) expression -> expression . LBRACKET expression COLON RBRACKET
    (56) comparador -> . EQ
    (57) comparador -> . NEQ
    (58) comparador -> . GT
    (59) comparador -> . LT
    (60) comparador -> . GE
    (61) comparador -> . LE
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR
    (117) operator -> . PLUS
    (118) operator -> . MINUS
    (119) operator -> . TIMES
    (120) operator -> . DIVIDE
    (121) operator -> . MOD

    DOT             reduce using rule 122 (expression -> MINUS expression .)
    LBRACKET        reduce using rule 122 (expression -> MINUS expression .)
    EQ              reduce using rule 122 (expression -> MINUS expression .)
    NEQ             reduce using rule 122 (expression -> MINUS expression .)
    GT              reduce using rule 122 (expression -> MINUS expression .)
    LT              reduce using rule 122 (expression -> MINUS expression .)
    GE              reduce using rule 122 (expression -> MINUS expression .)
    LE              reduce using rule 122 (expression -> MINUS expression .)
    AND             reduce using rule 122 (expression -> MINUS expression .)
    OR              reduce using rule 122 (expression -> MINUS expression .)
    PLUS            reduce using rule 122 (expression -> MINUS expression .)
    MINUS           reduce using rule 122 (expression -> MINUS expression .)
    TIMES           reduce using rule 122 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 122 (expression -> MINUS expression .)
    MOD             reduce using rule 122 (expression -> MINUS expression .)
    LBRACE          reduce using rule 122 (expression -> MINUS expression .)
    IDENTIFIER      reduce using rule 122 (expression -> MINUS expression .)
    VAR             reduce using rule 122 (expression -> MINUS expression .)
    TYPE            reduce using rule 122 (expression -> MINUS expression .)
    FOR             reduce using rule 122 (expression -> MINUS expression .)
    PACKAGE         reduce using rule 122 (expression -> MINUS expression .)
    IMPORT          reduce using rule 122 (expression -> MINUS expression .)
    SWITCH          reduce using rule 122 (expression -> MINUS expression .)
    IF              reduce using rule 122 (expression -> MINUS expression .)
    FUNC            reduce using rule 122 (expression -> MINUS expression .)
    $end            reduce using rule 122 (expression -> MINUS expression .)
    RBRACE          reduce using rule 122 (expression -> MINUS expression .)
    CASE            reduce using rule 122 (expression -> MINUS expression .)
    DEFAULT         reduce using rule 122 (expression -> MINUS expression .)
    RETURN          reduce using rule 122 (expression -> MINUS expression .)
    COMMA           reduce using rule 122 (expression -> MINUS expression .)
    RPAREN          reduce using rule 122 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 122 (expression -> MINUS expression .)
    RBRACKET        reduce using rule 122 (expression -> MINUS expression .)
    COLON           reduce using rule 122 (expression -> MINUS expression .)

  ! DOT             [ shift and go to state 92 ]
  ! LBRACKET        [ shift and go to state 93 ]
  ! EQ              [ shift and go to state 94 ]
  ! NEQ             [ shift and go to state 95 ]
  ! GT              [ shift and go to state 96 ]
  ! LT              [ shift and go to state 97 ]
  ! GE              [ shift and go to state 98 ]
  ! LE              [ shift and go to state 99 ]
  ! AND             [ shift and go to state 100 ]
  ! OR              [ shift and go to state 101 ]
  ! PLUS            [ shift and go to state 102 ]
  ! MINUS           [ shift and go to state 103 ]
  ! TIMES           [ shift and go to state 104 ]
  ! DIVIDE          [ shift and go to state 105 ]
  ! MOD             [ shift and go to state 106 ]

    comparador                     shift and go to state 119
    operadorLogico                 shift and go to state 90
    operator                       shift and go to state 91

state 113

    (123) expression -> LPAREN expression . RPAREN
    (45) expression -> expression . comparador expression
    (46) expression -> expression . operadorLogico expression
    (115) expression -> expression . operator expression
    (116) expression -> expression . DOT IDENTIFIER
    (149) expression -> expression . LBRACKET expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (151) expression -> expression . LBRACKET COLON expression RBRACKET
    (152) expression -> expression . LBRACKET expression COLON RBRACKET
    (56) comparador -> . EQ
    (57) comparador -> . NEQ
    (58) comparador -> . GT
    (59) comparador -> . LT
    (60) comparador -> . GE
    (61) comparador -> . LE
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR
    (117) operator -> . PLUS
    (118) operator -> . MINUS
    (119) operator -> . TIMES
    (120) operator -> . DIVIDE
    (121) operator -> . MOD

    RPAREN          shift and go to state 153
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    GT              shift and go to state 96
    LT              shift and go to state 97
    GE              shift and go to state 98
    LE              shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

    comparador                     shift and go to state 119
    operadorLogico                 shift and go to state 90
    operator                       shift and go to state 91

state 114

    (146) slice_literal -> LBRACKET RBRACKET . type_name LBRACE elements RBRACE
    (136) type_name -> . DATATYPE
    (137) type_name -> . IDENTIFIER
    (138) type_name -> . LBRACKET RBRACKET type_name
    (139) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 84
    IDENTIFIER      shift and go to state 80
    LBRACKET        shift and go to state 154
    FUNC            shift and go to state 85

    type_name                      shift and go to state 155

state 115

    (128) function_literal -> FUNC LPAREN . parameters RPAREN return_type block
    (129) parameters -> . parameters COMMA parameter
    (130) parameters -> . parameter
    (131) parameters -> . empty
    (132) parameter -> . IDENTIFIER type_name
    (133) parameter -> . identifier_list type_name
    (62) empty -> .
    (134) identifier_list -> . IDENTIFIER
    (135) identifier_list -> . IDENTIFIER COMMA identifier_list

    IDENTIFIER      shift and go to state 156
    RPAREN          reduce using rule 62 (empty -> .)
    COMMA           reduce using rule 62 (empty -> .)

    parameters                     shift and go to state 125
    parameter                      shift and go to state 126
    empty                          shift and go to state 127
    identifier_list                shift and go to state 128

state 116

    (26) import -> IMPORT LPAREN import_list . RPAREN
    (28) import_list -> import_list . STRING

    RPAREN          shift and go to state 157
    STRING          shift and go to state 158


state 117

    (27) import_list -> STRING .

    RPAREN          reduce using rule 27 (import_list -> STRING .)
    STRING          reduce using rule 27 (import_list -> STRING .)


state 118

    (63) switch -> SWITCH expression LBRACE . caseBlocks RBRACE
    (64) caseBlocks -> . caseBlock
    (65) caseBlocks -> . caseBlock caseBlocks
    (66) caseBlock -> . CASE expression COLON statement_list
    (67) caseBlock -> . DEFAULT COLON statement_list

    CASE            shift and go to state 161
    DEFAULT         shift and go to state 162

    caseBlocks                     shift and go to state 159
    caseBlock                      shift and go to state 160

state 119

    (45) expression -> expression comparador . expression
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    expression                     shift and go to state 163
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 120

    (124) if_statement -> IF condicion block .
    (125) if_statement -> IF condicion block . ELSE block

    IDENTIFIER      reduce using rule 124 (if_statement -> IF condicion block .)
    VAR             reduce using rule 124 (if_statement -> IF condicion block .)
    TYPE            reduce using rule 124 (if_statement -> IF condicion block .)
    FOR             reduce using rule 124 (if_statement -> IF condicion block .)
    PACKAGE         reduce using rule 124 (if_statement -> IF condicion block .)
    IMPORT          reduce using rule 124 (if_statement -> IF condicion block .)
    SWITCH          reduce using rule 124 (if_statement -> IF condicion block .)
    IF              reduce using rule 124 (if_statement -> IF condicion block .)
    FUNC            reduce using rule 124 (if_statement -> IF condicion block .)
    $end            reduce using rule 124 (if_statement -> IF condicion block .)
    RBRACE          reduce using rule 124 (if_statement -> IF condicion block .)
    CASE            reduce using rule 124 (if_statement -> IF condicion block .)
    DEFAULT         reduce using rule 124 (if_statement -> IF condicion block .)
    RETURN          reduce using rule 124 (if_statement -> IF condicion block .)
    ELSE            shift and go to state 164


state 121

    (52) condicion_compleja -> condicion operadorLogico . condicion
    (53) condicion_compleja -> condicion operadorLogico . condicion_compleja
    (51) condicion -> . expression comparador expression
    (52) condicion_compleja -> . condicion operadorLogico condicion
    (53) condicion_compleja -> . condicion operadorLogico condicion_compleja
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    condicion                      shift and go to state 165
    condicion_compleja             shift and go to state 166
    expression                     shift and go to state 39
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 122

    (126) if_statement -> IF condicion_compleja block .
    (127) if_statement -> IF condicion_compleja block . ELSE block

    IDENTIFIER      reduce using rule 126 (if_statement -> IF condicion_compleja block .)
    VAR             reduce using rule 126 (if_statement -> IF condicion_compleja block .)
    TYPE            reduce using rule 126 (if_statement -> IF condicion_compleja block .)
    FOR             reduce using rule 126 (if_statement -> IF condicion_compleja block .)
    PACKAGE         reduce using rule 126 (if_statement -> IF condicion_compleja block .)
    IMPORT          reduce using rule 126 (if_statement -> IF condicion_compleja block .)
    SWITCH          reduce using rule 126 (if_statement -> IF condicion_compleja block .)
    IF              reduce using rule 126 (if_statement -> IF condicion_compleja block .)
    FUNC            reduce using rule 126 (if_statement -> IF condicion_compleja block .)
    $end            reduce using rule 126 (if_statement -> IF condicion_compleja block .)
    RBRACE          reduce using rule 126 (if_statement -> IF condicion_compleja block .)
    CASE            reduce using rule 126 (if_statement -> IF condicion_compleja block .)
    DEFAULT         reduce using rule 126 (if_statement -> IF condicion_compleja block .)
    RETURN          reduce using rule 126 (if_statement -> IF condicion_compleja block .)
    ELSE            shift and go to state 167


state 123

    (76) function -> FUNC IDENTIFIER LPAREN . params_opt RPAREN block
    (77) function -> FUNC IDENTIFIER LPAREN . params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (82) params_opt -> . params
    (83) params_opt -> .
    (84) params -> . param
    (85) params -> . param COMMA params
    (86) param -> . IDENTIFIER type_name
    (87) param -> . identifier_list type_name
    (134) identifier_list -> . IDENTIFIER
    (135) identifier_list -> . IDENTIFIER COMMA identifier_list

    RPAREN          reduce using rule 83 (params_opt -> .)
    IDENTIFIER      shift and go to state 168

    params_opt                     shift and go to state 169
    params                         shift and go to state 170
    param                          shift and go to state 171
    identifier_list                shift and go to state 172

state 124

    (97) method_definition -> FUNC LPAREN IDENTIFIER . IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (132) parameter -> IDENTIFIER . type_name
    (134) identifier_list -> IDENTIFIER .
    (135) identifier_list -> IDENTIFIER . COMMA identifier_list
    (136) type_name -> . DATATYPE
    (137) type_name -> . IDENTIFIER
    (138) type_name -> . LBRACKET RBRACKET type_name
    (139) type_name -> . FUNC LPAREN parameters RPAREN return_type

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for DATATYPE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
    IDENTIFIER      shift and go to state 173
    COMMA           shift and go to state 110
    DATATYPE        shift and go to state 84
    LBRACKET        shift and go to state 154
    FUNC            shift and go to state 85

  ! DATATYPE        [ reduce using rule 134 (identifier_list -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 134 (identifier_list -> IDENTIFIER .) ]
  ! LBRACKET        [ reduce using rule 134 (identifier_list -> IDENTIFIER .) ]
  ! FUNC            [ reduce using rule 134 (identifier_list -> IDENTIFIER .) ]

    type_name                      shift and go to state 174

state 125

    (128) function_literal -> FUNC LPAREN parameters . RPAREN return_type block
    (129) parameters -> parameters . COMMA parameter

    RPAREN          shift and go to state 175
    COMMA           shift and go to state 176


state 126

    (130) parameters -> parameter .

    RPAREN          reduce using rule 130 (parameters -> parameter .)
    COMMA           reduce using rule 130 (parameters -> parameter .)


state 127

    (131) parameters -> empty .

    RPAREN          reduce using rule 131 (parameters -> empty .)
    COMMA           reduce using rule 131 (parameters -> empty .)


state 128

    (133) parameter -> identifier_list . type_name
    (136) type_name -> . DATATYPE
    (137) type_name -> . IDENTIFIER
    (138) type_name -> . LBRACKET RBRACKET type_name
    (139) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 84
    IDENTIFIER      shift and go to state 80
    LBRACKET        shift and go to state 154
    FUNC            shift and go to state 85

    type_name                      shift and go to state 177

state 129

    (80) function -> FUNC MAIN LPAREN . params_opt RPAREN block
    (82) params_opt -> . params
    (83) params_opt -> .
    (84) params -> . param
    (85) params -> . param COMMA params
    (86) param -> . IDENTIFIER type_name
    (87) param -> . identifier_list type_name
    (134) identifier_list -> . IDENTIFIER
    (135) identifier_list -> . IDENTIFIER COMMA identifier_list

    RPAREN          reduce using rule 83 (params_opt -> .)
    IDENTIFIER      shift and go to state 168

    params_opt                     shift and go to state 178
    params                         shift and go to state 170
    param                          shift and go to state 171
    identifier_list                shift and go to state 172

state 130

    (90) struct_literal -> IDENTIFIER LBRACE . struct_field_assignments RBRACE
    (91) struct_field_assignments -> . struct_field_assignment
    (92) struct_field_assignments -> . struct_field_assignments COMMA struct_field_assignment
    (93) struct_field_assignment -> . IDENTIFIER COLON expression

    IDENTIFIER      shift and go to state 179

    struct_field_assignments       shift and go to state 180
    struct_field_assignment        shift and go to state 181

state 131

    (70) mapLiteral -> MAP LBRACKET . type_name RBRACKET type_name LBRACE mapEntries RBRACE
    (136) type_name -> . DATATYPE
    (137) type_name -> . IDENTIFIER
    (138) type_name -> . LBRACKET RBRACKET type_name
    (139) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 84
    IDENTIFIER      shift and go to state 80
    LBRACKET        shift and go to state 154
    FUNC            shift and go to state 85

    type_name                      shift and go to state 182

state 132

    (33) input -> IDENTIFIER DOT IDENTIFIER LPAREN . AMPERSAND IDENTIFIER RPAREN
    (44) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN . argument_list_opt RPAREN
    (88) print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN . argument_list_opt RPAREN
    (49) argument_list_opt -> . argument_list
    (50) argument_list_opt -> .
    (47) argument_list -> . expression
    (48) argument_list -> . argument_list COMMA expression
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    AMPERSAND       shift and go to state 183
    RPAREN          reduce using rule 50 (argument_list_opt -> .)
    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    argument_list_opt              shift and go to state 184
    argument_list                  shift and go to state 79
    expression                     shift and go to state 78
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 133

    (42) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .

    IDENTIFIER      reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    VAR             reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TYPE            reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FOR             reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PACKAGE         reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IMPORT          reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SWITCH          reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IF              reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FUNC            reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    $end            reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DOT             reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LBRACKET        reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    EQ              reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    NEQ             reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    GT              reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LT              reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    GE              reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LE              reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    AND             reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    OR              reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PLUS            reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    MINUS           reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TIMES           reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DIVIDE          reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    MOD             reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LBRACE          reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    CASE            reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DEFAULT         reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RETURN          reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RPAREN          reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SEMICOLON       reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACKET        reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    COLON           reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)


state 134

    (43) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA . expression RPAREN
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    expression                     shift and go to state 185
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 135

    (48) argument_list -> argument_list COMMA . expression
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    expression                     shift and go to state 186
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 136

    (37) assignment -> VAR IDENTIFIER type_name ASSIGN . expression
    (38) assignment -> VAR IDENTIFIER type_name ASSIGN . llamarFuncion
    (40) assignment -> VAR IDENTIFIER type_name ASSIGN . slice_literal
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    expression                     shift and go to state 187
    llamarFuncion                  shift and go to state 188
    slice_literal                  shift and go to state 189
    function_literal               shift and go to state 55

state 137

    (69) map -> VAR IDENTIFIER ASSIGN mapLiteral .

    IDENTIFIER      reduce using rule 69 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    VAR             reduce using rule 69 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    TYPE            reduce using rule 69 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    FOR             reduce using rule 69 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    PACKAGE         reduce using rule 69 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    IMPORT          reduce using rule 69 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    SWITCH          reduce using rule 69 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    IF              reduce using rule 69 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    FUNC            reduce using rule 69 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    $end            reduce using rule 69 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    RBRACE          reduce using rule 69 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    CASE            reduce using rule 69 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    DEFAULT         reduce using rule 69 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    RETURN          reduce using rule 69 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)


state 138

    (144) slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET . type_name
    (138) type_name -> LBRACKET RBRACKET . type_name
    (136) type_name -> . DATATYPE
    (137) type_name -> . IDENTIFIER
    (138) type_name -> . LBRACKET RBRACKET type_name
    (139) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 84
    IDENTIFIER      shift and go to state 80
    LBRACKET        shift and go to state 154
    FUNC            shift and go to state 85

    type_name                      shift and go to state 190

state 139

    (139) type_name -> FUNC LPAREN . parameters RPAREN return_type
    (129) parameters -> . parameters COMMA parameter
    (130) parameters -> . parameter
    (131) parameters -> . empty
    (132) parameter -> . IDENTIFIER type_name
    (133) parameter -> . identifier_list type_name
    (62) empty -> .
    (134) identifier_list -> . IDENTIFIER
    (135) identifier_list -> . IDENTIFIER COMMA identifier_list

    IDENTIFIER      shift and go to state 156
    RPAREN          reduce using rule 62 (empty -> .)
    COMMA           reduce using rule 62 (empty -> .)

    parameters                     shift and go to state 191
    parameter                      shift and go to state 126
    empty                          shift and go to state 127
    identifier_list                shift and go to state 128

state 140

    (89) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE . struct_fields RBRACE
    (95) struct_fields -> . struct_field
    (96) struct_fields -> . struct_fields struct_field
    (94) struct_field -> . IDENTIFIER type_name

    IDENTIFIER      shift and go to state 192

    struct_fields                  shift and go to state 193
    struct_field                   shift and go to state 194

state 141

    (98) for_statement -> FOR shortAssignment SEMICOLON condicion . SEMICOLON expression block

    SEMICOLON       shift and go to state 195


state 142

    (51) condicion -> expression comparador expression .
    (45) expression -> expression comparador expression .
    (45) expression -> expression . comparador expression
    (46) expression -> expression . operadorLogico expression
    (115) expression -> expression . operator expression
    (116) expression -> expression . DOT IDENTIFIER
    (149) expression -> expression . LBRACKET expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (151) expression -> expression . LBRACKET COLON expression RBRACKET
    (152) expression -> expression . LBRACKET expression COLON RBRACKET
    (56) comparador -> . EQ
    (57) comparador -> . NEQ
    (58) comparador -> . GT
    (59) comparador -> . LT
    (60) comparador -> . GE
    (61) comparador -> . LE
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR
    (117) operator -> . PLUS
    (118) operator -> . MINUS
    (119) operator -> . TIMES
    (120) operator -> . DIVIDE
    (121) operator -> . MOD

  ! reduce/reduce conflict for AND resolved using rule 45 (expression -> expression comparador expression .)
  ! reduce/reduce conflict for OR resolved using rule 45 (expression -> expression comparador expression .)
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 51 (condicion -> expression comparador expression .)
    SEMICOLON       reduce using rule 51 (condicion -> expression comparador expression .)
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    GT              shift and go to state 96
    LT              shift and go to state 97
    GE              shift and go to state 98
    LE              shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

  ! AND             [ reduce using rule 51 (condicion -> expression comparador expression .) ]
  ! OR              [ reduce using rule 51 (condicion -> expression comparador expression .) ]
  ! DOT             [ reduce using rule 45 (expression -> expression comparador expression .) ]
  ! LBRACKET        [ reduce using rule 45 (expression -> expression comparador expression .) ]
  ! EQ              [ reduce using rule 45 (expression -> expression comparador expression .) ]
  ! NEQ             [ reduce using rule 45 (expression -> expression comparador expression .) ]
  ! GT              [ reduce using rule 45 (expression -> expression comparador expression .) ]
  ! LT              [ reduce using rule 45 (expression -> expression comparador expression .) ]
  ! GE              [ reduce using rule 45 (expression -> expression comparador expression .) ]
  ! LE              [ reduce using rule 45 (expression -> expression comparador expression .) ]
  ! AND             [ reduce using rule 45 (expression -> expression comparador expression .) ]
  ! OR              [ reduce using rule 45 (expression -> expression comparador expression .) ]
  ! PLUS            [ reduce using rule 45 (expression -> expression comparador expression .) ]
  ! MINUS           [ reduce using rule 45 (expression -> expression comparador expression .) ]
  ! TIMES           [ reduce using rule 45 (expression -> expression comparador expression .) ]
  ! DIVIDE          [ reduce using rule 45 (expression -> expression comparador expression .) ]
  ! MOD             [ reduce using rule 45 (expression -> expression comparador expression .) ]

    comparador                     shift and go to state 119
    operadorLogico                 shift and go to state 90
    operator                       shift and go to state 91

state 143

    (46) expression -> expression operadorLogico expression .
    (45) expression -> expression . comparador expression
    (46) expression -> expression . operadorLogico expression
    (115) expression -> expression . operator expression
    (116) expression -> expression . DOT IDENTIFIER
    (149) expression -> expression . LBRACKET expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (151) expression -> expression . LBRACKET COLON expression RBRACKET
    (152) expression -> expression . LBRACKET expression COLON RBRACKET
    (56) comparador -> . EQ
    (57) comparador -> . NEQ
    (58) comparador -> . GT
    (59) comparador -> . LT
    (60) comparador -> . GE
    (61) comparador -> . LE
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR
    (117) operator -> . PLUS
    (118) operator -> . MINUS
    (119) operator -> . TIMES
    (120) operator -> . DIVIDE
    (121) operator -> . MOD

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 46 (expression -> expression operadorLogico expression .)
    IDENTIFIER      reduce using rule 46 (expression -> expression operadorLogico expression .)
    VAR             reduce using rule 46 (expression -> expression operadorLogico expression .)
    TYPE            reduce using rule 46 (expression -> expression operadorLogico expression .)
    FOR             reduce using rule 46 (expression -> expression operadorLogico expression .)
    PACKAGE         reduce using rule 46 (expression -> expression operadorLogico expression .)
    IMPORT          reduce using rule 46 (expression -> expression operadorLogico expression .)
    SWITCH          reduce using rule 46 (expression -> expression operadorLogico expression .)
    IF              reduce using rule 46 (expression -> expression operadorLogico expression .)
    FUNC            reduce using rule 46 (expression -> expression operadorLogico expression .)
    $end            reduce using rule 46 (expression -> expression operadorLogico expression .)
    RBRACE          reduce using rule 46 (expression -> expression operadorLogico expression .)
    CASE            reduce using rule 46 (expression -> expression operadorLogico expression .)
    DEFAULT         reduce using rule 46 (expression -> expression operadorLogico expression .)
    RETURN          reduce using rule 46 (expression -> expression operadorLogico expression .)
    COMMA           reduce using rule 46 (expression -> expression operadorLogico expression .)
    RPAREN          reduce using rule 46 (expression -> expression operadorLogico expression .)
    SEMICOLON       reduce using rule 46 (expression -> expression operadorLogico expression .)
    RBRACKET        reduce using rule 46 (expression -> expression operadorLogico expression .)
    COLON           reduce using rule 46 (expression -> expression operadorLogico expression .)
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    GT              shift and go to state 96
    LT              shift and go to state 97
    GE              shift and go to state 98
    LE              shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

  ! DOT             [ reduce using rule 46 (expression -> expression operadorLogico expression .) ]
  ! LBRACKET        [ reduce using rule 46 (expression -> expression operadorLogico expression .) ]
  ! EQ              [ reduce using rule 46 (expression -> expression operadorLogico expression .) ]
  ! NEQ             [ reduce using rule 46 (expression -> expression operadorLogico expression .) ]
  ! GT              [ reduce using rule 46 (expression -> expression operadorLogico expression .) ]
  ! LT              [ reduce using rule 46 (expression -> expression operadorLogico expression .) ]
  ! GE              [ reduce using rule 46 (expression -> expression operadorLogico expression .) ]
  ! LE              [ reduce using rule 46 (expression -> expression operadorLogico expression .) ]
  ! AND             [ reduce using rule 46 (expression -> expression operadorLogico expression .) ]
  ! OR              [ reduce using rule 46 (expression -> expression operadorLogico expression .) ]
  ! PLUS            [ reduce using rule 46 (expression -> expression operadorLogico expression .) ]
  ! MINUS           [ reduce using rule 46 (expression -> expression operadorLogico expression .) ]
  ! TIMES           [ reduce using rule 46 (expression -> expression operadorLogico expression .) ]
  ! DIVIDE          [ reduce using rule 46 (expression -> expression operadorLogico expression .) ]
  ! MOD             [ reduce using rule 46 (expression -> expression operadorLogico expression .) ]

    operadorLogico                 shift and go to state 90
    comparador                     shift and go to state 119
    operator                       shift and go to state 91

state 144

    (115) expression -> expression operator expression .
    (45) expression -> expression . comparador expression
    (46) expression -> expression . operadorLogico expression
    (115) expression -> expression . operator expression
    (116) expression -> expression . DOT IDENTIFIER
    (149) expression -> expression . LBRACKET expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (151) expression -> expression . LBRACKET COLON expression RBRACKET
    (152) expression -> expression . LBRACKET expression COLON RBRACKET
    (56) comparador -> . EQ
    (57) comparador -> . NEQ
    (58) comparador -> . GT
    (59) comparador -> . LT
    (60) comparador -> . GE
    (61) comparador -> . LE
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR
    (117) operator -> . PLUS
    (118) operator -> . MINUS
    (119) operator -> . TIMES
    (120) operator -> . DIVIDE
    (121) operator -> . MOD

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 115 (expression -> expression operator expression .)
    IDENTIFIER      reduce using rule 115 (expression -> expression operator expression .)
    VAR             reduce using rule 115 (expression -> expression operator expression .)
    TYPE            reduce using rule 115 (expression -> expression operator expression .)
    FOR             reduce using rule 115 (expression -> expression operator expression .)
    PACKAGE         reduce using rule 115 (expression -> expression operator expression .)
    IMPORT          reduce using rule 115 (expression -> expression operator expression .)
    SWITCH          reduce using rule 115 (expression -> expression operator expression .)
    IF              reduce using rule 115 (expression -> expression operator expression .)
    FUNC            reduce using rule 115 (expression -> expression operator expression .)
    $end            reduce using rule 115 (expression -> expression operator expression .)
    RBRACE          reduce using rule 115 (expression -> expression operator expression .)
    CASE            reduce using rule 115 (expression -> expression operator expression .)
    DEFAULT         reduce using rule 115 (expression -> expression operator expression .)
    RETURN          reduce using rule 115 (expression -> expression operator expression .)
    COMMA           reduce using rule 115 (expression -> expression operator expression .)
    RPAREN          reduce using rule 115 (expression -> expression operator expression .)
    SEMICOLON       reduce using rule 115 (expression -> expression operator expression .)
    RBRACKET        reduce using rule 115 (expression -> expression operator expression .)
    COLON           reduce using rule 115 (expression -> expression operator expression .)
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    GT              shift and go to state 96
    LT              shift and go to state 97
    GE              shift and go to state 98
    LE              shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

  ! DOT             [ reduce using rule 115 (expression -> expression operator expression .) ]
  ! LBRACKET        [ reduce using rule 115 (expression -> expression operator expression .) ]
  ! EQ              [ reduce using rule 115 (expression -> expression operator expression .) ]
  ! NEQ             [ reduce using rule 115 (expression -> expression operator expression .) ]
  ! GT              [ reduce using rule 115 (expression -> expression operator expression .) ]
  ! LT              [ reduce using rule 115 (expression -> expression operator expression .) ]
  ! GE              [ reduce using rule 115 (expression -> expression operator expression .) ]
  ! LE              [ reduce using rule 115 (expression -> expression operator expression .) ]
  ! AND             [ reduce using rule 115 (expression -> expression operator expression .) ]
  ! OR              [ reduce using rule 115 (expression -> expression operator expression .) ]
  ! PLUS            [ reduce using rule 115 (expression -> expression operator expression .) ]
  ! MINUS           [ reduce using rule 115 (expression -> expression operator expression .) ]
  ! TIMES           [ reduce using rule 115 (expression -> expression operator expression .) ]
  ! DIVIDE          [ reduce using rule 115 (expression -> expression operator expression .) ]
  ! MOD             [ reduce using rule 115 (expression -> expression operator expression .) ]

    operator                       shift and go to state 91
    comparador                     shift and go to state 119
    operadorLogico                 shift and go to state 90

state 145

    (116) expression -> expression DOT IDENTIFIER .

    DOT             reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    LBRACKET        reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    EQ              reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    NEQ             reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    GT              reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    LT              reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    GE              reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    LE              reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    AND             reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    OR              reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    PLUS            reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    MINUS           reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    TIMES           reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    DIVIDE          reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    MOD             reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    LBRACE          reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    VAR             reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    TYPE            reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    FOR             reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    PACKAGE         reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    IMPORT          reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    SWITCH          reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    IF              reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    FUNC            reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    $end            reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    RBRACE          reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    CASE            reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    DEFAULT         reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    RETURN          reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    COMMA           reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    RPAREN          reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    RBRACKET        reduce using rule 116 (expression -> expression DOT IDENTIFIER .)
    COLON           reduce using rule 116 (expression -> expression DOT IDENTIFIER .)


state 146

    (149) expression -> expression LBRACKET expression . RBRACKET
    (150) expression -> expression LBRACKET expression . COLON expression RBRACKET
    (152) expression -> expression LBRACKET expression . COLON RBRACKET
    (45) expression -> expression . comparador expression
    (46) expression -> expression . operadorLogico expression
    (115) expression -> expression . operator expression
    (116) expression -> expression . DOT IDENTIFIER
    (149) expression -> expression . LBRACKET expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (151) expression -> expression . LBRACKET COLON expression RBRACKET
    (152) expression -> expression . LBRACKET expression COLON RBRACKET
    (56) comparador -> . EQ
    (57) comparador -> . NEQ
    (58) comparador -> . GT
    (59) comparador -> . LT
    (60) comparador -> . GE
    (61) comparador -> . LE
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR
    (117) operator -> . PLUS
    (118) operator -> . MINUS
    (119) operator -> . TIMES
    (120) operator -> . DIVIDE
    (121) operator -> . MOD

    RBRACKET        shift and go to state 196
    COLON           shift and go to state 197
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    GT              shift and go to state 96
    LT              shift and go to state 97
    GE              shift and go to state 98
    LE              shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

    comparador                     shift and go to state 119
    operadorLogico                 shift and go to state 90
    operator                       shift and go to state 91

state 147

    (151) expression -> expression LBRACKET COLON . expression RBRACKET
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    expression                     shift and go to state 198
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 148

    (99) shortAssignment -> identifier_list DECLARE_ASSIGN expression .
    (45) expression -> expression . comparador expression
    (46) expression -> expression . operadorLogico expression
    (115) expression -> expression . operator expression
    (116) expression -> expression . DOT IDENTIFIER
    (149) expression -> expression . LBRACKET expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (151) expression -> expression . LBRACKET COLON expression RBRACKET
    (152) expression -> expression . LBRACKET expression COLON RBRACKET
    (56) comparador -> . EQ
    (57) comparador -> . NEQ
    (58) comparador -> . GT
    (59) comparador -> . LT
    (60) comparador -> . GE
    (61) comparador -> . LE
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR
    (117) operator -> . PLUS
    (118) operator -> . MINUS
    (119) operator -> . TIMES
    (120) operator -> . DIVIDE
    (121) operator -> . MOD

    SEMICOLON       reduce using rule 99 (shortAssignment -> identifier_list DECLARE_ASSIGN expression .)
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    GT              shift and go to state 96
    LT              shift and go to state 97
    GE              shift and go to state 98
    LE              shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

    comparador                     shift and go to state 119
    operadorLogico                 shift and go to state 90
    operator                       shift and go to state 91

state 149

    (103) block -> LBRACE statement_list RBRACE .

    IDENTIFIER      reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    VAR             reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    TYPE            reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    PACKAGE         reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    IMPORT          reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    SWITCH          reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    FUNC            reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    CASE            reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    DEFAULT         reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    DOT             reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    LBRACKET        reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    EQ              reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    NEQ             reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    GT              reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    LT              reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    GE              reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    LE              reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    AND             reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    OR              reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    DIVIDE          reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    MOD             reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    COMMA           reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    RPAREN          reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    SEMICOLON       reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    RBRACKET        reduce using rule 103 (block -> LBRACE statement_list RBRACE .)
    COLON           reduce using rule 103 (block -> LBRACE statement_list RBRACE .)


state 150

    (134) identifier_list -> IDENTIFIER .
    (135) identifier_list -> IDENTIFIER . COMMA identifier_list

    DECLARE_ASSIGN  reduce using rule 134 (identifier_list -> IDENTIFIER .)
    DATATYPE        reduce using rule 134 (identifier_list -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 134 (identifier_list -> IDENTIFIER .)
    LBRACKET        reduce using rule 134 (identifier_list -> IDENTIFIER .)
    FUNC            reduce using rule 134 (identifier_list -> IDENTIFIER .)
    COMMA           shift and go to state 110


state 151

    (135) identifier_list -> IDENTIFIER COMMA identifier_list .

    DECLARE_ASSIGN  reduce using rule 135 (identifier_list -> IDENTIFIER COMMA identifier_list .)
    DATATYPE        reduce using rule 135 (identifier_list -> IDENTIFIER COMMA identifier_list .)
    IDENTIFIER      reduce using rule 135 (identifier_list -> IDENTIFIER COMMA identifier_list .)
    LBRACKET        reduce using rule 135 (identifier_list -> IDENTIFIER COMMA identifier_list .)
    FUNC            reduce using rule 135 (identifier_list -> IDENTIFIER COMMA identifier_list .)


state 152

    (44) llamarFuncion -> IDENTIFIER DOT IDENTIFIER . LPAREN argument_list_opt RPAREN

    LPAREN          shift and go to state 199


state 153

    (123) expression -> LPAREN expression RPAREN .

    DOT             reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    TYPE            reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    PACKAGE         reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    IMPORT          reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    FUNC            reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    CASE            reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 123 (expression -> LPAREN expression RPAREN .)


state 154

    (138) type_name -> LBRACKET . RBRACKET type_name

    RBRACKET        shift and go to state 200


state 155

    (146) slice_literal -> LBRACKET RBRACKET type_name . LBRACE elements RBRACE

    LBRACE          shift and go to state 201


state 156

    (132) parameter -> IDENTIFIER . type_name
    (134) identifier_list -> IDENTIFIER .
    (135) identifier_list -> IDENTIFIER . COMMA identifier_list
    (136) type_name -> . DATATYPE
    (137) type_name -> . IDENTIFIER
    (138) type_name -> . LBRACKET RBRACKET type_name
    (139) type_name -> . FUNC LPAREN parameters RPAREN return_type

  ! shift/reduce conflict for DATATYPE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
    COMMA           shift and go to state 110
    DATATYPE        shift and go to state 84
    IDENTIFIER      shift and go to state 80
    LBRACKET        shift and go to state 154
    FUNC            shift and go to state 85

  ! DATATYPE        [ reduce using rule 134 (identifier_list -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 134 (identifier_list -> IDENTIFIER .) ]
  ! LBRACKET        [ reduce using rule 134 (identifier_list -> IDENTIFIER .) ]
  ! FUNC            [ reduce using rule 134 (identifier_list -> IDENTIFIER .) ]

    type_name                      shift and go to state 174

state 157

    (26) import -> IMPORT LPAREN import_list RPAREN .

    IDENTIFIER      reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    VAR             reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    TYPE            reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    FOR             reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    PACKAGE         reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    IMPORT          reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    SWITCH          reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    IF              reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    FUNC            reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    $end            reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    RBRACE          reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    CASE            reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    DEFAULT         reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    RETURN          reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)


state 158

    (28) import_list -> import_list STRING .

    RPAREN          reduce using rule 28 (import_list -> import_list STRING .)
    STRING          reduce using rule 28 (import_list -> import_list STRING .)


state 159

    (63) switch -> SWITCH expression LBRACE caseBlocks . RBRACE

    RBRACE          shift and go to state 202


state 160

    (64) caseBlocks -> caseBlock .
    (65) caseBlocks -> caseBlock . caseBlocks
    (64) caseBlocks -> . caseBlock
    (65) caseBlocks -> . caseBlock caseBlocks
    (66) caseBlock -> . CASE expression COLON statement_list
    (67) caseBlock -> . DEFAULT COLON statement_list

    RBRACE          reduce using rule 64 (caseBlocks -> caseBlock .)
    CASE            shift and go to state 161
    DEFAULT         shift and go to state 162

    caseBlock                      shift and go to state 160
    caseBlocks                     shift and go to state 203

state 161

    (66) caseBlock -> CASE . expression COLON statement_list
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    expression                     shift and go to state 204
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 162

    (67) caseBlock -> DEFAULT . COLON statement_list

    COLON           shift and go to state 205


state 163

    (45) expression -> expression comparador expression .
    (45) expression -> expression . comparador expression
    (46) expression -> expression . operadorLogico expression
    (115) expression -> expression . operator expression
    (116) expression -> expression . DOT IDENTIFIER
    (149) expression -> expression . LBRACKET expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (151) expression -> expression . LBRACKET COLON expression RBRACKET
    (152) expression -> expression . LBRACKET expression COLON RBRACKET
    (56) comparador -> . EQ
    (57) comparador -> . NEQ
    (58) comparador -> . GT
    (59) comparador -> . LT
    (60) comparador -> . GE
    (61) comparador -> . LE
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR
    (117) operator -> . PLUS
    (118) operator -> . MINUS
    (119) operator -> . TIMES
    (120) operator -> . DIVIDE
    (121) operator -> . MOD

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 45 (expression -> expression comparador expression .)
    IDENTIFIER      reduce using rule 45 (expression -> expression comparador expression .)
    VAR             reduce using rule 45 (expression -> expression comparador expression .)
    TYPE            reduce using rule 45 (expression -> expression comparador expression .)
    FOR             reduce using rule 45 (expression -> expression comparador expression .)
    PACKAGE         reduce using rule 45 (expression -> expression comparador expression .)
    IMPORT          reduce using rule 45 (expression -> expression comparador expression .)
    SWITCH          reduce using rule 45 (expression -> expression comparador expression .)
    IF              reduce using rule 45 (expression -> expression comparador expression .)
    FUNC            reduce using rule 45 (expression -> expression comparador expression .)
    $end            reduce using rule 45 (expression -> expression comparador expression .)
    RBRACE          reduce using rule 45 (expression -> expression comparador expression .)
    CASE            reduce using rule 45 (expression -> expression comparador expression .)
    DEFAULT         reduce using rule 45 (expression -> expression comparador expression .)
    RETURN          reduce using rule 45 (expression -> expression comparador expression .)
    COMMA           reduce using rule 45 (expression -> expression comparador expression .)
    RPAREN          reduce using rule 45 (expression -> expression comparador expression .)
    SEMICOLON       reduce using rule 45 (expression -> expression comparador expression .)
    RBRACKET        reduce using rule 45 (expression -> expression comparador expression .)
    COLON           reduce using rule 45 (expression -> expression comparador expression .)
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    GT              shift and go to state 96
    LT              shift and go to state 97
    GE              shift and go to state 98
    LE              shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

  ! DOT             [ reduce using rule 45 (expression -> expression comparador expression .) ]
  ! LBRACKET        [ reduce using rule 45 (expression -> expression comparador expression .) ]
  ! EQ              [ reduce using rule 45 (expression -> expression comparador expression .) ]
  ! NEQ             [ reduce using rule 45 (expression -> expression comparador expression .) ]
  ! GT              [ reduce using rule 45 (expression -> expression comparador expression .) ]
  ! LT              [ reduce using rule 45 (expression -> expression comparador expression .) ]
  ! GE              [ reduce using rule 45 (expression -> expression comparador expression .) ]
  ! LE              [ reduce using rule 45 (expression -> expression comparador expression .) ]
  ! AND             [ reduce using rule 45 (expression -> expression comparador expression .) ]
  ! OR              [ reduce using rule 45 (expression -> expression comparador expression .) ]
  ! PLUS            [ reduce using rule 45 (expression -> expression comparador expression .) ]
  ! MINUS           [ reduce using rule 45 (expression -> expression comparador expression .) ]
  ! TIMES           [ reduce using rule 45 (expression -> expression comparador expression .) ]
  ! DIVIDE          [ reduce using rule 45 (expression -> expression comparador expression .) ]
  ! MOD             [ reduce using rule 45 (expression -> expression comparador expression .) ]

    comparador                     shift and go to state 119
    operadorLogico                 shift and go to state 90
    operator                       shift and go to state 91

state 164

    (125) if_statement -> IF condicion block ELSE . block
    (103) block -> . LBRACE statement_list RBRACE
    (104) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 42

    block                          shift and go to state 206

state 165

    (52) condicion_compleja -> condicion operadorLogico condicion .
    (52) condicion_compleja -> condicion . operadorLogico condicion
    (53) condicion_compleja -> condicion . operadorLogico condicion_compleja
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR

    LBRACE          reduce using rule 52 (condicion_compleja -> condicion operadorLogico condicion .)
    AND             shift and go to state 100
    OR              shift and go to state 101

    operadorLogico                 shift and go to state 121

state 166

    (53) condicion_compleja -> condicion operadorLogico condicion_compleja .

    LBRACE          reduce using rule 53 (condicion_compleja -> condicion operadorLogico condicion_compleja .)


state 167

    (127) if_statement -> IF condicion_compleja block ELSE . block
    (103) block -> . LBRACE statement_list RBRACE
    (104) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 42

    block                          shift and go to state 207

state 168

    (86) param -> IDENTIFIER . type_name
    (134) identifier_list -> IDENTIFIER .
    (135) identifier_list -> IDENTIFIER . COMMA identifier_list
    (136) type_name -> . DATATYPE
    (137) type_name -> . IDENTIFIER
    (138) type_name -> . LBRACKET RBRACKET type_name
    (139) type_name -> . FUNC LPAREN parameters RPAREN return_type

  ! shift/reduce conflict for DATATYPE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
    COMMA           shift and go to state 110
    DATATYPE        shift and go to state 84
    IDENTIFIER      shift and go to state 80
    LBRACKET        shift and go to state 154
    FUNC            shift and go to state 85

  ! DATATYPE        [ reduce using rule 134 (identifier_list -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 134 (identifier_list -> IDENTIFIER .) ]
  ! LBRACKET        [ reduce using rule 134 (identifier_list -> IDENTIFIER .) ]
  ! FUNC            [ reduce using rule 134 (identifier_list -> IDENTIFIER .) ]

    type_name                      shift and go to state 208

state 169

    (76) function -> FUNC IDENTIFIER LPAREN params_opt . RPAREN block
    (77) function -> FUNC IDENTIFIER LPAREN params_opt . RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE

    RPAREN          shift and go to state 209


state 170

    (82) params_opt -> params .

    RPAREN          reduce using rule 82 (params_opt -> params .)


state 171

    (84) params -> param .
    (85) params -> param . COMMA params

    RPAREN          reduce using rule 84 (params -> param .)
    COMMA           shift and go to state 210


state 172

    (87) param -> identifier_list . type_name
    (136) type_name -> . DATATYPE
    (137) type_name -> . IDENTIFIER
    (138) type_name -> . LBRACKET RBRACKET type_name
    (139) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 84
    IDENTIFIER      shift and go to state 80
    LBRACKET        shift and go to state 154
    FUNC            shift and go to state 85

    type_name                      shift and go to state 211

state 173

    (97) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER . RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (137) type_name -> IDENTIFIER .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 212
    COMMA           reduce using rule 137 (type_name -> IDENTIFIER .)

  ! RPAREN          [ reduce using rule 137 (type_name -> IDENTIFIER .) ]


state 174

    (132) parameter -> IDENTIFIER type_name .

    RPAREN          reduce using rule 132 (parameter -> IDENTIFIER type_name .)
    COMMA           reduce using rule 132 (parameter -> IDENTIFIER type_name .)


state 175

    (128) function_literal -> FUNC LPAREN parameters RPAREN . return_type block
    (140) return_type -> . type_name
    (141) return_type -> . empty
    (142) return_type -> . LPAREN type_name COMMA return_type RPAREN
    (136) type_name -> . DATATYPE
    (137) type_name -> . IDENTIFIER
    (138) type_name -> . LBRACKET RBRACKET type_name
    (139) type_name -> . FUNC LPAREN parameters RPAREN return_type
    (62) empty -> .

    LPAREN          shift and go to state 213
    DATATYPE        shift and go to state 84
    IDENTIFIER      shift and go to state 80
    LBRACKET        shift and go to state 154
    FUNC            shift and go to state 85
    LBRACE          reduce using rule 62 (empty -> .)

    return_type                    shift and go to state 214
    type_name                      shift and go to state 215
    empty                          shift and go to state 216

state 176

    (129) parameters -> parameters COMMA . parameter
    (132) parameter -> . IDENTIFIER type_name
    (133) parameter -> . identifier_list type_name
    (134) identifier_list -> . IDENTIFIER
    (135) identifier_list -> . IDENTIFIER COMMA identifier_list

    IDENTIFIER      shift and go to state 156

    parameter                      shift and go to state 217
    identifier_list                shift and go to state 128

state 177

    (133) parameter -> identifier_list type_name .

    RPAREN          reduce using rule 133 (parameter -> identifier_list type_name .)
    COMMA           reduce using rule 133 (parameter -> identifier_list type_name .)


state 178

    (80) function -> FUNC MAIN LPAREN params_opt . RPAREN block

    RPAREN          shift and go to state 218


state 179

    (93) struct_field_assignment -> IDENTIFIER . COLON expression

    COLON           shift and go to state 219


state 180

    (90) struct_literal -> IDENTIFIER LBRACE struct_field_assignments . RBRACE
    (92) struct_field_assignments -> struct_field_assignments . COMMA struct_field_assignment

    RBRACE          shift and go to state 220
    COMMA           shift and go to state 221


state 181

    (91) struct_field_assignments -> struct_field_assignment .

    RBRACE          reduce using rule 91 (struct_field_assignments -> struct_field_assignment .)
    COMMA           reduce using rule 91 (struct_field_assignments -> struct_field_assignment .)


state 182

    (70) mapLiteral -> MAP LBRACKET type_name . RBRACKET type_name LBRACE mapEntries RBRACE

    RBRACKET        shift and go to state 222


state 183

    (33) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND . IDENTIFIER RPAREN

    IDENTIFIER      shift and go to state 223


state 184

    (44) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt . RPAREN
    (88) print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 224


state 185

    (43) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression . RPAREN
    (45) expression -> expression . comparador expression
    (46) expression -> expression . operadorLogico expression
    (115) expression -> expression . operator expression
    (116) expression -> expression . DOT IDENTIFIER
    (149) expression -> expression . LBRACKET expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (151) expression -> expression . LBRACKET COLON expression RBRACKET
    (152) expression -> expression . LBRACKET expression COLON RBRACKET
    (56) comparador -> . EQ
    (57) comparador -> . NEQ
    (58) comparador -> . GT
    (59) comparador -> . LT
    (60) comparador -> . GE
    (61) comparador -> . LE
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR
    (117) operator -> . PLUS
    (118) operator -> . MINUS
    (119) operator -> . TIMES
    (120) operator -> . DIVIDE
    (121) operator -> . MOD

    RPAREN          shift and go to state 225
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    GT              shift and go to state 96
    LT              shift and go to state 97
    GE              shift and go to state 98
    LE              shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

    comparador                     shift and go to state 119
    operadorLogico                 shift and go to state 90
    operator                       shift and go to state 91

state 186

    (48) argument_list -> argument_list COMMA expression .
    (45) expression -> expression . comparador expression
    (46) expression -> expression . operadorLogico expression
    (115) expression -> expression . operator expression
    (116) expression -> expression . DOT IDENTIFIER
    (149) expression -> expression . LBRACKET expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (151) expression -> expression . LBRACKET COLON expression RBRACKET
    (152) expression -> expression . LBRACKET expression COLON RBRACKET
    (56) comparador -> . EQ
    (57) comparador -> . NEQ
    (58) comparador -> . GT
    (59) comparador -> . LT
    (60) comparador -> . GE
    (61) comparador -> . LE
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR
    (117) operator -> . PLUS
    (118) operator -> . MINUS
    (119) operator -> . TIMES
    (120) operator -> . DIVIDE
    (121) operator -> . MOD

    COMMA           reduce using rule 48 (argument_list -> argument_list COMMA expression .)
    RPAREN          reduce using rule 48 (argument_list -> argument_list COMMA expression .)
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    GT              shift and go to state 96
    LT              shift and go to state 97
    GE              shift and go to state 98
    LE              shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

    comparador                     shift and go to state 119
    operadorLogico                 shift and go to state 90
    operator                       shift and go to state 91

state 187

    (37) assignment -> VAR IDENTIFIER type_name ASSIGN expression .
    (45) expression -> expression . comparador expression
    (46) expression -> expression . operadorLogico expression
    (115) expression -> expression . operator expression
    (116) expression -> expression . DOT IDENTIFIER
    (149) expression -> expression . LBRACKET expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (151) expression -> expression . LBRACKET COLON expression RBRACKET
    (152) expression -> expression . LBRACKET expression COLON RBRACKET
    (56) comparador -> . EQ
    (57) comparador -> . NEQ
    (58) comparador -> . GT
    (59) comparador -> . LT
    (60) comparador -> . GE
    (61) comparador -> . LE
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR
    (117) operator -> . PLUS
    (118) operator -> . MINUS
    (119) operator -> . TIMES
    (120) operator -> . DIVIDE
    (121) operator -> . MOD

    IDENTIFIER      reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    VAR             reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    TYPE            reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    FOR             reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    PACKAGE         reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    IMPORT          reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    SWITCH          reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    IF              reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    FUNC            reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    $end            reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    RBRACE          reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    CASE            reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    DEFAULT         reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    RETURN          reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    GT              shift and go to state 96
    LT              shift and go to state 97
    GE              shift and go to state 98
    LE              shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

    comparador                     shift and go to state 119
    operadorLogico                 shift and go to state 90
    operator                       shift and go to state 91

state 188

    (38) assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .
    (114) expression -> llamarFuncion .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for VAR resolved using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for TYPE resolved using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for FOR resolved using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for IMPORT resolved using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for SWITCH resolved using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for IF resolved using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for FUNC resolved using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for $end resolved using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for RBRACE resolved using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for CASE resolved using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for RETURN resolved using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    IDENTIFIER      reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    VAR             reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    TYPE            reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    FOR             reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    PACKAGE         reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    IMPORT          reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    SWITCH          reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    IF              reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    FUNC            reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    $end            reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    RBRACE          reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    CASE            reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    DEFAULT         reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    RETURN          reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    DOT             reduce using rule 114 (expression -> llamarFuncion .)
    LBRACKET        reduce using rule 114 (expression -> llamarFuncion .)
    EQ              reduce using rule 114 (expression -> llamarFuncion .)
    NEQ             reduce using rule 114 (expression -> llamarFuncion .)
    GT              reduce using rule 114 (expression -> llamarFuncion .)
    LT              reduce using rule 114 (expression -> llamarFuncion .)
    GE              reduce using rule 114 (expression -> llamarFuncion .)
    LE              reduce using rule 114 (expression -> llamarFuncion .)
    AND             reduce using rule 114 (expression -> llamarFuncion .)
    OR              reduce using rule 114 (expression -> llamarFuncion .)
    PLUS            reduce using rule 114 (expression -> llamarFuncion .)
    MINUS           reduce using rule 114 (expression -> llamarFuncion .)
    TIMES           reduce using rule 114 (expression -> llamarFuncion .)
    DIVIDE          reduce using rule 114 (expression -> llamarFuncion .)
    MOD             reduce using rule 114 (expression -> llamarFuncion .)

  ! IDENTIFIER      [ reduce using rule 114 (expression -> llamarFuncion .) ]
  ! VAR             [ reduce using rule 114 (expression -> llamarFuncion .) ]
  ! TYPE            [ reduce using rule 114 (expression -> llamarFuncion .) ]
  ! FOR             [ reduce using rule 114 (expression -> llamarFuncion .) ]
  ! PACKAGE         [ reduce using rule 114 (expression -> llamarFuncion .) ]
  ! IMPORT          [ reduce using rule 114 (expression -> llamarFuncion .) ]
  ! SWITCH          [ reduce using rule 114 (expression -> llamarFuncion .) ]
  ! IF              [ reduce using rule 114 (expression -> llamarFuncion .) ]
  ! FUNC            [ reduce using rule 114 (expression -> llamarFuncion .) ]
  ! $end            [ reduce using rule 114 (expression -> llamarFuncion .) ]
  ! RBRACE          [ reduce using rule 114 (expression -> llamarFuncion .) ]
  ! CASE            [ reduce using rule 114 (expression -> llamarFuncion .) ]
  ! DEFAULT         [ reduce using rule 114 (expression -> llamarFuncion .) ]
  ! RETURN          [ reduce using rule 114 (expression -> llamarFuncion .) ]


state 189

    (40) assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .
    (113) expression -> slice_literal .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for VAR resolved using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for TYPE resolved using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for FOR resolved using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for IMPORT resolved using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for SWITCH resolved using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for IF resolved using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for FUNC resolved using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for $end resolved using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for RBRACE resolved using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for CASE resolved using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for RETURN resolved using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    IDENTIFIER      reduce using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    VAR             reduce using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    TYPE            reduce using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    FOR             reduce using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    PACKAGE         reduce using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    IMPORT          reduce using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    SWITCH          reduce using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    IF              reduce using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    FUNC            reduce using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    $end            reduce using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    RBRACE          reduce using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    CASE            reduce using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    DEFAULT         reduce using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    RETURN          reduce using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    DOT             reduce using rule 113 (expression -> slice_literal .)
    LBRACKET        reduce using rule 113 (expression -> slice_literal .)
    EQ              reduce using rule 113 (expression -> slice_literal .)
    NEQ             reduce using rule 113 (expression -> slice_literal .)
    GT              reduce using rule 113 (expression -> slice_literal .)
    LT              reduce using rule 113 (expression -> slice_literal .)
    GE              reduce using rule 113 (expression -> slice_literal .)
    LE              reduce using rule 113 (expression -> slice_literal .)
    AND             reduce using rule 113 (expression -> slice_literal .)
    OR              reduce using rule 113 (expression -> slice_literal .)
    PLUS            reduce using rule 113 (expression -> slice_literal .)
    MINUS           reduce using rule 113 (expression -> slice_literal .)
    TIMES           reduce using rule 113 (expression -> slice_literal .)
    DIVIDE          reduce using rule 113 (expression -> slice_literal .)
    MOD             reduce using rule 113 (expression -> slice_literal .)

  ! IDENTIFIER      [ reduce using rule 113 (expression -> slice_literal .) ]
  ! VAR             [ reduce using rule 113 (expression -> slice_literal .) ]
  ! TYPE            [ reduce using rule 113 (expression -> slice_literal .) ]
  ! FOR             [ reduce using rule 113 (expression -> slice_literal .) ]
  ! PACKAGE         [ reduce using rule 113 (expression -> slice_literal .) ]
  ! IMPORT          [ reduce using rule 113 (expression -> slice_literal .) ]
  ! SWITCH          [ reduce using rule 113 (expression -> slice_literal .) ]
  ! IF              [ reduce using rule 113 (expression -> slice_literal .) ]
  ! FUNC            [ reduce using rule 113 (expression -> slice_literal .) ]
  ! $end            [ reduce using rule 113 (expression -> slice_literal .) ]
  ! RBRACE          [ reduce using rule 113 (expression -> slice_literal .) ]
  ! CASE            [ reduce using rule 113 (expression -> slice_literal .) ]
  ! DEFAULT         [ reduce using rule 113 (expression -> slice_literal .) ]
  ! RETURN          [ reduce using rule 113 (expression -> slice_literal .) ]


state 190

    (144) slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .
    (138) type_name -> LBRACKET RBRACKET type_name .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for VAR resolved using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for TYPE resolved using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for FOR resolved using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for IMPORT resolved using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for SWITCH resolved using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for IF resolved using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for FUNC resolved using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for $end resolved using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for RBRACE resolved using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for CASE resolved using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for RETURN resolved using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    ASSIGN          reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    IDENTIFIER      reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    VAR             reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    TYPE            reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    FOR             reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    PACKAGE         reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    IMPORT          reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    SWITCH          reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    IF              reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    FUNC            reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    $end            reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    RBRACE          reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    CASE            reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    DEFAULT         reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    RETURN          reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)

  ! IDENTIFIER      [ reduce using rule 144 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! VAR             [ reduce using rule 144 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! TYPE            [ reduce using rule 144 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! FOR             [ reduce using rule 144 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! PACKAGE         [ reduce using rule 144 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! IMPORT          [ reduce using rule 144 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! SWITCH          [ reduce using rule 144 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! IF              [ reduce using rule 144 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! FUNC            [ reduce using rule 144 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! $end            [ reduce using rule 144 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! RBRACE          [ reduce using rule 144 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! CASE            [ reduce using rule 144 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! DEFAULT         [ reduce using rule 144 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! RETURN          [ reduce using rule 144 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]


state 191

    (139) type_name -> FUNC LPAREN parameters . RPAREN return_type
    (129) parameters -> parameters . COMMA parameter

    RPAREN          shift and go to state 226
    COMMA           shift and go to state 176


state 192

    (94) struct_field -> IDENTIFIER . type_name
    (136) type_name -> . DATATYPE
    (137) type_name -> . IDENTIFIER
    (138) type_name -> . LBRACKET RBRACKET type_name
    (139) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 84
    IDENTIFIER      shift and go to state 80
    LBRACKET        shift and go to state 154
    FUNC            shift and go to state 85

    type_name                      shift and go to state 227

state 193

    (89) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields . RBRACE
    (96) struct_fields -> struct_fields . struct_field
    (94) struct_field -> . IDENTIFIER type_name

    RBRACE          shift and go to state 228
    IDENTIFIER      shift and go to state 192

    struct_field                   shift and go to state 229

state 194

    (95) struct_fields -> struct_field .

    RBRACE          reduce using rule 95 (struct_fields -> struct_field .)
    IDENTIFIER      reduce using rule 95 (struct_fields -> struct_field .)


state 195

    (98) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON . expression block
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    expression                     shift and go to state 230
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 196

    (149) expression -> expression LBRACKET expression RBRACKET .

    DOT             reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    NEQ             reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    LBRACE          reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    IDENTIFIER      reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    VAR             reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    TYPE            reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    FOR             reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    PACKAGE         reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    IMPORT          reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    SWITCH          reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    IF              reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    FUNC            reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    $end            reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    CASE            reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    DEFAULT         reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    RETURN          reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 149 (expression -> expression LBRACKET expression RBRACKET .)


state 197

    (150) expression -> expression LBRACKET expression COLON . expression RBRACKET
    (152) expression -> expression LBRACKET expression COLON . RBRACKET
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    RBRACKET        shift and go to state 232
    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    expression                     shift and go to state 231
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 198

    (151) expression -> expression LBRACKET COLON expression . RBRACKET
    (45) expression -> expression . comparador expression
    (46) expression -> expression . operadorLogico expression
    (115) expression -> expression . operator expression
    (116) expression -> expression . DOT IDENTIFIER
    (149) expression -> expression . LBRACKET expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (151) expression -> expression . LBRACKET COLON expression RBRACKET
    (152) expression -> expression . LBRACKET expression COLON RBRACKET
    (56) comparador -> . EQ
    (57) comparador -> . NEQ
    (58) comparador -> . GT
    (59) comparador -> . LT
    (60) comparador -> . GE
    (61) comparador -> . LE
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR
    (117) operator -> . PLUS
    (118) operator -> . MINUS
    (119) operator -> . TIMES
    (120) operator -> . DIVIDE
    (121) operator -> . MOD

    RBRACKET        shift and go to state 233
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    GT              shift and go to state 96
    LT              shift and go to state 97
    GE              shift and go to state 98
    LE              shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

    comparador                     shift and go to state 119
    operadorLogico                 shift and go to state 90
    operator                       shift and go to state 91

state 199

    (44) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN . argument_list_opt RPAREN
    (49) argument_list_opt -> . argument_list
    (50) argument_list_opt -> .
    (47) argument_list -> . expression
    (48) argument_list -> . argument_list COMMA expression
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    RPAREN          reduce using rule 50 (argument_list_opt -> .)
    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    argument_list_opt              shift and go to state 234
    argument_list                  shift and go to state 79
    expression                     shift and go to state 78
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 200

    (138) type_name -> LBRACKET RBRACKET . type_name
    (136) type_name -> . DATATYPE
    (137) type_name -> . IDENTIFIER
    (138) type_name -> . LBRACKET RBRACKET type_name
    (139) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 84
    IDENTIFIER      shift and go to state 80
    LBRACKET        shift and go to state 154
    FUNC            shift and go to state 85

    type_name                      shift and go to state 235

state 201

    (146) slice_literal -> LBRACKET RBRACKET type_name LBRACE . elements RBRACE
    (147) elements -> . elements COMMA expression
    (148) elements -> . expression
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    elements                       shift and go to state 236
    expression                     shift and go to state 237
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 202

    (63) switch -> SWITCH expression LBRACE caseBlocks RBRACE .

    IDENTIFIER      reduce using rule 63 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    VAR             reduce using rule 63 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    TYPE            reduce using rule 63 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    FOR             reduce using rule 63 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    PACKAGE         reduce using rule 63 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    IMPORT          reduce using rule 63 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    SWITCH          reduce using rule 63 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    IF              reduce using rule 63 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    FUNC            reduce using rule 63 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    $end            reduce using rule 63 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    RBRACE          reduce using rule 63 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    CASE            reduce using rule 63 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    DEFAULT         reduce using rule 63 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    RETURN          reduce using rule 63 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)


state 203

    (65) caseBlocks -> caseBlock caseBlocks .

    RBRACE          reduce using rule 65 (caseBlocks -> caseBlock caseBlocks .)


state 204

    (66) caseBlock -> CASE expression . COLON statement_list
    (45) expression -> expression . comparador expression
    (46) expression -> expression . operadorLogico expression
    (115) expression -> expression . operator expression
    (116) expression -> expression . DOT IDENTIFIER
    (149) expression -> expression . LBRACKET expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (151) expression -> expression . LBRACKET COLON expression RBRACKET
    (152) expression -> expression . LBRACKET expression COLON RBRACKET
    (56) comparador -> . EQ
    (57) comparador -> . NEQ
    (58) comparador -> . GT
    (59) comparador -> . LT
    (60) comparador -> . GE
    (61) comparador -> . LE
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR
    (117) operator -> . PLUS
    (118) operator -> . MINUS
    (119) operator -> . TIMES
    (120) operator -> . DIVIDE
    (121) operator -> . MOD

    COLON           shift and go to state 238
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    GT              shift and go to state 96
    LT              shift and go to state 97
    GE              shift and go to state 98
    LE              shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

    comparador                     shift and go to state 119
    operadorLogico                 shift and go to state 90
    operator                       shift and go to state 91

state 205

    (67) caseBlock -> DEFAULT COLON . statement_list
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (39) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (40) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (41) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (98) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (100) for_statement -> . FOR condicion block
    (101) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (63) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (68) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (69) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (124) if_statement -> . IF condicion block
    (125) if_statement -> . IF condicion block ELSE block
    (126) if_statement -> . IF condicion_compleja block
    (127) if_statement -> . IF condicion_compleja block ELSE block
    (76) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (77) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (80) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (97) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER type_name
    (144) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (145) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29

    statement_list                 shift and go to state 239
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20

state 206

    (125) if_statement -> IF condicion block ELSE block .

    IDENTIFIER      reduce using rule 125 (if_statement -> IF condicion block ELSE block .)
    VAR             reduce using rule 125 (if_statement -> IF condicion block ELSE block .)
    TYPE            reduce using rule 125 (if_statement -> IF condicion block ELSE block .)
    FOR             reduce using rule 125 (if_statement -> IF condicion block ELSE block .)
    PACKAGE         reduce using rule 125 (if_statement -> IF condicion block ELSE block .)
    IMPORT          reduce using rule 125 (if_statement -> IF condicion block ELSE block .)
    SWITCH          reduce using rule 125 (if_statement -> IF condicion block ELSE block .)
    IF              reduce using rule 125 (if_statement -> IF condicion block ELSE block .)
    FUNC            reduce using rule 125 (if_statement -> IF condicion block ELSE block .)
    $end            reduce using rule 125 (if_statement -> IF condicion block ELSE block .)
    RBRACE          reduce using rule 125 (if_statement -> IF condicion block ELSE block .)
    CASE            reduce using rule 125 (if_statement -> IF condicion block ELSE block .)
    DEFAULT         reduce using rule 125 (if_statement -> IF condicion block ELSE block .)
    RETURN          reduce using rule 125 (if_statement -> IF condicion block ELSE block .)


state 207

    (127) if_statement -> IF condicion_compleja block ELSE block .

    IDENTIFIER      reduce using rule 127 (if_statement -> IF condicion_compleja block ELSE block .)
    VAR             reduce using rule 127 (if_statement -> IF condicion_compleja block ELSE block .)
    TYPE            reduce using rule 127 (if_statement -> IF condicion_compleja block ELSE block .)
    FOR             reduce using rule 127 (if_statement -> IF condicion_compleja block ELSE block .)
    PACKAGE         reduce using rule 127 (if_statement -> IF condicion_compleja block ELSE block .)
    IMPORT          reduce using rule 127 (if_statement -> IF condicion_compleja block ELSE block .)
    SWITCH          reduce using rule 127 (if_statement -> IF condicion_compleja block ELSE block .)
    IF              reduce using rule 127 (if_statement -> IF condicion_compleja block ELSE block .)
    FUNC            reduce using rule 127 (if_statement -> IF condicion_compleja block ELSE block .)
    $end            reduce using rule 127 (if_statement -> IF condicion_compleja block ELSE block .)
    RBRACE          reduce using rule 127 (if_statement -> IF condicion_compleja block ELSE block .)
    CASE            reduce using rule 127 (if_statement -> IF condicion_compleja block ELSE block .)
    DEFAULT         reduce using rule 127 (if_statement -> IF condicion_compleja block ELSE block .)
    RETURN          reduce using rule 127 (if_statement -> IF condicion_compleja block ELSE block .)


state 208

    (86) param -> IDENTIFIER type_name .

    COMMA           reduce using rule 86 (param -> IDENTIFIER type_name .)
    RPAREN          reduce using rule 86 (param -> IDENTIFIER type_name .)


state 209

    (76) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN . block
    (77) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN . return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (103) block -> . LBRACE statement_list RBRACE
    (104) block -> . LBRACE RBRACE
    (140) return_type -> . type_name
    (141) return_type -> . empty
    (142) return_type -> . LPAREN type_name COMMA return_type RPAREN
    (136) type_name -> . DATATYPE
    (137) type_name -> . IDENTIFIER
    (138) type_name -> . LBRACKET RBRACKET type_name
    (139) type_name -> . FUNC LPAREN parameters RPAREN return_type
    (62) empty -> .

  ! shift/reduce conflict for LBRACE resolved as shift
    LBRACE          shift and go to state 42
    LPAREN          shift and go to state 213
    DATATYPE        shift and go to state 84
    IDENTIFIER      shift and go to state 80
    LBRACKET        shift and go to state 154
    FUNC            shift and go to state 85

  ! LBRACE          [ reduce using rule 62 (empty -> .) ]

    block                          shift and go to state 240
    return_type                    shift and go to state 241
    type_name                      shift and go to state 215
    empty                          shift and go to state 216

state 210

    (85) params -> param COMMA . params
    (84) params -> . param
    (85) params -> . param COMMA params
    (86) param -> . IDENTIFIER type_name
    (87) param -> . identifier_list type_name
    (134) identifier_list -> . IDENTIFIER
    (135) identifier_list -> . IDENTIFIER COMMA identifier_list

    IDENTIFIER      shift and go to state 168

    param                          shift and go to state 171
    params                         shift and go to state 242
    identifier_list                shift and go to state 172

state 211

    (87) param -> identifier_list type_name .

    COMMA           reduce using rule 87 (param -> identifier_list type_name .)
    RPAREN          reduce using rule 87 (param -> identifier_list type_name .)


state 212

    (97) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN . IDENTIFIER LPAREN arguments RPAREN block

    IDENTIFIER      shift and go to state 243


state 213

    (142) return_type -> LPAREN . type_name COMMA return_type RPAREN
    (136) type_name -> . DATATYPE
    (137) type_name -> . IDENTIFIER
    (138) type_name -> . LBRACKET RBRACKET type_name
    (139) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 84
    IDENTIFIER      shift and go to state 80
    LBRACKET        shift and go to state 154
    FUNC            shift and go to state 85

    type_name                      shift and go to state 244

state 214

    (128) function_literal -> FUNC LPAREN parameters RPAREN return_type . block
    (103) block -> . LBRACE statement_list RBRACE
    (104) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 42

    block                          shift and go to state 245

state 215

    (140) return_type -> type_name .

    LBRACE          reduce using rule 140 (return_type -> type_name .)
    RPAREN          reduce using rule 140 (return_type -> type_name .)
    COMMA           reduce using rule 140 (return_type -> type_name .)
    RBRACKET        reduce using rule 140 (return_type -> type_name .)
    IDENTIFIER      reduce using rule 140 (return_type -> type_name .)
    VAR             reduce using rule 140 (return_type -> type_name .)
    TYPE            reduce using rule 140 (return_type -> type_name .)
    FOR             reduce using rule 140 (return_type -> type_name .)
    PACKAGE         reduce using rule 140 (return_type -> type_name .)
    IMPORT          reduce using rule 140 (return_type -> type_name .)
    SWITCH          reduce using rule 140 (return_type -> type_name .)
    IF              reduce using rule 140 (return_type -> type_name .)
    FUNC            reduce using rule 140 (return_type -> type_name .)
    $end            reduce using rule 140 (return_type -> type_name .)
    ASSIGN          reduce using rule 140 (return_type -> type_name .)
    RBRACE          reduce using rule 140 (return_type -> type_name .)
    CASE            reduce using rule 140 (return_type -> type_name .)
    DEFAULT         reduce using rule 140 (return_type -> type_name .)
    RETURN          reduce using rule 140 (return_type -> type_name .)


state 216

    (141) return_type -> empty .

    LBRACE          reduce using rule 141 (return_type -> empty .)
    RPAREN          reduce using rule 141 (return_type -> empty .)
    COMMA           reduce using rule 141 (return_type -> empty .)
    RBRACKET        reduce using rule 141 (return_type -> empty .)
    IDENTIFIER      reduce using rule 141 (return_type -> empty .)
    VAR             reduce using rule 141 (return_type -> empty .)
    TYPE            reduce using rule 141 (return_type -> empty .)
    FOR             reduce using rule 141 (return_type -> empty .)
    PACKAGE         reduce using rule 141 (return_type -> empty .)
    IMPORT          reduce using rule 141 (return_type -> empty .)
    SWITCH          reduce using rule 141 (return_type -> empty .)
    IF              reduce using rule 141 (return_type -> empty .)
    FUNC            reduce using rule 141 (return_type -> empty .)
    $end            reduce using rule 141 (return_type -> empty .)
    ASSIGN          reduce using rule 141 (return_type -> empty .)
    RBRACE          reduce using rule 141 (return_type -> empty .)
    CASE            reduce using rule 141 (return_type -> empty .)
    DEFAULT         reduce using rule 141 (return_type -> empty .)
    RETURN          reduce using rule 141 (return_type -> empty .)


state 217

    (129) parameters -> parameters COMMA parameter .

    RPAREN          reduce using rule 129 (parameters -> parameters COMMA parameter .)
    COMMA           reduce using rule 129 (parameters -> parameters COMMA parameter .)


state 218

    (80) function -> FUNC MAIN LPAREN params_opt RPAREN . block
    (103) block -> . LBRACE statement_list RBRACE
    (104) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 42

    block                          shift and go to state 246

state 219

    (93) struct_field_assignment -> IDENTIFIER COLON . expression
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    expression                     shift and go to state 247
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 220

    (90) struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .

    IDENTIFIER      reduce using rule 90 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    VAR             reduce using rule 90 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    TYPE            reduce using rule 90 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    FOR             reduce using rule 90 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    PACKAGE         reduce using rule 90 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    IMPORT          reduce using rule 90 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    SWITCH          reduce using rule 90 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    IF              reduce using rule 90 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    FUNC            reduce using rule 90 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    $end            reduce using rule 90 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    RBRACE          reduce using rule 90 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    CASE            reduce using rule 90 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    DEFAULT         reduce using rule 90 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    RETURN          reduce using rule 90 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)


state 221

    (92) struct_field_assignments -> struct_field_assignments COMMA . struct_field_assignment
    (93) struct_field_assignment -> . IDENTIFIER COLON expression

    IDENTIFIER      shift and go to state 179

    struct_field_assignment        shift and go to state 248

state 222

    (70) mapLiteral -> MAP LBRACKET type_name RBRACKET . type_name LBRACE mapEntries RBRACE
    (136) type_name -> . DATATYPE
    (137) type_name -> . IDENTIFIER
    (138) type_name -> . LBRACKET RBRACKET type_name
    (139) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 84
    IDENTIFIER      shift and go to state 80
    LBRACKET        shift and go to state 154
    FUNC            shift and go to state 85

    type_name                      shift and go to state 249

state 223

    (33) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER . RPAREN

    RPAREN          shift and go to state 250


state 224

    (44) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .
    (88) print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for VAR resolved using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for TYPE resolved using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for FOR resolved using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for IMPORT resolved using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for SWITCH resolved using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for IF resolved using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for FUNC resolved using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for RBRACE resolved using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for CASE resolved using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for RETURN resolved using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IDENTIFIER      reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    VAR             reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TYPE            reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FOR             reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PACKAGE         reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IMPORT          reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SWITCH          reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IF              reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FUNC            reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    $end            reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    CASE            reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DEFAULT         reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RETURN          reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)

  ! IDENTIFIER      [ reduce using rule 88 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! VAR             [ reduce using rule 88 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! TYPE            [ reduce using rule 88 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! FOR             [ reduce using rule 88 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! PACKAGE         [ reduce using rule 88 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! IMPORT          [ reduce using rule 88 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! SWITCH          [ reduce using rule 88 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! IF              [ reduce using rule 88 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! FUNC            [ reduce using rule 88 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! $end            [ reduce using rule 88 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! RBRACE          [ reduce using rule 88 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! CASE            [ reduce using rule 88 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! DEFAULT         [ reduce using rule 88 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! RETURN          [ reduce using rule 88 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]


state 225

    (43) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .

    IDENTIFIER      reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    VAR             reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    TYPE            reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    FOR             reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    PACKAGE         reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    IMPORT          reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    SWITCH          reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    IF              reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    FUNC            reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    $end            reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    DOT             reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    LBRACKET        reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    EQ              reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    NEQ             reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    GT              reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    LT              reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    GE              reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    LE              reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    AND             reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    OR              reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    PLUS            reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    MINUS           reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    TIMES           reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    DIVIDE          reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    MOD             reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    LBRACE          reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    RBRACE          reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    CASE            reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    DEFAULT         reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    RETURN          reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    COMMA           reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    RPAREN          reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    SEMICOLON       reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    RBRACKET        reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    COLON           reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)


state 226

    (139) type_name -> FUNC LPAREN parameters RPAREN . return_type
    (140) return_type -> . type_name
    (141) return_type -> . empty
    (142) return_type -> . LPAREN type_name COMMA return_type RPAREN
    (136) type_name -> . DATATYPE
    (137) type_name -> . IDENTIFIER
    (138) type_name -> . LBRACKET RBRACKET type_name
    (139) type_name -> . FUNC LPAREN parameters RPAREN return_type
    (62) empty -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
    LPAREN          shift and go to state 213
    DATATYPE        shift and go to state 84
    IDENTIFIER      shift and go to state 80
    LBRACKET        shift and go to state 154
    FUNC            shift and go to state 85
    LBRACE          reduce using rule 62 (empty -> .)
    RPAREN          reduce using rule 62 (empty -> .)
    COMMA           reduce using rule 62 (empty -> .)
    RBRACKET        reduce using rule 62 (empty -> .)
    VAR             reduce using rule 62 (empty -> .)
    TYPE            reduce using rule 62 (empty -> .)
    FOR             reduce using rule 62 (empty -> .)
    PACKAGE         reduce using rule 62 (empty -> .)
    IMPORT          reduce using rule 62 (empty -> .)
    SWITCH          reduce using rule 62 (empty -> .)
    IF              reduce using rule 62 (empty -> .)
    $end            reduce using rule 62 (empty -> .)
    ASSIGN          reduce using rule 62 (empty -> .)
    RBRACE          reduce using rule 62 (empty -> .)
    CASE            reduce using rule 62 (empty -> .)
    DEFAULT         reduce using rule 62 (empty -> .)
    RETURN          reduce using rule 62 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 62 (empty -> .) ]
  ! FUNC            [ reduce using rule 62 (empty -> .) ]

    return_type                    shift and go to state 251
    type_name                      shift and go to state 215
    empty                          shift and go to state 216

state 227

    (94) struct_field -> IDENTIFIER type_name .

    RBRACE          reduce using rule 94 (struct_field -> IDENTIFIER type_name .)
    IDENTIFIER      reduce using rule 94 (struct_field -> IDENTIFIER type_name .)


state 228

    (89) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .

    IDENTIFIER      reduce using rule 89 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    VAR             reduce using rule 89 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    TYPE            reduce using rule 89 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    FOR             reduce using rule 89 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    PACKAGE         reduce using rule 89 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    IMPORT          reduce using rule 89 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    SWITCH          reduce using rule 89 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    IF              reduce using rule 89 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    FUNC            reduce using rule 89 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    $end            reduce using rule 89 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    RBRACE          reduce using rule 89 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    CASE            reduce using rule 89 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    DEFAULT         reduce using rule 89 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    RETURN          reduce using rule 89 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)


state 229

    (96) struct_fields -> struct_fields struct_field .

    RBRACE          reduce using rule 96 (struct_fields -> struct_fields struct_field .)
    IDENTIFIER      reduce using rule 96 (struct_fields -> struct_fields struct_field .)


state 230

    (98) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression . block
    (45) expression -> expression . comparador expression
    (46) expression -> expression . operadorLogico expression
    (115) expression -> expression . operator expression
    (116) expression -> expression . DOT IDENTIFIER
    (149) expression -> expression . LBRACKET expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (151) expression -> expression . LBRACKET COLON expression RBRACKET
    (152) expression -> expression . LBRACKET expression COLON RBRACKET
    (103) block -> . LBRACE statement_list RBRACE
    (104) block -> . LBRACE RBRACE
    (56) comparador -> . EQ
    (57) comparador -> . NEQ
    (58) comparador -> . GT
    (59) comparador -> . LT
    (60) comparador -> . GE
    (61) comparador -> . LE
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR
    (117) operator -> . PLUS
    (118) operator -> . MINUS
    (119) operator -> . TIMES
    (120) operator -> . DIVIDE
    (121) operator -> . MOD

    DOT             shift and go to state 92
    LBRACKET        shift and go to state 93
    LBRACE          shift and go to state 42
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    GT              shift and go to state 96
    LT              shift and go to state 97
    GE              shift and go to state 98
    LE              shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

    block                          shift and go to state 252
    comparador                     shift and go to state 119
    operadorLogico                 shift and go to state 90
    operator                       shift and go to state 91

state 231

    (150) expression -> expression LBRACKET expression COLON expression . RBRACKET
    (45) expression -> expression . comparador expression
    (46) expression -> expression . operadorLogico expression
    (115) expression -> expression . operator expression
    (116) expression -> expression . DOT IDENTIFIER
    (149) expression -> expression . LBRACKET expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (151) expression -> expression . LBRACKET COLON expression RBRACKET
    (152) expression -> expression . LBRACKET expression COLON RBRACKET
    (56) comparador -> . EQ
    (57) comparador -> . NEQ
    (58) comparador -> . GT
    (59) comparador -> . LT
    (60) comparador -> . GE
    (61) comparador -> . LE
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR
    (117) operator -> . PLUS
    (118) operator -> . MINUS
    (119) operator -> . TIMES
    (120) operator -> . DIVIDE
    (121) operator -> . MOD

    RBRACKET        shift and go to state 253
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    GT              shift and go to state 96
    LT              shift and go to state 97
    GE              shift and go to state 98
    LE              shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

    comparador                     shift and go to state 119
    operadorLogico                 shift and go to state 90
    operator                       shift and go to state 91

state 232

    (152) expression -> expression LBRACKET expression COLON RBRACKET .

    DOT             reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    LBRACKET        reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    EQ              reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    NEQ             reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    GT              reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    LT              reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    GE              reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    LE              reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    AND             reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    OR              reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    PLUS            reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    MINUS           reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    TIMES           reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    DIVIDE          reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    MOD             reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    LBRACE          reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    IDENTIFIER      reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    VAR             reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    TYPE            reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    FOR             reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    PACKAGE         reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    IMPORT          reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    SWITCH          reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    IF              reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    FUNC            reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    $end            reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    RBRACE          reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    CASE            reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    DEFAULT         reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    RETURN          reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    COMMA           reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    RPAREN          reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    SEMICOLON       reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    RBRACKET        reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)
    COLON           reduce using rule 152 (expression -> expression LBRACKET expression COLON RBRACKET .)


state 233

    (151) expression -> expression LBRACKET COLON expression RBRACKET .

    DOT             reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    LBRACKET        reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    EQ              reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    NEQ             reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    GT              reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    LT              reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    GE              reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    LE              reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    AND             reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    OR              reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    PLUS            reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    MINUS           reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    TIMES           reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    DIVIDE          reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    MOD             reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    LBRACE          reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    IDENTIFIER      reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    VAR             reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    TYPE            reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    FOR             reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    PACKAGE         reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    IMPORT          reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    SWITCH          reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    IF              reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    FUNC            reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    $end            reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    RBRACE          reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    CASE            reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    DEFAULT         reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    RETURN          reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    COMMA           reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    RPAREN          reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    SEMICOLON       reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    RBRACKET        reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)
    COLON           reduce using rule 151 (expression -> expression LBRACKET COLON expression RBRACKET .)


state 234

    (44) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 254


state 235

    (138) type_name -> LBRACKET RBRACKET type_name .

    LBRACE          reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    RPAREN          reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    COMMA           reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    RBRACKET        reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    IDENTIFIER      reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    VAR             reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    TYPE            reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    FOR             reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    PACKAGE         reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    IMPORT          reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    SWITCH          reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    IF              reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    FUNC            reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    $end            reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    ASSIGN          reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    RBRACE          reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    CASE            reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    DEFAULT         reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)
    RETURN          reduce using rule 138 (type_name -> LBRACKET RBRACKET type_name .)


state 236

    (146) slice_literal -> LBRACKET RBRACKET type_name LBRACE elements . RBRACE
    (147) elements -> elements . COMMA expression

    RBRACE          shift and go to state 255
    COMMA           shift and go to state 256


state 237

    (148) elements -> expression .
    (45) expression -> expression . comparador expression
    (46) expression -> expression . operadorLogico expression
    (115) expression -> expression . operator expression
    (116) expression -> expression . DOT IDENTIFIER
    (149) expression -> expression . LBRACKET expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (151) expression -> expression . LBRACKET COLON expression RBRACKET
    (152) expression -> expression . LBRACKET expression COLON RBRACKET
    (56) comparador -> . EQ
    (57) comparador -> . NEQ
    (58) comparador -> . GT
    (59) comparador -> . LT
    (60) comparador -> . GE
    (61) comparador -> . LE
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR
    (117) operator -> . PLUS
    (118) operator -> . MINUS
    (119) operator -> . TIMES
    (120) operator -> . DIVIDE
    (121) operator -> . MOD

    RBRACE          reduce using rule 148 (elements -> expression .)
    COMMA           reduce using rule 148 (elements -> expression .)
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    GT              shift and go to state 96
    LT              shift and go to state 97
    GE              shift and go to state 98
    LE              shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

    comparador                     shift and go to state 119
    operadorLogico                 shift and go to state 90
    operator                       shift and go to state 91

state 238

    (66) caseBlock -> CASE expression COLON . statement_list
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (39) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (40) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (41) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (98) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (100) for_statement -> . FOR condicion block
    (101) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (63) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (68) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (69) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (124) if_statement -> . IF condicion block
    (125) if_statement -> . IF condicion block ELSE block
    (126) if_statement -> . IF condicion_compleja block
    (127) if_statement -> . IF condicion_compleja block ELSE block
    (76) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (77) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (80) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (97) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER type_name
    (144) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (145) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29

    statement_list                 shift and go to state 257
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20

state 239

    (67) caseBlock -> DEFAULT COLON statement_list .
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (39) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (40) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (41) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (98) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (100) for_statement -> . FOR condicion block
    (101) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (63) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (68) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (69) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (124) if_statement -> . IF condicion block
    (125) if_statement -> . IF condicion block ELSE block
    (126) if_statement -> . IF condicion_compleja block
    (127) if_statement -> . IF condicion_compleja block ELSE block
    (76) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (77) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (80) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (97) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER type_name
    (144) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (145) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    CASE            reduce using rule 67 (caseBlock -> DEFAULT COLON statement_list .)
    DEFAULT         reduce using rule 67 (caseBlock -> DEFAULT COLON statement_list .)
    RBRACE          reduce using rule 67 (caseBlock -> DEFAULT COLON statement_list .)
    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29

    statement                      shift and go to state 30
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20

state 240

    (76) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .

    IDENTIFIER      reduce using rule 76 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    VAR             reduce using rule 76 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    TYPE            reduce using rule 76 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    FOR             reduce using rule 76 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    PACKAGE         reduce using rule 76 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    IMPORT          reduce using rule 76 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    SWITCH          reduce using rule 76 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    IF              reduce using rule 76 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    FUNC            reduce using rule 76 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    $end            reduce using rule 76 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    RBRACE          reduce using rule 76 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    CASE            reduce using rule 76 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    DEFAULT         reduce using rule 76 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    RETURN          reduce using rule 76 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)


state 241

    (77) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type . LBRACE statement_list_opt RETURN return_values RBRACE

    LBRACE          shift and go to state 258


state 242

    (85) params -> param COMMA params .

    RPAREN          reduce using rule 85 (params -> param COMMA params .)


state 243

    (97) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER . LPAREN arguments RPAREN block

    LPAREN          shift and go to state 259


state 244

    (142) return_type -> LPAREN type_name . COMMA return_type RPAREN

    COMMA           shift and go to state 260


state 245

    (128) function_literal -> FUNC LPAREN parameters RPAREN return_type block .

    IDENTIFIER      reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    VAR             reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    TYPE            reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    FOR             reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    PACKAGE         reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    IMPORT          reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    SWITCH          reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    IF              reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    FUNC            reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    $end            reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    DOT             reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    LBRACKET        reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    EQ              reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    NEQ             reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    GT              reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    LT              reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    GE              reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    LE              reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    AND             reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    OR              reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    PLUS            reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    MINUS           reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    TIMES           reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    DIVIDE          reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    MOD             reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    LBRACE          reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    RBRACE          reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    CASE            reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    DEFAULT         reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    RETURN          reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    COMMA           reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    RPAREN          reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    SEMICOLON       reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    RBRACKET        reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    COLON           reduce using rule 128 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)


state 246

    (80) function -> FUNC MAIN LPAREN params_opt RPAREN block .

    IDENTIFIER      reduce using rule 80 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    VAR             reduce using rule 80 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    TYPE            reduce using rule 80 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    FOR             reduce using rule 80 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    PACKAGE         reduce using rule 80 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    IMPORT          reduce using rule 80 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    SWITCH          reduce using rule 80 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    IF              reduce using rule 80 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    FUNC            reduce using rule 80 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    $end            reduce using rule 80 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    RBRACE          reduce using rule 80 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    CASE            reduce using rule 80 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    DEFAULT         reduce using rule 80 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    RETURN          reduce using rule 80 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)


state 247

    (93) struct_field_assignment -> IDENTIFIER COLON expression .
    (45) expression -> expression . comparador expression
    (46) expression -> expression . operadorLogico expression
    (115) expression -> expression . operator expression
    (116) expression -> expression . DOT IDENTIFIER
    (149) expression -> expression . LBRACKET expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (151) expression -> expression . LBRACKET COLON expression RBRACKET
    (152) expression -> expression . LBRACKET expression COLON RBRACKET
    (56) comparador -> . EQ
    (57) comparador -> . NEQ
    (58) comparador -> . GT
    (59) comparador -> . LT
    (60) comparador -> . GE
    (61) comparador -> . LE
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR
    (117) operator -> . PLUS
    (118) operator -> . MINUS
    (119) operator -> . TIMES
    (120) operator -> . DIVIDE
    (121) operator -> . MOD

    RBRACE          reduce using rule 93 (struct_field_assignment -> IDENTIFIER COLON expression .)
    COMMA           reduce using rule 93 (struct_field_assignment -> IDENTIFIER COLON expression .)
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    GT              shift and go to state 96
    LT              shift and go to state 97
    GE              shift and go to state 98
    LE              shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

    comparador                     shift and go to state 119
    operadorLogico                 shift and go to state 90
    operator                       shift and go to state 91

state 248

    (92) struct_field_assignments -> struct_field_assignments COMMA struct_field_assignment .

    RBRACE          reduce using rule 92 (struct_field_assignments -> struct_field_assignments COMMA struct_field_assignment .)
    COMMA           reduce using rule 92 (struct_field_assignments -> struct_field_assignments COMMA struct_field_assignment .)


state 249

    (70) mapLiteral -> MAP LBRACKET type_name RBRACKET type_name . LBRACE mapEntries RBRACE

    LBRACE          shift and go to state 261


state 250

    (33) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .

    IDENTIFIER      reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    VAR             reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    TYPE            reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    FOR             reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    PACKAGE         reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    IMPORT          reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    SWITCH          reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    IF              reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    FUNC            reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    $end            reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    RBRACE          reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    CASE            reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    DEFAULT         reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    RETURN          reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)


state 251

    (139) type_name -> FUNC LPAREN parameters RPAREN return_type .

    ASSIGN          reduce using rule 139 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    IDENTIFIER      reduce using rule 139 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    VAR             reduce using rule 139 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    TYPE            reduce using rule 139 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    FOR             reduce using rule 139 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    PACKAGE         reduce using rule 139 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    IMPORT          reduce using rule 139 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    SWITCH          reduce using rule 139 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    IF              reduce using rule 139 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    FUNC            reduce using rule 139 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    $end            reduce using rule 139 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    RBRACE          reduce using rule 139 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    CASE            reduce using rule 139 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    DEFAULT         reduce using rule 139 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    RETURN          reduce using rule 139 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    LBRACE          reduce using rule 139 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    RPAREN          reduce using rule 139 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    COMMA           reduce using rule 139 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    RBRACKET        reduce using rule 139 (type_name -> FUNC LPAREN parameters RPAREN return_type .)


state 252

    (98) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .

    IDENTIFIER      reduce using rule 98 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    VAR             reduce using rule 98 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    TYPE            reduce using rule 98 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    FOR             reduce using rule 98 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    PACKAGE         reduce using rule 98 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    IMPORT          reduce using rule 98 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    SWITCH          reduce using rule 98 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    IF              reduce using rule 98 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    FUNC            reduce using rule 98 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    $end            reduce using rule 98 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    RBRACE          reduce using rule 98 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    CASE            reduce using rule 98 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    DEFAULT         reduce using rule 98 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    RETURN          reduce using rule 98 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)


state 253

    (150) expression -> expression LBRACKET expression COLON expression RBRACKET .

    DOT             reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    LBRACKET        reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    EQ              reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    NEQ             reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    GT              reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    LT              reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    GE              reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    LE              reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    AND             reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    OR              reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    PLUS            reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    MINUS           reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    TIMES           reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    DIVIDE          reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    MOD             reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    LBRACE          reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    IDENTIFIER      reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    VAR             reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    TYPE            reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    FOR             reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    PACKAGE         reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    IMPORT          reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    SWITCH          reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    IF              reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    FUNC            reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    $end            reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    RBRACE          reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    CASE            reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    DEFAULT         reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    RETURN          reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    RPAREN          reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    SEMICOLON       reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    RBRACKET        reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    COLON           reduce using rule 150 (expression -> expression LBRACKET expression COLON expression RBRACKET .)


state 254

    (44) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .

    DOT             reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LBRACKET        reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    EQ              reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    NEQ             reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    GT              reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LT              reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    GE              reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LE              reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    AND             reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    OR              reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PLUS            reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    MINUS           reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TIMES           reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DIVIDE          reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    MOD             reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LBRACE          reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IDENTIFIER      reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    VAR             reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TYPE            reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FOR             reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PACKAGE         reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IMPORT          reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SWITCH          reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IF              reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FUNC            reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    $end            reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    CASE            reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DEFAULT         reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RETURN          reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RPAREN          reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SEMICOLON       reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACKET        reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    COLON           reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)


state 255

    (146) slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .

    DOT             reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    LBRACKET        reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    EQ              reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    NEQ             reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    GT              reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    LT              reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    GE              reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    LE              reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    AND             reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    OR              reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    PLUS            reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    MINUS           reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    TIMES           reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    DIVIDE          reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    MOD             reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    LBRACE          reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    IDENTIFIER      reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    VAR             reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    TYPE            reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    FOR             reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    PACKAGE         reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    IMPORT          reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    SWITCH          reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    IF              reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    FUNC            reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    $end            reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    RBRACE          reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    CASE            reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    DEFAULT         reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    RETURN          reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    COMMA           reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    RPAREN          reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    SEMICOLON       reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    RBRACKET        reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    COLON           reduce using rule 146 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)


state 256

    (147) elements -> elements COMMA . expression
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    expression                     shift and go to state 262
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 257

    (66) caseBlock -> CASE expression COLON statement_list .
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (39) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (40) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (41) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (98) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (100) for_statement -> . FOR condicion block
    (101) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (63) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (68) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (69) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (124) if_statement -> . IF condicion block
    (125) if_statement -> . IF condicion block ELSE block
    (126) if_statement -> . IF condicion_compleja block
    (127) if_statement -> . IF condicion_compleja block ELSE block
    (76) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (77) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (80) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (97) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER type_name
    (144) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (145) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    CASE            reduce using rule 66 (caseBlock -> CASE expression COLON statement_list .)
    DEFAULT         reduce using rule 66 (caseBlock -> CASE expression COLON statement_list .)
    RBRACE          reduce using rule 66 (caseBlock -> CASE expression COLON statement_list .)
    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29

    statement                      shift and go to state 30
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20

state 258

    (77) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE . statement_list_opt RETURN return_values RBRACE
    (2) statement_list_opt -> . statement_list
    (3) statement_list_opt -> .
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (39) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (40) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (41) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (98) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (100) for_statement -> . FOR condicion block
    (101) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (63) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (68) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (69) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (124) if_statement -> . IF condicion block
    (125) if_statement -> . IF condicion block ELSE block
    (126) if_statement -> . IF condicion_compleja block
    (127) if_statement -> . IF condicion_compleja block ELSE block
    (76) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (77) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (80) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (97) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER type_name
    (144) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (145) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    RETURN          reduce using rule 3 (statement_list_opt -> .)
    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29

    statement_list_opt             shift and go to state 263
    statement_list                 shift and go to state 264
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20

state 259

    (97) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN . arguments RPAREN block
    (29) arguments -> . expression
    (30) arguments -> . arguments COMMA expression
    (31) arguments -> .
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    RPAREN          reduce using rule 31 (arguments -> .)
    COMMA           reduce using rule 31 (arguments -> .)
    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    arguments                      shift and go to state 265
    expression                     shift and go to state 266
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 260

    (142) return_type -> LPAREN type_name COMMA . return_type RPAREN
    (140) return_type -> . type_name
    (141) return_type -> . empty
    (142) return_type -> . LPAREN type_name COMMA return_type RPAREN
    (136) type_name -> . DATATYPE
    (137) type_name -> . IDENTIFIER
    (138) type_name -> . LBRACKET RBRACKET type_name
    (139) type_name -> . FUNC LPAREN parameters RPAREN return_type
    (62) empty -> .

    LPAREN          shift and go to state 213
    DATATYPE        shift and go to state 84
    IDENTIFIER      shift and go to state 80
    LBRACKET        shift and go to state 154
    FUNC            shift and go to state 85
    RPAREN          reduce using rule 62 (empty -> .)

    type_name                      shift and go to state 215
    return_type                    shift and go to state 267
    empty                          shift and go to state 216

state 261

    (70) mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE . mapEntries RBRACE
    (71) mapEntries -> . mapEntry
    (72) mapEntries -> . mapEntry COMMA mapEntries
    (73) mapEntry -> . value_key COLON value_key
    (74) value_key -> . expression
    (75) value_key -> . STRING
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    STRING          shift and go to state 272
    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    mapEntries                     shift and go to state 268
    mapEntry                       shift and go to state 269
    value_key                      shift and go to state 270
    expression                     shift and go to state 271
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 262

    (147) elements -> elements COMMA expression .
    (45) expression -> expression . comparador expression
    (46) expression -> expression . operadorLogico expression
    (115) expression -> expression . operator expression
    (116) expression -> expression . DOT IDENTIFIER
    (149) expression -> expression . LBRACKET expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (151) expression -> expression . LBRACKET COLON expression RBRACKET
    (152) expression -> expression . LBRACKET expression COLON RBRACKET
    (56) comparador -> . EQ
    (57) comparador -> . NEQ
    (58) comparador -> . GT
    (59) comparador -> . LT
    (60) comparador -> . GE
    (61) comparador -> . LE
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR
    (117) operator -> . PLUS
    (118) operator -> . MINUS
    (119) operator -> . TIMES
    (120) operator -> . DIVIDE
    (121) operator -> . MOD

    RBRACE          reduce using rule 147 (elements -> elements COMMA expression .)
    COMMA           reduce using rule 147 (elements -> elements COMMA expression .)
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    GT              shift and go to state 96
    LT              shift and go to state 97
    GE              shift and go to state 98
    LE              shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

    comparador                     shift and go to state 119
    operadorLogico                 shift and go to state 90
    operator                       shift and go to state 91

state 263

    (77) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt . RETURN return_values RBRACE

    RETURN          shift and go to state 273


state 264

    (2) statement_list_opt -> statement_list .
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (39) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (40) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (41) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (98) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (100) for_statement -> . FOR condicion block
    (101) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (63) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (68) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (69) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (124) if_statement -> . IF condicion block
    (125) if_statement -> . IF condicion block ELSE block
    (126) if_statement -> . IF condicion_compleja block
    (127) if_statement -> . IF condicion_compleja block ELSE block
    (76) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (77) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (80) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (97) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER type_name
    (144) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (145) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    RETURN          reduce using rule 2 (statement_list_opt -> statement_list .)
    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29

    statement                      shift and go to state 30
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20

state 265

    (97) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments . RPAREN block
    (30) arguments -> arguments . COMMA expression

    RPAREN          shift and go to state 274
    COMMA           shift and go to state 275


state 266

    (29) arguments -> expression .
    (45) expression -> expression . comparador expression
    (46) expression -> expression . operadorLogico expression
    (115) expression -> expression . operator expression
    (116) expression -> expression . DOT IDENTIFIER
    (149) expression -> expression . LBRACKET expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (151) expression -> expression . LBRACKET COLON expression RBRACKET
    (152) expression -> expression . LBRACKET expression COLON RBRACKET
    (56) comparador -> . EQ
    (57) comparador -> . NEQ
    (58) comparador -> . GT
    (59) comparador -> . LT
    (60) comparador -> . GE
    (61) comparador -> . LE
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR
    (117) operator -> . PLUS
    (118) operator -> . MINUS
    (119) operator -> . TIMES
    (120) operator -> . DIVIDE
    (121) operator -> . MOD

    RPAREN          reduce using rule 29 (arguments -> expression .)
    COMMA           reduce using rule 29 (arguments -> expression .)
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    GT              shift and go to state 96
    LT              shift and go to state 97
    GE              shift and go to state 98
    LE              shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

    comparador                     shift and go to state 119
    operadorLogico                 shift and go to state 90
    operator                       shift and go to state 91

state 267

    (142) return_type -> LPAREN type_name COMMA return_type . RPAREN

    RPAREN          shift and go to state 276


state 268

    (70) mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries . RBRACE

    RBRACE          shift and go to state 277


state 269

    (71) mapEntries -> mapEntry .
    (72) mapEntries -> mapEntry . COMMA mapEntries

    RBRACE          reduce using rule 71 (mapEntries -> mapEntry .)
    COMMA           shift and go to state 278


state 270

    (73) mapEntry -> value_key . COLON value_key

    COLON           shift and go to state 279


state 271

    (74) value_key -> expression .
    (45) expression -> expression . comparador expression
    (46) expression -> expression . operadorLogico expression
    (115) expression -> expression . operator expression
    (116) expression -> expression . DOT IDENTIFIER
    (149) expression -> expression . LBRACKET expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (151) expression -> expression . LBRACKET COLON expression RBRACKET
    (152) expression -> expression . LBRACKET expression COLON RBRACKET
    (56) comparador -> . EQ
    (57) comparador -> . NEQ
    (58) comparador -> . GT
    (59) comparador -> . LT
    (60) comparador -> . GE
    (61) comparador -> . LE
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR
    (117) operator -> . PLUS
    (118) operator -> . MINUS
    (119) operator -> . TIMES
    (120) operator -> . DIVIDE
    (121) operator -> . MOD

    COLON           reduce using rule 74 (value_key -> expression .)
    COMMA           reduce using rule 74 (value_key -> expression .)
    RBRACE          reduce using rule 74 (value_key -> expression .)
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    GT              shift and go to state 96
    LT              shift and go to state 97
    GE              shift and go to state 98
    LE              shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

    comparador                     shift and go to state 119
    operadorLogico                 shift and go to state 90
    operator                       shift and go to state 91

state 272

    (75) value_key -> STRING .
    (108) expression -> STRING .

  ! reduce/reduce conflict for COLON resolved using rule 75 (value_key -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 75 (value_key -> STRING .)
  ! reduce/reduce conflict for RBRACE resolved using rule 75 (value_key -> STRING .)
    COLON           reduce using rule 75 (value_key -> STRING .)
    COMMA           reduce using rule 75 (value_key -> STRING .)
    RBRACE          reduce using rule 75 (value_key -> STRING .)
    DOT             reduce using rule 108 (expression -> STRING .)
    LBRACKET        reduce using rule 108 (expression -> STRING .)
    EQ              reduce using rule 108 (expression -> STRING .)
    NEQ             reduce using rule 108 (expression -> STRING .)
    GT              reduce using rule 108 (expression -> STRING .)
    LT              reduce using rule 108 (expression -> STRING .)
    GE              reduce using rule 108 (expression -> STRING .)
    LE              reduce using rule 108 (expression -> STRING .)
    AND             reduce using rule 108 (expression -> STRING .)
    OR              reduce using rule 108 (expression -> STRING .)
    PLUS            reduce using rule 108 (expression -> STRING .)
    MINUS           reduce using rule 108 (expression -> STRING .)
    TIMES           reduce using rule 108 (expression -> STRING .)
    DIVIDE          reduce using rule 108 (expression -> STRING .)
    MOD             reduce using rule 108 (expression -> STRING .)

  ! COLON           [ reduce using rule 108 (expression -> STRING .) ]
  ! COMMA           [ reduce using rule 108 (expression -> STRING .) ]
  ! RBRACE          [ reduce using rule 108 (expression -> STRING .) ]


state 273

    (77) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN . return_values RBRACE
    (78) return_values -> . expression
    (79) return_values -> . return_values COMMA expression
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    return_values                  shift and go to state 280
    expression                     shift and go to state 281
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 274

    (97) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN . block
    (103) block -> . LBRACE statement_list RBRACE
    (104) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 42

    block                          shift and go to state 282

state 275

    (30) arguments -> arguments COMMA . expression
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    expression                     shift and go to state 283
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 276

    (142) return_type -> LPAREN type_name COMMA return_type RPAREN .

    LBRACE          reduce using rule 142 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    RPAREN          reduce using rule 142 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    COMMA           reduce using rule 142 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    RBRACKET        reduce using rule 142 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    IDENTIFIER      reduce using rule 142 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    VAR             reduce using rule 142 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    TYPE            reduce using rule 142 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    FOR             reduce using rule 142 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    PACKAGE         reduce using rule 142 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    IMPORT          reduce using rule 142 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    SWITCH          reduce using rule 142 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    IF              reduce using rule 142 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    FUNC            reduce using rule 142 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    $end            reduce using rule 142 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    ASSIGN          reduce using rule 142 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    RBRACE          reduce using rule 142 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    CASE            reduce using rule 142 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    DEFAULT         reduce using rule 142 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    RETURN          reduce using rule 142 (return_type -> LPAREN type_name COMMA return_type RPAREN .)


state 277

    (70) mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .

    IDENTIFIER      reduce using rule 70 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    VAR             reduce using rule 70 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    TYPE            reduce using rule 70 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    FOR             reduce using rule 70 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    PACKAGE         reduce using rule 70 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    IMPORT          reduce using rule 70 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    SWITCH          reduce using rule 70 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    IF              reduce using rule 70 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    FUNC            reduce using rule 70 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    $end            reduce using rule 70 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    RBRACE          reduce using rule 70 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    CASE            reduce using rule 70 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    DEFAULT         reduce using rule 70 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    RETURN          reduce using rule 70 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)


state 278

    (72) mapEntries -> mapEntry COMMA . mapEntries
    (71) mapEntries -> . mapEntry
    (72) mapEntries -> . mapEntry COMMA mapEntries
    (73) mapEntry -> . value_key COLON value_key
    (74) value_key -> . expression
    (75) value_key -> . STRING
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    STRING          shift and go to state 272
    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    mapEntry                       shift and go to state 269
    mapEntries                     shift and go to state 284
    value_key                      shift and go to state 270
    expression                     shift and go to state 271
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 279

    (73) mapEntry -> value_key COLON . value_key
    (74) value_key -> . expression
    (75) value_key -> . STRING
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    STRING          shift and go to state 272
    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    value_key                      shift and go to state 285
    expression                     shift and go to state 271
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 280

    (77) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values . RBRACE
    (79) return_values -> return_values . COMMA expression

    RBRACE          shift and go to state 286
    COMMA           shift and go to state 287


state 281

    (78) return_values -> expression .
    (45) expression -> expression . comparador expression
    (46) expression -> expression . operadorLogico expression
    (115) expression -> expression . operator expression
    (116) expression -> expression . DOT IDENTIFIER
    (149) expression -> expression . LBRACKET expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (151) expression -> expression . LBRACKET COLON expression RBRACKET
    (152) expression -> expression . LBRACKET expression COLON RBRACKET
    (56) comparador -> . EQ
    (57) comparador -> . NEQ
    (58) comparador -> . GT
    (59) comparador -> . LT
    (60) comparador -> . GE
    (61) comparador -> . LE
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR
    (117) operator -> . PLUS
    (118) operator -> . MINUS
    (119) operator -> . TIMES
    (120) operator -> . DIVIDE
    (121) operator -> . MOD

    RBRACE          reduce using rule 78 (return_values -> expression .)
    COMMA           reduce using rule 78 (return_values -> expression .)
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    GT              shift and go to state 96
    LT              shift and go to state 97
    GE              shift and go to state 98
    LE              shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

    comparador                     shift and go to state 119
    operadorLogico                 shift and go to state 90
    operator                       shift and go to state 91

state 282

    (97) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .

    IDENTIFIER      reduce using rule 97 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    VAR             reduce using rule 97 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    TYPE            reduce using rule 97 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    FOR             reduce using rule 97 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    PACKAGE         reduce using rule 97 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    IMPORT          reduce using rule 97 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    SWITCH          reduce using rule 97 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    IF              reduce using rule 97 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    FUNC            reduce using rule 97 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    $end            reduce using rule 97 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    RBRACE          reduce using rule 97 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    CASE            reduce using rule 97 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    DEFAULT         reduce using rule 97 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    RETURN          reduce using rule 97 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)


state 283

    (30) arguments -> arguments COMMA expression .
    (45) expression -> expression . comparador expression
    (46) expression -> expression . operadorLogico expression
    (115) expression -> expression . operator expression
    (116) expression -> expression . DOT IDENTIFIER
    (149) expression -> expression . LBRACKET expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (151) expression -> expression . LBRACKET COLON expression RBRACKET
    (152) expression -> expression . LBRACKET expression COLON RBRACKET
    (56) comparador -> . EQ
    (57) comparador -> . NEQ
    (58) comparador -> . GT
    (59) comparador -> . LT
    (60) comparador -> . GE
    (61) comparador -> . LE
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR
    (117) operator -> . PLUS
    (118) operator -> . MINUS
    (119) operator -> . TIMES
    (120) operator -> . DIVIDE
    (121) operator -> . MOD

    RPAREN          reduce using rule 30 (arguments -> arguments COMMA expression .)
    COMMA           reduce using rule 30 (arguments -> arguments COMMA expression .)
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    GT              shift and go to state 96
    LT              shift and go to state 97
    GE              shift and go to state 98
    LE              shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

    comparador                     shift and go to state 119
    operadorLogico                 shift and go to state 90
    operator                       shift and go to state 91

state 284

    (72) mapEntries -> mapEntry COMMA mapEntries .

    RBRACE          reduce using rule 72 (mapEntries -> mapEntry COMMA mapEntries .)


state 285

    (73) mapEntry -> value_key COLON value_key .

    COMMA           reduce using rule 73 (mapEntry -> value_key COLON value_key .)
    RBRACE          reduce using rule 73 (mapEntry -> value_key COLON value_key .)


state 286

    (77) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .

    IDENTIFIER      reduce using rule 77 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    VAR             reduce using rule 77 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    TYPE            reduce using rule 77 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    FOR             reduce using rule 77 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    PACKAGE         reduce using rule 77 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    IMPORT          reduce using rule 77 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    SWITCH          reduce using rule 77 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    IF              reduce using rule 77 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    FUNC            reduce using rule 77 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    $end            reduce using rule 77 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    RBRACE          reduce using rule 77 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    CASE            reduce using rule 77 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    DEFAULT         reduce using rule 77 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    RETURN          reduce using rule 77 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)


state 287

    (79) return_values -> return_values COMMA . expression
    (45) expression -> . expression comparador expression
    (46) expression -> . expression operadorLogico expression
    (105) expression -> . NUMBER
    (106) expression -> . IDENTIFIER
    (107) expression -> . RUNE
    (108) expression -> . STRING
    (109) expression -> . RAW_STRING
    (110) expression -> . TRUE
    (111) expression -> . FALSE
    (112) expression -> . NIL
    (113) expression -> . slice_literal
    (114) expression -> . llamarFuncion
    (115) expression -> . expression operator expression
    (116) expression -> . expression DOT IDENTIFIER
    (122) expression -> . MINUS expression
    (123) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (149) expression -> . expression LBRACKET expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (151) expression -> . expression LBRACKET COLON expression RBRACKET
    (152) expression -> . expression LBRACKET expression COLON RBRACKET
    (146) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (128) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 44
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 45
    STRING          shift and go to state 46
    RAW_STRING      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NIL             shift and go to state 50
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 56
    FUNC            shift and go to state 57

    expression                     shift and go to state 288
    slice_literal                  shift and go to state 51
    llamarFuncion                  shift and go to state 52
    function_literal               shift and go to state 55

state 288

    (79) return_values -> return_values COMMA expression .
    (45) expression -> expression . comparador expression
    (46) expression -> expression . operadorLogico expression
    (115) expression -> expression . operator expression
    (116) expression -> expression . DOT IDENTIFIER
    (149) expression -> expression . LBRACKET expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (151) expression -> expression . LBRACKET COLON expression RBRACKET
    (152) expression -> expression . LBRACKET expression COLON RBRACKET
    (56) comparador -> . EQ
    (57) comparador -> . NEQ
    (58) comparador -> . GT
    (59) comparador -> . LT
    (60) comparador -> . GE
    (61) comparador -> . LE
    (54) operadorLogico -> . AND
    (55) operadorLogico -> . OR
    (117) operator -> . PLUS
    (118) operator -> . MINUS
    (119) operator -> . TIMES
    (120) operator -> . DIVIDE
    (121) operator -> . MOD

    RBRACE          reduce using rule 79 (return_values -> return_values COMMA expression .)
    COMMA           reduce using rule 79 (return_values -> return_values COMMA expression .)
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    GT              shift and go to state 96
    LT              shift and go to state 97
    GE              shift and go to state 98
    LE              shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

    comparador                     shift and go to state 119
    operadorLogico                 shift and go to state 90
    operator                       shift and go to state 91
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOT in state 43 resolved as shift
WARNING: shift/reduce conflict for DOT in state 63 resolved as shift
WARNING: shift/reduce conflict for DOT in state 69 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 79 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 124 resolved as shift
WARNING: shift/reduce conflict for DATATYPE in state 124 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 124 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 124 resolved as shift
WARNING: shift/reduce conflict for DOT in state 142 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 142 resolved as shift
WARNING: shift/reduce conflict for EQ in state 142 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 142 resolved as shift
WARNING: shift/reduce conflict for GT in state 142 resolved as shift
WARNING: shift/reduce conflict for LT in state 142 resolved as shift
WARNING: shift/reduce conflict for GE in state 142 resolved as shift
WARNING: shift/reduce conflict for LE in state 142 resolved as shift
WARNING: shift/reduce conflict for AND in state 142 resolved as shift
WARNING: shift/reduce conflict for OR in state 142 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 142 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 142 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 142 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 142 resolved as shift
WARNING: shift/reduce conflict for MOD in state 142 resolved as shift
WARNING: shift/reduce conflict for DOT in state 143 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 143 resolved as shift
WARNING: shift/reduce conflict for EQ in state 143 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 143 resolved as shift
WARNING: shift/reduce conflict for GT in state 143 resolved as shift
WARNING: shift/reduce conflict for LT in state 143 resolved as shift
WARNING: shift/reduce conflict for GE in state 143 resolved as shift
WARNING: shift/reduce conflict for LE in state 143 resolved as shift
WARNING: shift/reduce conflict for AND in state 143 resolved as shift
WARNING: shift/reduce conflict for OR in state 143 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 143 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 143 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 143 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 143 resolved as shift
WARNING: shift/reduce conflict for MOD in state 143 resolved as shift
WARNING: shift/reduce conflict for DOT in state 144 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 144 resolved as shift
WARNING: shift/reduce conflict for EQ in state 144 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 144 resolved as shift
WARNING: shift/reduce conflict for GT in state 144 resolved as shift
WARNING: shift/reduce conflict for LT in state 144 resolved as shift
WARNING: shift/reduce conflict for GE in state 144 resolved as shift
WARNING: shift/reduce conflict for LE in state 144 resolved as shift
WARNING: shift/reduce conflict for AND in state 144 resolved as shift
WARNING: shift/reduce conflict for OR in state 144 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 144 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 144 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 144 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 144 resolved as shift
WARNING: shift/reduce conflict for MOD in state 144 resolved as shift
WARNING: shift/reduce conflict for DATATYPE in state 156 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 156 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 156 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 156 resolved as shift
WARNING: shift/reduce conflict for DOT in state 163 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 163 resolved as shift
WARNING: shift/reduce conflict for EQ in state 163 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 163 resolved as shift
WARNING: shift/reduce conflict for GT in state 163 resolved as shift
WARNING: shift/reduce conflict for LT in state 163 resolved as shift
WARNING: shift/reduce conflict for GE in state 163 resolved as shift
WARNING: shift/reduce conflict for LE in state 163 resolved as shift
WARNING: shift/reduce conflict for AND in state 163 resolved as shift
WARNING: shift/reduce conflict for OR in state 163 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 163 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 163 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 163 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 163 resolved as shift
WARNING: shift/reduce conflict for MOD in state 163 resolved as shift
WARNING: shift/reduce conflict for DATATYPE in state 168 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 168 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 168 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 168 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 173 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 209 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 226 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 226 resolved as shift
WARNING: reduce/reduce conflict in state 72 resolved using rule (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal)
WARNING: rejected rule (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal) in state 72
WARNING: reduce/reduce conflict in state 72 resolved using rule (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal)
WARNING: rejected rule (expression -> slice_literal) in state 72
WARNING: reduce/reduce conflict in state 142 resolved using rule (expression -> expression comparador expression)
WARNING: rejected rule (condicion -> expression comparador expression) in state 142
WARNING: reduce/reduce conflict in state 188 resolved using rule (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion)
WARNING: rejected rule (expression -> llamarFuncion) in state 188
WARNING: reduce/reduce conflict in state 189 resolved using rule (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal)
WARNING: rejected rule (expression -> slice_literal) in state 189
WARNING: reduce/reduce conflict in state 190 resolved using rule (type_name -> LBRACKET RBRACKET type_name)
WARNING: rejected rule (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name) in state 190
WARNING: reduce/reduce conflict in state 224 resolved using rule (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN)
WARNING: rejected rule (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN) in state 224
WARNING: reduce/reduce conflict in state 272 resolved using rule (value_key -> STRING)
WARNING: rejected rule (expression -> STRING) in state 272
WARNING: Rule (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal) is never reduced
WARNING: Rule (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name) is never reduced
WARNING: Rule (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN) is never reduced
