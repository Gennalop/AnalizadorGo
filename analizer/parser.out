Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CONTINUE
    DEFER
    FALLTHROUGH
    GO
    INTERFACE
    SELECT
    STRING_UNCLOSED

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list_opt -> statement_list
Rule 3     statement_list_opt -> <empty>
Rule 4     statement_list -> statement
Rule 5     statement_list -> statement_list statement
Rule 6     statement -> assignment
Rule 7     statement -> input
Rule 8     statement -> llamarFuncion
Rule 9     statement -> print_statement
Rule 10    statement -> struct_definition
Rule 11    statement -> for_statement
Rule 12    statement -> package
Rule 13    statement -> import
Rule 14    statement -> switch
Rule 15    statement -> map
Rule 16    statement -> if_statement
Rule 17    statement -> function
Rule 18    statement -> method_definition
Rule 19    statement -> function_literal
Rule 20    statement -> var_declaration
Rule 21    statement -> slice_declaration
Rule 22    statement -> declare_assign
Rule 23    statement -> return_statement
Rule 24    package -> PACKAGE MAIN
Rule 25    package -> PACKAGE IDENTIFIER
Rule 26    import -> IMPORT STRING
Rule 27    import -> IMPORT LPAREN import_list RPAREN
Rule 28    import_list -> STRING
Rule 29    import_list -> import_list STRING
Rule 30    arguments -> expression
Rule 31    arguments -> arguments COMMA expression
Rule 32    arguments -> <empty>
Rule 33    const_declaration -> CONST IDENTIFIER ASSIGN expression
Rule 34    input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
Rule 35    var_declaration -> VAR IDENTIFIER type_name
Rule 36    assignment -> IDENTIFIER DECLARE_ASSIGN expression
Rule 37    assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal
Rule 38    assignment -> VAR IDENTIFIER type_name ASSIGN expression
Rule 39    assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion
Rule 40    assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal
Rule 41    assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal
Rule 42    assignment -> IDENTIFIER ASSIGN expression
Rule 43    llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN
Rule 44    llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
Rule 45    llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
Rule 46    expression -> expression comparador expression
Rule 47    expression -> expression operadorLogico expression
Rule 48    argument_list -> expression
Rule 49    argument_list -> argument_list COMMA expression
Rule 50    argument_list_opt -> argument_list
Rule 51    argument_list_opt -> <empty>
Rule 52    condicion -> expression comparador expression
Rule 53    condicion_compleja -> condicion operadorLogico condicion
Rule 54    condicion_compleja -> condicion operadorLogico condicion_compleja
Rule 55    operadorLogico -> AND
Rule 56    operadorLogico -> OR
Rule 57    comparador -> EQ
Rule 58    comparador -> NEQ
Rule 59    comparador -> GT
Rule 60    comparador -> LT
Rule 61    comparador -> GE
Rule 62    comparador -> LE
Rule 63    empty -> <empty>
Rule 64    switch -> SWITCH expression LBRACE caseBlocks RBRACE
Rule 65    caseBlocks -> caseBlock
Rule 66    caseBlocks -> caseBlock caseBlocks
Rule 67    caseBlock -> CASE expression COLON statement_list
Rule 68    caseBlock -> DEFAULT COLON statement_list
Rule 69    map -> IDENTIFIER DECLARE_ASSIGN mapLiteral
Rule 70    map -> VAR IDENTIFIER ASSIGN mapLiteral
Rule 71    mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE
Rule 72    mapEntries -> mapEntry
Rule 73    mapEntries -> mapEntry COMMA mapEntries
Rule 74    mapEntry -> value_key COLON value_key
Rule 75    value_key -> expression
Rule 76    value_key -> STRING
Rule 77    function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block
Rule 78    function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
Rule 79    function -> FUNC MAIN LPAREN params_opt RPAREN block
Rule 80    return_statement -> RETURN return_values
Rule 81    return_values -> expression
Rule 82    return_values -> expression COMMA return_values
Rule 83    params_opt -> params
Rule 84    params_opt -> <empty>
Rule 85    params -> param
Rule 86    params -> param COMMA params
Rule 87    param -> IDENTIFIER type_name
Rule 88    param -> identifier_list type_name
Rule 89    print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
Rule 90    struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
Rule 91    struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE
Rule 92    struct_field_assignments -> struct_field_assignment
Rule 93    struct_field_assignments -> struct_field_assignments COMMA struct_field_assignment
Rule 94    struct_field_assignment -> IDENTIFIER COLON expression
Rule 95    struct_field -> IDENTIFIER type_name
Rule 96    struct_fields -> struct_field
Rule 97    struct_fields -> struct_fields struct_field
Rule 98    method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
Rule 99    for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
Rule 100   shortAssignment -> identifier_list DECLARE_ASSIGN expression
Rule 101   for_statement -> FOR condicion block
Rule 102   for_statement -> FOR block
Rule 103   for_range_clause -> shortAssignment RANGE expression
Rule 104   block -> LBRACE statement_list RBRACE
Rule 105   block -> LBRACE RBRACE
Rule 106   expression -> NUMBER
Rule 107   expression -> IDENTIFIER
Rule 108   expression -> RUNE
Rule 109   expression -> STRING
Rule 110   expression -> RAW_STRING
Rule 111   expression -> TRUE
Rule 112   expression -> FALSE
Rule 113   expression -> NIL
Rule 114   expression -> slice_literal
Rule 115   expression -> llamarFuncion
Rule 116   expression -> expression operator expression
Rule 117   expression -> expression DOT IDENTIFIER
Rule 118   operator -> PLUS
Rule 119   operator -> MINUS
Rule 120   operator -> TIMES
Rule 121   operator -> DIVIDE
Rule 122   operator -> MOD
Rule 123   expression -> MINUS expression
Rule 124   expression -> LPAREN expression RPAREN
Rule 125   if_statement -> IF condicion block
Rule 126   if_statement -> IF condicion block ELSE block
Rule 127   if_statement -> IF condicion_compleja block
Rule 128   if_statement -> IF condicion_compleja block ELSE block
Rule 129   function_literal -> FUNC LPAREN parameters RPAREN return_type block
Rule 130   parameters -> parameters COMMA parameter
Rule 131   parameters -> parameter
Rule 132   parameters -> empty
Rule 133   parameter -> IDENTIFIER type_name
Rule 134   parameter -> identifier_list type_name
Rule 135   identifier_list -> IDENTIFIER
Rule 136   identifier_list -> IDENTIFIER COMMA identifier_list
Rule 137   type_name -> DATATYPE
Rule 138   type_name -> IDENTIFIER
Rule 139   type_name -> LBRACKET RBRACKET type_name
Rule 140   type_name -> FUNC LPAREN parameters RPAREN return_type
Rule 141   return_type -> DATATYPE
Rule 142   return_type -> LPAREN type_list RPAREN
Rule 143   expression -> function_literal
Rule 144   return_type -> empty
Rule 145   type_list -> DATATYPE
Rule 146   type_list -> DATATYPE COMMA type_list
Rule 147   slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name
Rule 148   declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal
Rule 149   slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE
Rule 150   elements -> elements COMMA expression
Rule 151   elements -> expression
Rule 152   expression -> expression LBRACKET expression RBRACKET
Rule 153   expression -> expression LBRACKET expression COLON expression RBRACKET
Rule 154   expression -> expression LBRACKET COLON expression RBRACKET
Rule 155   expression -> expression LBRACKET expression COLON RBRACKET

Terminals, with rules where they appear

AMPERSAND            : 34
AND                  : 55
ASSIGN               : 33 38 39 41 42 70
BREAK                : 
CASE                 : 67
COLON                : 67 68 74 94 153 154 155
COMMA                : 31 44 49 73 82 86 93 130 136 146 150
CONST                : 33
CONTINUE             : 
DATATYPE             : 137 141 145 146
DECLARE_ASSIGN       : 36 37 40 69 100 148
DEFAULT              : 68
DEFER                : 
DIVIDE               : 121
DOT                  : 34 45 89 117
ELSE                 : 126 128
EQ                   : 57
FALLTHROUGH          : 
FALSE                : 112
FOR                  : 99 101 102
FUNC                 : 77 78 79 98 129 140
GE                   : 61
GO                   : 
GT                   : 59
IDENTIFIER           : 25 33 34 34 34 35 36 37 38 39 40 41 42 43 44 45 45 69 70 77 78 87 89 89 90 91 94 95 98 98 98 107 117 133 135 136 138 147 148
IF                   : 125 126 127 128
IMPORT               : 26 27
INTERFACE            : 
LBRACE               : 64 71 78 90 91 104 105 149
LBRACKET             : 71 139 147 149 152 153 154 155
LE                   : 62
LPAREN               : 27 34 43 44 45 77 78 79 89 98 98 124 129 140 142
LT                   : 60
MAIN                 : 24 79
MAP                  : 71
MINUS                : 119 123
MOD                  : 122
NEQ                  : 58
NIL                  : 113
NUMBER               : 106
OR                   : 56
PACKAGE              : 24 25
PLUS                 : 118
RANGE                : 103
RAW_STRING           : 110
RBRACE               : 64 71 78 90 91 104 105 149
RBRACKET             : 71 139 147 149 152 153 154 155
RETURN               : 80
RPAREN               : 27 34 43 44 45 77 78 79 89 98 98 124 129 140 142
RUNE                 : 108
SELECT               : 
SEMICOLON            : 99 99
STRING               : 26 28 29 76 109
STRING_UNCLOSED      : 
STRUCT               : 90
SWITCH               : 64
TIMES                : 120
TRUE                 : 111
TYPE                 : 90
VAR                  : 35 38 39 41 70 147
error                : 

Nonterminals, with rules where they appear

argument_list        : 49 50
argument_list_opt    : 43 44 45 89
arguments            : 31 98
assignment           : 6
block                : 77 79 98 99 101 102 125 126 126 127 128 128 129
caseBlock            : 65 66
caseBlocks           : 64 66
comparador           : 46 52
condicion            : 53 53 54 99 101 125 126
condicion_compleja   : 54 127 128
const_declaration    : 
declare_assign       : 22
elements             : 149 150
empty                : 132 144
expression           : 30 31 33 36 38 42 44 46 46 47 47 48 49 52 52 64 67 75 81 82 94 99 100 103 116 116 117 123 124 150 151 152 152 153 153 153 154 154 155 155
for_range_clause     : 
for_statement        : 11
function             : 17
function_literal     : 19 143
identifier_list      : 88 100 134 136
if_statement         : 16
import               : 13
import_list          : 27 29
input                : 7
llamarFuncion        : 8 39 115
map                  : 15
mapEntries           : 71 73
mapEntry             : 72 73
mapLiteral           : 69 70
method_definition    : 18
operadorLogico       : 47 53 54
operator             : 116
package              : 12
param                : 85 86
parameter            : 130 131
parameters           : 129 130 140
params               : 83 86
params_opt           : 77 78 79
print_statement      : 9
program              : 0
return_statement     : 23
return_type          : 78 129 140
return_values        : 80 82
shortAssignment      : 99 103
slice_declaration    : 21
slice_literal        : 40 41 114 148
statement            : 4 5
statement_list       : 1 2 5 67 68 78 104
statement_list_opt   : 
struct_definition    : 10
struct_field         : 96 97
struct_field_assignment : 92 93
struct_field_assignments : 91 93
struct_fields        : 90 97
struct_literal       : 37
switch               : 14
type_list            : 142 146
type_name            : 35 38 39 41 71 71 87 88 95 133 134 139 147 149
value_key            : 74 74
var_declaration      : 20

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (23) statement -> . return_statement
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (37) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (39) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (40) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (41) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (42) assignment -> . IDENTIFIER ASSIGN expression
    (34) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (90) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (99) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (101) for_statement -> . FOR condicion block
    (102) for_statement -> . FOR block
    (24) package -> . PACKAGE MAIN
    (25) package -> . PACKAGE IDENTIFIER
    (26) import -> . IMPORT STRING
    (27) import -> . IMPORT LPAREN import_list RPAREN
    (64) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (69) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (70) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (125) if_statement -> . IF condicion block
    (126) if_statement -> . IF condicion block ELSE block
    (127) if_statement -> . IF condicion_compleja block
    (128) if_statement -> . IF condicion_compleja block ELSE block
    (77) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (78) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (79) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (98) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (35) var_declaration -> . VAR IDENTIFIER type_name
    (147) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (148) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (80) return_statement -> . RETURN return_values

    IDENTIFIER      shift and go to state 22
    VAR             shift and go to state 23
    TYPE            shift and go to state 24
    FOR             shift and go to state 25
    PACKAGE         shift and go to state 26
    IMPORT          shift and go to state 27
    SWITCH          shift and go to state 28
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    RETURN          shift and go to state 31

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20
    return_statement               shift and go to state 21

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (23) statement -> . return_statement
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (37) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (39) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (40) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (41) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (42) assignment -> . IDENTIFIER ASSIGN expression
    (34) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (90) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (99) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (101) for_statement -> . FOR condicion block
    (102) for_statement -> . FOR block
    (24) package -> . PACKAGE MAIN
    (25) package -> . PACKAGE IDENTIFIER
    (26) import -> . IMPORT STRING
    (27) import -> . IMPORT LPAREN import_list RPAREN
    (64) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (69) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (70) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (125) if_statement -> . IF condicion block
    (126) if_statement -> . IF condicion block ELSE block
    (127) if_statement -> . IF condicion_compleja block
    (128) if_statement -> . IF condicion_compleja block ELSE block
    (77) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (78) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (79) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (98) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (35) var_declaration -> . VAR IDENTIFIER type_name
    (147) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (148) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (80) return_statement -> . RETURN return_values

    $end            reduce using rule 1 (program -> statement_list .)
    IDENTIFIER      shift and go to state 22
    VAR             shift and go to state 23
    TYPE            shift and go to state 24
    FOR             shift and go to state 25
    PACKAGE         shift and go to state 26
    IMPORT          shift and go to state 27
    SWITCH          shift and go to state 28
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    RETURN          shift and go to state 31

    statement                      shift and go to state 32
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20
    return_statement               shift and go to state 21

state 3

    (4) statement_list -> statement .

    IDENTIFIER      reduce using rule 4 (statement_list -> statement .)
    VAR             reduce using rule 4 (statement_list -> statement .)
    TYPE            reduce using rule 4 (statement_list -> statement .)
    FOR             reduce using rule 4 (statement_list -> statement .)
    PACKAGE         reduce using rule 4 (statement_list -> statement .)
    IMPORT          reduce using rule 4 (statement_list -> statement .)
    SWITCH          reduce using rule 4 (statement_list -> statement .)
    IF              reduce using rule 4 (statement_list -> statement .)
    FUNC            reduce using rule 4 (statement_list -> statement .)
    RETURN          reduce using rule 4 (statement_list -> statement .)
    $end            reduce using rule 4 (statement_list -> statement .)
    RBRACE          reduce using rule 4 (statement_list -> statement .)
    CASE            reduce using rule 4 (statement_list -> statement .)
    DEFAULT         reduce using rule 4 (statement_list -> statement .)


state 4

    (6) statement -> assignment .

    IDENTIFIER      reduce using rule 6 (statement -> assignment .)
    VAR             reduce using rule 6 (statement -> assignment .)
    TYPE            reduce using rule 6 (statement -> assignment .)
    FOR             reduce using rule 6 (statement -> assignment .)
    PACKAGE         reduce using rule 6 (statement -> assignment .)
    IMPORT          reduce using rule 6 (statement -> assignment .)
    SWITCH          reduce using rule 6 (statement -> assignment .)
    IF              reduce using rule 6 (statement -> assignment .)
    FUNC            reduce using rule 6 (statement -> assignment .)
    RETURN          reduce using rule 6 (statement -> assignment .)
    $end            reduce using rule 6 (statement -> assignment .)
    RBRACE          reduce using rule 6 (statement -> assignment .)
    CASE            reduce using rule 6 (statement -> assignment .)
    DEFAULT         reduce using rule 6 (statement -> assignment .)


state 5

    (7) statement -> input .

    IDENTIFIER      reduce using rule 7 (statement -> input .)
    VAR             reduce using rule 7 (statement -> input .)
    TYPE            reduce using rule 7 (statement -> input .)
    FOR             reduce using rule 7 (statement -> input .)
    PACKAGE         reduce using rule 7 (statement -> input .)
    IMPORT          reduce using rule 7 (statement -> input .)
    SWITCH          reduce using rule 7 (statement -> input .)
    IF              reduce using rule 7 (statement -> input .)
    FUNC            reduce using rule 7 (statement -> input .)
    RETURN          reduce using rule 7 (statement -> input .)
    $end            reduce using rule 7 (statement -> input .)
    RBRACE          reduce using rule 7 (statement -> input .)
    CASE            reduce using rule 7 (statement -> input .)
    DEFAULT         reduce using rule 7 (statement -> input .)


state 6

    (8) statement -> llamarFuncion .

    IDENTIFIER      reduce using rule 8 (statement -> llamarFuncion .)
    VAR             reduce using rule 8 (statement -> llamarFuncion .)
    TYPE            reduce using rule 8 (statement -> llamarFuncion .)
    FOR             reduce using rule 8 (statement -> llamarFuncion .)
    PACKAGE         reduce using rule 8 (statement -> llamarFuncion .)
    IMPORT          reduce using rule 8 (statement -> llamarFuncion .)
    SWITCH          reduce using rule 8 (statement -> llamarFuncion .)
    IF              reduce using rule 8 (statement -> llamarFuncion .)
    FUNC            reduce using rule 8 (statement -> llamarFuncion .)
    RETURN          reduce using rule 8 (statement -> llamarFuncion .)
    $end            reduce using rule 8 (statement -> llamarFuncion .)
    RBRACE          reduce using rule 8 (statement -> llamarFuncion .)
    CASE            reduce using rule 8 (statement -> llamarFuncion .)
    DEFAULT         reduce using rule 8 (statement -> llamarFuncion .)


state 7

    (9) statement -> print_statement .

    IDENTIFIER      reduce using rule 9 (statement -> print_statement .)
    VAR             reduce using rule 9 (statement -> print_statement .)
    TYPE            reduce using rule 9 (statement -> print_statement .)
    FOR             reduce using rule 9 (statement -> print_statement .)
    PACKAGE         reduce using rule 9 (statement -> print_statement .)
    IMPORT          reduce using rule 9 (statement -> print_statement .)
    SWITCH          reduce using rule 9 (statement -> print_statement .)
    IF              reduce using rule 9 (statement -> print_statement .)
    FUNC            reduce using rule 9 (statement -> print_statement .)
    RETURN          reduce using rule 9 (statement -> print_statement .)
    $end            reduce using rule 9 (statement -> print_statement .)
    RBRACE          reduce using rule 9 (statement -> print_statement .)
    CASE            reduce using rule 9 (statement -> print_statement .)
    DEFAULT         reduce using rule 9 (statement -> print_statement .)


state 8

    (10) statement -> struct_definition .

    IDENTIFIER      reduce using rule 10 (statement -> struct_definition .)
    VAR             reduce using rule 10 (statement -> struct_definition .)
    TYPE            reduce using rule 10 (statement -> struct_definition .)
    FOR             reduce using rule 10 (statement -> struct_definition .)
    PACKAGE         reduce using rule 10 (statement -> struct_definition .)
    IMPORT          reduce using rule 10 (statement -> struct_definition .)
    SWITCH          reduce using rule 10 (statement -> struct_definition .)
    IF              reduce using rule 10 (statement -> struct_definition .)
    FUNC            reduce using rule 10 (statement -> struct_definition .)
    RETURN          reduce using rule 10 (statement -> struct_definition .)
    $end            reduce using rule 10 (statement -> struct_definition .)
    RBRACE          reduce using rule 10 (statement -> struct_definition .)
    CASE            reduce using rule 10 (statement -> struct_definition .)
    DEFAULT         reduce using rule 10 (statement -> struct_definition .)


state 9

    (11) statement -> for_statement .

    IDENTIFIER      reduce using rule 11 (statement -> for_statement .)
    VAR             reduce using rule 11 (statement -> for_statement .)
    TYPE            reduce using rule 11 (statement -> for_statement .)
    FOR             reduce using rule 11 (statement -> for_statement .)
    PACKAGE         reduce using rule 11 (statement -> for_statement .)
    IMPORT          reduce using rule 11 (statement -> for_statement .)
    SWITCH          reduce using rule 11 (statement -> for_statement .)
    IF              reduce using rule 11 (statement -> for_statement .)
    FUNC            reduce using rule 11 (statement -> for_statement .)
    RETURN          reduce using rule 11 (statement -> for_statement .)
    $end            reduce using rule 11 (statement -> for_statement .)
    RBRACE          reduce using rule 11 (statement -> for_statement .)
    CASE            reduce using rule 11 (statement -> for_statement .)
    DEFAULT         reduce using rule 11 (statement -> for_statement .)


state 10

    (12) statement -> package .

    IDENTIFIER      reduce using rule 12 (statement -> package .)
    VAR             reduce using rule 12 (statement -> package .)
    TYPE            reduce using rule 12 (statement -> package .)
    FOR             reduce using rule 12 (statement -> package .)
    PACKAGE         reduce using rule 12 (statement -> package .)
    IMPORT          reduce using rule 12 (statement -> package .)
    SWITCH          reduce using rule 12 (statement -> package .)
    IF              reduce using rule 12 (statement -> package .)
    FUNC            reduce using rule 12 (statement -> package .)
    RETURN          reduce using rule 12 (statement -> package .)
    $end            reduce using rule 12 (statement -> package .)
    RBRACE          reduce using rule 12 (statement -> package .)
    CASE            reduce using rule 12 (statement -> package .)
    DEFAULT         reduce using rule 12 (statement -> package .)


state 11

    (13) statement -> import .

    IDENTIFIER      reduce using rule 13 (statement -> import .)
    VAR             reduce using rule 13 (statement -> import .)
    TYPE            reduce using rule 13 (statement -> import .)
    FOR             reduce using rule 13 (statement -> import .)
    PACKAGE         reduce using rule 13 (statement -> import .)
    IMPORT          reduce using rule 13 (statement -> import .)
    SWITCH          reduce using rule 13 (statement -> import .)
    IF              reduce using rule 13 (statement -> import .)
    FUNC            reduce using rule 13 (statement -> import .)
    RETURN          reduce using rule 13 (statement -> import .)
    $end            reduce using rule 13 (statement -> import .)
    RBRACE          reduce using rule 13 (statement -> import .)
    CASE            reduce using rule 13 (statement -> import .)
    DEFAULT         reduce using rule 13 (statement -> import .)


state 12

    (14) statement -> switch .

    IDENTIFIER      reduce using rule 14 (statement -> switch .)
    VAR             reduce using rule 14 (statement -> switch .)
    TYPE            reduce using rule 14 (statement -> switch .)
    FOR             reduce using rule 14 (statement -> switch .)
    PACKAGE         reduce using rule 14 (statement -> switch .)
    IMPORT          reduce using rule 14 (statement -> switch .)
    SWITCH          reduce using rule 14 (statement -> switch .)
    IF              reduce using rule 14 (statement -> switch .)
    FUNC            reduce using rule 14 (statement -> switch .)
    RETURN          reduce using rule 14 (statement -> switch .)
    $end            reduce using rule 14 (statement -> switch .)
    RBRACE          reduce using rule 14 (statement -> switch .)
    CASE            reduce using rule 14 (statement -> switch .)
    DEFAULT         reduce using rule 14 (statement -> switch .)


state 13

    (15) statement -> map .

    IDENTIFIER      reduce using rule 15 (statement -> map .)
    VAR             reduce using rule 15 (statement -> map .)
    TYPE            reduce using rule 15 (statement -> map .)
    FOR             reduce using rule 15 (statement -> map .)
    PACKAGE         reduce using rule 15 (statement -> map .)
    IMPORT          reduce using rule 15 (statement -> map .)
    SWITCH          reduce using rule 15 (statement -> map .)
    IF              reduce using rule 15 (statement -> map .)
    FUNC            reduce using rule 15 (statement -> map .)
    RETURN          reduce using rule 15 (statement -> map .)
    $end            reduce using rule 15 (statement -> map .)
    RBRACE          reduce using rule 15 (statement -> map .)
    CASE            reduce using rule 15 (statement -> map .)
    DEFAULT         reduce using rule 15 (statement -> map .)


state 14

    (16) statement -> if_statement .

    IDENTIFIER      reduce using rule 16 (statement -> if_statement .)
    VAR             reduce using rule 16 (statement -> if_statement .)
    TYPE            reduce using rule 16 (statement -> if_statement .)
    FOR             reduce using rule 16 (statement -> if_statement .)
    PACKAGE         reduce using rule 16 (statement -> if_statement .)
    IMPORT          reduce using rule 16 (statement -> if_statement .)
    SWITCH          reduce using rule 16 (statement -> if_statement .)
    IF              reduce using rule 16 (statement -> if_statement .)
    FUNC            reduce using rule 16 (statement -> if_statement .)
    RETURN          reduce using rule 16 (statement -> if_statement .)
    $end            reduce using rule 16 (statement -> if_statement .)
    RBRACE          reduce using rule 16 (statement -> if_statement .)
    CASE            reduce using rule 16 (statement -> if_statement .)
    DEFAULT         reduce using rule 16 (statement -> if_statement .)


state 15

    (17) statement -> function .

    IDENTIFIER      reduce using rule 17 (statement -> function .)
    VAR             reduce using rule 17 (statement -> function .)
    TYPE            reduce using rule 17 (statement -> function .)
    FOR             reduce using rule 17 (statement -> function .)
    PACKAGE         reduce using rule 17 (statement -> function .)
    IMPORT          reduce using rule 17 (statement -> function .)
    SWITCH          reduce using rule 17 (statement -> function .)
    IF              reduce using rule 17 (statement -> function .)
    FUNC            reduce using rule 17 (statement -> function .)
    RETURN          reduce using rule 17 (statement -> function .)
    $end            reduce using rule 17 (statement -> function .)
    RBRACE          reduce using rule 17 (statement -> function .)
    CASE            reduce using rule 17 (statement -> function .)
    DEFAULT         reduce using rule 17 (statement -> function .)


state 16

    (18) statement -> method_definition .

    IDENTIFIER      reduce using rule 18 (statement -> method_definition .)
    VAR             reduce using rule 18 (statement -> method_definition .)
    TYPE            reduce using rule 18 (statement -> method_definition .)
    FOR             reduce using rule 18 (statement -> method_definition .)
    PACKAGE         reduce using rule 18 (statement -> method_definition .)
    IMPORT          reduce using rule 18 (statement -> method_definition .)
    SWITCH          reduce using rule 18 (statement -> method_definition .)
    IF              reduce using rule 18 (statement -> method_definition .)
    FUNC            reduce using rule 18 (statement -> method_definition .)
    RETURN          reduce using rule 18 (statement -> method_definition .)
    $end            reduce using rule 18 (statement -> method_definition .)
    RBRACE          reduce using rule 18 (statement -> method_definition .)
    CASE            reduce using rule 18 (statement -> method_definition .)
    DEFAULT         reduce using rule 18 (statement -> method_definition .)


state 17

    (19) statement -> function_literal .

    IDENTIFIER      reduce using rule 19 (statement -> function_literal .)
    VAR             reduce using rule 19 (statement -> function_literal .)
    TYPE            reduce using rule 19 (statement -> function_literal .)
    FOR             reduce using rule 19 (statement -> function_literal .)
    PACKAGE         reduce using rule 19 (statement -> function_literal .)
    IMPORT          reduce using rule 19 (statement -> function_literal .)
    SWITCH          reduce using rule 19 (statement -> function_literal .)
    IF              reduce using rule 19 (statement -> function_literal .)
    FUNC            reduce using rule 19 (statement -> function_literal .)
    RETURN          reduce using rule 19 (statement -> function_literal .)
    $end            reduce using rule 19 (statement -> function_literal .)
    RBRACE          reduce using rule 19 (statement -> function_literal .)
    CASE            reduce using rule 19 (statement -> function_literal .)
    DEFAULT         reduce using rule 19 (statement -> function_literal .)


state 18

    (20) statement -> var_declaration .

    IDENTIFIER      reduce using rule 20 (statement -> var_declaration .)
    VAR             reduce using rule 20 (statement -> var_declaration .)
    TYPE            reduce using rule 20 (statement -> var_declaration .)
    FOR             reduce using rule 20 (statement -> var_declaration .)
    PACKAGE         reduce using rule 20 (statement -> var_declaration .)
    IMPORT          reduce using rule 20 (statement -> var_declaration .)
    SWITCH          reduce using rule 20 (statement -> var_declaration .)
    IF              reduce using rule 20 (statement -> var_declaration .)
    FUNC            reduce using rule 20 (statement -> var_declaration .)
    RETURN          reduce using rule 20 (statement -> var_declaration .)
    $end            reduce using rule 20 (statement -> var_declaration .)
    RBRACE          reduce using rule 20 (statement -> var_declaration .)
    CASE            reduce using rule 20 (statement -> var_declaration .)
    DEFAULT         reduce using rule 20 (statement -> var_declaration .)


state 19

    (21) statement -> slice_declaration .

    IDENTIFIER      reduce using rule 21 (statement -> slice_declaration .)
    VAR             reduce using rule 21 (statement -> slice_declaration .)
    TYPE            reduce using rule 21 (statement -> slice_declaration .)
    FOR             reduce using rule 21 (statement -> slice_declaration .)
    PACKAGE         reduce using rule 21 (statement -> slice_declaration .)
    IMPORT          reduce using rule 21 (statement -> slice_declaration .)
    SWITCH          reduce using rule 21 (statement -> slice_declaration .)
    IF              reduce using rule 21 (statement -> slice_declaration .)
    FUNC            reduce using rule 21 (statement -> slice_declaration .)
    RETURN          reduce using rule 21 (statement -> slice_declaration .)
    $end            reduce using rule 21 (statement -> slice_declaration .)
    RBRACE          reduce using rule 21 (statement -> slice_declaration .)
    CASE            reduce using rule 21 (statement -> slice_declaration .)
    DEFAULT         reduce using rule 21 (statement -> slice_declaration .)


state 20

    (22) statement -> declare_assign .

    IDENTIFIER      reduce using rule 22 (statement -> declare_assign .)
    VAR             reduce using rule 22 (statement -> declare_assign .)
    TYPE            reduce using rule 22 (statement -> declare_assign .)
    FOR             reduce using rule 22 (statement -> declare_assign .)
    PACKAGE         reduce using rule 22 (statement -> declare_assign .)
    IMPORT          reduce using rule 22 (statement -> declare_assign .)
    SWITCH          reduce using rule 22 (statement -> declare_assign .)
    IF              reduce using rule 22 (statement -> declare_assign .)
    FUNC            reduce using rule 22 (statement -> declare_assign .)
    RETURN          reduce using rule 22 (statement -> declare_assign .)
    $end            reduce using rule 22 (statement -> declare_assign .)
    RBRACE          reduce using rule 22 (statement -> declare_assign .)
    CASE            reduce using rule 22 (statement -> declare_assign .)
    DEFAULT         reduce using rule 22 (statement -> declare_assign .)


state 21

    (23) statement -> return_statement .

    IDENTIFIER      reduce using rule 23 (statement -> return_statement .)
    VAR             reduce using rule 23 (statement -> return_statement .)
    TYPE            reduce using rule 23 (statement -> return_statement .)
    FOR             reduce using rule 23 (statement -> return_statement .)
    PACKAGE         reduce using rule 23 (statement -> return_statement .)
    IMPORT          reduce using rule 23 (statement -> return_statement .)
    SWITCH          reduce using rule 23 (statement -> return_statement .)
    IF              reduce using rule 23 (statement -> return_statement .)
    FUNC            reduce using rule 23 (statement -> return_statement .)
    RETURN          reduce using rule 23 (statement -> return_statement .)
    $end            reduce using rule 23 (statement -> return_statement .)
    RBRACE          reduce using rule 23 (statement -> return_statement .)
    CASE            reduce using rule 23 (statement -> return_statement .)
    DEFAULT         reduce using rule 23 (statement -> return_statement .)


state 22

    (36) assignment -> IDENTIFIER . DECLARE_ASSIGN expression
    (37) assignment -> IDENTIFIER . DECLARE_ASSIGN struct_literal
    (40) assignment -> IDENTIFIER . DECLARE_ASSIGN slice_literal
    (42) assignment -> IDENTIFIER . ASSIGN expression
    (34) input -> IDENTIFIER . DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (43) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) print_statement -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (69) map -> IDENTIFIER . DECLARE_ASSIGN mapLiteral
    (148) declare_assign -> IDENTIFIER . DECLARE_ASSIGN slice_literal

    DECLARE_ASSIGN  shift and go to state 33
    ASSIGN          shift and go to state 34
    DOT             shift and go to state 35
    LPAREN          shift and go to state 36


state 23

    (38) assignment -> VAR . IDENTIFIER type_name ASSIGN expression
    (39) assignment -> VAR . IDENTIFIER type_name ASSIGN llamarFuncion
    (41) assignment -> VAR . IDENTIFIER type_name ASSIGN slice_literal
    (70) map -> VAR . IDENTIFIER ASSIGN mapLiteral
    (35) var_declaration -> VAR . IDENTIFIER type_name
    (147) slice_declaration -> VAR . IDENTIFIER LBRACKET RBRACKET type_name

    IDENTIFIER      shift and go to state 37


state 24

    (90) struct_definition -> TYPE . IDENTIFIER STRUCT LBRACE struct_fields RBRACE

    IDENTIFIER      shift and go to state 38


state 25

    (99) for_statement -> FOR . shortAssignment SEMICOLON condicion SEMICOLON expression block
    (101) for_statement -> FOR . condicion block
    (102) for_statement -> FOR . block
    (100) shortAssignment -> . identifier_list DECLARE_ASSIGN expression
    (52) condicion -> . expression comparador expression
    (104) block -> . LBRACE statement_list RBRACE
    (105) block -> . LBRACE RBRACE
    (135) identifier_list -> . IDENTIFIER
    (136) identifier_list -> . IDENTIFIER COMMA identifier_list
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    LBRACE          shift and go to state 44
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 46
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    shortAssignment                shift and go to state 39
    condicion                      shift and go to state 40
    expression                     shift and go to state 41
    block                          shift and go to state 42
    identifier_list                shift and go to state 43
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 26

    (24) package -> PACKAGE . MAIN
    (25) package -> PACKAGE . IDENTIFIER

    MAIN            shift and go to state 60
    IDENTIFIER      shift and go to state 61


state 27

    (26) import -> IMPORT . STRING
    (27) import -> IMPORT . LPAREN import_list RPAREN

    STRING          shift and go to state 62
    LPAREN          shift and go to state 63


state 28

    (64) switch -> SWITCH . expression LBRACE caseBlocks RBRACE
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    expression                     shift and go to state 64
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 29

    (125) if_statement -> IF . condicion block
    (126) if_statement -> IF . condicion block ELSE block
    (127) if_statement -> IF . condicion_compleja block
    (128) if_statement -> IF . condicion_compleja block ELSE block
    (52) condicion -> . expression comparador expression
    (53) condicion_compleja -> . condicion operadorLogico condicion
    (54) condicion_compleja -> . condicion operadorLogico condicion_compleja
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    condicion                      shift and go to state 66
    condicion_compleja             shift and go to state 67
    expression                     shift and go to state 41
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 30

    (77) function -> FUNC . IDENTIFIER LPAREN params_opt RPAREN block
    (78) function -> FUNC . IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (79) function -> FUNC . MAIN LPAREN params_opt RPAREN block
    (98) method_definition -> FUNC . LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (129) function_literal -> FUNC . LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 68
    MAIN            shift and go to state 70
    LPAREN          shift and go to state 69


state 31

    (80) return_statement -> RETURN . return_values
    (81) return_values -> . expression
    (82) return_values -> . expression COMMA return_values
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    return_values                  shift and go to state 71
    expression                     shift and go to state 72
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 32

    (5) statement_list -> statement_list statement .

    IDENTIFIER      reduce using rule 5 (statement_list -> statement_list statement .)
    VAR             reduce using rule 5 (statement_list -> statement_list statement .)
    TYPE            reduce using rule 5 (statement_list -> statement_list statement .)
    FOR             reduce using rule 5 (statement_list -> statement_list statement .)
    PACKAGE         reduce using rule 5 (statement_list -> statement_list statement .)
    IMPORT          reduce using rule 5 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 5 (statement_list -> statement_list statement .)
    IF              reduce using rule 5 (statement_list -> statement_list statement .)
    FUNC            reduce using rule 5 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 5 (statement_list -> statement_list statement .)
    $end            reduce using rule 5 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 5 (statement_list -> statement_list statement .)
    CASE            reduce using rule 5 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 5 (statement_list -> statement_list statement .)


state 33

    (36) assignment -> IDENTIFIER DECLARE_ASSIGN . expression
    (37) assignment -> IDENTIFIER DECLARE_ASSIGN . struct_literal
    (40) assignment -> IDENTIFIER DECLARE_ASSIGN . slice_literal
    (69) map -> IDENTIFIER DECLARE_ASSIGN . mapLiteral
    (148) declare_assign -> IDENTIFIER DECLARE_ASSIGN . slice_literal
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (91) struct_literal -> . IDENTIFIER LBRACE struct_field_assignments RBRACE
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (71) mapLiteral -> . MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 73
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    MAP             shift and go to state 78
    FUNC            shift and go to state 59

    expression                     shift and go to state 74
    struct_literal                 shift and go to state 75
    slice_literal                  shift and go to state 76
    mapLiteral                     shift and go to state 77
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 34

    (42) assignment -> IDENTIFIER ASSIGN . expression
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    expression                     shift and go to state 79
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 35

    (34) input -> IDENTIFIER DOT . IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (45) llamarFuncion -> IDENTIFIER DOT . IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) print_statement -> IDENTIFIER DOT . IDENTIFIER LPAREN argument_list_opt RPAREN

    IDENTIFIER      shift and go to state 80


state 36

    (43) llamarFuncion -> IDENTIFIER LPAREN . argument_list_opt RPAREN
    (44) llamarFuncion -> IDENTIFIER LPAREN . argument_list_opt COMMA expression RPAREN
    (50) argument_list_opt -> . argument_list
    (51) argument_list_opt -> .
    (48) argument_list -> . expression
    (49) argument_list -> . argument_list COMMA expression
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    RPAREN          reduce using rule 51 (argument_list_opt -> .)
    COMMA           reduce using rule 51 (argument_list_opt -> .)
    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    argument_list_opt              shift and go to state 81
    expression                     shift and go to state 82
    argument_list                  shift and go to state 83
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 37

    (38) assignment -> VAR IDENTIFIER . type_name ASSIGN expression
    (39) assignment -> VAR IDENTIFIER . type_name ASSIGN llamarFuncion
    (41) assignment -> VAR IDENTIFIER . type_name ASSIGN slice_literal
    (70) map -> VAR IDENTIFIER . ASSIGN mapLiteral
    (35) var_declaration -> VAR IDENTIFIER . type_name
    (147) slice_declaration -> VAR IDENTIFIER . LBRACKET RBRACKET type_name
    (137) type_name -> . DATATYPE
    (138) type_name -> . IDENTIFIER
    (139) type_name -> . LBRACKET RBRACKET type_name
    (140) type_name -> . FUNC LPAREN parameters RPAREN return_type

    ASSIGN          shift and go to state 86
    LBRACKET        shift and go to state 87
    DATATYPE        shift and go to state 88
    IDENTIFIER      shift and go to state 84
    FUNC            shift and go to state 89

    type_name                      shift and go to state 85

state 38

    (90) struct_definition -> TYPE IDENTIFIER . STRUCT LBRACE struct_fields RBRACE

    STRUCT          shift and go to state 90


state 39

    (99) for_statement -> FOR shortAssignment . SEMICOLON condicion SEMICOLON expression block

    SEMICOLON       shift and go to state 91


state 40

    (101) for_statement -> FOR condicion . block
    (104) block -> . LBRACE statement_list RBRACE
    (105) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 44

    block                          shift and go to state 92

state 41

    (52) condicion -> expression . comparador expression
    (46) expression -> expression . comparador expression
    (47) expression -> expression . operadorLogico expression
    (116) expression -> expression . operator expression
    (117) expression -> expression . DOT IDENTIFIER
    (152) expression -> expression . LBRACKET expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (154) expression -> expression . LBRACKET COLON expression RBRACKET
    (155) expression -> expression . LBRACKET expression COLON RBRACKET
    (57) comparador -> . EQ
    (58) comparador -> . NEQ
    (59) comparador -> . GT
    (60) comparador -> . LT
    (61) comparador -> . GE
    (62) comparador -> . LE
    (55) operadorLogico -> . AND
    (56) operadorLogico -> . OR
    (118) operator -> . PLUS
    (119) operator -> . MINUS
    (120) operator -> . TIMES
    (121) operator -> . DIVIDE
    (122) operator -> . MOD

    DOT             shift and go to state 96
    LBRACKET        shift and go to state 97
    EQ              shift and go to state 98
    NEQ             shift and go to state 99
    GT              shift and go to state 100
    LT              shift and go to state 101
    GE              shift and go to state 102
    LE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110

    comparador                     shift and go to state 93
    operadorLogico                 shift and go to state 94
    operator                       shift and go to state 95

state 42

    (102) for_statement -> FOR block .

    IDENTIFIER      reduce using rule 102 (for_statement -> FOR block .)
    VAR             reduce using rule 102 (for_statement -> FOR block .)
    TYPE            reduce using rule 102 (for_statement -> FOR block .)
    FOR             reduce using rule 102 (for_statement -> FOR block .)
    PACKAGE         reduce using rule 102 (for_statement -> FOR block .)
    IMPORT          reduce using rule 102 (for_statement -> FOR block .)
    SWITCH          reduce using rule 102 (for_statement -> FOR block .)
    IF              reduce using rule 102 (for_statement -> FOR block .)
    FUNC            reduce using rule 102 (for_statement -> FOR block .)
    RETURN          reduce using rule 102 (for_statement -> FOR block .)
    $end            reduce using rule 102 (for_statement -> FOR block .)
    RBRACE          reduce using rule 102 (for_statement -> FOR block .)
    CASE            reduce using rule 102 (for_statement -> FOR block .)
    DEFAULT         reduce using rule 102 (for_statement -> FOR block .)


state 43

    (100) shortAssignment -> identifier_list . DECLARE_ASSIGN expression

    DECLARE_ASSIGN  shift and go to state 111


state 44

    (104) block -> LBRACE . statement_list RBRACE
    (105) block -> LBRACE . RBRACE
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (23) statement -> . return_statement
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (37) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (39) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (40) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (41) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (42) assignment -> . IDENTIFIER ASSIGN expression
    (34) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (90) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (99) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (101) for_statement -> . FOR condicion block
    (102) for_statement -> . FOR block
    (24) package -> . PACKAGE MAIN
    (25) package -> . PACKAGE IDENTIFIER
    (26) import -> . IMPORT STRING
    (27) import -> . IMPORT LPAREN import_list RPAREN
    (64) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (69) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (70) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (125) if_statement -> . IF condicion block
    (126) if_statement -> . IF condicion block ELSE block
    (127) if_statement -> . IF condicion_compleja block
    (128) if_statement -> . IF condicion_compleja block ELSE block
    (77) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (78) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (79) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (98) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (35) var_declaration -> . VAR IDENTIFIER type_name
    (147) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (148) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (80) return_statement -> . RETURN return_values

    RBRACE          shift and go to state 113
    IDENTIFIER      shift and go to state 22
    VAR             shift and go to state 23
    TYPE            shift and go to state 24
    FOR             shift and go to state 25
    PACKAGE         shift and go to state 26
    IMPORT          shift and go to state 27
    SWITCH          shift and go to state 28
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    RETURN          shift and go to state 31

    statement_list                 shift and go to state 112
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20
    return_statement               shift and go to state 21

state 45

    (135) identifier_list -> IDENTIFIER .
    (136) identifier_list -> IDENTIFIER . COMMA identifier_list
    (107) expression -> IDENTIFIER .
    (43) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN

  ! shift/reduce conflict for DOT resolved as shift
    DECLARE_ASSIGN  reduce using rule 135 (identifier_list -> IDENTIFIER .)
    COMMA           shift and go to state 114
    LBRACKET        reduce using rule 107 (expression -> IDENTIFIER .)
    EQ              reduce using rule 107 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 107 (expression -> IDENTIFIER .)
    GT              reduce using rule 107 (expression -> IDENTIFIER .)
    LT              reduce using rule 107 (expression -> IDENTIFIER .)
    GE              reduce using rule 107 (expression -> IDENTIFIER .)
    LE              reduce using rule 107 (expression -> IDENTIFIER .)
    AND             reduce using rule 107 (expression -> IDENTIFIER .)
    OR              reduce using rule 107 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 107 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 107 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 107 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 107 (expression -> IDENTIFIER .)
    MOD             reduce using rule 107 (expression -> IDENTIFIER .)
    LPAREN          shift and go to state 36
    DOT             shift and go to state 115

  ! DOT             [ reduce using rule 107 (expression -> IDENTIFIER .) ]


state 46

    (106) expression -> NUMBER .

    DOT             reduce using rule 106 (expression -> NUMBER .)
    LBRACKET        reduce using rule 106 (expression -> NUMBER .)
    EQ              reduce using rule 106 (expression -> NUMBER .)
    NEQ             reduce using rule 106 (expression -> NUMBER .)
    GT              reduce using rule 106 (expression -> NUMBER .)
    LT              reduce using rule 106 (expression -> NUMBER .)
    GE              reduce using rule 106 (expression -> NUMBER .)
    LE              reduce using rule 106 (expression -> NUMBER .)
    AND             reduce using rule 106 (expression -> NUMBER .)
    OR              reduce using rule 106 (expression -> NUMBER .)
    PLUS            reduce using rule 106 (expression -> NUMBER .)
    MINUS           reduce using rule 106 (expression -> NUMBER .)
    TIMES           reduce using rule 106 (expression -> NUMBER .)
    DIVIDE          reduce using rule 106 (expression -> NUMBER .)
    MOD             reduce using rule 106 (expression -> NUMBER .)
    LBRACE          reduce using rule 106 (expression -> NUMBER .)
    COMMA           reduce using rule 106 (expression -> NUMBER .)
    IDENTIFIER      reduce using rule 106 (expression -> NUMBER .)
    VAR             reduce using rule 106 (expression -> NUMBER .)
    TYPE            reduce using rule 106 (expression -> NUMBER .)
    FOR             reduce using rule 106 (expression -> NUMBER .)
    PACKAGE         reduce using rule 106 (expression -> NUMBER .)
    IMPORT          reduce using rule 106 (expression -> NUMBER .)
    SWITCH          reduce using rule 106 (expression -> NUMBER .)
    IF              reduce using rule 106 (expression -> NUMBER .)
    FUNC            reduce using rule 106 (expression -> NUMBER .)
    RETURN          reduce using rule 106 (expression -> NUMBER .)
    $end            reduce using rule 106 (expression -> NUMBER .)
    RBRACE          reduce using rule 106 (expression -> NUMBER .)
    CASE            reduce using rule 106 (expression -> NUMBER .)
    DEFAULT         reduce using rule 106 (expression -> NUMBER .)
    RPAREN          reduce using rule 106 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 106 (expression -> NUMBER .)
    RBRACKET        reduce using rule 106 (expression -> NUMBER .)
    COLON           reduce using rule 106 (expression -> NUMBER .)


state 47

    (108) expression -> RUNE .

    DOT             reduce using rule 108 (expression -> RUNE .)
    LBRACKET        reduce using rule 108 (expression -> RUNE .)
    EQ              reduce using rule 108 (expression -> RUNE .)
    NEQ             reduce using rule 108 (expression -> RUNE .)
    GT              reduce using rule 108 (expression -> RUNE .)
    LT              reduce using rule 108 (expression -> RUNE .)
    GE              reduce using rule 108 (expression -> RUNE .)
    LE              reduce using rule 108 (expression -> RUNE .)
    AND             reduce using rule 108 (expression -> RUNE .)
    OR              reduce using rule 108 (expression -> RUNE .)
    PLUS            reduce using rule 108 (expression -> RUNE .)
    MINUS           reduce using rule 108 (expression -> RUNE .)
    TIMES           reduce using rule 108 (expression -> RUNE .)
    DIVIDE          reduce using rule 108 (expression -> RUNE .)
    MOD             reduce using rule 108 (expression -> RUNE .)
    LBRACE          reduce using rule 108 (expression -> RUNE .)
    COMMA           reduce using rule 108 (expression -> RUNE .)
    IDENTIFIER      reduce using rule 108 (expression -> RUNE .)
    VAR             reduce using rule 108 (expression -> RUNE .)
    TYPE            reduce using rule 108 (expression -> RUNE .)
    FOR             reduce using rule 108 (expression -> RUNE .)
    PACKAGE         reduce using rule 108 (expression -> RUNE .)
    IMPORT          reduce using rule 108 (expression -> RUNE .)
    SWITCH          reduce using rule 108 (expression -> RUNE .)
    IF              reduce using rule 108 (expression -> RUNE .)
    FUNC            reduce using rule 108 (expression -> RUNE .)
    RETURN          reduce using rule 108 (expression -> RUNE .)
    $end            reduce using rule 108 (expression -> RUNE .)
    RBRACE          reduce using rule 108 (expression -> RUNE .)
    CASE            reduce using rule 108 (expression -> RUNE .)
    DEFAULT         reduce using rule 108 (expression -> RUNE .)
    RPAREN          reduce using rule 108 (expression -> RUNE .)
    SEMICOLON       reduce using rule 108 (expression -> RUNE .)
    RBRACKET        reduce using rule 108 (expression -> RUNE .)
    COLON           reduce using rule 108 (expression -> RUNE .)


state 48

    (109) expression -> STRING .

    DOT             reduce using rule 109 (expression -> STRING .)
    LBRACKET        reduce using rule 109 (expression -> STRING .)
    EQ              reduce using rule 109 (expression -> STRING .)
    NEQ             reduce using rule 109 (expression -> STRING .)
    GT              reduce using rule 109 (expression -> STRING .)
    LT              reduce using rule 109 (expression -> STRING .)
    GE              reduce using rule 109 (expression -> STRING .)
    LE              reduce using rule 109 (expression -> STRING .)
    AND             reduce using rule 109 (expression -> STRING .)
    OR              reduce using rule 109 (expression -> STRING .)
    PLUS            reduce using rule 109 (expression -> STRING .)
    MINUS           reduce using rule 109 (expression -> STRING .)
    TIMES           reduce using rule 109 (expression -> STRING .)
    DIVIDE          reduce using rule 109 (expression -> STRING .)
    MOD             reduce using rule 109 (expression -> STRING .)
    LBRACE          reduce using rule 109 (expression -> STRING .)
    COMMA           reduce using rule 109 (expression -> STRING .)
    IDENTIFIER      reduce using rule 109 (expression -> STRING .)
    VAR             reduce using rule 109 (expression -> STRING .)
    TYPE            reduce using rule 109 (expression -> STRING .)
    FOR             reduce using rule 109 (expression -> STRING .)
    PACKAGE         reduce using rule 109 (expression -> STRING .)
    IMPORT          reduce using rule 109 (expression -> STRING .)
    SWITCH          reduce using rule 109 (expression -> STRING .)
    IF              reduce using rule 109 (expression -> STRING .)
    FUNC            reduce using rule 109 (expression -> STRING .)
    RETURN          reduce using rule 109 (expression -> STRING .)
    $end            reduce using rule 109 (expression -> STRING .)
    RBRACE          reduce using rule 109 (expression -> STRING .)
    CASE            reduce using rule 109 (expression -> STRING .)
    DEFAULT         reduce using rule 109 (expression -> STRING .)
    RPAREN          reduce using rule 109 (expression -> STRING .)
    SEMICOLON       reduce using rule 109 (expression -> STRING .)
    RBRACKET        reduce using rule 109 (expression -> STRING .)
    COLON           reduce using rule 109 (expression -> STRING .)


state 49

    (110) expression -> RAW_STRING .

    DOT             reduce using rule 110 (expression -> RAW_STRING .)
    LBRACKET        reduce using rule 110 (expression -> RAW_STRING .)
    EQ              reduce using rule 110 (expression -> RAW_STRING .)
    NEQ             reduce using rule 110 (expression -> RAW_STRING .)
    GT              reduce using rule 110 (expression -> RAW_STRING .)
    LT              reduce using rule 110 (expression -> RAW_STRING .)
    GE              reduce using rule 110 (expression -> RAW_STRING .)
    LE              reduce using rule 110 (expression -> RAW_STRING .)
    AND             reduce using rule 110 (expression -> RAW_STRING .)
    OR              reduce using rule 110 (expression -> RAW_STRING .)
    PLUS            reduce using rule 110 (expression -> RAW_STRING .)
    MINUS           reduce using rule 110 (expression -> RAW_STRING .)
    TIMES           reduce using rule 110 (expression -> RAW_STRING .)
    DIVIDE          reduce using rule 110 (expression -> RAW_STRING .)
    MOD             reduce using rule 110 (expression -> RAW_STRING .)
    LBRACE          reduce using rule 110 (expression -> RAW_STRING .)
    COMMA           reduce using rule 110 (expression -> RAW_STRING .)
    IDENTIFIER      reduce using rule 110 (expression -> RAW_STRING .)
    VAR             reduce using rule 110 (expression -> RAW_STRING .)
    TYPE            reduce using rule 110 (expression -> RAW_STRING .)
    FOR             reduce using rule 110 (expression -> RAW_STRING .)
    PACKAGE         reduce using rule 110 (expression -> RAW_STRING .)
    IMPORT          reduce using rule 110 (expression -> RAW_STRING .)
    SWITCH          reduce using rule 110 (expression -> RAW_STRING .)
    IF              reduce using rule 110 (expression -> RAW_STRING .)
    FUNC            reduce using rule 110 (expression -> RAW_STRING .)
    RETURN          reduce using rule 110 (expression -> RAW_STRING .)
    $end            reduce using rule 110 (expression -> RAW_STRING .)
    RBRACE          reduce using rule 110 (expression -> RAW_STRING .)
    CASE            reduce using rule 110 (expression -> RAW_STRING .)
    DEFAULT         reduce using rule 110 (expression -> RAW_STRING .)
    RPAREN          reduce using rule 110 (expression -> RAW_STRING .)
    SEMICOLON       reduce using rule 110 (expression -> RAW_STRING .)
    RBRACKET        reduce using rule 110 (expression -> RAW_STRING .)
    COLON           reduce using rule 110 (expression -> RAW_STRING .)


state 50

    (111) expression -> TRUE .

    DOT             reduce using rule 111 (expression -> TRUE .)
    LBRACKET        reduce using rule 111 (expression -> TRUE .)
    EQ              reduce using rule 111 (expression -> TRUE .)
    NEQ             reduce using rule 111 (expression -> TRUE .)
    GT              reduce using rule 111 (expression -> TRUE .)
    LT              reduce using rule 111 (expression -> TRUE .)
    GE              reduce using rule 111 (expression -> TRUE .)
    LE              reduce using rule 111 (expression -> TRUE .)
    AND             reduce using rule 111 (expression -> TRUE .)
    OR              reduce using rule 111 (expression -> TRUE .)
    PLUS            reduce using rule 111 (expression -> TRUE .)
    MINUS           reduce using rule 111 (expression -> TRUE .)
    TIMES           reduce using rule 111 (expression -> TRUE .)
    DIVIDE          reduce using rule 111 (expression -> TRUE .)
    MOD             reduce using rule 111 (expression -> TRUE .)
    LBRACE          reduce using rule 111 (expression -> TRUE .)
    COMMA           reduce using rule 111 (expression -> TRUE .)
    IDENTIFIER      reduce using rule 111 (expression -> TRUE .)
    VAR             reduce using rule 111 (expression -> TRUE .)
    TYPE            reduce using rule 111 (expression -> TRUE .)
    FOR             reduce using rule 111 (expression -> TRUE .)
    PACKAGE         reduce using rule 111 (expression -> TRUE .)
    IMPORT          reduce using rule 111 (expression -> TRUE .)
    SWITCH          reduce using rule 111 (expression -> TRUE .)
    IF              reduce using rule 111 (expression -> TRUE .)
    FUNC            reduce using rule 111 (expression -> TRUE .)
    RETURN          reduce using rule 111 (expression -> TRUE .)
    $end            reduce using rule 111 (expression -> TRUE .)
    RBRACE          reduce using rule 111 (expression -> TRUE .)
    CASE            reduce using rule 111 (expression -> TRUE .)
    DEFAULT         reduce using rule 111 (expression -> TRUE .)
    RPAREN          reduce using rule 111 (expression -> TRUE .)
    SEMICOLON       reduce using rule 111 (expression -> TRUE .)
    RBRACKET        reduce using rule 111 (expression -> TRUE .)
    COLON           reduce using rule 111 (expression -> TRUE .)


state 51

    (112) expression -> FALSE .

    DOT             reduce using rule 112 (expression -> FALSE .)
    LBRACKET        reduce using rule 112 (expression -> FALSE .)
    EQ              reduce using rule 112 (expression -> FALSE .)
    NEQ             reduce using rule 112 (expression -> FALSE .)
    GT              reduce using rule 112 (expression -> FALSE .)
    LT              reduce using rule 112 (expression -> FALSE .)
    GE              reduce using rule 112 (expression -> FALSE .)
    LE              reduce using rule 112 (expression -> FALSE .)
    AND             reduce using rule 112 (expression -> FALSE .)
    OR              reduce using rule 112 (expression -> FALSE .)
    PLUS            reduce using rule 112 (expression -> FALSE .)
    MINUS           reduce using rule 112 (expression -> FALSE .)
    TIMES           reduce using rule 112 (expression -> FALSE .)
    DIVIDE          reduce using rule 112 (expression -> FALSE .)
    MOD             reduce using rule 112 (expression -> FALSE .)
    LBRACE          reduce using rule 112 (expression -> FALSE .)
    COMMA           reduce using rule 112 (expression -> FALSE .)
    IDENTIFIER      reduce using rule 112 (expression -> FALSE .)
    VAR             reduce using rule 112 (expression -> FALSE .)
    TYPE            reduce using rule 112 (expression -> FALSE .)
    FOR             reduce using rule 112 (expression -> FALSE .)
    PACKAGE         reduce using rule 112 (expression -> FALSE .)
    IMPORT          reduce using rule 112 (expression -> FALSE .)
    SWITCH          reduce using rule 112 (expression -> FALSE .)
    IF              reduce using rule 112 (expression -> FALSE .)
    FUNC            reduce using rule 112 (expression -> FALSE .)
    RETURN          reduce using rule 112 (expression -> FALSE .)
    $end            reduce using rule 112 (expression -> FALSE .)
    RBRACE          reduce using rule 112 (expression -> FALSE .)
    CASE            reduce using rule 112 (expression -> FALSE .)
    DEFAULT         reduce using rule 112 (expression -> FALSE .)
    RPAREN          reduce using rule 112 (expression -> FALSE .)
    SEMICOLON       reduce using rule 112 (expression -> FALSE .)
    RBRACKET        reduce using rule 112 (expression -> FALSE .)
    COLON           reduce using rule 112 (expression -> FALSE .)


state 52

    (113) expression -> NIL .

    DOT             reduce using rule 113 (expression -> NIL .)
    LBRACKET        reduce using rule 113 (expression -> NIL .)
    EQ              reduce using rule 113 (expression -> NIL .)
    NEQ             reduce using rule 113 (expression -> NIL .)
    GT              reduce using rule 113 (expression -> NIL .)
    LT              reduce using rule 113 (expression -> NIL .)
    GE              reduce using rule 113 (expression -> NIL .)
    LE              reduce using rule 113 (expression -> NIL .)
    AND             reduce using rule 113 (expression -> NIL .)
    OR              reduce using rule 113 (expression -> NIL .)
    PLUS            reduce using rule 113 (expression -> NIL .)
    MINUS           reduce using rule 113 (expression -> NIL .)
    TIMES           reduce using rule 113 (expression -> NIL .)
    DIVIDE          reduce using rule 113 (expression -> NIL .)
    MOD             reduce using rule 113 (expression -> NIL .)
    LBRACE          reduce using rule 113 (expression -> NIL .)
    COMMA           reduce using rule 113 (expression -> NIL .)
    IDENTIFIER      reduce using rule 113 (expression -> NIL .)
    VAR             reduce using rule 113 (expression -> NIL .)
    TYPE            reduce using rule 113 (expression -> NIL .)
    FOR             reduce using rule 113 (expression -> NIL .)
    PACKAGE         reduce using rule 113 (expression -> NIL .)
    IMPORT          reduce using rule 113 (expression -> NIL .)
    SWITCH          reduce using rule 113 (expression -> NIL .)
    IF              reduce using rule 113 (expression -> NIL .)
    FUNC            reduce using rule 113 (expression -> NIL .)
    RETURN          reduce using rule 113 (expression -> NIL .)
    $end            reduce using rule 113 (expression -> NIL .)
    RBRACE          reduce using rule 113 (expression -> NIL .)
    CASE            reduce using rule 113 (expression -> NIL .)
    DEFAULT         reduce using rule 113 (expression -> NIL .)
    RPAREN          reduce using rule 113 (expression -> NIL .)
    SEMICOLON       reduce using rule 113 (expression -> NIL .)
    RBRACKET        reduce using rule 113 (expression -> NIL .)
    COLON           reduce using rule 113 (expression -> NIL .)


state 53

    (114) expression -> slice_literal .

    DOT             reduce using rule 114 (expression -> slice_literal .)
    LBRACKET        reduce using rule 114 (expression -> slice_literal .)
    EQ              reduce using rule 114 (expression -> slice_literal .)
    NEQ             reduce using rule 114 (expression -> slice_literal .)
    GT              reduce using rule 114 (expression -> slice_literal .)
    LT              reduce using rule 114 (expression -> slice_literal .)
    GE              reduce using rule 114 (expression -> slice_literal .)
    LE              reduce using rule 114 (expression -> slice_literal .)
    AND             reduce using rule 114 (expression -> slice_literal .)
    OR              reduce using rule 114 (expression -> slice_literal .)
    PLUS            reduce using rule 114 (expression -> slice_literal .)
    MINUS           reduce using rule 114 (expression -> slice_literal .)
    TIMES           reduce using rule 114 (expression -> slice_literal .)
    DIVIDE          reduce using rule 114 (expression -> slice_literal .)
    MOD             reduce using rule 114 (expression -> slice_literal .)
    LBRACE          reduce using rule 114 (expression -> slice_literal .)
    COMMA           reduce using rule 114 (expression -> slice_literal .)
    IDENTIFIER      reduce using rule 114 (expression -> slice_literal .)
    VAR             reduce using rule 114 (expression -> slice_literal .)
    TYPE            reduce using rule 114 (expression -> slice_literal .)
    FOR             reduce using rule 114 (expression -> slice_literal .)
    PACKAGE         reduce using rule 114 (expression -> slice_literal .)
    IMPORT          reduce using rule 114 (expression -> slice_literal .)
    SWITCH          reduce using rule 114 (expression -> slice_literal .)
    IF              reduce using rule 114 (expression -> slice_literal .)
    FUNC            reduce using rule 114 (expression -> slice_literal .)
    RETURN          reduce using rule 114 (expression -> slice_literal .)
    $end            reduce using rule 114 (expression -> slice_literal .)
    RBRACE          reduce using rule 114 (expression -> slice_literal .)
    CASE            reduce using rule 114 (expression -> slice_literal .)
    DEFAULT         reduce using rule 114 (expression -> slice_literal .)
    RPAREN          reduce using rule 114 (expression -> slice_literal .)
    SEMICOLON       reduce using rule 114 (expression -> slice_literal .)
    RBRACKET        reduce using rule 114 (expression -> slice_literal .)
    COLON           reduce using rule 114 (expression -> slice_literal .)


state 54

    (115) expression -> llamarFuncion .

    DOT             reduce using rule 115 (expression -> llamarFuncion .)
    LBRACKET        reduce using rule 115 (expression -> llamarFuncion .)
    EQ              reduce using rule 115 (expression -> llamarFuncion .)
    NEQ             reduce using rule 115 (expression -> llamarFuncion .)
    GT              reduce using rule 115 (expression -> llamarFuncion .)
    LT              reduce using rule 115 (expression -> llamarFuncion .)
    GE              reduce using rule 115 (expression -> llamarFuncion .)
    LE              reduce using rule 115 (expression -> llamarFuncion .)
    AND             reduce using rule 115 (expression -> llamarFuncion .)
    OR              reduce using rule 115 (expression -> llamarFuncion .)
    PLUS            reduce using rule 115 (expression -> llamarFuncion .)
    MINUS           reduce using rule 115 (expression -> llamarFuncion .)
    TIMES           reduce using rule 115 (expression -> llamarFuncion .)
    DIVIDE          reduce using rule 115 (expression -> llamarFuncion .)
    MOD             reduce using rule 115 (expression -> llamarFuncion .)
    LBRACE          reduce using rule 115 (expression -> llamarFuncion .)
    COMMA           reduce using rule 115 (expression -> llamarFuncion .)
    IDENTIFIER      reduce using rule 115 (expression -> llamarFuncion .)
    VAR             reduce using rule 115 (expression -> llamarFuncion .)
    TYPE            reduce using rule 115 (expression -> llamarFuncion .)
    FOR             reduce using rule 115 (expression -> llamarFuncion .)
    PACKAGE         reduce using rule 115 (expression -> llamarFuncion .)
    IMPORT          reduce using rule 115 (expression -> llamarFuncion .)
    SWITCH          reduce using rule 115 (expression -> llamarFuncion .)
    IF              reduce using rule 115 (expression -> llamarFuncion .)
    FUNC            reduce using rule 115 (expression -> llamarFuncion .)
    RETURN          reduce using rule 115 (expression -> llamarFuncion .)
    $end            reduce using rule 115 (expression -> llamarFuncion .)
    RBRACE          reduce using rule 115 (expression -> llamarFuncion .)
    CASE            reduce using rule 115 (expression -> llamarFuncion .)
    DEFAULT         reduce using rule 115 (expression -> llamarFuncion .)
    RPAREN          reduce using rule 115 (expression -> llamarFuncion .)
    SEMICOLON       reduce using rule 115 (expression -> llamarFuncion .)
    RBRACKET        reduce using rule 115 (expression -> llamarFuncion .)
    COLON           reduce using rule 115 (expression -> llamarFuncion .)


state 55

    (123) expression -> MINUS . expression
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    expression                     shift and go to state 116
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 56

    (124) expression -> LPAREN . expression RPAREN
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    expression                     shift and go to state 117
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 57

    (143) expression -> function_literal .

    DOT             reduce using rule 143 (expression -> function_literal .)
    LBRACKET        reduce using rule 143 (expression -> function_literal .)
    EQ              reduce using rule 143 (expression -> function_literal .)
    NEQ             reduce using rule 143 (expression -> function_literal .)
    GT              reduce using rule 143 (expression -> function_literal .)
    LT              reduce using rule 143 (expression -> function_literal .)
    GE              reduce using rule 143 (expression -> function_literal .)
    LE              reduce using rule 143 (expression -> function_literal .)
    AND             reduce using rule 143 (expression -> function_literal .)
    OR              reduce using rule 143 (expression -> function_literal .)
    PLUS            reduce using rule 143 (expression -> function_literal .)
    MINUS           reduce using rule 143 (expression -> function_literal .)
    TIMES           reduce using rule 143 (expression -> function_literal .)
    DIVIDE          reduce using rule 143 (expression -> function_literal .)
    MOD             reduce using rule 143 (expression -> function_literal .)
    LBRACE          reduce using rule 143 (expression -> function_literal .)
    COMMA           reduce using rule 143 (expression -> function_literal .)
    IDENTIFIER      reduce using rule 143 (expression -> function_literal .)
    VAR             reduce using rule 143 (expression -> function_literal .)
    TYPE            reduce using rule 143 (expression -> function_literal .)
    FOR             reduce using rule 143 (expression -> function_literal .)
    PACKAGE         reduce using rule 143 (expression -> function_literal .)
    IMPORT          reduce using rule 143 (expression -> function_literal .)
    SWITCH          reduce using rule 143 (expression -> function_literal .)
    IF              reduce using rule 143 (expression -> function_literal .)
    FUNC            reduce using rule 143 (expression -> function_literal .)
    RETURN          reduce using rule 143 (expression -> function_literal .)
    $end            reduce using rule 143 (expression -> function_literal .)
    RBRACE          reduce using rule 143 (expression -> function_literal .)
    CASE            reduce using rule 143 (expression -> function_literal .)
    DEFAULT         reduce using rule 143 (expression -> function_literal .)
    RPAREN          reduce using rule 143 (expression -> function_literal .)
    SEMICOLON       reduce using rule 143 (expression -> function_literal .)
    RBRACKET        reduce using rule 143 (expression -> function_literal .)
    COLON           reduce using rule 143 (expression -> function_literal .)


state 58

    (149) slice_literal -> LBRACKET . RBRACKET type_name LBRACE elements RBRACE

    RBRACKET        shift and go to state 118


state 59

    (129) function_literal -> FUNC . LPAREN parameters RPAREN return_type block

    LPAREN          shift and go to state 119


state 60

    (24) package -> PACKAGE MAIN .

    IDENTIFIER      reduce using rule 24 (package -> PACKAGE MAIN .)
    VAR             reduce using rule 24 (package -> PACKAGE MAIN .)
    TYPE            reduce using rule 24 (package -> PACKAGE MAIN .)
    FOR             reduce using rule 24 (package -> PACKAGE MAIN .)
    PACKAGE         reduce using rule 24 (package -> PACKAGE MAIN .)
    IMPORT          reduce using rule 24 (package -> PACKAGE MAIN .)
    SWITCH          reduce using rule 24 (package -> PACKAGE MAIN .)
    IF              reduce using rule 24 (package -> PACKAGE MAIN .)
    FUNC            reduce using rule 24 (package -> PACKAGE MAIN .)
    RETURN          reduce using rule 24 (package -> PACKAGE MAIN .)
    $end            reduce using rule 24 (package -> PACKAGE MAIN .)
    RBRACE          reduce using rule 24 (package -> PACKAGE MAIN .)
    CASE            reduce using rule 24 (package -> PACKAGE MAIN .)
    DEFAULT         reduce using rule 24 (package -> PACKAGE MAIN .)


state 61

    (25) package -> PACKAGE IDENTIFIER .

    IDENTIFIER      reduce using rule 25 (package -> PACKAGE IDENTIFIER .)
    VAR             reduce using rule 25 (package -> PACKAGE IDENTIFIER .)
    TYPE            reduce using rule 25 (package -> PACKAGE IDENTIFIER .)
    FOR             reduce using rule 25 (package -> PACKAGE IDENTIFIER .)
    PACKAGE         reduce using rule 25 (package -> PACKAGE IDENTIFIER .)
    IMPORT          reduce using rule 25 (package -> PACKAGE IDENTIFIER .)
    SWITCH          reduce using rule 25 (package -> PACKAGE IDENTIFIER .)
    IF              reduce using rule 25 (package -> PACKAGE IDENTIFIER .)
    FUNC            reduce using rule 25 (package -> PACKAGE IDENTIFIER .)
    RETURN          reduce using rule 25 (package -> PACKAGE IDENTIFIER .)
    $end            reduce using rule 25 (package -> PACKAGE IDENTIFIER .)
    RBRACE          reduce using rule 25 (package -> PACKAGE IDENTIFIER .)
    CASE            reduce using rule 25 (package -> PACKAGE IDENTIFIER .)
    DEFAULT         reduce using rule 25 (package -> PACKAGE IDENTIFIER .)


state 62

    (26) import -> IMPORT STRING .

    IDENTIFIER      reduce using rule 26 (import -> IMPORT STRING .)
    VAR             reduce using rule 26 (import -> IMPORT STRING .)
    TYPE            reduce using rule 26 (import -> IMPORT STRING .)
    FOR             reduce using rule 26 (import -> IMPORT STRING .)
    PACKAGE         reduce using rule 26 (import -> IMPORT STRING .)
    IMPORT          reduce using rule 26 (import -> IMPORT STRING .)
    SWITCH          reduce using rule 26 (import -> IMPORT STRING .)
    IF              reduce using rule 26 (import -> IMPORT STRING .)
    FUNC            reduce using rule 26 (import -> IMPORT STRING .)
    RETURN          reduce using rule 26 (import -> IMPORT STRING .)
    $end            reduce using rule 26 (import -> IMPORT STRING .)
    RBRACE          reduce using rule 26 (import -> IMPORT STRING .)
    CASE            reduce using rule 26 (import -> IMPORT STRING .)
    DEFAULT         reduce using rule 26 (import -> IMPORT STRING .)


state 63

    (27) import -> IMPORT LPAREN . import_list RPAREN
    (28) import_list -> . STRING
    (29) import_list -> . import_list STRING

    STRING          shift and go to state 121

    import_list                    shift and go to state 120

state 64

    (64) switch -> SWITCH expression . LBRACE caseBlocks RBRACE
    (46) expression -> expression . comparador expression
    (47) expression -> expression . operadorLogico expression
    (116) expression -> expression . operator expression
    (117) expression -> expression . DOT IDENTIFIER
    (152) expression -> expression . LBRACKET expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (154) expression -> expression . LBRACKET COLON expression RBRACKET
    (155) expression -> expression . LBRACKET expression COLON RBRACKET
    (57) comparador -> . EQ
    (58) comparador -> . NEQ
    (59) comparador -> . GT
    (60) comparador -> . LT
    (61) comparador -> . GE
    (62) comparador -> . LE
    (55) operadorLogico -> . AND
    (56) operadorLogico -> . OR
    (118) operator -> . PLUS
    (119) operator -> . MINUS
    (120) operator -> . TIMES
    (121) operator -> . DIVIDE
    (122) operator -> . MOD

    LBRACE          shift and go to state 122
    DOT             shift and go to state 96
    LBRACKET        shift and go to state 97
    EQ              shift and go to state 98
    NEQ             shift and go to state 99
    GT              shift and go to state 100
    LT              shift and go to state 101
    GE              shift and go to state 102
    LE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110

    comparador                     shift and go to state 123
    operadorLogico                 shift and go to state 94
    operator                       shift and go to state 95

state 65

    (107) expression -> IDENTIFIER .
    (43) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN

  ! shift/reduce conflict for DOT resolved as shift
    LBRACE          reduce using rule 107 (expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 107 (expression -> IDENTIFIER .)
    EQ              reduce using rule 107 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 107 (expression -> IDENTIFIER .)
    GT              reduce using rule 107 (expression -> IDENTIFIER .)
    LT              reduce using rule 107 (expression -> IDENTIFIER .)
    GE              reduce using rule 107 (expression -> IDENTIFIER .)
    LE              reduce using rule 107 (expression -> IDENTIFIER .)
    AND             reduce using rule 107 (expression -> IDENTIFIER .)
    OR              reduce using rule 107 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 107 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 107 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 107 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 107 (expression -> IDENTIFIER .)
    MOD             reduce using rule 107 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 107 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 107 (expression -> IDENTIFIER .)
    VAR             reduce using rule 107 (expression -> IDENTIFIER .)
    TYPE            reduce using rule 107 (expression -> IDENTIFIER .)
    FOR             reduce using rule 107 (expression -> IDENTIFIER .)
    PACKAGE         reduce using rule 107 (expression -> IDENTIFIER .)
    IMPORT          reduce using rule 107 (expression -> IDENTIFIER .)
    SWITCH          reduce using rule 107 (expression -> IDENTIFIER .)
    IF              reduce using rule 107 (expression -> IDENTIFIER .)
    FUNC            reduce using rule 107 (expression -> IDENTIFIER .)
    RETURN          reduce using rule 107 (expression -> IDENTIFIER .)
    $end            reduce using rule 107 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 107 (expression -> IDENTIFIER .)
    CASE            reduce using rule 107 (expression -> IDENTIFIER .)
    DEFAULT         reduce using rule 107 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 107 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 107 (expression -> IDENTIFIER .)
    RBRACKET        reduce using rule 107 (expression -> IDENTIFIER .)
    COLON           reduce using rule 107 (expression -> IDENTIFIER .)
    LPAREN          shift and go to state 36
    DOT             shift and go to state 115

  ! DOT             [ reduce using rule 107 (expression -> IDENTIFIER .) ]


state 66

    (125) if_statement -> IF condicion . block
    (126) if_statement -> IF condicion . block ELSE block
    (53) condicion_compleja -> condicion . operadorLogico condicion
    (54) condicion_compleja -> condicion . operadorLogico condicion_compleja
    (104) block -> . LBRACE statement_list RBRACE
    (105) block -> . LBRACE RBRACE
    (55) operadorLogico -> . AND
    (56) operadorLogico -> . OR

    LBRACE          shift and go to state 44
    AND             shift and go to state 104
    OR              shift and go to state 105

    block                          shift and go to state 124
    operadorLogico                 shift and go to state 125

state 67

    (127) if_statement -> IF condicion_compleja . block
    (128) if_statement -> IF condicion_compleja . block ELSE block
    (104) block -> . LBRACE statement_list RBRACE
    (105) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 44

    block                          shift and go to state 126

state 68

    (77) function -> FUNC IDENTIFIER . LPAREN params_opt RPAREN block
    (78) function -> FUNC IDENTIFIER . LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE

    LPAREN          shift and go to state 127


state 69

    (98) method_definition -> FUNC LPAREN . IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (129) function_literal -> FUNC LPAREN . parameters RPAREN return_type block
    (130) parameters -> . parameters COMMA parameter
    (131) parameters -> . parameter
    (132) parameters -> . empty
    (133) parameter -> . IDENTIFIER type_name
    (134) parameter -> . identifier_list type_name
    (63) empty -> .
    (135) identifier_list -> . IDENTIFIER
    (136) identifier_list -> . IDENTIFIER COMMA identifier_list

    IDENTIFIER      shift and go to state 128
    RPAREN          reduce using rule 63 (empty -> .)
    COMMA           reduce using rule 63 (empty -> .)

    parameters                     shift and go to state 129
    parameter                      shift and go to state 130
    empty                          shift and go to state 131
    identifier_list                shift and go to state 132

state 70

    (79) function -> FUNC MAIN . LPAREN params_opt RPAREN block

    LPAREN          shift and go to state 133


state 71

    (80) return_statement -> RETURN return_values .

    IDENTIFIER      reduce using rule 80 (return_statement -> RETURN return_values .)
    VAR             reduce using rule 80 (return_statement -> RETURN return_values .)
    TYPE            reduce using rule 80 (return_statement -> RETURN return_values .)
    FOR             reduce using rule 80 (return_statement -> RETURN return_values .)
    PACKAGE         reduce using rule 80 (return_statement -> RETURN return_values .)
    IMPORT          reduce using rule 80 (return_statement -> RETURN return_values .)
    SWITCH          reduce using rule 80 (return_statement -> RETURN return_values .)
    IF              reduce using rule 80 (return_statement -> RETURN return_values .)
    FUNC            reduce using rule 80 (return_statement -> RETURN return_values .)
    RETURN          reduce using rule 80 (return_statement -> RETURN return_values .)
    $end            reduce using rule 80 (return_statement -> RETURN return_values .)
    RBRACE          reduce using rule 80 (return_statement -> RETURN return_values .)
    CASE            reduce using rule 80 (return_statement -> RETURN return_values .)
    DEFAULT         reduce using rule 80 (return_statement -> RETURN return_values .)


state 72

    (81) return_values -> expression .
    (82) return_values -> expression . COMMA return_values
    (46) expression -> expression . comparador expression
    (47) expression -> expression . operadorLogico expression
    (116) expression -> expression . operator expression
    (117) expression -> expression . DOT IDENTIFIER
    (152) expression -> expression . LBRACKET expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (154) expression -> expression . LBRACKET COLON expression RBRACKET
    (155) expression -> expression . LBRACKET expression COLON RBRACKET
    (57) comparador -> . EQ
    (58) comparador -> . NEQ
    (59) comparador -> . GT
    (60) comparador -> . LT
    (61) comparador -> . GE
    (62) comparador -> . LE
    (55) operadorLogico -> . AND
    (56) operadorLogico -> . OR
    (118) operator -> . PLUS
    (119) operator -> . MINUS
    (120) operator -> . TIMES
    (121) operator -> . DIVIDE
    (122) operator -> . MOD

    IDENTIFIER      reduce using rule 81 (return_values -> expression .)
    VAR             reduce using rule 81 (return_values -> expression .)
    TYPE            reduce using rule 81 (return_values -> expression .)
    FOR             reduce using rule 81 (return_values -> expression .)
    PACKAGE         reduce using rule 81 (return_values -> expression .)
    IMPORT          reduce using rule 81 (return_values -> expression .)
    SWITCH          reduce using rule 81 (return_values -> expression .)
    IF              reduce using rule 81 (return_values -> expression .)
    FUNC            reduce using rule 81 (return_values -> expression .)
    RETURN          reduce using rule 81 (return_values -> expression .)
    $end            reduce using rule 81 (return_values -> expression .)
    RBRACE          reduce using rule 81 (return_values -> expression .)
    CASE            reduce using rule 81 (return_values -> expression .)
    DEFAULT         reduce using rule 81 (return_values -> expression .)
    COMMA           shift and go to state 134
    DOT             shift and go to state 96
    LBRACKET        shift and go to state 97
    EQ              shift and go to state 98
    NEQ             shift and go to state 99
    GT              shift and go to state 100
    LT              shift and go to state 101
    GE              shift and go to state 102
    LE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110

    comparador                     shift and go to state 123
    operadorLogico                 shift and go to state 94
    operator                       shift and go to state 95

state 73

    (107) expression -> IDENTIFIER .
    (91) struct_literal -> IDENTIFIER . LBRACE struct_field_assignments RBRACE
    (43) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN

  ! shift/reduce conflict for DOT resolved as shift
    LBRACKET        reduce using rule 107 (expression -> IDENTIFIER .)
    EQ              reduce using rule 107 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 107 (expression -> IDENTIFIER .)
    GT              reduce using rule 107 (expression -> IDENTIFIER .)
    LT              reduce using rule 107 (expression -> IDENTIFIER .)
    GE              reduce using rule 107 (expression -> IDENTIFIER .)
    LE              reduce using rule 107 (expression -> IDENTIFIER .)
    AND             reduce using rule 107 (expression -> IDENTIFIER .)
    OR              reduce using rule 107 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 107 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 107 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 107 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 107 (expression -> IDENTIFIER .)
    MOD             reduce using rule 107 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 107 (expression -> IDENTIFIER .)
    VAR             reduce using rule 107 (expression -> IDENTIFIER .)
    TYPE            reduce using rule 107 (expression -> IDENTIFIER .)
    FOR             reduce using rule 107 (expression -> IDENTIFIER .)
    PACKAGE         reduce using rule 107 (expression -> IDENTIFIER .)
    IMPORT          reduce using rule 107 (expression -> IDENTIFIER .)
    SWITCH          reduce using rule 107 (expression -> IDENTIFIER .)
    IF              reduce using rule 107 (expression -> IDENTIFIER .)
    FUNC            reduce using rule 107 (expression -> IDENTIFIER .)
    RETURN          reduce using rule 107 (expression -> IDENTIFIER .)
    $end            reduce using rule 107 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 107 (expression -> IDENTIFIER .)
    CASE            reduce using rule 107 (expression -> IDENTIFIER .)
    DEFAULT         reduce using rule 107 (expression -> IDENTIFIER .)
    LBRACE          shift and go to state 135
    LPAREN          shift and go to state 36
    DOT             shift and go to state 115

  ! DOT             [ reduce using rule 107 (expression -> IDENTIFIER .) ]


state 74

    (36) assignment -> IDENTIFIER DECLARE_ASSIGN expression .
    (46) expression -> expression . comparador expression
    (47) expression -> expression . operadorLogico expression
    (116) expression -> expression . operator expression
    (117) expression -> expression . DOT IDENTIFIER
    (152) expression -> expression . LBRACKET expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (154) expression -> expression . LBRACKET COLON expression RBRACKET
    (155) expression -> expression . LBRACKET expression COLON RBRACKET
    (57) comparador -> . EQ
    (58) comparador -> . NEQ
    (59) comparador -> . GT
    (60) comparador -> . LT
    (61) comparador -> . GE
    (62) comparador -> . LE
    (55) operadorLogico -> . AND
    (56) operadorLogico -> . OR
    (118) operator -> . PLUS
    (119) operator -> . MINUS
    (120) operator -> . TIMES
    (121) operator -> . DIVIDE
    (122) operator -> . MOD

    IDENTIFIER      reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    VAR             reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    TYPE            reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    FOR             reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    PACKAGE         reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    IMPORT          reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    SWITCH          reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    IF              reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    FUNC            reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    RETURN          reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    $end            reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    RBRACE          reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    CASE            reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    DEFAULT         reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    DOT             shift and go to state 96
    LBRACKET        shift and go to state 97
    EQ              shift and go to state 98
    NEQ             shift and go to state 99
    GT              shift and go to state 100
    LT              shift and go to state 101
    GE              shift and go to state 102
    LE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110

    comparador                     shift and go to state 123
    operadorLogico                 shift and go to state 94
    operator                       shift and go to state 95

state 75

    (37) assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .

    IDENTIFIER      reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    VAR             reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    TYPE            reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    FOR             reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    PACKAGE         reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    IMPORT          reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    SWITCH          reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    IF              reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    FUNC            reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    RETURN          reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    $end            reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    RBRACE          reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    CASE            reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    DEFAULT         reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)


state 76

    (40) assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .
    (148) declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .
    (114) expression -> slice_literal .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for VAR resolved using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for TYPE resolved using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for FOR resolved using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IMPORT resolved using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for SWITCH resolved using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IF resolved using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for FUNC resolved using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for RETURN resolved using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for $end resolved using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for RBRACE resolved using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for CASE resolved using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for VAR resolved using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for TYPE resolved using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for FOR resolved using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IMPORT resolved using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for SWITCH resolved using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IF resolved using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for FUNC resolved using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for RETURN resolved using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for $end resolved using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for RBRACE resolved using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for CASE resolved using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    IDENTIFIER      reduce using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    VAR             reduce using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    TYPE            reduce using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    FOR             reduce using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    PACKAGE         reduce using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    IMPORT          reduce using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    SWITCH          reduce using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    IF              reduce using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    FUNC            reduce using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    RETURN          reduce using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    $end            reduce using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    RBRACE          reduce using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    CASE            reduce using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    DEFAULT         reduce using rule 40 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    DOT             reduce using rule 114 (expression -> slice_literal .)
    LBRACKET        reduce using rule 114 (expression -> slice_literal .)
    EQ              reduce using rule 114 (expression -> slice_literal .)
    NEQ             reduce using rule 114 (expression -> slice_literal .)
    GT              reduce using rule 114 (expression -> slice_literal .)
    LT              reduce using rule 114 (expression -> slice_literal .)
    GE              reduce using rule 114 (expression -> slice_literal .)
    LE              reduce using rule 114 (expression -> slice_literal .)
    AND             reduce using rule 114 (expression -> slice_literal .)
    OR              reduce using rule 114 (expression -> slice_literal .)
    PLUS            reduce using rule 114 (expression -> slice_literal .)
    MINUS           reduce using rule 114 (expression -> slice_literal .)
    TIMES           reduce using rule 114 (expression -> slice_literal .)
    DIVIDE          reduce using rule 114 (expression -> slice_literal .)
    MOD             reduce using rule 114 (expression -> slice_literal .)

  ! IDENTIFIER      [ reduce using rule 148 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! VAR             [ reduce using rule 148 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! TYPE            [ reduce using rule 148 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! FOR             [ reduce using rule 148 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! PACKAGE         [ reduce using rule 148 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! IMPORT          [ reduce using rule 148 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! SWITCH          [ reduce using rule 148 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! IF              [ reduce using rule 148 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! FUNC            [ reduce using rule 148 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! RETURN          [ reduce using rule 148 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! $end            [ reduce using rule 148 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! RBRACE          [ reduce using rule 148 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! CASE            [ reduce using rule 148 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! DEFAULT         [ reduce using rule 148 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! IDENTIFIER      [ reduce using rule 114 (expression -> slice_literal .) ]
  ! VAR             [ reduce using rule 114 (expression -> slice_literal .) ]
  ! TYPE            [ reduce using rule 114 (expression -> slice_literal .) ]
  ! FOR             [ reduce using rule 114 (expression -> slice_literal .) ]
  ! PACKAGE         [ reduce using rule 114 (expression -> slice_literal .) ]
  ! IMPORT          [ reduce using rule 114 (expression -> slice_literal .) ]
  ! SWITCH          [ reduce using rule 114 (expression -> slice_literal .) ]
  ! IF              [ reduce using rule 114 (expression -> slice_literal .) ]
  ! FUNC            [ reduce using rule 114 (expression -> slice_literal .) ]
  ! RETURN          [ reduce using rule 114 (expression -> slice_literal .) ]
  ! $end            [ reduce using rule 114 (expression -> slice_literal .) ]
  ! RBRACE          [ reduce using rule 114 (expression -> slice_literal .) ]
  ! CASE            [ reduce using rule 114 (expression -> slice_literal .) ]
  ! DEFAULT         [ reduce using rule 114 (expression -> slice_literal .) ]


state 77

    (69) map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .

    IDENTIFIER      reduce using rule 69 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    VAR             reduce using rule 69 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    TYPE            reduce using rule 69 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    FOR             reduce using rule 69 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    PACKAGE         reduce using rule 69 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    IMPORT          reduce using rule 69 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    SWITCH          reduce using rule 69 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    IF              reduce using rule 69 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    FUNC            reduce using rule 69 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    RETURN          reduce using rule 69 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    $end            reduce using rule 69 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    RBRACE          reduce using rule 69 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    CASE            reduce using rule 69 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    DEFAULT         reduce using rule 69 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)


state 78

    (71) mapLiteral -> MAP . LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE

    LBRACKET        shift and go to state 136


state 79

    (42) assignment -> IDENTIFIER ASSIGN expression .
    (46) expression -> expression . comparador expression
    (47) expression -> expression . operadorLogico expression
    (116) expression -> expression . operator expression
    (117) expression -> expression . DOT IDENTIFIER
    (152) expression -> expression . LBRACKET expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (154) expression -> expression . LBRACKET COLON expression RBRACKET
    (155) expression -> expression . LBRACKET expression COLON RBRACKET
    (57) comparador -> . EQ
    (58) comparador -> . NEQ
    (59) comparador -> . GT
    (60) comparador -> . LT
    (61) comparador -> . GE
    (62) comparador -> . LE
    (55) operadorLogico -> . AND
    (56) operadorLogico -> . OR
    (118) operator -> . PLUS
    (119) operator -> . MINUS
    (120) operator -> . TIMES
    (121) operator -> . DIVIDE
    (122) operator -> . MOD

    IDENTIFIER      reduce using rule 42 (assignment -> IDENTIFIER ASSIGN expression .)
    VAR             reduce using rule 42 (assignment -> IDENTIFIER ASSIGN expression .)
    TYPE            reduce using rule 42 (assignment -> IDENTIFIER ASSIGN expression .)
    FOR             reduce using rule 42 (assignment -> IDENTIFIER ASSIGN expression .)
    PACKAGE         reduce using rule 42 (assignment -> IDENTIFIER ASSIGN expression .)
    IMPORT          reduce using rule 42 (assignment -> IDENTIFIER ASSIGN expression .)
    SWITCH          reduce using rule 42 (assignment -> IDENTIFIER ASSIGN expression .)
    IF              reduce using rule 42 (assignment -> IDENTIFIER ASSIGN expression .)
    FUNC            reduce using rule 42 (assignment -> IDENTIFIER ASSIGN expression .)
    RETURN          reduce using rule 42 (assignment -> IDENTIFIER ASSIGN expression .)
    $end            reduce using rule 42 (assignment -> IDENTIFIER ASSIGN expression .)
    RBRACE          reduce using rule 42 (assignment -> IDENTIFIER ASSIGN expression .)
    CASE            reduce using rule 42 (assignment -> IDENTIFIER ASSIGN expression .)
    DEFAULT         reduce using rule 42 (assignment -> IDENTIFIER ASSIGN expression .)
    DOT             shift and go to state 96
    LBRACKET        shift and go to state 97
    EQ              shift and go to state 98
    NEQ             shift and go to state 99
    GT              shift and go to state 100
    LT              shift and go to state 101
    GE              shift and go to state 102
    LE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110

    comparador                     shift and go to state 123
    operadorLogico                 shift and go to state 94
    operator                       shift and go to state 95

state 80

    (34) input -> IDENTIFIER DOT IDENTIFIER . LPAREN AMPERSAND IDENTIFIER RPAREN
    (45) llamarFuncion -> IDENTIFIER DOT IDENTIFIER . LPAREN argument_list_opt RPAREN
    (89) print_statement -> IDENTIFIER DOT IDENTIFIER . LPAREN argument_list_opt RPAREN

    LPAREN          shift and go to state 137


state 81

    (43) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt . RPAREN
    (44) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt . COMMA expression RPAREN

    RPAREN          shift and go to state 138
    COMMA           shift and go to state 139


state 82

    (48) argument_list -> expression .
    (46) expression -> expression . comparador expression
    (47) expression -> expression . operadorLogico expression
    (116) expression -> expression . operator expression
    (117) expression -> expression . DOT IDENTIFIER
    (152) expression -> expression . LBRACKET expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (154) expression -> expression . LBRACKET COLON expression RBRACKET
    (155) expression -> expression . LBRACKET expression COLON RBRACKET
    (57) comparador -> . EQ
    (58) comparador -> . NEQ
    (59) comparador -> . GT
    (60) comparador -> . LT
    (61) comparador -> . GE
    (62) comparador -> . LE
    (55) operadorLogico -> . AND
    (56) operadorLogico -> . OR
    (118) operator -> . PLUS
    (119) operator -> . MINUS
    (120) operator -> . TIMES
    (121) operator -> . DIVIDE
    (122) operator -> . MOD

    COMMA           reduce using rule 48 (argument_list -> expression .)
    RPAREN          reduce using rule 48 (argument_list -> expression .)
    DOT             shift and go to state 96
    LBRACKET        shift and go to state 97
    EQ              shift and go to state 98
    NEQ             shift and go to state 99
    GT              shift and go to state 100
    LT              shift and go to state 101
    GE              shift and go to state 102
    LE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110

    comparador                     shift and go to state 123
    operadorLogico                 shift and go to state 94
    operator                       shift and go to state 95

state 83

    (50) argument_list_opt -> argument_list .
    (49) argument_list -> argument_list . COMMA expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 50 (argument_list_opt -> argument_list .)
    COMMA           shift and go to state 140

  ! COMMA           [ reduce using rule 50 (argument_list_opt -> argument_list .) ]


state 84

    (138) type_name -> IDENTIFIER .

    ASSIGN          reduce using rule 138 (type_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 138 (type_name -> IDENTIFIER .)
    VAR             reduce using rule 138 (type_name -> IDENTIFIER .)
    TYPE            reduce using rule 138 (type_name -> IDENTIFIER .)
    FOR             reduce using rule 138 (type_name -> IDENTIFIER .)
    PACKAGE         reduce using rule 138 (type_name -> IDENTIFIER .)
    IMPORT          reduce using rule 138 (type_name -> IDENTIFIER .)
    SWITCH          reduce using rule 138 (type_name -> IDENTIFIER .)
    IF              reduce using rule 138 (type_name -> IDENTIFIER .)
    FUNC            reduce using rule 138 (type_name -> IDENTIFIER .)
    RETURN          reduce using rule 138 (type_name -> IDENTIFIER .)
    $end            reduce using rule 138 (type_name -> IDENTIFIER .)
    RBRACE          reduce using rule 138 (type_name -> IDENTIFIER .)
    CASE            reduce using rule 138 (type_name -> IDENTIFIER .)
    DEFAULT         reduce using rule 138 (type_name -> IDENTIFIER .)
    LBRACE          reduce using rule 138 (type_name -> IDENTIFIER .)
    RPAREN          reduce using rule 138 (type_name -> IDENTIFIER .)
    COMMA           reduce using rule 138 (type_name -> IDENTIFIER .)
    RBRACKET        reduce using rule 138 (type_name -> IDENTIFIER .)


state 85

    (38) assignment -> VAR IDENTIFIER type_name . ASSIGN expression
    (39) assignment -> VAR IDENTIFIER type_name . ASSIGN llamarFuncion
    (41) assignment -> VAR IDENTIFIER type_name . ASSIGN slice_literal
    (35) var_declaration -> VAR IDENTIFIER type_name .

    ASSIGN          shift and go to state 141
    IDENTIFIER      reduce using rule 35 (var_declaration -> VAR IDENTIFIER type_name .)
    VAR             reduce using rule 35 (var_declaration -> VAR IDENTIFIER type_name .)
    TYPE            reduce using rule 35 (var_declaration -> VAR IDENTIFIER type_name .)
    FOR             reduce using rule 35 (var_declaration -> VAR IDENTIFIER type_name .)
    PACKAGE         reduce using rule 35 (var_declaration -> VAR IDENTIFIER type_name .)
    IMPORT          reduce using rule 35 (var_declaration -> VAR IDENTIFIER type_name .)
    SWITCH          reduce using rule 35 (var_declaration -> VAR IDENTIFIER type_name .)
    IF              reduce using rule 35 (var_declaration -> VAR IDENTIFIER type_name .)
    FUNC            reduce using rule 35 (var_declaration -> VAR IDENTIFIER type_name .)
    RETURN          reduce using rule 35 (var_declaration -> VAR IDENTIFIER type_name .)
    $end            reduce using rule 35 (var_declaration -> VAR IDENTIFIER type_name .)
    RBRACE          reduce using rule 35 (var_declaration -> VAR IDENTIFIER type_name .)
    CASE            reduce using rule 35 (var_declaration -> VAR IDENTIFIER type_name .)
    DEFAULT         reduce using rule 35 (var_declaration -> VAR IDENTIFIER type_name .)


state 86

    (70) map -> VAR IDENTIFIER ASSIGN . mapLiteral
    (71) mapLiteral -> . MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE

    MAP             shift and go to state 78

    mapLiteral                     shift and go to state 142

state 87

    (147) slice_declaration -> VAR IDENTIFIER LBRACKET . RBRACKET type_name
    (139) type_name -> LBRACKET . RBRACKET type_name

    RBRACKET        shift and go to state 143


state 88

    (137) type_name -> DATATYPE .

    ASSIGN          reduce using rule 137 (type_name -> DATATYPE .)
    IDENTIFIER      reduce using rule 137 (type_name -> DATATYPE .)
    VAR             reduce using rule 137 (type_name -> DATATYPE .)
    TYPE            reduce using rule 137 (type_name -> DATATYPE .)
    FOR             reduce using rule 137 (type_name -> DATATYPE .)
    PACKAGE         reduce using rule 137 (type_name -> DATATYPE .)
    IMPORT          reduce using rule 137 (type_name -> DATATYPE .)
    SWITCH          reduce using rule 137 (type_name -> DATATYPE .)
    IF              reduce using rule 137 (type_name -> DATATYPE .)
    FUNC            reduce using rule 137 (type_name -> DATATYPE .)
    RETURN          reduce using rule 137 (type_name -> DATATYPE .)
    $end            reduce using rule 137 (type_name -> DATATYPE .)
    RBRACE          reduce using rule 137 (type_name -> DATATYPE .)
    CASE            reduce using rule 137 (type_name -> DATATYPE .)
    DEFAULT         reduce using rule 137 (type_name -> DATATYPE .)
    LBRACE          reduce using rule 137 (type_name -> DATATYPE .)
    RPAREN          reduce using rule 137 (type_name -> DATATYPE .)
    COMMA           reduce using rule 137 (type_name -> DATATYPE .)
    RBRACKET        reduce using rule 137 (type_name -> DATATYPE .)


state 89

    (140) type_name -> FUNC . LPAREN parameters RPAREN return_type

    LPAREN          shift and go to state 144


state 90

    (90) struct_definition -> TYPE IDENTIFIER STRUCT . LBRACE struct_fields RBRACE

    LBRACE          shift and go to state 145


state 91

    (99) for_statement -> FOR shortAssignment SEMICOLON . condicion SEMICOLON expression block
    (52) condicion -> . expression comparador expression
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    condicion                      shift and go to state 146
    expression                     shift and go to state 41
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 92

    (101) for_statement -> FOR condicion block .

    IDENTIFIER      reduce using rule 101 (for_statement -> FOR condicion block .)
    VAR             reduce using rule 101 (for_statement -> FOR condicion block .)
    TYPE            reduce using rule 101 (for_statement -> FOR condicion block .)
    FOR             reduce using rule 101 (for_statement -> FOR condicion block .)
    PACKAGE         reduce using rule 101 (for_statement -> FOR condicion block .)
    IMPORT          reduce using rule 101 (for_statement -> FOR condicion block .)
    SWITCH          reduce using rule 101 (for_statement -> FOR condicion block .)
    IF              reduce using rule 101 (for_statement -> FOR condicion block .)
    FUNC            reduce using rule 101 (for_statement -> FOR condicion block .)
    RETURN          reduce using rule 101 (for_statement -> FOR condicion block .)
    $end            reduce using rule 101 (for_statement -> FOR condicion block .)
    RBRACE          reduce using rule 101 (for_statement -> FOR condicion block .)
    CASE            reduce using rule 101 (for_statement -> FOR condicion block .)
    DEFAULT         reduce using rule 101 (for_statement -> FOR condicion block .)


state 93

    (52) condicion -> expression comparador . expression
    (46) expression -> expression comparador . expression
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    expression                     shift and go to state 147
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 94

    (47) expression -> expression operadorLogico . expression
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    expression                     shift and go to state 148
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 95

    (116) expression -> expression operator . expression
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    expression                     shift and go to state 149
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 96

    (117) expression -> expression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 150


state 97

    (152) expression -> expression LBRACKET . expression RBRACKET
    (153) expression -> expression LBRACKET . expression COLON expression RBRACKET
    (154) expression -> expression LBRACKET . COLON expression RBRACKET
    (155) expression -> expression LBRACKET . expression COLON RBRACKET
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    COLON           shift and go to state 152
    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    expression                     shift and go to state 151
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 98

    (57) comparador -> EQ .

    NUMBER          reduce using rule 57 (comparador -> EQ .)
    IDENTIFIER      reduce using rule 57 (comparador -> EQ .)
    RUNE            reduce using rule 57 (comparador -> EQ .)
    STRING          reduce using rule 57 (comparador -> EQ .)
    RAW_STRING      reduce using rule 57 (comparador -> EQ .)
    TRUE            reduce using rule 57 (comparador -> EQ .)
    FALSE           reduce using rule 57 (comparador -> EQ .)
    NIL             reduce using rule 57 (comparador -> EQ .)
    MINUS           reduce using rule 57 (comparador -> EQ .)
    LPAREN          reduce using rule 57 (comparador -> EQ .)
    LBRACKET        reduce using rule 57 (comparador -> EQ .)
    FUNC            reduce using rule 57 (comparador -> EQ .)


state 99

    (58) comparador -> NEQ .

    NUMBER          reduce using rule 58 (comparador -> NEQ .)
    IDENTIFIER      reduce using rule 58 (comparador -> NEQ .)
    RUNE            reduce using rule 58 (comparador -> NEQ .)
    STRING          reduce using rule 58 (comparador -> NEQ .)
    RAW_STRING      reduce using rule 58 (comparador -> NEQ .)
    TRUE            reduce using rule 58 (comparador -> NEQ .)
    FALSE           reduce using rule 58 (comparador -> NEQ .)
    NIL             reduce using rule 58 (comparador -> NEQ .)
    MINUS           reduce using rule 58 (comparador -> NEQ .)
    LPAREN          reduce using rule 58 (comparador -> NEQ .)
    LBRACKET        reduce using rule 58 (comparador -> NEQ .)
    FUNC            reduce using rule 58 (comparador -> NEQ .)


state 100

    (59) comparador -> GT .

    NUMBER          reduce using rule 59 (comparador -> GT .)
    IDENTIFIER      reduce using rule 59 (comparador -> GT .)
    RUNE            reduce using rule 59 (comparador -> GT .)
    STRING          reduce using rule 59 (comparador -> GT .)
    RAW_STRING      reduce using rule 59 (comparador -> GT .)
    TRUE            reduce using rule 59 (comparador -> GT .)
    FALSE           reduce using rule 59 (comparador -> GT .)
    NIL             reduce using rule 59 (comparador -> GT .)
    MINUS           reduce using rule 59 (comparador -> GT .)
    LPAREN          reduce using rule 59 (comparador -> GT .)
    LBRACKET        reduce using rule 59 (comparador -> GT .)
    FUNC            reduce using rule 59 (comparador -> GT .)


state 101

    (60) comparador -> LT .

    NUMBER          reduce using rule 60 (comparador -> LT .)
    IDENTIFIER      reduce using rule 60 (comparador -> LT .)
    RUNE            reduce using rule 60 (comparador -> LT .)
    STRING          reduce using rule 60 (comparador -> LT .)
    RAW_STRING      reduce using rule 60 (comparador -> LT .)
    TRUE            reduce using rule 60 (comparador -> LT .)
    FALSE           reduce using rule 60 (comparador -> LT .)
    NIL             reduce using rule 60 (comparador -> LT .)
    MINUS           reduce using rule 60 (comparador -> LT .)
    LPAREN          reduce using rule 60 (comparador -> LT .)
    LBRACKET        reduce using rule 60 (comparador -> LT .)
    FUNC            reduce using rule 60 (comparador -> LT .)


state 102

    (61) comparador -> GE .

    NUMBER          reduce using rule 61 (comparador -> GE .)
    IDENTIFIER      reduce using rule 61 (comparador -> GE .)
    RUNE            reduce using rule 61 (comparador -> GE .)
    STRING          reduce using rule 61 (comparador -> GE .)
    RAW_STRING      reduce using rule 61 (comparador -> GE .)
    TRUE            reduce using rule 61 (comparador -> GE .)
    FALSE           reduce using rule 61 (comparador -> GE .)
    NIL             reduce using rule 61 (comparador -> GE .)
    MINUS           reduce using rule 61 (comparador -> GE .)
    LPAREN          reduce using rule 61 (comparador -> GE .)
    LBRACKET        reduce using rule 61 (comparador -> GE .)
    FUNC            reduce using rule 61 (comparador -> GE .)


state 103

    (62) comparador -> LE .

    NUMBER          reduce using rule 62 (comparador -> LE .)
    IDENTIFIER      reduce using rule 62 (comparador -> LE .)
    RUNE            reduce using rule 62 (comparador -> LE .)
    STRING          reduce using rule 62 (comparador -> LE .)
    RAW_STRING      reduce using rule 62 (comparador -> LE .)
    TRUE            reduce using rule 62 (comparador -> LE .)
    FALSE           reduce using rule 62 (comparador -> LE .)
    NIL             reduce using rule 62 (comparador -> LE .)
    MINUS           reduce using rule 62 (comparador -> LE .)
    LPAREN          reduce using rule 62 (comparador -> LE .)
    LBRACKET        reduce using rule 62 (comparador -> LE .)
    FUNC            reduce using rule 62 (comparador -> LE .)


state 104

    (55) operadorLogico -> AND .

    NUMBER          reduce using rule 55 (operadorLogico -> AND .)
    IDENTIFIER      reduce using rule 55 (operadorLogico -> AND .)
    RUNE            reduce using rule 55 (operadorLogico -> AND .)
    STRING          reduce using rule 55 (operadorLogico -> AND .)
    RAW_STRING      reduce using rule 55 (operadorLogico -> AND .)
    TRUE            reduce using rule 55 (operadorLogico -> AND .)
    FALSE           reduce using rule 55 (operadorLogico -> AND .)
    NIL             reduce using rule 55 (operadorLogico -> AND .)
    MINUS           reduce using rule 55 (operadorLogico -> AND .)
    LPAREN          reduce using rule 55 (operadorLogico -> AND .)
    LBRACKET        reduce using rule 55 (operadorLogico -> AND .)
    FUNC            reduce using rule 55 (operadorLogico -> AND .)


state 105

    (56) operadorLogico -> OR .

    NUMBER          reduce using rule 56 (operadorLogico -> OR .)
    IDENTIFIER      reduce using rule 56 (operadorLogico -> OR .)
    RUNE            reduce using rule 56 (operadorLogico -> OR .)
    STRING          reduce using rule 56 (operadorLogico -> OR .)
    RAW_STRING      reduce using rule 56 (operadorLogico -> OR .)
    TRUE            reduce using rule 56 (operadorLogico -> OR .)
    FALSE           reduce using rule 56 (operadorLogico -> OR .)
    NIL             reduce using rule 56 (operadorLogico -> OR .)
    MINUS           reduce using rule 56 (operadorLogico -> OR .)
    LPAREN          reduce using rule 56 (operadorLogico -> OR .)
    LBRACKET        reduce using rule 56 (operadorLogico -> OR .)
    FUNC            reduce using rule 56 (operadorLogico -> OR .)


state 106

    (118) operator -> PLUS .

    NUMBER          reduce using rule 118 (operator -> PLUS .)
    IDENTIFIER      reduce using rule 118 (operator -> PLUS .)
    RUNE            reduce using rule 118 (operator -> PLUS .)
    STRING          reduce using rule 118 (operator -> PLUS .)
    RAW_STRING      reduce using rule 118 (operator -> PLUS .)
    TRUE            reduce using rule 118 (operator -> PLUS .)
    FALSE           reduce using rule 118 (operator -> PLUS .)
    NIL             reduce using rule 118 (operator -> PLUS .)
    MINUS           reduce using rule 118 (operator -> PLUS .)
    LPAREN          reduce using rule 118 (operator -> PLUS .)
    LBRACKET        reduce using rule 118 (operator -> PLUS .)
    FUNC            reduce using rule 118 (operator -> PLUS .)


state 107

    (119) operator -> MINUS .

    NUMBER          reduce using rule 119 (operator -> MINUS .)
    IDENTIFIER      reduce using rule 119 (operator -> MINUS .)
    RUNE            reduce using rule 119 (operator -> MINUS .)
    STRING          reduce using rule 119 (operator -> MINUS .)
    RAW_STRING      reduce using rule 119 (operator -> MINUS .)
    TRUE            reduce using rule 119 (operator -> MINUS .)
    FALSE           reduce using rule 119 (operator -> MINUS .)
    NIL             reduce using rule 119 (operator -> MINUS .)
    MINUS           reduce using rule 119 (operator -> MINUS .)
    LPAREN          reduce using rule 119 (operator -> MINUS .)
    LBRACKET        reduce using rule 119 (operator -> MINUS .)
    FUNC            reduce using rule 119 (operator -> MINUS .)


state 108

    (120) operator -> TIMES .

    NUMBER          reduce using rule 120 (operator -> TIMES .)
    IDENTIFIER      reduce using rule 120 (operator -> TIMES .)
    RUNE            reduce using rule 120 (operator -> TIMES .)
    STRING          reduce using rule 120 (operator -> TIMES .)
    RAW_STRING      reduce using rule 120 (operator -> TIMES .)
    TRUE            reduce using rule 120 (operator -> TIMES .)
    FALSE           reduce using rule 120 (operator -> TIMES .)
    NIL             reduce using rule 120 (operator -> TIMES .)
    MINUS           reduce using rule 120 (operator -> TIMES .)
    LPAREN          reduce using rule 120 (operator -> TIMES .)
    LBRACKET        reduce using rule 120 (operator -> TIMES .)
    FUNC            reduce using rule 120 (operator -> TIMES .)


state 109

    (121) operator -> DIVIDE .

    NUMBER          reduce using rule 121 (operator -> DIVIDE .)
    IDENTIFIER      reduce using rule 121 (operator -> DIVIDE .)
    RUNE            reduce using rule 121 (operator -> DIVIDE .)
    STRING          reduce using rule 121 (operator -> DIVIDE .)
    RAW_STRING      reduce using rule 121 (operator -> DIVIDE .)
    TRUE            reduce using rule 121 (operator -> DIVIDE .)
    FALSE           reduce using rule 121 (operator -> DIVIDE .)
    NIL             reduce using rule 121 (operator -> DIVIDE .)
    MINUS           reduce using rule 121 (operator -> DIVIDE .)
    LPAREN          reduce using rule 121 (operator -> DIVIDE .)
    LBRACKET        reduce using rule 121 (operator -> DIVIDE .)
    FUNC            reduce using rule 121 (operator -> DIVIDE .)


state 110

    (122) operator -> MOD .

    NUMBER          reduce using rule 122 (operator -> MOD .)
    IDENTIFIER      reduce using rule 122 (operator -> MOD .)
    RUNE            reduce using rule 122 (operator -> MOD .)
    STRING          reduce using rule 122 (operator -> MOD .)
    RAW_STRING      reduce using rule 122 (operator -> MOD .)
    TRUE            reduce using rule 122 (operator -> MOD .)
    FALSE           reduce using rule 122 (operator -> MOD .)
    NIL             reduce using rule 122 (operator -> MOD .)
    MINUS           reduce using rule 122 (operator -> MOD .)
    LPAREN          reduce using rule 122 (operator -> MOD .)
    LBRACKET        reduce using rule 122 (operator -> MOD .)
    FUNC            reduce using rule 122 (operator -> MOD .)


state 111

    (100) shortAssignment -> identifier_list DECLARE_ASSIGN . expression
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    expression                     shift and go to state 153
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 112

    (104) block -> LBRACE statement_list . RBRACE
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (23) statement -> . return_statement
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (37) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (39) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (40) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (41) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (42) assignment -> . IDENTIFIER ASSIGN expression
    (34) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (90) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (99) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (101) for_statement -> . FOR condicion block
    (102) for_statement -> . FOR block
    (24) package -> . PACKAGE MAIN
    (25) package -> . PACKAGE IDENTIFIER
    (26) import -> . IMPORT STRING
    (27) import -> . IMPORT LPAREN import_list RPAREN
    (64) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (69) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (70) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (125) if_statement -> . IF condicion block
    (126) if_statement -> . IF condicion block ELSE block
    (127) if_statement -> . IF condicion_compleja block
    (128) if_statement -> . IF condicion_compleja block ELSE block
    (77) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (78) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (79) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (98) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (35) var_declaration -> . VAR IDENTIFIER type_name
    (147) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (148) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (80) return_statement -> . RETURN return_values

    RBRACE          shift and go to state 154
    IDENTIFIER      shift and go to state 22
    VAR             shift and go to state 23
    TYPE            shift and go to state 24
    FOR             shift and go to state 25
    PACKAGE         shift and go to state 26
    IMPORT          shift and go to state 27
    SWITCH          shift and go to state 28
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    RETURN          shift and go to state 31

    statement                      shift and go to state 32
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20
    return_statement               shift and go to state 21

state 113

    (105) block -> LBRACE RBRACE .

    IDENTIFIER      reduce using rule 105 (block -> LBRACE RBRACE .)
    VAR             reduce using rule 105 (block -> LBRACE RBRACE .)
    TYPE            reduce using rule 105 (block -> LBRACE RBRACE .)
    FOR             reduce using rule 105 (block -> LBRACE RBRACE .)
    PACKAGE         reduce using rule 105 (block -> LBRACE RBRACE .)
    IMPORT          reduce using rule 105 (block -> LBRACE RBRACE .)
    SWITCH          reduce using rule 105 (block -> LBRACE RBRACE .)
    IF              reduce using rule 105 (block -> LBRACE RBRACE .)
    FUNC            reduce using rule 105 (block -> LBRACE RBRACE .)
    RETURN          reduce using rule 105 (block -> LBRACE RBRACE .)
    $end            reduce using rule 105 (block -> LBRACE RBRACE .)
    RBRACE          reduce using rule 105 (block -> LBRACE RBRACE .)
    CASE            reduce using rule 105 (block -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 105 (block -> LBRACE RBRACE .)
    ELSE            reduce using rule 105 (block -> LBRACE RBRACE .)
    DOT             reduce using rule 105 (block -> LBRACE RBRACE .)
    LBRACKET        reduce using rule 105 (block -> LBRACE RBRACE .)
    EQ              reduce using rule 105 (block -> LBRACE RBRACE .)
    NEQ             reduce using rule 105 (block -> LBRACE RBRACE .)
    GT              reduce using rule 105 (block -> LBRACE RBRACE .)
    LT              reduce using rule 105 (block -> LBRACE RBRACE .)
    GE              reduce using rule 105 (block -> LBRACE RBRACE .)
    LE              reduce using rule 105 (block -> LBRACE RBRACE .)
    AND             reduce using rule 105 (block -> LBRACE RBRACE .)
    OR              reduce using rule 105 (block -> LBRACE RBRACE .)
    PLUS            reduce using rule 105 (block -> LBRACE RBRACE .)
    MINUS           reduce using rule 105 (block -> LBRACE RBRACE .)
    TIMES           reduce using rule 105 (block -> LBRACE RBRACE .)
    DIVIDE          reduce using rule 105 (block -> LBRACE RBRACE .)
    MOD             reduce using rule 105 (block -> LBRACE RBRACE .)
    LBRACE          reduce using rule 105 (block -> LBRACE RBRACE .)
    COMMA           reduce using rule 105 (block -> LBRACE RBRACE .)
    RPAREN          reduce using rule 105 (block -> LBRACE RBRACE .)
    SEMICOLON       reduce using rule 105 (block -> LBRACE RBRACE .)
    RBRACKET        reduce using rule 105 (block -> LBRACE RBRACE .)
    COLON           reduce using rule 105 (block -> LBRACE RBRACE .)


state 114

    (136) identifier_list -> IDENTIFIER COMMA . identifier_list
    (135) identifier_list -> . IDENTIFIER
    (136) identifier_list -> . IDENTIFIER COMMA identifier_list

    IDENTIFIER      shift and go to state 155

    identifier_list                shift and go to state 156

state 115

    (45) llamarFuncion -> IDENTIFIER DOT . IDENTIFIER LPAREN argument_list_opt RPAREN

    IDENTIFIER      shift and go to state 157


state 116

    (123) expression -> MINUS expression .
    (46) expression -> expression . comparador expression
    (47) expression -> expression . operadorLogico expression
    (116) expression -> expression . operator expression
    (117) expression -> expression . DOT IDENTIFIER
    (152) expression -> expression . LBRACKET expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (154) expression -> expression . LBRACKET COLON expression RBRACKET
    (155) expression -> expression . LBRACKET expression COLON RBRACKET
    (57) comparador -> . EQ
    (58) comparador -> . NEQ
    (59) comparador -> . GT
    (60) comparador -> . LT
    (61) comparador -> . GE
    (62) comparador -> . LE
    (55) operadorLogico -> . AND
    (56) operadorLogico -> . OR
    (118) operator -> . PLUS
    (119) operator -> . MINUS
    (120) operator -> . TIMES
    (121) operator -> . DIVIDE
    (122) operator -> . MOD

    DOT             reduce using rule 123 (expression -> MINUS expression .)
    LBRACKET        reduce using rule 123 (expression -> MINUS expression .)
    EQ              reduce using rule 123 (expression -> MINUS expression .)
    NEQ             reduce using rule 123 (expression -> MINUS expression .)
    GT              reduce using rule 123 (expression -> MINUS expression .)
    LT              reduce using rule 123 (expression -> MINUS expression .)
    GE              reduce using rule 123 (expression -> MINUS expression .)
    LE              reduce using rule 123 (expression -> MINUS expression .)
    AND             reduce using rule 123 (expression -> MINUS expression .)
    OR              reduce using rule 123 (expression -> MINUS expression .)
    PLUS            reduce using rule 123 (expression -> MINUS expression .)
    MINUS           reduce using rule 123 (expression -> MINUS expression .)
    TIMES           reduce using rule 123 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 123 (expression -> MINUS expression .)
    MOD             reduce using rule 123 (expression -> MINUS expression .)
    LBRACE          reduce using rule 123 (expression -> MINUS expression .)
    COMMA           reduce using rule 123 (expression -> MINUS expression .)
    IDENTIFIER      reduce using rule 123 (expression -> MINUS expression .)
    VAR             reduce using rule 123 (expression -> MINUS expression .)
    TYPE            reduce using rule 123 (expression -> MINUS expression .)
    FOR             reduce using rule 123 (expression -> MINUS expression .)
    PACKAGE         reduce using rule 123 (expression -> MINUS expression .)
    IMPORT          reduce using rule 123 (expression -> MINUS expression .)
    SWITCH          reduce using rule 123 (expression -> MINUS expression .)
    IF              reduce using rule 123 (expression -> MINUS expression .)
    FUNC            reduce using rule 123 (expression -> MINUS expression .)
    RETURN          reduce using rule 123 (expression -> MINUS expression .)
    $end            reduce using rule 123 (expression -> MINUS expression .)
    RBRACE          reduce using rule 123 (expression -> MINUS expression .)
    CASE            reduce using rule 123 (expression -> MINUS expression .)
    DEFAULT         reduce using rule 123 (expression -> MINUS expression .)
    RPAREN          reduce using rule 123 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 123 (expression -> MINUS expression .)
    RBRACKET        reduce using rule 123 (expression -> MINUS expression .)
    COLON           reduce using rule 123 (expression -> MINUS expression .)

  ! DOT             [ shift and go to state 96 ]
  ! LBRACKET        [ shift and go to state 97 ]
  ! EQ              [ shift and go to state 98 ]
  ! NEQ             [ shift and go to state 99 ]
  ! GT              [ shift and go to state 100 ]
  ! LT              [ shift and go to state 101 ]
  ! GE              [ shift and go to state 102 ]
  ! LE              [ shift and go to state 103 ]
  ! AND             [ shift and go to state 104 ]
  ! OR              [ shift and go to state 105 ]
  ! PLUS            [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 107 ]
  ! TIMES           [ shift and go to state 108 ]
  ! DIVIDE          [ shift and go to state 109 ]
  ! MOD             [ shift and go to state 110 ]

    comparador                     shift and go to state 123
    operadorLogico                 shift and go to state 94
    operator                       shift and go to state 95

state 117

    (124) expression -> LPAREN expression . RPAREN
    (46) expression -> expression . comparador expression
    (47) expression -> expression . operadorLogico expression
    (116) expression -> expression . operator expression
    (117) expression -> expression . DOT IDENTIFIER
    (152) expression -> expression . LBRACKET expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (154) expression -> expression . LBRACKET COLON expression RBRACKET
    (155) expression -> expression . LBRACKET expression COLON RBRACKET
    (57) comparador -> . EQ
    (58) comparador -> . NEQ
    (59) comparador -> . GT
    (60) comparador -> . LT
    (61) comparador -> . GE
    (62) comparador -> . LE
    (55) operadorLogico -> . AND
    (56) operadorLogico -> . OR
    (118) operator -> . PLUS
    (119) operator -> . MINUS
    (120) operator -> . TIMES
    (121) operator -> . DIVIDE
    (122) operator -> . MOD

    RPAREN          shift and go to state 158
    DOT             shift and go to state 96
    LBRACKET        shift and go to state 97
    EQ              shift and go to state 98
    NEQ             shift and go to state 99
    GT              shift and go to state 100
    LT              shift and go to state 101
    GE              shift and go to state 102
    LE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110

    comparador                     shift and go to state 123
    operadorLogico                 shift and go to state 94
    operator                       shift and go to state 95

state 118

    (149) slice_literal -> LBRACKET RBRACKET . type_name LBRACE elements RBRACE
    (137) type_name -> . DATATYPE
    (138) type_name -> . IDENTIFIER
    (139) type_name -> . LBRACKET RBRACKET type_name
    (140) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 88
    IDENTIFIER      shift and go to state 84
    LBRACKET        shift and go to state 159
    FUNC            shift and go to state 89

    type_name                      shift and go to state 160

state 119

    (129) function_literal -> FUNC LPAREN . parameters RPAREN return_type block
    (130) parameters -> . parameters COMMA parameter
    (131) parameters -> . parameter
    (132) parameters -> . empty
    (133) parameter -> . IDENTIFIER type_name
    (134) parameter -> . identifier_list type_name
    (63) empty -> .
    (135) identifier_list -> . IDENTIFIER
    (136) identifier_list -> . IDENTIFIER COMMA identifier_list

    IDENTIFIER      shift and go to state 161
    RPAREN          reduce using rule 63 (empty -> .)
    COMMA           reduce using rule 63 (empty -> .)

    parameters                     shift and go to state 129
    parameter                      shift and go to state 130
    empty                          shift and go to state 131
    identifier_list                shift and go to state 132

state 120

    (27) import -> IMPORT LPAREN import_list . RPAREN
    (29) import_list -> import_list . STRING

    RPAREN          shift and go to state 162
    STRING          shift and go to state 163


state 121

    (28) import_list -> STRING .

    RPAREN          reduce using rule 28 (import_list -> STRING .)
    STRING          reduce using rule 28 (import_list -> STRING .)


state 122

    (64) switch -> SWITCH expression LBRACE . caseBlocks RBRACE
    (65) caseBlocks -> . caseBlock
    (66) caseBlocks -> . caseBlock caseBlocks
    (67) caseBlock -> . CASE expression COLON statement_list
    (68) caseBlock -> . DEFAULT COLON statement_list

    CASE            shift and go to state 166
    DEFAULT         shift and go to state 167

    caseBlocks                     shift and go to state 164
    caseBlock                      shift and go to state 165

state 123

    (46) expression -> expression comparador . expression
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    expression                     shift and go to state 168
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 124

    (125) if_statement -> IF condicion block .
    (126) if_statement -> IF condicion block . ELSE block

    IDENTIFIER      reduce using rule 125 (if_statement -> IF condicion block .)
    VAR             reduce using rule 125 (if_statement -> IF condicion block .)
    TYPE            reduce using rule 125 (if_statement -> IF condicion block .)
    FOR             reduce using rule 125 (if_statement -> IF condicion block .)
    PACKAGE         reduce using rule 125 (if_statement -> IF condicion block .)
    IMPORT          reduce using rule 125 (if_statement -> IF condicion block .)
    SWITCH          reduce using rule 125 (if_statement -> IF condicion block .)
    IF              reduce using rule 125 (if_statement -> IF condicion block .)
    FUNC            reduce using rule 125 (if_statement -> IF condicion block .)
    RETURN          reduce using rule 125 (if_statement -> IF condicion block .)
    $end            reduce using rule 125 (if_statement -> IF condicion block .)
    RBRACE          reduce using rule 125 (if_statement -> IF condicion block .)
    CASE            reduce using rule 125 (if_statement -> IF condicion block .)
    DEFAULT         reduce using rule 125 (if_statement -> IF condicion block .)
    ELSE            shift and go to state 169


state 125

    (53) condicion_compleja -> condicion operadorLogico . condicion
    (54) condicion_compleja -> condicion operadorLogico . condicion_compleja
    (52) condicion -> . expression comparador expression
    (53) condicion_compleja -> . condicion operadorLogico condicion
    (54) condicion_compleja -> . condicion operadorLogico condicion_compleja
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    condicion                      shift and go to state 170
    condicion_compleja             shift and go to state 171
    expression                     shift and go to state 41
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 126

    (127) if_statement -> IF condicion_compleja block .
    (128) if_statement -> IF condicion_compleja block . ELSE block

    IDENTIFIER      reduce using rule 127 (if_statement -> IF condicion_compleja block .)
    VAR             reduce using rule 127 (if_statement -> IF condicion_compleja block .)
    TYPE            reduce using rule 127 (if_statement -> IF condicion_compleja block .)
    FOR             reduce using rule 127 (if_statement -> IF condicion_compleja block .)
    PACKAGE         reduce using rule 127 (if_statement -> IF condicion_compleja block .)
    IMPORT          reduce using rule 127 (if_statement -> IF condicion_compleja block .)
    SWITCH          reduce using rule 127 (if_statement -> IF condicion_compleja block .)
    IF              reduce using rule 127 (if_statement -> IF condicion_compleja block .)
    FUNC            reduce using rule 127 (if_statement -> IF condicion_compleja block .)
    RETURN          reduce using rule 127 (if_statement -> IF condicion_compleja block .)
    $end            reduce using rule 127 (if_statement -> IF condicion_compleja block .)
    RBRACE          reduce using rule 127 (if_statement -> IF condicion_compleja block .)
    CASE            reduce using rule 127 (if_statement -> IF condicion_compleja block .)
    DEFAULT         reduce using rule 127 (if_statement -> IF condicion_compleja block .)
    ELSE            shift and go to state 172


state 127

    (77) function -> FUNC IDENTIFIER LPAREN . params_opt RPAREN block
    (78) function -> FUNC IDENTIFIER LPAREN . params_opt RPAREN return_type LBRACE statement_list RBRACE
    (83) params_opt -> . params
    (84) params_opt -> .
    (85) params -> . param
    (86) params -> . param COMMA params
    (87) param -> . IDENTIFIER type_name
    (88) param -> . identifier_list type_name
    (135) identifier_list -> . IDENTIFIER
    (136) identifier_list -> . IDENTIFIER COMMA identifier_list

    RPAREN          reduce using rule 84 (params_opt -> .)
    IDENTIFIER      shift and go to state 173

    params_opt                     shift and go to state 174
    params                         shift and go to state 175
    param                          shift and go to state 176
    identifier_list                shift and go to state 177

state 128

    (98) method_definition -> FUNC LPAREN IDENTIFIER . IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (133) parameter -> IDENTIFIER . type_name
    (135) identifier_list -> IDENTIFIER .
    (136) identifier_list -> IDENTIFIER . COMMA identifier_list
    (137) type_name -> . DATATYPE
    (138) type_name -> . IDENTIFIER
    (139) type_name -> . LBRACKET RBRACKET type_name
    (140) type_name -> . FUNC LPAREN parameters RPAREN return_type

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for DATATYPE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
    IDENTIFIER      shift and go to state 178
    COMMA           shift and go to state 114
    DATATYPE        shift and go to state 88
    LBRACKET        shift and go to state 159
    FUNC            shift and go to state 89

  ! DATATYPE        [ reduce using rule 135 (identifier_list -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 135 (identifier_list -> IDENTIFIER .) ]
  ! LBRACKET        [ reduce using rule 135 (identifier_list -> IDENTIFIER .) ]
  ! FUNC            [ reduce using rule 135 (identifier_list -> IDENTIFIER .) ]

    type_name                      shift and go to state 179

state 129

    (129) function_literal -> FUNC LPAREN parameters . RPAREN return_type block
    (130) parameters -> parameters . COMMA parameter

    RPAREN          shift and go to state 180
    COMMA           shift and go to state 181


state 130

    (131) parameters -> parameter .

    RPAREN          reduce using rule 131 (parameters -> parameter .)
    COMMA           reduce using rule 131 (parameters -> parameter .)


state 131

    (132) parameters -> empty .

    RPAREN          reduce using rule 132 (parameters -> empty .)
    COMMA           reduce using rule 132 (parameters -> empty .)


state 132

    (134) parameter -> identifier_list . type_name
    (137) type_name -> . DATATYPE
    (138) type_name -> . IDENTIFIER
    (139) type_name -> . LBRACKET RBRACKET type_name
    (140) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 88
    IDENTIFIER      shift and go to state 84
    LBRACKET        shift and go to state 159
    FUNC            shift and go to state 89

    type_name                      shift and go to state 182

state 133

    (79) function -> FUNC MAIN LPAREN . params_opt RPAREN block
    (83) params_opt -> . params
    (84) params_opt -> .
    (85) params -> . param
    (86) params -> . param COMMA params
    (87) param -> . IDENTIFIER type_name
    (88) param -> . identifier_list type_name
    (135) identifier_list -> . IDENTIFIER
    (136) identifier_list -> . IDENTIFIER COMMA identifier_list

    RPAREN          reduce using rule 84 (params_opt -> .)
    IDENTIFIER      shift and go to state 173

    params_opt                     shift and go to state 183
    params                         shift and go to state 175
    param                          shift and go to state 176
    identifier_list                shift and go to state 177

state 134

    (82) return_values -> expression COMMA . return_values
    (81) return_values -> . expression
    (82) return_values -> . expression COMMA return_values
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    expression                     shift and go to state 72
    return_values                  shift and go to state 184
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 135

    (91) struct_literal -> IDENTIFIER LBRACE . struct_field_assignments RBRACE
    (92) struct_field_assignments -> . struct_field_assignment
    (93) struct_field_assignments -> . struct_field_assignments COMMA struct_field_assignment
    (94) struct_field_assignment -> . IDENTIFIER COLON expression

    IDENTIFIER      shift and go to state 185

    struct_field_assignments       shift and go to state 186
    struct_field_assignment        shift and go to state 187

state 136

    (71) mapLiteral -> MAP LBRACKET . type_name RBRACKET type_name LBRACE mapEntries RBRACE
    (137) type_name -> . DATATYPE
    (138) type_name -> . IDENTIFIER
    (139) type_name -> . LBRACKET RBRACKET type_name
    (140) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 88
    IDENTIFIER      shift and go to state 84
    LBRACKET        shift and go to state 159
    FUNC            shift and go to state 89

    type_name                      shift and go to state 188

state 137

    (34) input -> IDENTIFIER DOT IDENTIFIER LPAREN . AMPERSAND IDENTIFIER RPAREN
    (45) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN . argument_list_opt RPAREN
    (89) print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN . argument_list_opt RPAREN
    (50) argument_list_opt -> . argument_list
    (51) argument_list_opt -> .
    (48) argument_list -> . expression
    (49) argument_list -> . argument_list COMMA expression
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    AMPERSAND       shift and go to state 189
    RPAREN          reduce using rule 51 (argument_list_opt -> .)
    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    argument_list_opt              shift and go to state 190
    argument_list                  shift and go to state 83
    expression                     shift and go to state 82
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 138

    (43) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .

    IDENTIFIER      reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    VAR             reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TYPE            reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FOR             reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PACKAGE         reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IMPORT          reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SWITCH          reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IF              reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FUNC            reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RETURN          reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    $end            reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DOT             reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LBRACKET        reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    EQ              reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    NEQ             reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    GT              reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LT              reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    GE              reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LE              reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    AND             reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    OR              reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PLUS            reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    MINUS           reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TIMES           reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DIVIDE          reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    MOD             reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LBRACE          reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    CASE            reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DEFAULT         reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RPAREN          reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SEMICOLON       reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACKET        reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    COLON           reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)


state 139

    (44) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA . expression RPAREN
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    expression                     shift and go to state 191
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 140

    (49) argument_list -> argument_list COMMA . expression
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    expression                     shift and go to state 192
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 141

    (38) assignment -> VAR IDENTIFIER type_name ASSIGN . expression
    (39) assignment -> VAR IDENTIFIER type_name ASSIGN . llamarFuncion
    (41) assignment -> VAR IDENTIFIER type_name ASSIGN . slice_literal
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    expression                     shift and go to state 193
    llamarFuncion                  shift and go to state 194
    slice_literal                  shift and go to state 195
    function_literal               shift and go to state 57

state 142

    (70) map -> VAR IDENTIFIER ASSIGN mapLiteral .

    IDENTIFIER      reduce using rule 70 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    VAR             reduce using rule 70 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    TYPE            reduce using rule 70 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    FOR             reduce using rule 70 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    PACKAGE         reduce using rule 70 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    IMPORT          reduce using rule 70 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    SWITCH          reduce using rule 70 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    IF              reduce using rule 70 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    FUNC            reduce using rule 70 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    RETURN          reduce using rule 70 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    $end            reduce using rule 70 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    RBRACE          reduce using rule 70 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    CASE            reduce using rule 70 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    DEFAULT         reduce using rule 70 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)


state 143

    (147) slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET . type_name
    (139) type_name -> LBRACKET RBRACKET . type_name
    (137) type_name -> . DATATYPE
    (138) type_name -> . IDENTIFIER
    (139) type_name -> . LBRACKET RBRACKET type_name
    (140) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 88
    IDENTIFIER      shift and go to state 84
    LBRACKET        shift and go to state 159
    FUNC            shift and go to state 89

    type_name                      shift and go to state 196

state 144

    (140) type_name -> FUNC LPAREN . parameters RPAREN return_type
    (130) parameters -> . parameters COMMA parameter
    (131) parameters -> . parameter
    (132) parameters -> . empty
    (133) parameter -> . IDENTIFIER type_name
    (134) parameter -> . identifier_list type_name
    (63) empty -> .
    (135) identifier_list -> . IDENTIFIER
    (136) identifier_list -> . IDENTIFIER COMMA identifier_list

    IDENTIFIER      shift and go to state 161
    RPAREN          reduce using rule 63 (empty -> .)
    COMMA           reduce using rule 63 (empty -> .)

    parameters                     shift and go to state 197
    parameter                      shift and go to state 130
    empty                          shift and go to state 131
    identifier_list                shift and go to state 132

state 145

    (90) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE . struct_fields RBRACE
    (96) struct_fields -> . struct_field
    (97) struct_fields -> . struct_fields struct_field
    (95) struct_field -> . IDENTIFIER type_name

    IDENTIFIER      shift and go to state 198

    struct_fields                  shift and go to state 199
    struct_field                   shift and go to state 200

state 146

    (99) for_statement -> FOR shortAssignment SEMICOLON condicion . SEMICOLON expression block

    SEMICOLON       shift and go to state 201


state 147

    (52) condicion -> expression comparador expression .
    (46) expression -> expression comparador expression .
    (46) expression -> expression . comparador expression
    (47) expression -> expression . operadorLogico expression
    (116) expression -> expression . operator expression
    (117) expression -> expression . DOT IDENTIFIER
    (152) expression -> expression . LBRACKET expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (154) expression -> expression . LBRACKET COLON expression RBRACKET
    (155) expression -> expression . LBRACKET expression COLON RBRACKET
    (57) comparador -> . EQ
    (58) comparador -> . NEQ
    (59) comparador -> . GT
    (60) comparador -> . LT
    (61) comparador -> . GE
    (62) comparador -> . LE
    (55) operadorLogico -> . AND
    (56) operadorLogico -> . OR
    (118) operator -> . PLUS
    (119) operator -> . MINUS
    (120) operator -> . TIMES
    (121) operator -> . DIVIDE
    (122) operator -> . MOD

  ! reduce/reduce conflict for AND resolved using rule 46 (expression -> expression comparador expression .)
  ! reduce/reduce conflict for OR resolved using rule 46 (expression -> expression comparador expression .)
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 52 (condicion -> expression comparador expression .)
    SEMICOLON       reduce using rule 52 (condicion -> expression comparador expression .)
    DOT             shift and go to state 96
    LBRACKET        shift and go to state 97
    EQ              shift and go to state 98
    NEQ             shift and go to state 99
    GT              shift and go to state 100
    LT              shift and go to state 101
    GE              shift and go to state 102
    LE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110

  ! AND             [ reduce using rule 52 (condicion -> expression comparador expression .) ]
  ! OR              [ reduce using rule 52 (condicion -> expression comparador expression .) ]
  ! DOT             [ reduce using rule 46 (expression -> expression comparador expression .) ]
  ! LBRACKET        [ reduce using rule 46 (expression -> expression comparador expression .) ]
  ! EQ              [ reduce using rule 46 (expression -> expression comparador expression .) ]
  ! NEQ             [ reduce using rule 46 (expression -> expression comparador expression .) ]
  ! GT              [ reduce using rule 46 (expression -> expression comparador expression .) ]
  ! LT              [ reduce using rule 46 (expression -> expression comparador expression .) ]
  ! GE              [ reduce using rule 46 (expression -> expression comparador expression .) ]
  ! LE              [ reduce using rule 46 (expression -> expression comparador expression .) ]
  ! AND             [ reduce using rule 46 (expression -> expression comparador expression .) ]
  ! OR              [ reduce using rule 46 (expression -> expression comparador expression .) ]
  ! PLUS            [ reduce using rule 46 (expression -> expression comparador expression .) ]
  ! MINUS           [ reduce using rule 46 (expression -> expression comparador expression .) ]
  ! TIMES           [ reduce using rule 46 (expression -> expression comparador expression .) ]
  ! DIVIDE          [ reduce using rule 46 (expression -> expression comparador expression .) ]
  ! MOD             [ reduce using rule 46 (expression -> expression comparador expression .) ]

    comparador                     shift and go to state 123
    operadorLogico                 shift and go to state 94
    operator                       shift and go to state 95

state 148

    (47) expression -> expression operadorLogico expression .
    (46) expression -> expression . comparador expression
    (47) expression -> expression . operadorLogico expression
    (116) expression -> expression . operator expression
    (117) expression -> expression . DOT IDENTIFIER
    (152) expression -> expression . LBRACKET expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (154) expression -> expression . LBRACKET COLON expression RBRACKET
    (155) expression -> expression . LBRACKET expression COLON RBRACKET
    (57) comparador -> . EQ
    (58) comparador -> . NEQ
    (59) comparador -> . GT
    (60) comparador -> . LT
    (61) comparador -> . GE
    (62) comparador -> . LE
    (55) operadorLogico -> . AND
    (56) operadorLogico -> . OR
    (118) operator -> . PLUS
    (119) operator -> . MINUS
    (120) operator -> . TIMES
    (121) operator -> . DIVIDE
    (122) operator -> . MOD

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 47 (expression -> expression operadorLogico expression .)
    COMMA           reduce using rule 47 (expression -> expression operadorLogico expression .)
    IDENTIFIER      reduce using rule 47 (expression -> expression operadorLogico expression .)
    VAR             reduce using rule 47 (expression -> expression operadorLogico expression .)
    TYPE            reduce using rule 47 (expression -> expression operadorLogico expression .)
    FOR             reduce using rule 47 (expression -> expression operadorLogico expression .)
    PACKAGE         reduce using rule 47 (expression -> expression operadorLogico expression .)
    IMPORT          reduce using rule 47 (expression -> expression operadorLogico expression .)
    SWITCH          reduce using rule 47 (expression -> expression operadorLogico expression .)
    IF              reduce using rule 47 (expression -> expression operadorLogico expression .)
    FUNC            reduce using rule 47 (expression -> expression operadorLogico expression .)
    RETURN          reduce using rule 47 (expression -> expression operadorLogico expression .)
    $end            reduce using rule 47 (expression -> expression operadorLogico expression .)
    RBRACE          reduce using rule 47 (expression -> expression operadorLogico expression .)
    CASE            reduce using rule 47 (expression -> expression operadorLogico expression .)
    DEFAULT         reduce using rule 47 (expression -> expression operadorLogico expression .)
    RPAREN          reduce using rule 47 (expression -> expression operadorLogico expression .)
    SEMICOLON       reduce using rule 47 (expression -> expression operadorLogico expression .)
    RBRACKET        reduce using rule 47 (expression -> expression operadorLogico expression .)
    COLON           reduce using rule 47 (expression -> expression operadorLogico expression .)
    DOT             shift and go to state 96
    LBRACKET        shift and go to state 97
    EQ              shift and go to state 98
    NEQ             shift and go to state 99
    GT              shift and go to state 100
    LT              shift and go to state 101
    GE              shift and go to state 102
    LE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110

  ! DOT             [ reduce using rule 47 (expression -> expression operadorLogico expression .) ]
  ! LBRACKET        [ reduce using rule 47 (expression -> expression operadorLogico expression .) ]
  ! EQ              [ reduce using rule 47 (expression -> expression operadorLogico expression .) ]
  ! NEQ             [ reduce using rule 47 (expression -> expression operadorLogico expression .) ]
  ! GT              [ reduce using rule 47 (expression -> expression operadorLogico expression .) ]
  ! LT              [ reduce using rule 47 (expression -> expression operadorLogico expression .) ]
  ! GE              [ reduce using rule 47 (expression -> expression operadorLogico expression .) ]
  ! LE              [ reduce using rule 47 (expression -> expression operadorLogico expression .) ]
  ! AND             [ reduce using rule 47 (expression -> expression operadorLogico expression .) ]
  ! OR              [ reduce using rule 47 (expression -> expression operadorLogico expression .) ]
  ! PLUS            [ reduce using rule 47 (expression -> expression operadorLogico expression .) ]
  ! MINUS           [ reduce using rule 47 (expression -> expression operadorLogico expression .) ]
  ! TIMES           [ reduce using rule 47 (expression -> expression operadorLogico expression .) ]
  ! DIVIDE          [ reduce using rule 47 (expression -> expression operadorLogico expression .) ]
  ! MOD             [ reduce using rule 47 (expression -> expression operadorLogico expression .) ]

    operadorLogico                 shift and go to state 94
    comparador                     shift and go to state 123
    operator                       shift and go to state 95

state 149

    (116) expression -> expression operator expression .
    (46) expression -> expression . comparador expression
    (47) expression -> expression . operadorLogico expression
    (116) expression -> expression . operator expression
    (117) expression -> expression . DOT IDENTIFIER
    (152) expression -> expression . LBRACKET expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (154) expression -> expression . LBRACKET COLON expression RBRACKET
    (155) expression -> expression . LBRACKET expression COLON RBRACKET
    (57) comparador -> . EQ
    (58) comparador -> . NEQ
    (59) comparador -> . GT
    (60) comparador -> . LT
    (61) comparador -> . GE
    (62) comparador -> . LE
    (55) operadorLogico -> . AND
    (56) operadorLogico -> . OR
    (118) operator -> . PLUS
    (119) operator -> . MINUS
    (120) operator -> . TIMES
    (121) operator -> . DIVIDE
    (122) operator -> . MOD

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 116 (expression -> expression operator expression .)
    COMMA           reduce using rule 116 (expression -> expression operator expression .)
    IDENTIFIER      reduce using rule 116 (expression -> expression operator expression .)
    VAR             reduce using rule 116 (expression -> expression operator expression .)
    TYPE            reduce using rule 116 (expression -> expression operator expression .)
    FOR             reduce using rule 116 (expression -> expression operator expression .)
    PACKAGE         reduce using rule 116 (expression -> expression operator expression .)
    IMPORT          reduce using rule 116 (expression -> expression operator expression .)
    SWITCH          reduce using rule 116 (expression -> expression operator expression .)
    IF              reduce using rule 116 (expression -> expression operator expression .)
    FUNC            reduce using rule 116 (expression -> expression operator expression .)
    RETURN          reduce using rule 116 (expression -> expression operator expression .)
    $end            reduce using rule 116 (expression -> expression operator expression .)
    RBRACE          reduce using rule 116 (expression -> expression operator expression .)
    CASE            reduce using rule 116 (expression -> expression operator expression .)
    DEFAULT         reduce using rule 116 (expression -> expression operator expression .)
    RPAREN          reduce using rule 116 (expression -> expression operator expression .)
    SEMICOLON       reduce using rule 116 (expression -> expression operator expression .)
    RBRACKET        reduce using rule 116 (expression -> expression operator expression .)
    COLON           reduce using rule 116 (expression -> expression operator expression .)
    DOT             shift and go to state 96
    LBRACKET        shift and go to state 97
    EQ              shift and go to state 98
    NEQ             shift and go to state 99
    GT              shift and go to state 100
    LT              shift and go to state 101
    GE              shift and go to state 102
    LE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110

  ! DOT             [ reduce using rule 116 (expression -> expression operator expression .) ]
  ! LBRACKET        [ reduce using rule 116 (expression -> expression operator expression .) ]
  ! EQ              [ reduce using rule 116 (expression -> expression operator expression .) ]
  ! NEQ             [ reduce using rule 116 (expression -> expression operator expression .) ]
  ! GT              [ reduce using rule 116 (expression -> expression operator expression .) ]
  ! LT              [ reduce using rule 116 (expression -> expression operator expression .) ]
  ! GE              [ reduce using rule 116 (expression -> expression operator expression .) ]
  ! LE              [ reduce using rule 116 (expression -> expression operator expression .) ]
  ! AND             [ reduce using rule 116 (expression -> expression operator expression .) ]
  ! OR              [ reduce using rule 116 (expression -> expression operator expression .) ]
  ! PLUS            [ reduce using rule 116 (expression -> expression operator expression .) ]
  ! MINUS           [ reduce using rule 116 (expression -> expression operator expression .) ]
  ! TIMES           [ reduce using rule 116 (expression -> expression operator expression .) ]
  ! DIVIDE          [ reduce using rule 116 (expression -> expression operator expression .) ]
  ! MOD             [ reduce using rule 116 (expression -> expression operator expression .) ]

    operator                       shift and go to state 95
    comparador                     shift and go to state 123
    operadorLogico                 shift and go to state 94

state 150

    (117) expression -> expression DOT IDENTIFIER .

    DOT             reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    LBRACKET        reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    EQ              reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    NEQ             reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    GT              reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    LT              reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    GE              reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    LE              reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    AND             reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    OR              reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    PLUS            reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    MINUS           reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    TIMES           reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    DIVIDE          reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    MOD             reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    LBRACE          reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    COMMA           reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    VAR             reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    TYPE            reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    FOR             reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    PACKAGE         reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    IMPORT          reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    SWITCH          reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    IF              reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    FUNC            reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    RETURN          reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    $end            reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    RBRACE          reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    CASE            reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    DEFAULT         reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    RPAREN          reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    RBRACKET        reduce using rule 117 (expression -> expression DOT IDENTIFIER .)
    COLON           reduce using rule 117 (expression -> expression DOT IDENTIFIER .)


state 151

    (152) expression -> expression LBRACKET expression . RBRACKET
    (153) expression -> expression LBRACKET expression . COLON expression RBRACKET
    (155) expression -> expression LBRACKET expression . COLON RBRACKET
    (46) expression -> expression . comparador expression
    (47) expression -> expression . operadorLogico expression
    (116) expression -> expression . operator expression
    (117) expression -> expression . DOT IDENTIFIER
    (152) expression -> expression . LBRACKET expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (154) expression -> expression . LBRACKET COLON expression RBRACKET
    (155) expression -> expression . LBRACKET expression COLON RBRACKET
    (57) comparador -> . EQ
    (58) comparador -> . NEQ
    (59) comparador -> . GT
    (60) comparador -> . LT
    (61) comparador -> . GE
    (62) comparador -> . LE
    (55) operadorLogico -> . AND
    (56) operadorLogico -> . OR
    (118) operator -> . PLUS
    (119) operator -> . MINUS
    (120) operator -> . TIMES
    (121) operator -> . DIVIDE
    (122) operator -> . MOD

    RBRACKET        shift and go to state 202
    COLON           shift and go to state 203
    DOT             shift and go to state 96
    LBRACKET        shift and go to state 97
    EQ              shift and go to state 98
    NEQ             shift and go to state 99
    GT              shift and go to state 100
    LT              shift and go to state 101
    GE              shift and go to state 102
    LE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110

    comparador                     shift and go to state 123
    operadorLogico                 shift and go to state 94
    operator                       shift and go to state 95

state 152

    (154) expression -> expression LBRACKET COLON . expression RBRACKET
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    expression                     shift and go to state 204
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 153

    (100) shortAssignment -> identifier_list DECLARE_ASSIGN expression .
    (46) expression -> expression . comparador expression
    (47) expression -> expression . operadorLogico expression
    (116) expression -> expression . operator expression
    (117) expression -> expression . DOT IDENTIFIER
    (152) expression -> expression . LBRACKET expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (154) expression -> expression . LBRACKET COLON expression RBRACKET
    (155) expression -> expression . LBRACKET expression COLON RBRACKET
    (57) comparador -> . EQ
    (58) comparador -> . NEQ
    (59) comparador -> . GT
    (60) comparador -> . LT
    (61) comparador -> . GE
    (62) comparador -> . LE
    (55) operadorLogico -> . AND
    (56) operadorLogico -> . OR
    (118) operator -> . PLUS
    (119) operator -> . MINUS
    (120) operator -> . TIMES
    (121) operator -> . DIVIDE
    (122) operator -> . MOD

    SEMICOLON       reduce using rule 100 (shortAssignment -> identifier_list DECLARE_ASSIGN expression .)
    DOT             shift and go to state 96
    LBRACKET        shift and go to state 97
    EQ              shift and go to state 98
    NEQ             shift and go to state 99
    GT              shift and go to state 100
    LT              shift and go to state 101
    GE              shift and go to state 102
    LE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110

    comparador                     shift and go to state 123
    operadorLogico                 shift and go to state 94
    operator                       shift and go to state 95

state 154

    (104) block -> LBRACE statement_list RBRACE .

    IDENTIFIER      reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    VAR             reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    TYPE            reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    PACKAGE         reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    IMPORT          reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    SWITCH          reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    FUNC            reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    CASE            reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    DEFAULT         reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    DOT             reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    LBRACKET        reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    EQ              reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    NEQ             reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    GT              reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    LT              reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    GE              reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    LE              reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    AND             reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    OR              reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    DIVIDE          reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    MOD             reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    COMMA           reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    RPAREN          reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    SEMICOLON       reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    RBRACKET        reduce using rule 104 (block -> LBRACE statement_list RBRACE .)
    COLON           reduce using rule 104 (block -> LBRACE statement_list RBRACE .)


state 155

    (135) identifier_list -> IDENTIFIER .
    (136) identifier_list -> IDENTIFIER . COMMA identifier_list

    DECLARE_ASSIGN  reduce using rule 135 (identifier_list -> IDENTIFIER .)
    DATATYPE        reduce using rule 135 (identifier_list -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 135 (identifier_list -> IDENTIFIER .)
    LBRACKET        reduce using rule 135 (identifier_list -> IDENTIFIER .)
    FUNC            reduce using rule 135 (identifier_list -> IDENTIFIER .)
    COMMA           shift and go to state 114


state 156

    (136) identifier_list -> IDENTIFIER COMMA identifier_list .

    DECLARE_ASSIGN  reduce using rule 136 (identifier_list -> IDENTIFIER COMMA identifier_list .)
    DATATYPE        reduce using rule 136 (identifier_list -> IDENTIFIER COMMA identifier_list .)
    IDENTIFIER      reduce using rule 136 (identifier_list -> IDENTIFIER COMMA identifier_list .)
    LBRACKET        reduce using rule 136 (identifier_list -> IDENTIFIER COMMA identifier_list .)
    FUNC            reduce using rule 136 (identifier_list -> IDENTIFIER COMMA identifier_list .)


state 157

    (45) llamarFuncion -> IDENTIFIER DOT IDENTIFIER . LPAREN argument_list_opt RPAREN

    LPAREN          shift and go to state 205


state 158

    (124) expression -> LPAREN expression RPAREN .

    DOT             reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    TYPE            reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    PACKAGE         reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    IMPORT          reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    FUNC            reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    CASE            reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 124 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 124 (expression -> LPAREN expression RPAREN .)


state 159

    (139) type_name -> LBRACKET . RBRACKET type_name

    RBRACKET        shift and go to state 206


state 160

    (149) slice_literal -> LBRACKET RBRACKET type_name . LBRACE elements RBRACE

    LBRACE          shift and go to state 207


state 161

    (133) parameter -> IDENTIFIER . type_name
    (135) identifier_list -> IDENTIFIER .
    (136) identifier_list -> IDENTIFIER . COMMA identifier_list
    (137) type_name -> . DATATYPE
    (138) type_name -> . IDENTIFIER
    (139) type_name -> . LBRACKET RBRACKET type_name
    (140) type_name -> . FUNC LPAREN parameters RPAREN return_type

  ! shift/reduce conflict for DATATYPE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
    COMMA           shift and go to state 114
    DATATYPE        shift and go to state 88
    IDENTIFIER      shift and go to state 84
    LBRACKET        shift and go to state 159
    FUNC            shift and go to state 89

  ! DATATYPE        [ reduce using rule 135 (identifier_list -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 135 (identifier_list -> IDENTIFIER .) ]
  ! LBRACKET        [ reduce using rule 135 (identifier_list -> IDENTIFIER .) ]
  ! FUNC            [ reduce using rule 135 (identifier_list -> IDENTIFIER .) ]

    type_name                      shift and go to state 179

state 162

    (27) import -> IMPORT LPAREN import_list RPAREN .

    IDENTIFIER      reduce using rule 27 (import -> IMPORT LPAREN import_list RPAREN .)
    VAR             reduce using rule 27 (import -> IMPORT LPAREN import_list RPAREN .)
    TYPE            reduce using rule 27 (import -> IMPORT LPAREN import_list RPAREN .)
    FOR             reduce using rule 27 (import -> IMPORT LPAREN import_list RPAREN .)
    PACKAGE         reduce using rule 27 (import -> IMPORT LPAREN import_list RPAREN .)
    IMPORT          reduce using rule 27 (import -> IMPORT LPAREN import_list RPAREN .)
    SWITCH          reduce using rule 27 (import -> IMPORT LPAREN import_list RPAREN .)
    IF              reduce using rule 27 (import -> IMPORT LPAREN import_list RPAREN .)
    FUNC            reduce using rule 27 (import -> IMPORT LPAREN import_list RPAREN .)
    RETURN          reduce using rule 27 (import -> IMPORT LPAREN import_list RPAREN .)
    $end            reduce using rule 27 (import -> IMPORT LPAREN import_list RPAREN .)
    RBRACE          reduce using rule 27 (import -> IMPORT LPAREN import_list RPAREN .)
    CASE            reduce using rule 27 (import -> IMPORT LPAREN import_list RPAREN .)
    DEFAULT         reduce using rule 27 (import -> IMPORT LPAREN import_list RPAREN .)


state 163

    (29) import_list -> import_list STRING .

    RPAREN          reduce using rule 29 (import_list -> import_list STRING .)
    STRING          reduce using rule 29 (import_list -> import_list STRING .)


state 164

    (64) switch -> SWITCH expression LBRACE caseBlocks . RBRACE

    RBRACE          shift and go to state 208


state 165

    (65) caseBlocks -> caseBlock .
    (66) caseBlocks -> caseBlock . caseBlocks
    (65) caseBlocks -> . caseBlock
    (66) caseBlocks -> . caseBlock caseBlocks
    (67) caseBlock -> . CASE expression COLON statement_list
    (68) caseBlock -> . DEFAULT COLON statement_list

    RBRACE          reduce using rule 65 (caseBlocks -> caseBlock .)
    CASE            shift and go to state 166
    DEFAULT         shift and go to state 167

    caseBlock                      shift and go to state 165
    caseBlocks                     shift and go to state 209

state 166

    (67) caseBlock -> CASE . expression COLON statement_list
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    expression                     shift and go to state 210
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 167

    (68) caseBlock -> DEFAULT . COLON statement_list

    COLON           shift and go to state 211


state 168

    (46) expression -> expression comparador expression .
    (46) expression -> expression . comparador expression
    (47) expression -> expression . operadorLogico expression
    (116) expression -> expression . operator expression
    (117) expression -> expression . DOT IDENTIFIER
    (152) expression -> expression . LBRACKET expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (154) expression -> expression . LBRACKET COLON expression RBRACKET
    (155) expression -> expression . LBRACKET expression COLON RBRACKET
    (57) comparador -> . EQ
    (58) comparador -> . NEQ
    (59) comparador -> . GT
    (60) comparador -> . LT
    (61) comparador -> . GE
    (62) comparador -> . LE
    (55) operadorLogico -> . AND
    (56) operadorLogico -> . OR
    (118) operator -> . PLUS
    (119) operator -> . MINUS
    (120) operator -> . TIMES
    (121) operator -> . DIVIDE
    (122) operator -> . MOD

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 46 (expression -> expression comparador expression .)
    COMMA           reduce using rule 46 (expression -> expression comparador expression .)
    IDENTIFIER      reduce using rule 46 (expression -> expression comparador expression .)
    VAR             reduce using rule 46 (expression -> expression comparador expression .)
    TYPE            reduce using rule 46 (expression -> expression comparador expression .)
    FOR             reduce using rule 46 (expression -> expression comparador expression .)
    PACKAGE         reduce using rule 46 (expression -> expression comparador expression .)
    IMPORT          reduce using rule 46 (expression -> expression comparador expression .)
    SWITCH          reduce using rule 46 (expression -> expression comparador expression .)
    IF              reduce using rule 46 (expression -> expression comparador expression .)
    FUNC            reduce using rule 46 (expression -> expression comparador expression .)
    RETURN          reduce using rule 46 (expression -> expression comparador expression .)
    $end            reduce using rule 46 (expression -> expression comparador expression .)
    RBRACE          reduce using rule 46 (expression -> expression comparador expression .)
    CASE            reduce using rule 46 (expression -> expression comparador expression .)
    DEFAULT         reduce using rule 46 (expression -> expression comparador expression .)
    RPAREN          reduce using rule 46 (expression -> expression comparador expression .)
    SEMICOLON       reduce using rule 46 (expression -> expression comparador expression .)
    RBRACKET        reduce using rule 46 (expression -> expression comparador expression .)
    COLON           reduce using rule 46 (expression -> expression comparador expression .)
    DOT             shift and go to state 96
    LBRACKET        shift and go to state 97
    EQ              shift and go to state 98
    NEQ             shift and go to state 99
    GT              shift and go to state 100
    LT              shift and go to state 101
    GE              shift and go to state 102
    LE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110

  ! DOT             [ reduce using rule 46 (expression -> expression comparador expression .) ]
  ! LBRACKET        [ reduce using rule 46 (expression -> expression comparador expression .) ]
  ! EQ              [ reduce using rule 46 (expression -> expression comparador expression .) ]
  ! NEQ             [ reduce using rule 46 (expression -> expression comparador expression .) ]
  ! GT              [ reduce using rule 46 (expression -> expression comparador expression .) ]
  ! LT              [ reduce using rule 46 (expression -> expression comparador expression .) ]
  ! GE              [ reduce using rule 46 (expression -> expression comparador expression .) ]
  ! LE              [ reduce using rule 46 (expression -> expression comparador expression .) ]
  ! AND             [ reduce using rule 46 (expression -> expression comparador expression .) ]
  ! OR              [ reduce using rule 46 (expression -> expression comparador expression .) ]
  ! PLUS            [ reduce using rule 46 (expression -> expression comparador expression .) ]
  ! MINUS           [ reduce using rule 46 (expression -> expression comparador expression .) ]
  ! TIMES           [ reduce using rule 46 (expression -> expression comparador expression .) ]
  ! DIVIDE          [ reduce using rule 46 (expression -> expression comparador expression .) ]
  ! MOD             [ reduce using rule 46 (expression -> expression comparador expression .) ]

    comparador                     shift and go to state 123
    operadorLogico                 shift and go to state 94
    operator                       shift and go to state 95

state 169

    (126) if_statement -> IF condicion block ELSE . block
    (104) block -> . LBRACE statement_list RBRACE
    (105) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 44

    block                          shift and go to state 212

state 170

    (53) condicion_compleja -> condicion operadorLogico condicion .
    (53) condicion_compleja -> condicion . operadorLogico condicion
    (54) condicion_compleja -> condicion . operadorLogico condicion_compleja
    (55) operadorLogico -> . AND
    (56) operadorLogico -> . OR

    LBRACE          reduce using rule 53 (condicion_compleja -> condicion operadorLogico condicion .)
    AND             shift and go to state 104
    OR              shift and go to state 105

    operadorLogico                 shift and go to state 125

state 171

    (54) condicion_compleja -> condicion operadorLogico condicion_compleja .

    LBRACE          reduce using rule 54 (condicion_compleja -> condicion operadorLogico condicion_compleja .)


state 172

    (128) if_statement -> IF condicion_compleja block ELSE . block
    (104) block -> . LBRACE statement_list RBRACE
    (105) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 44

    block                          shift and go to state 213

state 173

    (87) param -> IDENTIFIER . type_name
    (135) identifier_list -> IDENTIFIER .
    (136) identifier_list -> IDENTIFIER . COMMA identifier_list
    (137) type_name -> . DATATYPE
    (138) type_name -> . IDENTIFIER
    (139) type_name -> . LBRACKET RBRACKET type_name
    (140) type_name -> . FUNC LPAREN parameters RPAREN return_type

  ! shift/reduce conflict for DATATYPE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
    COMMA           shift and go to state 114
    DATATYPE        shift and go to state 88
    IDENTIFIER      shift and go to state 84
    LBRACKET        shift and go to state 159
    FUNC            shift and go to state 89

  ! DATATYPE        [ reduce using rule 135 (identifier_list -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 135 (identifier_list -> IDENTIFIER .) ]
  ! LBRACKET        [ reduce using rule 135 (identifier_list -> IDENTIFIER .) ]
  ! FUNC            [ reduce using rule 135 (identifier_list -> IDENTIFIER .) ]

    type_name                      shift and go to state 214

state 174

    (77) function -> FUNC IDENTIFIER LPAREN params_opt . RPAREN block
    (78) function -> FUNC IDENTIFIER LPAREN params_opt . RPAREN return_type LBRACE statement_list RBRACE

    RPAREN          shift and go to state 215


state 175

    (83) params_opt -> params .

    RPAREN          reduce using rule 83 (params_opt -> params .)


state 176

    (85) params -> param .
    (86) params -> param . COMMA params

    RPAREN          reduce using rule 85 (params -> param .)
    COMMA           shift and go to state 216


state 177

    (88) param -> identifier_list . type_name
    (137) type_name -> . DATATYPE
    (138) type_name -> . IDENTIFIER
    (139) type_name -> . LBRACKET RBRACKET type_name
    (140) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 88
    IDENTIFIER      shift and go to state 84
    LBRACKET        shift and go to state 159
    FUNC            shift and go to state 89

    type_name                      shift and go to state 217

state 178

    (98) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER . RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (138) type_name -> IDENTIFIER .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 218
    COMMA           reduce using rule 138 (type_name -> IDENTIFIER .)

  ! RPAREN          [ reduce using rule 138 (type_name -> IDENTIFIER .) ]


state 179

    (133) parameter -> IDENTIFIER type_name .

    RPAREN          reduce using rule 133 (parameter -> IDENTIFIER type_name .)
    COMMA           reduce using rule 133 (parameter -> IDENTIFIER type_name .)


state 180

    (129) function_literal -> FUNC LPAREN parameters RPAREN . return_type block
    (141) return_type -> . DATATYPE
    (142) return_type -> . LPAREN type_list RPAREN
    (144) return_type -> . empty
    (63) empty -> .

    DATATYPE        shift and go to state 221
    LPAREN          shift and go to state 219
    LBRACE          reduce using rule 63 (empty -> .)

    return_type                    shift and go to state 220
    empty                          shift and go to state 222

state 181

    (130) parameters -> parameters COMMA . parameter
    (133) parameter -> . IDENTIFIER type_name
    (134) parameter -> . identifier_list type_name
    (135) identifier_list -> . IDENTIFIER
    (136) identifier_list -> . IDENTIFIER COMMA identifier_list

    IDENTIFIER      shift and go to state 161

    parameter                      shift and go to state 223
    identifier_list                shift and go to state 132

state 182

    (134) parameter -> identifier_list type_name .

    RPAREN          reduce using rule 134 (parameter -> identifier_list type_name .)
    COMMA           reduce using rule 134 (parameter -> identifier_list type_name .)


state 183

    (79) function -> FUNC MAIN LPAREN params_opt . RPAREN block

    RPAREN          shift and go to state 224


state 184

    (82) return_values -> expression COMMA return_values .

    IDENTIFIER      reduce using rule 82 (return_values -> expression COMMA return_values .)
    VAR             reduce using rule 82 (return_values -> expression COMMA return_values .)
    TYPE            reduce using rule 82 (return_values -> expression COMMA return_values .)
    FOR             reduce using rule 82 (return_values -> expression COMMA return_values .)
    PACKAGE         reduce using rule 82 (return_values -> expression COMMA return_values .)
    IMPORT          reduce using rule 82 (return_values -> expression COMMA return_values .)
    SWITCH          reduce using rule 82 (return_values -> expression COMMA return_values .)
    IF              reduce using rule 82 (return_values -> expression COMMA return_values .)
    FUNC            reduce using rule 82 (return_values -> expression COMMA return_values .)
    RETURN          reduce using rule 82 (return_values -> expression COMMA return_values .)
    $end            reduce using rule 82 (return_values -> expression COMMA return_values .)
    RBRACE          reduce using rule 82 (return_values -> expression COMMA return_values .)
    CASE            reduce using rule 82 (return_values -> expression COMMA return_values .)
    DEFAULT         reduce using rule 82 (return_values -> expression COMMA return_values .)


state 185

    (94) struct_field_assignment -> IDENTIFIER . COLON expression

    COLON           shift and go to state 225


state 186

    (91) struct_literal -> IDENTIFIER LBRACE struct_field_assignments . RBRACE
    (93) struct_field_assignments -> struct_field_assignments . COMMA struct_field_assignment

    RBRACE          shift and go to state 226
    COMMA           shift and go to state 227


state 187

    (92) struct_field_assignments -> struct_field_assignment .

    RBRACE          reduce using rule 92 (struct_field_assignments -> struct_field_assignment .)
    COMMA           reduce using rule 92 (struct_field_assignments -> struct_field_assignment .)


state 188

    (71) mapLiteral -> MAP LBRACKET type_name . RBRACKET type_name LBRACE mapEntries RBRACE

    RBRACKET        shift and go to state 228


state 189

    (34) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND . IDENTIFIER RPAREN

    IDENTIFIER      shift and go to state 229


state 190

    (45) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt . RPAREN
    (89) print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 230


state 191

    (44) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression . RPAREN
    (46) expression -> expression . comparador expression
    (47) expression -> expression . operadorLogico expression
    (116) expression -> expression . operator expression
    (117) expression -> expression . DOT IDENTIFIER
    (152) expression -> expression . LBRACKET expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (154) expression -> expression . LBRACKET COLON expression RBRACKET
    (155) expression -> expression . LBRACKET expression COLON RBRACKET
    (57) comparador -> . EQ
    (58) comparador -> . NEQ
    (59) comparador -> . GT
    (60) comparador -> . LT
    (61) comparador -> . GE
    (62) comparador -> . LE
    (55) operadorLogico -> . AND
    (56) operadorLogico -> . OR
    (118) operator -> . PLUS
    (119) operator -> . MINUS
    (120) operator -> . TIMES
    (121) operator -> . DIVIDE
    (122) operator -> . MOD

    RPAREN          shift and go to state 231
    DOT             shift and go to state 96
    LBRACKET        shift and go to state 97
    EQ              shift and go to state 98
    NEQ             shift and go to state 99
    GT              shift and go to state 100
    LT              shift and go to state 101
    GE              shift and go to state 102
    LE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110

    comparador                     shift and go to state 123
    operadorLogico                 shift and go to state 94
    operator                       shift and go to state 95

state 192

    (49) argument_list -> argument_list COMMA expression .
    (46) expression -> expression . comparador expression
    (47) expression -> expression . operadorLogico expression
    (116) expression -> expression . operator expression
    (117) expression -> expression . DOT IDENTIFIER
    (152) expression -> expression . LBRACKET expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (154) expression -> expression . LBRACKET COLON expression RBRACKET
    (155) expression -> expression . LBRACKET expression COLON RBRACKET
    (57) comparador -> . EQ
    (58) comparador -> . NEQ
    (59) comparador -> . GT
    (60) comparador -> . LT
    (61) comparador -> . GE
    (62) comparador -> . LE
    (55) operadorLogico -> . AND
    (56) operadorLogico -> . OR
    (118) operator -> . PLUS
    (119) operator -> . MINUS
    (120) operator -> . TIMES
    (121) operator -> . DIVIDE
    (122) operator -> . MOD

    COMMA           reduce using rule 49 (argument_list -> argument_list COMMA expression .)
    RPAREN          reduce using rule 49 (argument_list -> argument_list COMMA expression .)
    DOT             shift and go to state 96
    LBRACKET        shift and go to state 97
    EQ              shift and go to state 98
    NEQ             shift and go to state 99
    GT              shift and go to state 100
    LT              shift and go to state 101
    GE              shift and go to state 102
    LE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110

    comparador                     shift and go to state 123
    operadorLogico                 shift and go to state 94
    operator                       shift and go to state 95

state 193

    (38) assignment -> VAR IDENTIFIER type_name ASSIGN expression .
    (46) expression -> expression . comparador expression
    (47) expression -> expression . operadorLogico expression
    (116) expression -> expression . operator expression
    (117) expression -> expression . DOT IDENTIFIER
    (152) expression -> expression . LBRACKET expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (154) expression -> expression . LBRACKET COLON expression RBRACKET
    (155) expression -> expression . LBRACKET expression COLON RBRACKET
    (57) comparador -> . EQ
    (58) comparador -> . NEQ
    (59) comparador -> . GT
    (60) comparador -> . LT
    (61) comparador -> . GE
    (62) comparador -> . LE
    (55) operadorLogico -> . AND
    (56) operadorLogico -> . OR
    (118) operator -> . PLUS
    (119) operator -> . MINUS
    (120) operator -> . TIMES
    (121) operator -> . DIVIDE
    (122) operator -> . MOD

    IDENTIFIER      reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    VAR             reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    TYPE            reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    FOR             reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    PACKAGE         reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    IMPORT          reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    SWITCH          reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    IF              reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    FUNC            reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    RETURN          reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    $end            reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    RBRACE          reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    CASE            reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    DEFAULT         reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    DOT             shift and go to state 96
    LBRACKET        shift and go to state 97
    EQ              shift and go to state 98
    NEQ             shift and go to state 99
    GT              shift and go to state 100
    LT              shift and go to state 101
    GE              shift and go to state 102
    LE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110

    comparador                     shift and go to state 123
    operadorLogico                 shift and go to state 94
    operator                       shift and go to state 95

state 194

    (39) assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .
    (115) expression -> llamarFuncion .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for VAR resolved using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for TYPE resolved using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for FOR resolved using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for IMPORT resolved using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for SWITCH resolved using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for IF resolved using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for FUNC resolved using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for RETURN resolved using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for $end resolved using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for RBRACE resolved using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for CASE resolved using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    IDENTIFIER      reduce using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    VAR             reduce using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    TYPE            reduce using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    FOR             reduce using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    PACKAGE         reduce using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    IMPORT          reduce using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    SWITCH          reduce using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    IF              reduce using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    FUNC            reduce using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    RETURN          reduce using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    $end            reduce using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    RBRACE          reduce using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    CASE            reduce using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    DEFAULT         reduce using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    DOT             reduce using rule 115 (expression -> llamarFuncion .)
    LBRACKET        reduce using rule 115 (expression -> llamarFuncion .)
    EQ              reduce using rule 115 (expression -> llamarFuncion .)
    NEQ             reduce using rule 115 (expression -> llamarFuncion .)
    GT              reduce using rule 115 (expression -> llamarFuncion .)
    LT              reduce using rule 115 (expression -> llamarFuncion .)
    GE              reduce using rule 115 (expression -> llamarFuncion .)
    LE              reduce using rule 115 (expression -> llamarFuncion .)
    AND             reduce using rule 115 (expression -> llamarFuncion .)
    OR              reduce using rule 115 (expression -> llamarFuncion .)
    PLUS            reduce using rule 115 (expression -> llamarFuncion .)
    MINUS           reduce using rule 115 (expression -> llamarFuncion .)
    TIMES           reduce using rule 115 (expression -> llamarFuncion .)
    DIVIDE          reduce using rule 115 (expression -> llamarFuncion .)
    MOD             reduce using rule 115 (expression -> llamarFuncion .)

  ! IDENTIFIER      [ reduce using rule 115 (expression -> llamarFuncion .) ]
  ! VAR             [ reduce using rule 115 (expression -> llamarFuncion .) ]
  ! TYPE            [ reduce using rule 115 (expression -> llamarFuncion .) ]
  ! FOR             [ reduce using rule 115 (expression -> llamarFuncion .) ]
  ! PACKAGE         [ reduce using rule 115 (expression -> llamarFuncion .) ]
  ! IMPORT          [ reduce using rule 115 (expression -> llamarFuncion .) ]
  ! SWITCH          [ reduce using rule 115 (expression -> llamarFuncion .) ]
  ! IF              [ reduce using rule 115 (expression -> llamarFuncion .) ]
  ! FUNC            [ reduce using rule 115 (expression -> llamarFuncion .) ]
  ! RETURN          [ reduce using rule 115 (expression -> llamarFuncion .) ]
  ! $end            [ reduce using rule 115 (expression -> llamarFuncion .) ]
  ! RBRACE          [ reduce using rule 115 (expression -> llamarFuncion .) ]
  ! CASE            [ reduce using rule 115 (expression -> llamarFuncion .) ]
  ! DEFAULT         [ reduce using rule 115 (expression -> llamarFuncion .) ]


state 195

    (41) assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .
    (114) expression -> slice_literal .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 41 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for VAR resolved using rule 41 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for TYPE resolved using rule 41 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for FOR resolved using rule 41 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 41 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for IMPORT resolved using rule 41 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for SWITCH resolved using rule 41 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for IF resolved using rule 41 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for FUNC resolved using rule 41 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for RETURN resolved using rule 41 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for $end resolved using rule 41 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for RBRACE resolved using rule 41 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for CASE resolved using rule 41 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 41 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    IDENTIFIER      reduce using rule 41 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    VAR             reduce using rule 41 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    TYPE            reduce using rule 41 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    FOR             reduce using rule 41 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    PACKAGE         reduce using rule 41 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    IMPORT          reduce using rule 41 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    SWITCH          reduce using rule 41 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    IF              reduce using rule 41 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    FUNC            reduce using rule 41 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    RETURN          reduce using rule 41 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    $end            reduce using rule 41 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    RBRACE          reduce using rule 41 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    CASE            reduce using rule 41 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    DEFAULT         reduce using rule 41 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    DOT             reduce using rule 114 (expression -> slice_literal .)
    LBRACKET        reduce using rule 114 (expression -> slice_literal .)
    EQ              reduce using rule 114 (expression -> slice_literal .)
    NEQ             reduce using rule 114 (expression -> slice_literal .)
    GT              reduce using rule 114 (expression -> slice_literal .)
    LT              reduce using rule 114 (expression -> slice_literal .)
    GE              reduce using rule 114 (expression -> slice_literal .)
    LE              reduce using rule 114 (expression -> slice_literal .)
    AND             reduce using rule 114 (expression -> slice_literal .)
    OR              reduce using rule 114 (expression -> slice_literal .)
    PLUS            reduce using rule 114 (expression -> slice_literal .)
    MINUS           reduce using rule 114 (expression -> slice_literal .)
    TIMES           reduce using rule 114 (expression -> slice_literal .)
    DIVIDE          reduce using rule 114 (expression -> slice_literal .)
    MOD             reduce using rule 114 (expression -> slice_literal .)

  ! IDENTIFIER      [ reduce using rule 114 (expression -> slice_literal .) ]
  ! VAR             [ reduce using rule 114 (expression -> slice_literal .) ]
  ! TYPE            [ reduce using rule 114 (expression -> slice_literal .) ]
  ! FOR             [ reduce using rule 114 (expression -> slice_literal .) ]
  ! PACKAGE         [ reduce using rule 114 (expression -> slice_literal .) ]
  ! IMPORT          [ reduce using rule 114 (expression -> slice_literal .) ]
  ! SWITCH          [ reduce using rule 114 (expression -> slice_literal .) ]
  ! IF              [ reduce using rule 114 (expression -> slice_literal .) ]
  ! FUNC            [ reduce using rule 114 (expression -> slice_literal .) ]
  ! RETURN          [ reduce using rule 114 (expression -> slice_literal .) ]
  ! $end            [ reduce using rule 114 (expression -> slice_literal .) ]
  ! RBRACE          [ reduce using rule 114 (expression -> slice_literal .) ]
  ! CASE            [ reduce using rule 114 (expression -> slice_literal .) ]
  ! DEFAULT         [ reduce using rule 114 (expression -> slice_literal .) ]


state 196

    (147) slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .
    (139) type_name -> LBRACKET RBRACKET type_name .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for VAR resolved using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for TYPE resolved using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for FOR resolved using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for IMPORT resolved using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for SWITCH resolved using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for IF resolved using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for FUNC resolved using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for RETURN resolved using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for $end resolved using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for RBRACE resolved using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for CASE resolved using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    ASSIGN          reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    IDENTIFIER      reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    VAR             reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    TYPE            reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    FOR             reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    PACKAGE         reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    IMPORT          reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    SWITCH          reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    IF              reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    FUNC            reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    RETURN          reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    $end            reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    RBRACE          reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    CASE            reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    DEFAULT         reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)

  ! IDENTIFIER      [ reduce using rule 147 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! VAR             [ reduce using rule 147 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! TYPE            [ reduce using rule 147 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! FOR             [ reduce using rule 147 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! PACKAGE         [ reduce using rule 147 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! IMPORT          [ reduce using rule 147 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! SWITCH          [ reduce using rule 147 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! IF              [ reduce using rule 147 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! FUNC            [ reduce using rule 147 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! RETURN          [ reduce using rule 147 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! $end            [ reduce using rule 147 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! RBRACE          [ reduce using rule 147 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! CASE            [ reduce using rule 147 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! DEFAULT         [ reduce using rule 147 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]


state 197

    (140) type_name -> FUNC LPAREN parameters . RPAREN return_type
    (130) parameters -> parameters . COMMA parameter

    RPAREN          shift and go to state 232
    COMMA           shift and go to state 181


state 198

    (95) struct_field -> IDENTIFIER . type_name
    (137) type_name -> . DATATYPE
    (138) type_name -> . IDENTIFIER
    (139) type_name -> . LBRACKET RBRACKET type_name
    (140) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 88
    IDENTIFIER      shift and go to state 84
    LBRACKET        shift and go to state 159
    FUNC            shift and go to state 89

    type_name                      shift and go to state 233

state 199

    (90) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields . RBRACE
    (97) struct_fields -> struct_fields . struct_field
    (95) struct_field -> . IDENTIFIER type_name

    RBRACE          shift and go to state 234
    IDENTIFIER      shift and go to state 198

    struct_field                   shift and go to state 235

state 200

    (96) struct_fields -> struct_field .

    RBRACE          reduce using rule 96 (struct_fields -> struct_field .)
    IDENTIFIER      reduce using rule 96 (struct_fields -> struct_field .)


state 201

    (99) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON . expression block
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    expression                     shift and go to state 236
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 202

    (152) expression -> expression LBRACKET expression RBRACKET .

    DOT             reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    NEQ             reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    LBRACE          reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    IDENTIFIER      reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    VAR             reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    TYPE            reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    FOR             reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    PACKAGE         reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    IMPORT          reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    SWITCH          reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    IF              reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    FUNC            reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    RETURN          reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    $end            reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    CASE            reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    DEFAULT         reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 152 (expression -> expression LBRACKET expression RBRACKET .)


state 203

    (153) expression -> expression LBRACKET expression COLON . expression RBRACKET
    (155) expression -> expression LBRACKET expression COLON . RBRACKET
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    RBRACKET        shift and go to state 238
    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    expression                     shift and go to state 237
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 204

    (154) expression -> expression LBRACKET COLON expression . RBRACKET
    (46) expression -> expression . comparador expression
    (47) expression -> expression . operadorLogico expression
    (116) expression -> expression . operator expression
    (117) expression -> expression . DOT IDENTIFIER
    (152) expression -> expression . LBRACKET expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (154) expression -> expression . LBRACKET COLON expression RBRACKET
    (155) expression -> expression . LBRACKET expression COLON RBRACKET
    (57) comparador -> . EQ
    (58) comparador -> . NEQ
    (59) comparador -> . GT
    (60) comparador -> . LT
    (61) comparador -> . GE
    (62) comparador -> . LE
    (55) operadorLogico -> . AND
    (56) operadorLogico -> . OR
    (118) operator -> . PLUS
    (119) operator -> . MINUS
    (120) operator -> . TIMES
    (121) operator -> . DIVIDE
    (122) operator -> . MOD

    RBRACKET        shift and go to state 239
    DOT             shift and go to state 96
    LBRACKET        shift and go to state 97
    EQ              shift and go to state 98
    NEQ             shift and go to state 99
    GT              shift and go to state 100
    LT              shift and go to state 101
    GE              shift and go to state 102
    LE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110

    comparador                     shift and go to state 123
    operadorLogico                 shift and go to state 94
    operator                       shift and go to state 95

state 205

    (45) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN . argument_list_opt RPAREN
    (50) argument_list_opt -> . argument_list
    (51) argument_list_opt -> .
    (48) argument_list -> . expression
    (49) argument_list -> . argument_list COMMA expression
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    RPAREN          reduce using rule 51 (argument_list_opt -> .)
    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    argument_list_opt              shift and go to state 240
    argument_list                  shift and go to state 83
    expression                     shift and go to state 82
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 206

    (139) type_name -> LBRACKET RBRACKET . type_name
    (137) type_name -> . DATATYPE
    (138) type_name -> . IDENTIFIER
    (139) type_name -> . LBRACKET RBRACKET type_name
    (140) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 88
    IDENTIFIER      shift and go to state 84
    LBRACKET        shift and go to state 159
    FUNC            shift and go to state 89

    type_name                      shift and go to state 241

state 207

    (149) slice_literal -> LBRACKET RBRACKET type_name LBRACE . elements RBRACE
    (150) elements -> . elements COMMA expression
    (151) elements -> . expression
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    elements                       shift and go to state 242
    expression                     shift and go to state 243
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 208

    (64) switch -> SWITCH expression LBRACE caseBlocks RBRACE .

    IDENTIFIER      reduce using rule 64 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    VAR             reduce using rule 64 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    TYPE            reduce using rule 64 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    FOR             reduce using rule 64 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    PACKAGE         reduce using rule 64 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    IMPORT          reduce using rule 64 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    SWITCH          reduce using rule 64 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    IF              reduce using rule 64 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    FUNC            reduce using rule 64 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    RETURN          reduce using rule 64 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    $end            reduce using rule 64 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    RBRACE          reduce using rule 64 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    CASE            reduce using rule 64 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    DEFAULT         reduce using rule 64 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)


state 209

    (66) caseBlocks -> caseBlock caseBlocks .

    RBRACE          reduce using rule 66 (caseBlocks -> caseBlock caseBlocks .)


state 210

    (67) caseBlock -> CASE expression . COLON statement_list
    (46) expression -> expression . comparador expression
    (47) expression -> expression . operadorLogico expression
    (116) expression -> expression . operator expression
    (117) expression -> expression . DOT IDENTIFIER
    (152) expression -> expression . LBRACKET expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (154) expression -> expression . LBRACKET COLON expression RBRACKET
    (155) expression -> expression . LBRACKET expression COLON RBRACKET
    (57) comparador -> . EQ
    (58) comparador -> . NEQ
    (59) comparador -> . GT
    (60) comparador -> . LT
    (61) comparador -> . GE
    (62) comparador -> . LE
    (55) operadorLogico -> . AND
    (56) operadorLogico -> . OR
    (118) operator -> . PLUS
    (119) operator -> . MINUS
    (120) operator -> . TIMES
    (121) operator -> . DIVIDE
    (122) operator -> . MOD

    COLON           shift and go to state 244
    DOT             shift and go to state 96
    LBRACKET        shift and go to state 97
    EQ              shift and go to state 98
    NEQ             shift and go to state 99
    GT              shift and go to state 100
    LT              shift and go to state 101
    GE              shift and go to state 102
    LE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110

    comparador                     shift and go to state 123
    operadorLogico                 shift and go to state 94
    operator                       shift and go to state 95

state 211

    (68) caseBlock -> DEFAULT COLON . statement_list
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (23) statement -> . return_statement
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (37) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (39) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (40) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (41) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (42) assignment -> . IDENTIFIER ASSIGN expression
    (34) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (90) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (99) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (101) for_statement -> . FOR condicion block
    (102) for_statement -> . FOR block
    (24) package -> . PACKAGE MAIN
    (25) package -> . PACKAGE IDENTIFIER
    (26) import -> . IMPORT STRING
    (27) import -> . IMPORT LPAREN import_list RPAREN
    (64) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (69) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (70) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (125) if_statement -> . IF condicion block
    (126) if_statement -> . IF condicion block ELSE block
    (127) if_statement -> . IF condicion_compleja block
    (128) if_statement -> . IF condicion_compleja block ELSE block
    (77) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (78) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (79) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (98) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (35) var_declaration -> . VAR IDENTIFIER type_name
    (147) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (148) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (80) return_statement -> . RETURN return_values

    IDENTIFIER      shift and go to state 22
    VAR             shift and go to state 23
    TYPE            shift and go to state 24
    FOR             shift and go to state 25
    PACKAGE         shift and go to state 26
    IMPORT          shift and go to state 27
    SWITCH          shift and go to state 28
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    RETURN          shift and go to state 31

    statement_list                 shift and go to state 245
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20
    return_statement               shift and go to state 21

state 212

    (126) if_statement -> IF condicion block ELSE block .

    IDENTIFIER      reduce using rule 126 (if_statement -> IF condicion block ELSE block .)
    VAR             reduce using rule 126 (if_statement -> IF condicion block ELSE block .)
    TYPE            reduce using rule 126 (if_statement -> IF condicion block ELSE block .)
    FOR             reduce using rule 126 (if_statement -> IF condicion block ELSE block .)
    PACKAGE         reduce using rule 126 (if_statement -> IF condicion block ELSE block .)
    IMPORT          reduce using rule 126 (if_statement -> IF condicion block ELSE block .)
    SWITCH          reduce using rule 126 (if_statement -> IF condicion block ELSE block .)
    IF              reduce using rule 126 (if_statement -> IF condicion block ELSE block .)
    FUNC            reduce using rule 126 (if_statement -> IF condicion block ELSE block .)
    RETURN          reduce using rule 126 (if_statement -> IF condicion block ELSE block .)
    $end            reduce using rule 126 (if_statement -> IF condicion block ELSE block .)
    RBRACE          reduce using rule 126 (if_statement -> IF condicion block ELSE block .)
    CASE            reduce using rule 126 (if_statement -> IF condicion block ELSE block .)
    DEFAULT         reduce using rule 126 (if_statement -> IF condicion block ELSE block .)


state 213

    (128) if_statement -> IF condicion_compleja block ELSE block .

    IDENTIFIER      reduce using rule 128 (if_statement -> IF condicion_compleja block ELSE block .)
    VAR             reduce using rule 128 (if_statement -> IF condicion_compleja block ELSE block .)
    TYPE            reduce using rule 128 (if_statement -> IF condicion_compleja block ELSE block .)
    FOR             reduce using rule 128 (if_statement -> IF condicion_compleja block ELSE block .)
    PACKAGE         reduce using rule 128 (if_statement -> IF condicion_compleja block ELSE block .)
    IMPORT          reduce using rule 128 (if_statement -> IF condicion_compleja block ELSE block .)
    SWITCH          reduce using rule 128 (if_statement -> IF condicion_compleja block ELSE block .)
    IF              reduce using rule 128 (if_statement -> IF condicion_compleja block ELSE block .)
    FUNC            reduce using rule 128 (if_statement -> IF condicion_compleja block ELSE block .)
    RETURN          reduce using rule 128 (if_statement -> IF condicion_compleja block ELSE block .)
    $end            reduce using rule 128 (if_statement -> IF condicion_compleja block ELSE block .)
    RBRACE          reduce using rule 128 (if_statement -> IF condicion_compleja block ELSE block .)
    CASE            reduce using rule 128 (if_statement -> IF condicion_compleja block ELSE block .)
    DEFAULT         reduce using rule 128 (if_statement -> IF condicion_compleja block ELSE block .)


state 214

    (87) param -> IDENTIFIER type_name .

    COMMA           reduce using rule 87 (param -> IDENTIFIER type_name .)
    RPAREN          reduce using rule 87 (param -> IDENTIFIER type_name .)


state 215

    (77) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN . block
    (78) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN . return_type LBRACE statement_list RBRACE
    (104) block -> . LBRACE statement_list RBRACE
    (105) block -> . LBRACE RBRACE
    (141) return_type -> . DATATYPE
    (142) return_type -> . LPAREN type_list RPAREN
    (144) return_type -> . empty
    (63) empty -> .

  ! shift/reduce conflict for LBRACE resolved as shift
    LBRACE          shift and go to state 44
    DATATYPE        shift and go to state 221
    LPAREN          shift and go to state 219

  ! LBRACE          [ reduce using rule 63 (empty -> .) ]

    block                          shift and go to state 246
    return_type                    shift and go to state 247
    empty                          shift and go to state 222

state 216

    (86) params -> param COMMA . params
    (85) params -> . param
    (86) params -> . param COMMA params
    (87) param -> . IDENTIFIER type_name
    (88) param -> . identifier_list type_name
    (135) identifier_list -> . IDENTIFIER
    (136) identifier_list -> . IDENTIFIER COMMA identifier_list

    IDENTIFIER      shift and go to state 173

    param                          shift and go to state 176
    params                         shift and go to state 248
    identifier_list                shift and go to state 177

state 217

    (88) param -> identifier_list type_name .

    COMMA           reduce using rule 88 (param -> identifier_list type_name .)
    RPAREN          reduce using rule 88 (param -> identifier_list type_name .)


state 218

    (98) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN . IDENTIFIER LPAREN arguments RPAREN block

    IDENTIFIER      shift and go to state 249


state 219

    (142) return_type -> LPAREN . type_list RPAREN
    (145) type_list -> . DATATYPE
    (146) type_list -> . DATATYPE COMMA type_list

    DATATYPE        shift and go to state 251

    type_list                      shift and go to state 250

state 220

    (129) function_literal -> FUNC LPAREN parameters RPAREN return_type . block
    (104) block -> . LBRACE statement_list RBRACE
    (105) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 44

    block                          shift and go to state 252

state 221

    (141) return_type -> DATATYPE .

    LBRACE          reduce using rule 141 (return_type -> DATATYPE .)
    ASSIGN          reduce using rule 141 (return_type -> DATATYPE .)
    IDENTIFIER      reduce using rule 141 (return_type -> DATATYPE .)
    VAR             reduce using rule 141 (return_type -> DATATYPE .)
    TYPE            reduce using rule 141 (return_type -> DATATYPE .)
    FOR             reduce using rule 141 (return_type -> DATATYPE .)
    PACKAGE         reduce using rule 141 (return_type -> DATATYPE .)
    IMPORT          reduce using rule 141 (return_type -> DATATYPE .)
    SWITCH          reduce using rule 141 (return_type -> DATATYPE .)
    IF              reduce using rule 141 (return_type -> DATATYPE .)
    FUNC            reduce using rule 141 (return_type -> DATATYPE .)
    RETURN          reduce using rule 141 (return_type -> DATATYPE .)
    $end            reduce using rule 141 (return_type -> DATATYPE .)
    RBRACE          reduce using rule 141 (return_type -> DATATYPE .)
    CASE            reduce using rule 141 (return_type -> DATATYPE .)
    DEFAULT         reduce using rule 141 (return_type -> DATATYPE .)
    RPAREN          reduce using rule 141 (return_type -> DATATYPE .)
    COMMA           reduce using rule 141 (return_type -> DATATYPE .)
    RBRACKET        reduce using rule 141 (return_type -> DATATYPE .)


state 222

    (144) return_type -> empty .

    LBRACE          reduce using rule 144 (return_type -> empty .)
    ASSIGN          reduce using rule 144 (return_type -> empty .)
    IDENTIFIER      reduce using rule 144 (return_type -> empty .)
    VAR             reduce using rule 144 (return_type -> empty .)
    TYPE            reduce using rule 144 (return_type -> empty .)
    FOR             reduce using rule 144 (return_type -> empty .)
    PACKAGE         reduce using rule 144 (return_type -> empty .)
    IMPORT          reduce using rule 144 (return_type -> empty .)
    SWITCH          reduce using rule 144 (return_type -> empty .)
    IF              reduce using rule 144 (return_type -> empty .)
    FUNC            reduce using rule 144 (return_type -> empty .)
    RETURN          reduce using rule 144 (return_type -> empty .)
    $end            reduce using rule 144 (return_type -> empty .)
    RBRACE          reduce using rule 144 (return_type -> empty .)
    CASE            reduce using rule 144 (return_type -> empty .)
    DEFAULT         reduce using rule 144 (return_type -> empty .)
    RPAREN          reduce using rule 144 (return_type -> empty .)
    COMMA           reduce using rule 144 (return_type -> empty .)
    RBRACKET        reduce using rule 144 (return_type -> empty .)


state 223

    (130) parameters -> parameters COMMA parameter .

    RPAREN          reduce using rule 130 (parameters -> parameters COMMA parameter .)
    COMMA           reduce using rule 130 (parameters -> parameters COMMA parameter .)


state 224

    (79) function -> FUNC MAIN LPAREN params_opt RPAREN . block
    (104) block -> . LBRACE statement_list RBRACE
    (105) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 44

    block                          shift and go to state 253

state 225

    (94) struct_field_assignment -> IDENTIFIER COLON . expression
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    expression                     shift and go to state 254
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 226

    (91) struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .

    IDENTIFIER      reduce using rule 91 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    VAR             reduce using rule 91 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    TYPE            reduce using rule 91 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    FOR             reduce using rule 91 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    PACKAGE         reduce using rule 91 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    IMPORT          reduce using rule 91 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    SWITCH          reduce using rule 91 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    IF              reduce using rule 91 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    FUNC            reduce using rule 91 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    RETURN          reduce using rule 91 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    $end            reduce using rule 91 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    RBRACE          reduce using rule 91 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    CASE            reduce using rule 91 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    DEFAULT         reduce using rule 91 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)


state 227

    (93) struct_field_assignments -> struct_field_assignments COMMA . struct_field_assignment
    (94) struct_field_assignment -> . IDENTIFIER COLON expression

    IDENTIFIER      shift and go to state 185

    struct_field_assignment        shift and go to state 255

state 228

    (71) mapLiteral -> MAP LBRACKET type_name RBRACKET . type_name LBRACE mapEntries RBRACE
    (137) type_name -> . DATATYPE
    (138) type_name -> . IDENTIFIER
    (139) type_name -> . LBRACKET RBRACKET type_name
    (140) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 88
    IDENTIFIER      shift and go to state 84
    LBRACKET        shift and go to state 159
    FUNC            shift and go to state 89

    type_name                      shift and go to state 256

state 229

    (34) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER . RPAREN

    RPAREN          shift and go to state 257


state 230

    (45) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .
    (89) print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for VAR resolved using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for TYPE resolved using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for FOR resolved using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for IMPORT resolved using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for SWITCH resolved using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for IF resolved using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for FUNC resolved using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for RETURN resolved using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for RBRACE resolved using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for CASE resolved using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IDENTIFIER      reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    VAR             reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TYPE            reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FOR             reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PACKAGE         reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IMPORT          reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SWITCH          reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IF              reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FUNC            reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RETURN          reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    $end            reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    CASE            reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DEFAULT         reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)

  ! IDENTIFIER      [ reduce using rule 89 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! VAR             [ reduce using rule 89 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! TYPE            [ reduce using rule 89 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! FOR             [ reduce using rule 89 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! PACKAGE         [ reduce using rule 89 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! IMPORT          [ reduce using rule 89 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! SWITCH          [ reduce using rule 89 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! IF              [ reduce using rule 89 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! FUNC            [ reduce using rule 89 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! RETURN          [ reduce using rule 89 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! $end            [ reduce using rule 89 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! RBRACE          [ reduce using rule 89 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! CASE            [ reduce using rule 89 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! DEFAULT         [ reduce using rule 89 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]


state 231

    (44) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .

    IDENTIFIER      reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    VAR             reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    TYPE            reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    FOR             reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    PACKAGE         reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    IMPORT          reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    SWITCH          reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    IF              reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    FUNC            reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    RETURN          reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    $end            reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    DOT             reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    LBRACKET        reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    EQ              reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    NEQ             reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    GT              reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    LT              reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    GE              reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    LE              reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    AND             reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    OR              reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    PLUS            reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    MINUS           reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    TIMES           reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    DIVIDE          reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    MOD             reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    LBRACE          reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    COMMA           reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    RBRACE          reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    CASE            reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    DEFAULT         reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    RPAREN          reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    SEMICOLON       reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    RBRACKET        reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    COLON           reduce using rule 44 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)


state 232

    (140) type_name -> FUNC LPAREN parameters RPAREN . return_type
    (141) return_type -> . DATATYPE
    (142) return_type -> . LPAREN type_list RPAREN
    (144) return_type -> . empty
    (63) empty -> .

    DATATYPE        shift and go to state 221
    LPAREN          shift and go to state 219
    ASSIGN          reduce using rule 63 (empty -> .)
    IDENTIFIER      reduce using rule 63 (empty -> .)
    VAR             reduce using rule 63 (empty -> .)
    TYPE            reduce using rule 63 (empty -> .)
    FOR             reduce using rule 63 (empty -> .)
    PACKAGE         reduce using rule 63 (empty -> .)
    IMPORT          reduce using rule 63 (empty -> .)
    SWITCH          reduce using rule 63 (empty -> .)
    IF              reduce using rule 63 (empty -> .)
    FUNC            reduce using rule 63 (empty -> .)
    RETURN          reduce using rule 63 (empty -> .)
    $end            reduce using rule 63 (empty -> .)
    RBRACE          reduce using rule 63 (empty -> .)
    CASE            reduce using rule 63 (empty -> .)
    DEFAULT         reduce using rule 63 (empty -> .)
    LBRACE          reduce using rule 63 (empty -> .)
    RPAREN          reduce using rule 63 (empty -> .)
    COMMA           reduce using rule 63 (empty -> .)
    RBRACKET        reduce using rule 63 (empty -> .)

    return_type                    shift and go to state 258
    empty                          shift and go to state 222

state 233

    (95) struct_field -> IDENTIFIER type_name .

    RBRACE          reduce using rule 95 (struct_field -> IDENTIFIER type_name .)
    IDENTIFIER      reduce using rule 95 (struct_field -> IDENTIFIER type_name .)


state 234

    (90) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .

    IDENTIFIER      reduce using rule 90 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    VAR             reduce using rule 90 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    TYPE            reduce using rule 90 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    FOR             reduce using rule 90 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    PACKAGE         reduce using rule 90 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    IMPORT          reduce using rule 90 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    SWITCH          reduce using rule 90 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    IF              reduce using rule 90 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    FUNC            reduce using rule 90 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    RETURN          reduce using rule 90 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    $end            reduce using rule 90 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    RBRACE          reduce using rule 90 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    CASE            reduce using rule 90 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    DEFAULT         reduce using rule 90 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)


state 235

    (97) struct_fields -> struct_fields struct_field .

    RBRACE          reduce using rule 97 (struct_fields -> struct_fields struct_field .)
    IDENTIFIER      reduce using rule 97 (struct_fields -> struct_fields struct_field .)


state 236

    (99) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression . block
    (46) expression -> expression . comparador expression
    (47) expression -> expression . operadorLogico expression
    (116) expression -> expression . operator expression
    (117) expression -> expression . DOT IDENTIFIER
    (152) expression -> expression . LBRACKET expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (154) expression -> expression . LBRACKET COLON expression RBRACKET
    (155) expression -> expression . LBRACKET expression COLON RBRACKET
    (104) block -> . LBRACE statement_list RBRACE
    (105) block -> . LBRACE RBRACE
    (57) comparador -> . EQ
    (58) comparador -> . NEQ
    (59) comparador -> . GT
    (60) comparador -> . LT
    (61) comparador -> . GE
    (62) comparador -> . LE
    (55) operadorLogico -> . AND
    (56) operadorLogico -> . OR
    (118) operator -> . PLUS
    (119) operator -> . MINUS
    (120) operator -> . TIMES
    (121) operator -> . DIVIDE
    (122) operator -> . MOD

    DOT             shift and go to state 96
    LBRACKET        shift and go to state 97
    LBRACE          shift and go to state 44
    EQ              shift and go to state 98
    NEQ             shift and go to state 99
    GT              shift and go to state 100
    LT              shift and go to state 101
    GE              shift and go to state 102
    LE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110

    block                          shift and go to state 259
    comparador                     shift and go to state 123
    operadorLogico                 shift and go to state 94
    operator                       shift and go to state 95

state 237

    (153) expression -> expression LBRACKET expression COLON expression . RBRACKET
    (46) expression -> expression . comparador expression
    (47) expression -> expression . operadorLogico expression
    (116) expression -> expression . operator expression
    (117) expression -> expression . DOT IDENTIFIER
    (152) expression -> expression . LBRACKET expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (154) expression -> expression . LBRACKET COLON expression RBRACKET
    (155) expression -> expression . LBRACKET expression COLON RBRACKET
    (57) comparador -> . EQ
    (58) comparador -> . NEQ
    (59) comparador -> . GT
    (60) comparador -> . LT
    (61) comparador -> . GE
    (62) comparador -> . LE
    (55) operadorLogico -> . AND
    (56) operadorLogico -> . OR
    (118) operator -> . PLUS
    (119) operator -> . MINUS
    (120) operator -> . TIMES
    (121) operator -> . DIVIDE
    (122) operator -> . MOD

    RBRACKET        shift and go to state 260
    DOT             shift and go to state 96
    LBRACKET        shift and go to state 97
    EQ              shift and go to state 98
    NEQ             shift and go to state 99
    GT              shift and go to state 100
    LT              shift and go to state 101
    GE              shift and go to state 102
    LE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110

    comparador                     shift and go to state 123
    operadorLogico                 shift and go to state 94
    operator                       shift and go to state 95

state 238

    (155) expression -> expression LBRACKET expression COLON RBRACKET .

    DOT             reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    LBRACKET        reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    EQ              reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    NEQ             reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    GT              reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    LT              reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    GE              reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    LE              reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    AND             reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    OR              reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    PLUS            reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    MINUS           reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    TIMES           reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    DIVIDE          reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    MOD             reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    LBRACE          reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    COMMA           reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    IDENTIFIER      reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    VAR             reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    TYPE            reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    FOR             reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    PACKAGE         reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    IMPORT          reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    SWITCH          reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    IF              reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    FUNC            reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    RETURN          reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    $end            reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    RBRACE          reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    CASE            reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    DEFAULT         reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    RPAREN          reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    SEMICOLON       reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    RBRACKET        reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)
    COLON           reduce using rule 155 (expression -> expression LBRACKET expression COLON RBRACKET .)


state 239

    (154) expression -> expression LBRACKET COLON expression RBRACKET .

    DOT             reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    LBRACKET        reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    EQ              reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    NEQ             reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    GT              reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    LT              reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    GE              reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    LE              reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    AND             reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    OR              reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    PLUS            reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    MINUS           reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    TIMES           reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    DIVIDE          reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    MOD             reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    LBRACE          reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    COMMA           reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    IDENTIFIER      reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    VAR             reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    TYPE            reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    FOR             reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    PACKAGE         reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    IMPORT          reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    SWITCH          reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    IF              reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    FUNC            reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    RETURN          reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    $end            reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    RBRACE          reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    CASE            reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    DEFAULT         reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    RPAREN          reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    SEMICOLON       reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    RBRACKET        reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)
    COLON           reduce using rule 154 (expression -> expression LBRACKET COLON expression RBRACKET .)


state 240

    (45) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 261


state 241

    (139) type_name -> LBRACKET RBRACKET type_name .

    LBRACE          reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    RPAREN          reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    COMMA           reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    RBRACKET        reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    IDENTIFIER      reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    VAR             reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    TYPE            reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    FOR             reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    PACKAGE         reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    IMPORT          reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    SWITCH          reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    IF              reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    FUNC            reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    RETURN          reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    $end            reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    ASSIGN          reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    RBRACE          reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    CASE            reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)
    DEFAULT         reduce using rule 139 (type_name -> LBRACKET RBRACKET type_name .)


state 242

    (149) slice_literal -> LBRACKET RBRACKET type_name LBRACE elements . RBRACE
    (150) elements -> elements . COMMA expression

    RBRACE          shift and go to state 262
    COMMA           shift and go to state 263


state 243

    (151) elements -> expression .
    (46) expression -> expression . comparador expression
    (47) expression -> expression . operadorLogico expression
    (116) expression -> expression . operator expression
    (117) expression -> expression . DOT IDENTIFIER
    (152) expression -> expression . LBRACKET expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (154) expression -> expression . LBRACKET COLON expression RBRACKET
    (155) expression -> expression . LBRACKET expression COLON RBRACKET
    (57) comparador -> . EQ
    (58) comparador -> . NEQ
    (59) comparador -> . GT
    (60) comparador -> . LT
    (61) comparador -> . GE
    (62) comparador -> . LE
    (55) operadorLogico -> . AND
    (56) operadorLogico -> . OR
    (118) operator -> . PLUS
    (119) operator -> . MINUS
    (120) operator -> . TIMES
    (121) operator -> . DIVIDE
    (122) operator -> . MOD

    RBRACE          reduce using rule 151 (elements -> expression .)
    COMMA           reduce using rule 151 (elements -> expression .)
    DOT             shift and go to state 96
    LBRACKET        shift and go to state 97
    EQ              shift and go to state 98
    NEQ             shift and go to state 99
    GT              shift and go to state 100
    LT              shift and go to state 101
    GE              shift and go to state 102
    LE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110

    comparador                     shift and go to state 123
    operadorLogico                 shift and go to state 94
    operator                       shift and go to state 95

state 244

    (67) caseBlock -> CASE expression COLON . statement_list
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (23) statement -> . return_statement
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (37) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (39) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (40) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (41) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (42) assignment -> . IDENTIFIER ASSIGN expression
    (34) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (90) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (99) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (101) for_statement -> . FOR condicion block
    (102) for_statement -> . FOR block
    (24) package -> . PACKAGE MAIN
    (25) package -> . PACKAGE IDENTIFIER
    (26) import -> . IMPORT STRING
    (27) import -> . IMPORT LPAREN import_list RPAREN
    (64) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (69) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (70) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (125) if_statement -> . IF condicion block
    (126) if_statement -> . IF condicion block ELSE block
    (127) if_statement -> . IF condicion_compleja block
    (128) if_statement -> . IF condicion_compleja block ELSE block
    (77) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (78) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (79) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (98) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (35) var_declaration -> . VAR IDENTIFIER type_name
    (147) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (148) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (80) return_statement -> . RETURN return_values

    IDENTIFIER      shift and go to state 22
    VAR             shift and go to state 23
    TYPE            shift and go to state 24
    FOR             shift and go to state 25
    PACKAGE         shift and go to state 26
    IMPORT          shift and go to state 27
    SWITCH          shift and go to state 28
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    RETURN          shift and go to state 31

    statement_list                 shift and go to state 264
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20
    return_statement               shift and go to state 21

state 245

    (68) caseBlock -> DEFAULT COLON statement_list .
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (23) statement -> . return_statement
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (37) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (39) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (40) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (41) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (42) assignment -> . IDENTIFIER ASSIGN expression
    (34) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (90) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (99) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (101) for_statement -> . FOR condicion block
    (102) for_statement -> . FOR block
    (24) package -> . PACKAGE MAIN
    (25) package -> . PACKAGE IDENTIFIER
    (26) import -> . IMPORT STRING
    (27) import -> . IMPORT LPAREN import_list RPAREN
    (64) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (69) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (70) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (125) if_statement -> . IF condicion block
    (126) if_statement -> . IF condicion block ELSE block
    (127) if_statement -> . IF condicion_compleja block
    (128) if_statement -> . IF condicion_compleja block ELSE block
    (77) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (78) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (79) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (98) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (35) var_declaration -> . VAR IDENTIFIER type_name
    (147) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (148) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (80) return_statement -> . RETURN return_values

    CASE            reduce using rule 68 (caseBlock -> DEFAULT COLON statement_list .)
    DEFAULT         reduce using rule 68 (caseBlock -> DEFAULT COLON statement_list .)
    RBRACE          reduce using rule 68 (caseBlock -> DEFAULT COLON statement_list .)
    IDENTIFIER      shift and go to state 22
    VAR             shift and go to state 23
    TYPE            shift and go to state 24
    FOR             shift and go to state 25
    PACKAGE         shift and go to state 26
    IMPORT          shift and go to state 27
    SWITCH          shift and go to state 28
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    RETURN          shift and go to state 31

    statement                      shift and go to state 32
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20
    return_statement               shift and go to state 21

state 246

    (77) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .

    IDENTIFIER      reduce using rule 77 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    VAR             reduce using rule 77 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    TYPE            reduce using rule 77 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    FOR             reduce using rule 77 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    PACKAGE         reduce using rule 77 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    IMPORT          reduce using rule 77 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    SWITCH          reduce using rule 77 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    IF              reduce using rule 77 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    FUNC            reduce using rule 77 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    RETURN          reduce using rule 77 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    $end            reduce using rule 77 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    RBRACE          reduce using rule 77 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    CASE            reduce using rule 77 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    DEFAULT         reduce using rule 77 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)


state 247

    (78) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 265


state 248

    (86) params -> param COMMA params .

    RPAREN          reduce using rule 86 (params -> param COMMA params .)


state 249

    (98) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER . LPAREN arguments RPAREN block

    LPAREN          shift and go to state 266


state 250

    (142) return_type -> LPAREN type_list . RPAREN

    RPAREN          shift and go to state 267


state 251

    (145) type_list -> DATATYPE .
    (146) type_list -> DATATYPE . COMMA type_list

    RPAREN          reduce using rule 145 (type_list -> DATATYPE .)
    COMMA           shift and go to state 268


state 252

    (129) function_literal -> FUNC LPAREN parameters RPAREN return_type block .

    IDENTIFIER      reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    VAR             reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    TYPE            reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    FOR             reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    PACKAGE         reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    IMPORT          reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    SWITCH          reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    IF              reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    FUNC            reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    RETURN          reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    $end            reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    DOT             reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    LBRACKET        reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    EQ              reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    NEQ             reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    GT              reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    LT              reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    GE              reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    LE              reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    AND             reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    OR              reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    PLUS            reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    MINUS           reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    TIMES           reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    DIVIDE          reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    MOD             reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    LBRACE          reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    COMMA           reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    RBRACE          reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    CASE            reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    DEFAULT         reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    RPAREN          reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    SEMICOLON       reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    RBRACKET        reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    COLON           reduce using rule 129 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)


state 253

    (79) function -> FUNC MAIN LPAREN params_opt RPAREN block .

    IDENTIFIER      reduce using rule 79 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    VAR             reduce using rule 79 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    TYPE            reduce using rule 79 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    FOR             reduce using rule 79 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    PACKAGE         reduce using rule 79 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    IMPORT          reduce using rule 79 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    SWITCH          reduce using rule 79 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    IF              reduce using rule 79 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    FUNC            reduce using rule 79 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    RETURN          reduce using rule 79 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    $end            reduce using rule 79 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    RBRACE          reduce using rule 79 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    CASE            reduce using rule 79 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    DEFAULT         reduce using rule 79 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)


state 254

    (94) struct_field_assignment -> IDENTIFIER COLON expression .
    (46) expression -> expression . comparador expression
    (47) expression -> expression . operadorLogico expression
    (116) expression -> expression . operator expression
    (117) expression -> expression . DOT IDENTIFIER
    (152) expression -> expression . LBRACKET expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (154) expression -> expression . LBRACKET COLON expression RBRACKET
    (155) expression -> expression . LBRACKET expression COLON RBRACKET
    (57) comparador -> . EQ
    (58) comparador -> . NEQ
    (59) comparador -> . GT
    (60) comparador -> . LT
    (61) comparador -> . GE
    (62) comparador -> . LE
    (55) operadorLogico -> . AND
    (56) operadorLogico -> . OR
    (118) operator -> . PLUS
    (119) operator -> . MINUS
    (120) operator -> . TIMES
    (121) operator -> . DIVIDE
    (122) operator -> . MOD

    RBRACE          reduce using rule 94 (struct_field_assignment -> IDENTIFIER COLON expression .)
    COMMA           reduce using rule 94 (struct_field_assignment -> IDENTIFIER COLON expression .)
    DOT             shift and go to state 96
    LBRACKET        shift and go to state 97
    EQ              shift and go to state 98
    NEQ             shift and go to state 99
    GT              shift and go to state 100
    LT              shift and go to state 101
    GE              shift and go to state 102
    LE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110

    comparador                     shift and go to state 123
    operadorLogico                 shift and go to state 94
    operator                       shift and go to state 95

state 255

    (93) struct_field_assignments -> struct_field_assignments COMMA struct_field_assignment .

    RBRACE          reduce using rule 93 (struct_field_assignments -> struct_field_assignments COMMA struct_field_assignment .)
    COMMA           reduce using rule 93 (struct_field_assignments -> struct_field_assignments COMMA struct_field_assignment .)


state 256

    (71) mapLiteral -> MAP LBRACKET type_name RBRACKET type_name . LBRACE mapEntries RBRACE

    LBRACE          shift and go to state 269


state 257

    (34) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .

    IDENTIFIER      reduce using rule 34 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    VAR             reduce using rule 34 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    TYPE            reduce using rule 34 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    FOR             reduce using rule 34 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    PACKAGE         reduce using rule 34 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    IMPORT          reduce using rule 34 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    SWITCH          reduce using rule 34 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    IF              reduce using rule 34 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    FUNC            reduce using rule 34 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    RETURN          reduce using rule 34 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    $end            reduce using rule 34 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    RBRACE          reduce using rule 34 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    CASE            reduce using rule 34 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    DEFAULT         reduce using rule 34 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)


state 258

    (140) type_name -> FUNC LPAREN parameters RPAREN return_type .

    ASSIGN          reduce using rule 140 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    IDENTIFIER      reduce using rule 140 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    VAR             reduce using rule 140 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    TYPE            reduce using rule 140 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    FOR             reduce using rule 140 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    PACKAGE         reduce using rule 140 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    IMPORT          reduce using rule 140 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    SWITCH          reduce using rule 140 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    IF              reduce using rule 140 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    FUNC            reduce using rule 140 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    RETURN          reduce using rule 140 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    $end            reduce using rule 140 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    RBRACE          reduce using rule 140 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    CASE            reduce using rule 140 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    DEFAULT         reduce using rule 140 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    LBRACE          reduce using rule 140 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    RPAREN          reduce using rule 140 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    COMMA           reduce using rule 140 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    RBRACKET        reduce using rule 140 (type_name -> FUNC LPAREN parameters RPAREN return_type .)


state 259

    (99) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .

    IDENTIFIER      reduce using rule 99 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    VAR             reduce using rule 99 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    TYPE            reduce using rule 99 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    FOR             reduce using rule 99 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    PACKAGE         reduce using rule 99 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    IMPORT          reduce using rule 99 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    SWITCH          reduce using rule 99 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    IF              reduce using rule 99 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    FUNC            reduce using rule 99 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    RETURN          reduce using rule 99 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    $end            reduce using rule 99 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    RBRACE          reduce using rule 99 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    CASE            reduce using rule 99 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    DEFAULT         reduce using rule 99 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)


state 260

    (153) expression -> expression LBRACKET expression COLON expression RBRACKET .

    DOT             reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    LBRACKET        reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    EQ              reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    NEQ             reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    GT              reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    LT              reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    GE              reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    LE              reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    AND             reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    OR              reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    PLUS            reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    MINUS           reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    TIMES           reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    DIVIDE          reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    MOD             reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    LBRACE          reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    IDENTIFIER      reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    VAR             reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    TYPE            reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    FOR             reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    PACKAGE         reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    IMPORT          reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    SWITCH          reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    IF              reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    FUNC            reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    RETURN          reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    $end            reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    RBRACE          reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    CASE            reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    DEFAULT         reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    RPAREN          reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    SEMICOLON       reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    RBRACKET        reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    COLON           reduce using rule 153 (expression -> expression LBRACKET expression COLON expression RBRACKET .)


state 261

    (45) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .

    DOT             reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LBRACKET        reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    EQ              reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    NEQ             reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    GT              reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LT              reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    GE              reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LE              reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    AND             reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    OR              reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PLUS            reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    MINUS           reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TIMES           reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DIVIDE          reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    MOD             reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LBRACE          reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IDENTIFIER      reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    VAR             reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TYPE            reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FOR             reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PACKAGE         reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IMPORT          reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SWITCH          reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IF              reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FUNC            reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RETURN          reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    $end            reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    CASE            reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DEFAULT         reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RPAREN          reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SEMICOLON       reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACKET        reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    COLON           reduce using rule 45 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)


state 262

    (149) slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .

    DOT             reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    LBRACKET        reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    EQ              reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    NEQ             reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    GT              reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    LT              reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    GE              reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    LE              reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    AND             reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    OR              reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    PLUS            reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    MINUS           reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    TIMES           reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    DIVIDE          reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    MOD             reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    LBRACE          reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    COMMA           reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    IDENTIFIER      reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    VAR             reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    TYPE            reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    FOR             reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    PACKAGE         reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    IMPORT          reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    SWITCH          reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    IF              reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    FUNC            reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    RETURN          reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    $end            reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    RBRACE          reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    CASE            reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    DEFAULT         reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    RPAREN          reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    SEMICOLON       reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    RBRACKET        reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    COLON           reduce using rule 149 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)


state 263

    (150) elements -> elements COMMA . expression
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    expression                     shift and go to state 270
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 264

    (67) caseBlock -> CASE expression COLON statement_list .
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (23) statement -> . return_statement
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (37) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (39) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (40) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (41) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (42) assignment -> . IDENTIFIER ASSIGN expression
    (34) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (90) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (99) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (101) for_statement -> . FOR condicion block
    (102) for_statement -> . FOR block
    (24) package -> . PACKAGE MAIN
    (25) package -> . PACKAGE IDENTIFIER
    (26) import -> . IMPORT STRING
    (27) import -> . IMPORT LPAREN import_list RPAREN
    (64) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (69) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (70) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (125) if_statement -> . IF condicion block
    (126) if_statement -> . IF condicion block ELSE block
    (127) if_statement -> . IF condicion_compleja block
    (128) if_statement -> . IF condicion_compleja block ELSE block
    (77) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (78) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (79) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (98) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (35) var_declaration -> . VAR IDENTIFIER type_name
    (147) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (148) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (80) return_statement -> . RETURN return_values

    CASE            reduce using rule 67 (caseBlock -> CASE expression COLON statement_list .)
    DEFAULT         reduce using rule 67 (caseBlock -> CASE expression COLON statement_list .)
    RBRACE          reduce using rule 67 (caseBlock -> CASE expression COLON statement_list .)
    IDENTIFIER      shift and go to state 22
    VAR             shift and go to state 23
    TYPE            shift and go to state 24
    FOR             shift and go to state 25
    PACKAGE         shift and go to state 26
    IMPORT          shift and go to state 27
    SWITCH          shift and go to state 28
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    RETURN          shift and go to state 31

    statement                      shift and go to state 32
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20
    return_statement               shift and go to state 21

state 265

    (78) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE . statement_list RBRACE
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (23) statement -> . return_statement
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (37) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (39) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (40) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (41) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (42) assignment -> . IDENTIFIER ASSIGN expression
    (34) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (90) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (99) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (101) for_statement -> . FOR condicion block
    (102) for_statement -> . FOR block
    (24) package -> . PACKAGE MAIN
    (25) package -> . PACKAGE IDENTIFIER
    (26) import -> . IMPORT STRING
    (27) import -> . IMPORT LPAREN import_list RPAREN
    (64) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (69) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (70) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (125) if_statement -> . IF condicion block
    (126) if_statement -> . IF condicion block ELSE block
    (127) if_statement -> . IF condicion_compleja block
    (128) if_statement -> . IF condicion_compleja block ELSE block
    (77) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (78) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (79) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (98) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (35) var_declaration -> . VAR IDENTIFIER type_name
    (147) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (148) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (80) return_statement -> . RETURN return_values

    IDENTIFIER      shift and go to state 22
    VAR             shift and go to state 23
    TYPE            shift and go to state 24
    FOR             shift and go to state 25
    PACKAGE         shift and go to state 26
    IMPORT          shift and go to state 27
    SWITCH          shift and go to state 28
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    RETURN          shift and go to state 31

    statement_list                 shift and go to state 271
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20
    return_statement               shift and go to state 21

state 266

    (98) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN . arguments RPAREN block
    (30) arguments -> . expression
    (31) arguments -> . arguments COMMA expression
    (32) arguments -> .
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    RPAREN          reduce using rule 32 (arguments -> .)
    COMMA           reduce using rule 32 (arguments -> .)
    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    arguments                      shift and go to state 272
    expression                     shift and go to state 273
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 267

    (142) return_type -> LPAREN type_list RPAREN .

    LBRACE          reduce using rule 142 (return_type -> LPAREN type_list RPAREN .)
    ASSIGN          reduce using rule 142 (return_type -> LPAREN type_list RPAREN .)
    IDENTIFIER      reduce using rule 142 (return_type -> LPAREN type_list RPAREN .)
    VAR             reduce using rule 142 (return_type -> LPAREN type_list RPAREN .)
    TYPE            reduce using rule 142 (return_type -> LPAREN type_list RPAREN .)
    FOR             reduce using rule 142 (return_type -> LPAREN type_list RPAREN .)
    PACKAGE         reduce using rule 142 (return_type -> LPAREN type_list RPAREN .)
    IMPORT          reduce using rule 142 (return_type -> LPAREN type_list RPAREN .)
    SWITCH          reduce using rule 142 (return_type -> LPAREN type_list RPAREN .)
    IF              reduce using rule 142 (return_type -> LPAREN type_list RPAREN .)
    FUNC            reduce using rule 142 (return_type -> LPAREN type_list RPAREN .)
    RETURN          reduce using rule 142 (return_type -> LPAREN type_list RPAREN .)
    $end            reduce using rule 142 (return_type -> LPAREN type_list RPAREN .)
    RBRACE          reduce using rule 142 (return_type -> LPAREN type_list RPAREN .)
    CASE            reduce using rule 142 (return_type -> LPAREN type_list RPAREN .)
    DEFAULT         reduce using rule 142 (return_type -> LPAREN type_list RPAREN .)
    RPAREN          reduce using rule 142 (return_type -> LPAREN type_list RPAREN .)
    COMMA           reduce using rule 142 (return_type -> LPAREN type_list RPAREN .)
    RBRACKET        reduce using rule 142 (return_type -> LPAREN type_list RPAREN .)


state 268

    (146) type_list -> DATATYPE COMMA . type_list
    (145) type_list -> . DATATYPE
    (146) type_list -> . DATATYPE COMMA type_list

    DATATYPE        shift and go to state 251

    type_list                      shift and go to state 274

state 269

    (71) mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE . mapEntries RBRACE
    (72) mapEntries -> . mapEntry
    (73) mapEntries -> . mapEntry COMMA mapEntries
    (74) mapEntry -> . value_key COLON value_key
    (75) value_key -> . expression
    (76) value_key -> . STRING
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    STRING          shift and go to state 279
    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    mapEntries                     shift and go to state 275
    mapEntry                       shift and go to state 276
    value_key                      shift and go to state 277
    expression                     shift and go to state 278
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 270

    (150) elements -> elements COMMA expression .
    (46) expression -> expression . comparador expression
    (47) expression -> expression . operadorLogico expression
    (116) expression -> expression . operator expression
    (117) expression -> expression . DOT IDENTIFIER
    (152) expression -> expression . LBRACKET expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (154) expression -> expression . LBRACKET COLON expression RBRACKET
    (155) expression -> expression . LBRACKET expression COLON RBRACKET
    (57) comparador -> . EQ
    (58) comparador -> . NEQ
    (59) comparador -> . GT
    (60) comparador -> . LT
    (61) comparador -> . GE
    (62) comparador -> . LE
    (55) operadorLogico -> . AND
    (56) operadorLogico -> . OR
    (118) operator -> . PLUS
    (119) operator -> . MINUS
    (120) operator -> . TIMES
    (121) operator -> . DIVIDE
    (122) operator -> . MOD

    RBRACE          reduce using rule 150 (elements -> elements COMMA expression .)
    COMMA           reduce using rule 150 (elements -> elements COMMA expression .)
    DOT             shift and go to state 96
    LBRACKET        shift and go to state 97
    EQ              shift and go to state 98
    NEQ             shift and go to state 99
    GT              shift and go to state 100
    LT              shift and go to state 101
    GE              shift and go to state 102
    LE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110

    comparador                     shift and go to state 123
    operadorLogico                 shift and go to state 94
    operator                       shift and go to state 95

state 271

    (78) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list . RBRACE
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (21) statement -> . slice_declaration
    (22) statement -> . declare_assign
    (23) statement -> . return_statement
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (37) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (39) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (40) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (41) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (42) assignment -> . IDENTIFIER ASSIGN expression
    (34) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (89) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (90) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (99) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (101) for_statement -> . FOR condicion block
    (102) for_statement -> . FOR block
    (24) package -> . PACKAGE MAIN
    (25) package -> . PACKAGE IDENTIFIER
    (26) import -> . IMPORT STRING
    (27) import -> . IMPORT LPAREN import_list RPAREN
    (64) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (69) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (70) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (125) if_statement -> . IF condicion block
    (126) if_statement -> . IF condicion block ELSE block
    (127) if_statement -> . IF condicion_compleja block
    (128) if_statement -> . IF condicion_compleja block ELSE block
    (77) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (78) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (79) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (98) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (35) var_declaration -> . VAR IDENTIFIER type_name
    (147) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (148) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (80) return_statement -> . RETURN return_values

    RBRACE          shift and go to state 280
    IDENTIFIER      shift and go to state 22
    VAR             shift and go to state 23
    TYPE            shift and go to state 24
    FOR             shift and go to state 25
    PACKAGE         shift and go to state 26
    IMPORT          shift and go to state 27
    SWITCH          shift and go to state 28
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    RETURN          shift and go to state 31

    statement                      shift and go to state 32
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    slice_declaration              shift and go to state 19
    declare_assign                 shift and go to state 20
    return_statement               shift and go to state 21

state 272

    (98) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments . RPAREN block
    (31) arguments -> arguments . COMMA expression

    RPAREN          shift and go to state 281
    COMMA           shift and go to state 282


state 273

    (30) arguments -> expression .
    (46) expression -> expression . comparador expression
    (47) expression -> expression . operadorLogico expression
    (116) expression -> expression . operator expression
    (117) expression -> expression . DOT IDENTIFIER
    (152) expression -> expression . LBRACKET expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (154) expression -> expression . LBRACKET COLON expression RBRACKET
    (155) expression -> expression . LBRACKET expression COLON RBRACKET
    (57) comparador -> . EQ
    (58) comparador -> . NEQ
    (59) comparador -> . GT
    (60) comparador -> . LT
    (61) comparador -> . GE
    (62) comparador -> . LE
    (55) operadorLogico -> . AND
    (56) operadorLogico -> . OR
    (118) operator -> . PLUS
    (119) operator -> . MINUS
    (120) operator -> . TIMES
    (121) operator -> . DIVIDE
    (122) operator -> . MOD

    RPAREN          reduce using rule 30 (arguments -> expression .)
    COMMA           reduce using rule 30 (arguments -> expression .)
    DOT             shift and go to state 96
    LBRACKET        shift and go to state 97
    EQ              shift and go to state 98
    NEQ             shift and go to state 99
    GT              shift and go to state 100
    LT              shift and go to state 101
    GE              shift and go to state 102
    LE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110

    comparador                     shift and go to state 123
    operadorLogico                 shift and go to state 94
    operator                       shift and go to state 95

state 274

    (146) type_list -> DATATYPE COMMA type_list .

    RPAREN          reduce using rule 146 (type_list -> DATATYPE COMMA type_list .)


state 275

    (71) mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries . RBRACE

    RBRACE          shift and go to state 283


state 276

    (72) mapEntries -> mapEntry .
    (73) mapEntries -> mapEntry . COMMA mapEntries

    RBRACE          reduce using rule 72 (mapEntries -> mapEntry .)
    COMMA           shift and go to state 284


state 277

    (74) mapEntry -> value_key . COLON value_key

    COLON           shift and go to state 285


state 278

    (75) value_key -> expression .
    (46) expression -> expression . comparador expression
    (47) expression -> expression . operadorLogico expression
    (116) expression -> expression . operator expression
    (117) expression -> expression . DOT IDENTIFIER
    (152) expression -> expression . LBRACKET expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (154) expression -> expression . LBRACKET COLON expression RBRACKET
    (155) expression -> expression . LBRACKET expression COLON RBRACKET
    (57) comparador -> . EQ
    (58) comparador -> . NEQ
    (59) comparador -> . GT
    (60) comparador -> . LT
    (61) comparador -> . GE
    (62) comparador -> . LE
    (55) operadorLogico -> . AND
    (56) operadorLogico -> . OR
    (118) operator -> . PLUS
    (119) operator -> . MINUS
    (120) operator -> . TIMES
    (121) operator -> . DIVIDE
    (122) operator -> . MOD

    COLON           reduce using rule 75 (value_key -> expression .)
    COMMA           reduce using rule 75 (value_key -> expression .)
    RBRACE          reduce using rule 75 (value_key -> expression .)
    DOT             shift and go to state 96
    LBRACKET        shift and go to state 97
    EQ              shift and go to state 98
    NEQ             shift and go to state 99
    GT              shift and go to state 100
    LT              shift and go to state 101
    GE              shift and go to state 102
    LE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110

    comparador                     shift and go to state 123
    operadorLogico                 shift and go to state 94
    operator                       shift and go to state 95

state 279

    (76) value_key -> STRING .
    (109) expression -> STRING .

  ! reduce/reduce conflict for COLON resolved using rule 76 (value_key -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 76 (value_key -> STRING .)
  ! reduce/reduce conflict for RBRACE resolved using rule 76 (value_key -> STRING .)
    COLON           reduce using rule 76 (value_key -> STRING .)
    COMMA           reduce using rule 76 (value_key -> STRING .)
    RBRACE          reduce using rule 76 (value_key -> STRING .)
    DOT             reduce using rule 109 (expression -> STRING .)
    LBRACKET        reduce using rule 109 (expression -> STRING .)
    EQ              reduce using rule 109 (expression -> STRING .)
    NEQ             reduce using rule 109 (expression -> STRING .)
    GT              reduce using rule 109 (expression -> STRING .)
    LT              reduce using rule 109 (expression -> STRING .)
    GE              reduce using rule 109 (expression -> STRING .)
    LE              reduce using rule 109 (expression -> STRING .)
    AND             reduce using rule 109 (expression -> STRING .)
    OR              reduce using rule 109 (expression -> STRING .)
    PLUS            reduce using rule 109 (expression -> STRING .)
    MINUS           reduce using rule 109 (expression -> STRING .)
    TIMES           reduce using rule 109 (expression -> STRING .)
    DIVIDE          reduce using rule 109 (expression -> STRING .)
    MOD             reduce using rule 109 (expression -> STRING .)

  ! COLON           [ reduce using rule 109 (expression -> STRING .) ]
  ! COMMA           [ reduce using rule 109 (expression -> STRING .) ]
  ! RBRACE          [ reduce using rule 109 (expression -> STRING .) ]


state 280

    (78) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .

    IDENTIFIER      reduce using rule 78 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    VAR             reduce using rule 78 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    TYPE            reduce using rule 78 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    FOR             reduce using rule 78 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    PACKAGE         reduce using rule 78 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    IMPORT          reduce using rule 78 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    SWITCH          reduce using rule 78 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    IF              reduce using rule 78 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    FUNC            reduce using rule 78 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 78 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    $end            reduce using rule 78 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 78 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    CASE            reduce using rule 78 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    DEFAULT         reduce using rule 78 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)


state 281

    (98) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN . block
    (104) block -> . LBRACE statement_list RBRACE
    (105) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 44

    block                          shift and go to state 286

state 282

    (31) arguments -> arguments COMMA . expression
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    expression                     shift and go to state 287
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 283

    (71) mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .

    IDENTIFIER      reduce using rule 71 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    VAR             reduce using rule 71 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    TYPE            reduce using rule 71 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    FOR             reduce using rule 71 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    PACKAGE         reduce using rule 71 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    IMPORT          reduce using rule 71 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    SWITCH          reduce using rule 71 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    IF              reduce using rule 71 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    FUNC            reduce using rule 71 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    RETURN          reduce using rule 71 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    $end            reduce using rule 71 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    RBRACE          reduce using rule 71 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    CASE            reduce using rule 71 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    DEFAULT         reduce using rule 71 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)


state 284

    (73) mapEntries -> mapEntry COMMA . mapEntries
    (72) mapEntries -> . mapEntry
    (73) mapEntries -> . mapEntry COMMA mapEntries
    (74) mapEntry -> . value_key COLON value_key
    (75) value_key -> . expression
    (76) value_key -> . STRING
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    STRING          shift and go to state 279
    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    mapEntry                       shift and go to state 276
    mapEntries                     shift and go to state 288
    value_key                      shift and go to state 277
    expression                     shift and go to state 278
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 285

    (74) mapEntry -> value_key COLON . value_key
    (75) value_key -> . expression
    (76) value_key -> . STRING
    (46) expression -> . expression comparador expression
    (47) expression -> . expression operadorLogico expression
    (106) expression -> . NUMBER
    (107) expression -> . IDENTIFIER
    (108) expression -> . RUNE
    (109) expression -> . STRING
    (110) expression -> . RAW_STRING
    (111) expression -> . TRUE
    (112) expression -> . FALSE
    (113) expression -> . NIL
    (114) expression -> . slice_literal
    (115) expression -> . llamarFuncion
    (116) expression -> . expression operator expression
    (117) expression -> . expression DOT IDENTIFIER
    (123) expression -> . MINUS expression
    (124) expression -> . LPAREN expression RPAREN
    (143) expression -> . function_literal
    (152) expression -> . expression LBRACKET expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (154) expression -> . expression LBRACKET COLON expression RBRACKET
    (155) expression -> . expression LBRACKET expression COLON RBRACKET
    (149) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (44) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (45) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (129) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    STRING          shift and go to state 279
    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 65
    RUNE            shift and go to state 47
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 58
    FUNC            shift and go to state 59

    value_key                      shift and go to state 289
    expression                     shift and go to state 278
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54
    function_literal               shift and go to state 57

state 286

    (98) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .

    IDENTIFIER      reduce using rule 98 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    VAR             reduce using rule 98 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    TYPE            reduce using rule 98 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    FOR             reduce using rule 98 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    PACKAGE         reduce using rule 98 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    IMPORT          reduce using rule 98 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    SWITCH          reduce using rule 98 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    IF              reduce using rule 98 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    FUNC            reduce using rule 98 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    RETURN          reduce using rule 98 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    $end            reduce using rule 98 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    RBRACE          reduce using rule 98 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    CASE            reduce using rule 98 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    DEFAULT         reduce using rule 98 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)


state 287

    (31) arguments -> arguments COMMA expression .
    (46) expression -> expression . comparador expression
    (47) expression -> expression . operadorLogico expression
    (116) expression -> expression . operator expression
    (117) expression -> expression . DOT IDENTIFIER
    (152) expression -> expression . LBRACKET expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (154) expression -> expression . LBRACKET COLON expression RBRACKET
    (155) expression -> expression . LBRACKET expression COLON RBRACKET
    (57) comparador -> . EQ
    (58) comparador -> . NEQ
    (59) comparador -> . GT
    (60) comparador -> . LT
    (61) comparador -> . GE
    (62) comparador -> . LE
    (55) operadorLogico -> . AND
    (56) operadorLogico -> . OR
    (118) operator -> . PLUS
    (119) operator -> . MINUS
    (120) operator -> . TIMES
    (121) operator -> . DIVIDE
    (122) operator -> . MOD

    RPAREN          reduce using rule 31 (arguments -> arguments COMMA expression .)
    COMMA           reduce using rule 31 (arguments -> arguments COMMA expression .)
    DOT             shift and go to state 96
    LBRACKET        shift and go to state 97
    EQ              shift and go to state 98
    NEQ             shift and go to state 99
    GT              shift and go to state 100
    LT              shift and go to state 101
    GE              shift and go to state 102
    LE              shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110

    comparador                     shift and go to state 123
    operadorLogico                 shift and go to state 94
    operator                       shift and go to state 95

state 288

    (73) mapEntries -> mapEntry COMMA mapEntries .

    RBRACE          reduce using rule 73 (mapEntries -> mapEntry COMMA mapEntries .)


state 289

    (74) mapEntry -> value_key COLON value_key .

    COMMA           reduce using rule 74 (mapEntry -> value_key COLON value_key .)
    RBRACE          reduce using rule 74 (mapEntry -> value_key COLON value_key .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOT in state 45 resolved as shift
WARNING: shift/reduce conflict for DOT in state 65 resolved as shift
WARNING: shift/reduce conflict for DOT in state 73 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 83 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 128 resolved as shift
WARNING: shift/reduce conflict for DATATYPE in state 128 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 128 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 128 resolved as shift
WARNING: shift/reduce conflict for DOT in state 147 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 147 resolved as shift
WARNING: shift/reduce conflict for EQ in state 147 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 147 resolved as shift
WARNING: shift/reduce conflict for GT in state 147 resolved as shift
WARNING: shift/reduce conflict for LT in state 147 resolved as shift
WARNING: shift/reduce conflict for GE in state 147 resolved as shift
WARNING: shift/reduce conflict for LE in state 147 resolved as shift
WARNING: shift/reduce conflict for AND in state 147 resolved as shift
WARNING: shift/reduce conflict for OR in state 147 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 147 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 147 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 147 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 147 resolved as shift
WARNING: shift/reduce conflict for MOD in state 147 resolved as shift
WARNING: shift/reduce conflict for DOT in state 148 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 148 resolved as shift
WARNING: shift/reduce conflict for EQ in state 148 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 148 resolved as shift
WARNING: shift/reduce conflict for GT in state 148 resolved as shift
WARNING: shift/reduce conflict for LT in state 148 resolved as shift
WARNING: shift/reduce conflict for GE in state 148 resolved as shift
WARNING: shift/reduce conflict for LE in state 148 resolved as shift
WARNING: shift/reduce conflict for AND in state 148 resolved as shift
WARNING: shift/reduce conflict for OR in state 148 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 148 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 148 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 148 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 148 resolved as shift
WARNING: shift/reduce conflict for MOD in state 148 resolved as shift
WARNING: shift/reduce conflict for DOT in state 149 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 149 resolved as shift
WARNING: shift/reduce conflict for EQ in state 149 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 149 resolved as shift
WARNING: shift/reduce conflict for GT in state 149 resolved as shift
WARNING: shift/reduce conflict for LT in state 149 resolved as shift
WARNING: shift/reduce conflict for GE in state 149 resolved as shift
WARNING: shift/reduce conflict for LE in state 149 resolved as shift
WARNING: shift/reduce conflict for AND in state 149 resolved as shift
WARNING: shift/reduce conflict for OR in state 149 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 149 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 149 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 149 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 149 resolved as shift
WARNING: shift/reduce conflict for MOD in state 149 resolved as shift
WARNING: shift/reduce conflict for DATATYPE in state 161 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 161 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 161 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 161 resolved as shift
WARNING: shift/reduce conflict for DOT in state 168 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 168 resolved as shift
WARNING: shift/reduce conflict for EQ in state 168 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 168 resolved as shift
WARNING: shift/reduce conflict for GT in state 168 resolved as shift
WARNING: shift/reduce conflict for LT in state 168 resolved as shift
WARNING: shift/reduce conflict for GE in state 168 resolved as shift
WARNING: shift/reduce conflict for LE in state 168 resolved as shift
WARNING: shift/reduce conflict for AND in state 168 resolved as shift
WARNING: shift/reduce conflict for OR in state 168 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 168 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 168 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 168 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 168 resolved as shift
WARNING: shift/reduce conflict for MOD in state 168 resolved as shift
WARNING: shift/reduce conflict for DATATYPE in state 173 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 173 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 173 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 173 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 178 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 215 resolved as shift
WARNING: reduce/reduce conflict in state 76 resolved using rule (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal)
WARNING: rejected rule (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal) in state 76
WARNING: reduce/reduce conflict in state 76 resolved using rule (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal)
WARNING: rejected rule (expression -> slice_literal) in state 76
WARNING: reduce/reduce conflict in state 147 resolved using rule (expression -> expression comparador expression)
WARNING: rejected rule (condicion -> expression comparador expression) in state 147
WARNING: reduce/reduce conflict in state 194 resolved using rule (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion)
WARNING: rejected rule (expression -> llamarFuncion) in state 194
WARNING: reduce/reduce conflict in state 195 resolved using rule (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal)
WARNING: rejected rule (expression -> slice_literal) in state 195
WARNING: reduce/reduce conflict in state 196 resolved using rule (type_name -> LBRACKET RBRACKET type_name)
WARNING: rejected rule (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name) in state 196
WARNING: reduce/reduce conflict in state 230 resolved using rule (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN)
WARNING: rejected rule (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN) in state 230
WARNING: reduce/reduce conflict in state 279 resolved using rule (value_key -> STRING)
WARNING: rejected rule (expression -> STRING) in state 279
WARNING: Rule (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal) is never reduced
WARNING: Rule (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name) is never reduced
WARNING: Rule (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN) is never reduced
