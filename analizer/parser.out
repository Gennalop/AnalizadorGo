Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CONTINUE
    DEFER
    FALLTHROUGH
    GO
    INTERFACE
    SELECT
    STRING_UNCLOSED

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list_opt -> statement_list
Rule 3     statement_list_opt -> <empty>
Rule 4     statement_list -> statement
Rule 5     statement_list -> statement_list statement
Rule 6     statement -> assignment
Rule 7     statement -> input
Rule 8     statement -> llamarFuncion
Rule 9     statement -> struct_definition
Rule 10    statement -> for_statement
Rule 11    statement -> package
Rule 12    statement -> import
Rule 13    statement -> switch
Rule 14    statement -> map
Rule 15    statement -> if_statement
Rule 16    statement -> function
Rule 17    statement -> method_definition
Rule 18    statement -> function_literal
Rule 19    statement -> var_declaration
Rule 20    statement -> slice_declaration
Rule 21    statement -> declare_assign
Rule 22    statement -> return_statement
Rule 23    package -> PACKAGE MAIN
Rule 24    package -> PACKAGE IDENTIFIER
Rule 25    import -> IMPORT STRING
Rule 26    import -> IMPORT LPAREN import_list RPAREN
Rule 27    import_list -> STRING
Rule 28    import_list -> import_list STRING
Rule 29    arguments -> expression
Rule 30    arguments -> arguments COMMA expression
Rule 31    arguments -> <empty>
Rule 32    const_declaration -> CONST IDENTIFIER ASSIGN expression
Rule 33    input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
Rule 34    var_declaration -> VAR IDENTIFIER type_name
Rule 35    assignment -> IDENTIFIER DECLARE_ASSIGN expression
Rule 36    assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal
Rule 37    assignment -> VAR IDENTIFIER type_name ASSIGN expression
Rule 38    assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion
Rule 39    assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal
Rule 40    assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal
Rule 41    assignment -> IDENTIFIER ASSIGN expression
Rule 42    llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN
Rule 43    llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
Rule 44    llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
Rule 45    argument_list -> expression
Rule 46    argument_list -> argument_list COMMA expression
Rule 47    argument_list_opt -> argument_list
Rule 48    argument_list_opt -> <empty>
Rule 49    condicion -> expression comparador expression
Rule 50    condicion_compleja -> condicion operadorLogico condicion
Rule 51    condicion_compleja -> condicion operadorLogico condicion_compleja
Rule 52    operadorLogico -> AND
Rule 53    operadorLogico -> OR
Rule 54    comparador -> EQ
Rule 55    comparador -> NEQ
Rule 56    comparador -> GT
Rule 57    comparador -> LT
Rule 58    comparador -> GE
Rule 59    comparador -> LE
Rule 60    empty -> <empty>
Rule 61    switch -> SWITCH expression LBRACE caseBlocks RBRACE
Rule 62    caseBlocks -> caseBlock
Rule 63    caseBlocks -> caseBlock caseBlocks
Rule 64    caseBlock -> CASE expression COLON statement_list
Rule 65    caseBlock -> DEFAULT COLON statement_list
Rule 66    map -> IDENTIFIER DECLARE_ASSIGN mapLiteral
Rule 67    map -> VAR IDENTIFIER ASSIGN mapLiteral
Rule 68    mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE
Rule 69    mapEntries -> mapEntry
Rule 70    mapEntries -> mapEntry COMMA mapEntries
Rule 71    mapEntry -> value_key COLON value_key
Rule 72    value_key -> expression
Rule 73    value_key -> STRING
Rule 74    function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block
Rule 75    function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
Rule 76    function -> FUNC MAIN LPAREN params_opt RPAREN block
Rule 77    return_statement -> RETURN return_values
Rule 78    return_values -> expression
Rule 79    return_values -> expression COMMA return_values
Rule 80    params_opt -> params
Rule 81    params_opt -> <empty>
Rule 82    params -> param
Rule 83    params -> param COMMA params
Rule 84    param -> IDENTIFIER type_name
Rule 85    param -> identifier_list type_name
Rule 86    struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
Rule 87    struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE
Rule 88    struct_field_assignments -> struct_field_assignment
Rule 89    struct_field_assignments -> struct_field_assignments COMMA struct_field_assignment
Rule 90    struct_field_assignment -> IDENTIFIER COLON expression
Rule 91    struct_field -> IDENTIFIER type_name
Rule 92    struct_fields -> struct_field
Rule 93    struct_fields -> struct_fields struct_field
Rule 94    method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
Rule 95    for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
Rule 96    shortAssignment -> identifier_list DECLARE_ASSIGN expression
Rule 97    for_statement -> FOR condicion block
Rule 98    for_statement -> FOR block
Rule 99    for_range_clause -> shortAssignment RANGE expression
Rule 100   block -> LBRACE statement_list RBRACE
Rule 101   block -> LBRACE RBRACE
Rule 102   expression -> NUMBER
Rule 103   expression -> IDENTIFIER
Rule 104   expression -> RUNE
Rule 105   expression -> STRING
Rule 106   expression -> RAW_STRING
Rule 107   expression -> TRUE
Rule 108   expression -> FALSE
Rule 109   expression -> NIL
Rule 110   expression -> slice_literal
Rule 111   expression -> IDENTIFIER DOT IDENTIFIER
Rule 112   expression -> llamarFuncion
Rule 113   expression -> expression operadorLogico expression
Rule 114   expression -> expression comparador expression
Rule 115   expression -> expression operator expression
Rule 116   operator -> PLUS
Rule 117   operator -> MINUS
Rule 118   operator -> TIMES
Rule 119   operator -> DIVIDE
Rule 120   operator -> MOD
Rule 121   expression -> MINUS expression
Rule 122   expression -> LPAREN expression RPAREN
Rule 123   if_statement -> IF condicion block
Rule 124   if_statement -> IF condicion block ELSE block
Rule 125   if_statement -> IF condicion_compleja block
Rule 126   if_statement -> IF condicion_compleja block ELSE block
Rule 127   function_literal -> FUNC LPAREN parameters RPAREN return_type block
Rule 128   parameters -> parameters COMMA parameter
Rule 129   parameters -> parameter
Rule 130   parameters -> empty
Rule 131   parameter -> IDENTIFIER type_name
Rule 132   parameter -> identifier_list type_name
Rule 133   identifier_list -> IDENTIFIER
Rule 134   identifier_list -> IDENTIFIER COMMA identifier_list
Rule 135   type_name -> DATATYPE
Rule 136   type_name -> IDENTIFIER
Rule 137   type_name -> LBRACKET RBRACKET type_name
Rule 138   type_name -> FUNC LPAREN parameters RPAREN return_type
Rule 139   return_type -> DATATYPE
Rule 140   return_type -> LPAREN type_list RPAREN
Rule 141   expression -> function_literal
Rule 142   return_type -> empty
Rule 143   type_list -> DATATYPE
Rule 144   type_list -> DATATYPE COMMA type_list
Rule 145   slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name
Rule 146   declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal
Rule 147   slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE
Rule 148   elements -> elements COMMA expression
Rule 149   elements -> expression
Rule 150   expression -> expression LBRACKET expression RBRACKET
Rule 151   expression -> expression LBRACKET expression COLON expression RBRACKET
Rule 152   expression -> expression LBRACKET COLON expression RBRACKET
Rule 153   expression -> expression LBRACKET expression COLON RBRACKET

Terminals, with rules where they appear

AMPERSAND            : 33
AND                  : 52
ASSIGN               : 32 37 38 40 41 67
BREAK                : 
CASE                 : 64
COLON                : 64 65 71 90 151 152 153
COMMA                : 30 43 46 70 79 83 89 128 134 144 148
CONST                : 32
CONTINUE             : 
DATATYPE             : 135 139 143 144
DECLARE_ASSIGN       : 35 36 39 66 96 146
DEFAULT              : 65
DEFER                : 
DIVIDE               : 119
DOT                  : 33 44 111
ELSE                 : 124 126
EQ                   : 54
FALLTHROUGH          : 
FALSE                : 108
FOR                  : 95 97 98
FUNC                 : 74 75 76 94 127 138
GE                   : 58
GO                   : 
GT                   : 56
IDENTIFIER           : 24 32 33 33 33 34 35 36 37 38 39 40 41 42 43 44 44 66 67 74 75 84 86 87 90 91 94 94 94 103 111 111 131 133 134 136 145 146
IF                   : 123 124 125 126
IMPORT               : 25 26
INTERFACE            : 
LBRACE               : 61 68 75 86 87 100 101 147
LBRACKET             : 68 137 145 147 150 151 152 153
LE                   : 59
LPAREN               : 26 33 42 43 44 74 75 76 94 94 122 127 138 140
LT                   : 57
MAIN                 : 23 76
MAP                  : 68
MINUS                : 117 121
MOD                  : 120
NEQ                  : 55
NIL                  : 109
NUMBER               : 102
OR                   : 53
PACKAGE              : 23 24
PLUS                 : 116
RANGE                : 99
RAW_STRING           : 106
RBRACE               : 61 68 75 86 87 100 101 147
RBRACKET             : 68 137 145 147 150 151 152 153
RETURN               : 77
RPAREN               : 26 33 42 43 44 74 75 76 94 94 122 127 138 140
RUNE                 : 104
SELECT               : 
SEMICOLON            : 95 95
STRING               : 25 27 28 73 105
STRING_UNCLOSED      : 
STRUCT               : 86
SWITCH               : 61
TIMES                : 118
TRUE                 : 107
TYPE                 : 86
VAR                  : 34 37 38 40 67 145
error                : 

Nonterminals, with rules where they appear

argument_list        : 46 47
argument_list_opt    : 42 43 44
arguments            : 30 94
assignment           : 6
block                : 74 76 94 95 97 98 123 124 124 125 126 126 127
caseBlock            : 62 63
caseBlocks           : 61 63
comparador           : 49 114
condicion            : 50 50 51 95 97 123 124
condicion_compleja   : 51 125 126
const_declaration    : 
declare_assign       : 21
elements             : 147 148
empty                : 130 142
expression           : 29 30 32 35 37 41 43 45 46 49 49 61 64 72 78 79 90 95 96 99 113 113 114 114 115 115 121 122 148 149 150 150 151 151 151 152 152 153 153
for_range_clause     : 
for_statement        : 10
function             : 16
function_literal     : 18 141
identifier_list      : 85 96 132 134
if_statement         : 15
import               : 12
import_list          : 26 28
input                : 7
llamarFuncion        : 8 38 112
map                  : 14
mapEntries           : 68 70
mapEntry             : 69 70
mapLiteral           : 66 67
method_definition    : 17
operadorLogico       : 50 51 113
operator             : 115
package              : 11
param                : 82 83
parameter            : 128 129
parameters           : 127 128 138
params               : 80 83
params_opt           : 74 75 76
program              : 0
return_statement     : 22
return_type          : 75 127 138
return_values        : 77 79
shortAssignment      : 95 99
slice_declaration    : 20
slice_literal        : 39 40 110 146
statement            : 4 5
statement_list       : 1 2 5 64 65 75 100
statement_list_opt   : 
struct_definition    : 9
struct_field         : 92 93
struct_field_assignment : 88 89
struct_field_assignments : 87 89
struct_fields        : 86 93
struct_literal       : 36
switch               : 13
type_list            : 140 144
type_name            : 34 37 38 40 68 68 84 85 91 131 132 137 145 147
value_key            : 71 71
var_declaration      : 19

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . struct_definition
    (10) statement -> . for_statement
    (11) statement -> . package
    (12) statement -> . import
    (13) statement -> . switch
    (14) statement -> . map
    (15) statement -> . if_statement
    (16) statement -> . function
    (17) statement -> . method_definition
    (18) statement -> . function_literal
    (19) statement -> . var_declaration
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (22) statement -> . return_statement
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (39) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (40) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (41) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (86) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (95) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (97) for_statement -> . FOR condicion block
    (98) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (61) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (66) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (67) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (123) if_statement -> . IF condicion block
    (124) if_statement -> . IF condicion block ELSE block
    (125) if_statement -> . IF condicion_compleja block
    (126) if_statement -> . IF condicion_compleja block ELSE block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (76) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (94) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER type_name
    (145) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (146) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (77) return_statement -> . RETURN return_values

    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29
    RETURN          shift and go to state 30

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    struct_definition              shift and go to state 7
    for_statement                  shift and go to state 8
    package                        shift and go to state 9
    import                         shift and go to state 10
    switch                         shift and go to state 11
    map                            shift and go to state 12
    if_statement                   shift and go to state 13
    function                       shift and go to state 14
    method_definition              shift and go to state 15
    function_literal               shift and go to state 16
    var_declaration                shift and go to state 17
    slice_declaration              shift and go to state 18
    declare_assign                 shift and go to state 19
    return_statement               shift and go to state 20

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . struct_definition
    (10) statement -> . for_statement
    (11) statement -> . package
    (12) statement -> . import
    (13) statement -> . switch
    (14) statement -> . map
    (15) statement -> . if_statement
    (16) statement -> . function
    (17) statement -> . method_definition
    (18) statement -> . function_literal
    (19) statement -> . var_declaration
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (22) statement -> . return_statement
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (39) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (40) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (41) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (86) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (95) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (97) for_statement -> . FOR condicion block
    (98) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (61) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (66) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (67) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (123) if_statement -> . IF condicion block
    (124) if_statement -> . IF condicion block ELSE block
    (125) if_statement -> . IF condicion_compleja block
    (126) if_statement -> . IF condicion_compleja block ELSE block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (76) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (94) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER type_name
    (145) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (146) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (77) return_statement -> . RETURN return_values

    $end            reduce using rule 1 (program -> statement_list .)
    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29
    RETURN          shift and go to state 30

    statement                      shift and go to state 31
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    struct_definition              shift and go to state 7
    for_statement                  shift and go to state 8
    package                        shift and go to state 9
    import                         shift and go to state 10
    switch                         shift and go to state 11
    map                            shift and go to state 12
    if_statement                   shift and go to state 13
    function                       shift and go to state 14
    method_definition              shift and go to state 15
    function_literal               shift and go to state 16
    var_declaration                shift and go to state 17
    slice_declaration              shift and go to state 18
    declare_assign                 shift and go to state 19
    return_statement               shift and go to state 20

state 3

    (4) statement_list -> statement .

    IDENTIFIER      reduce using rule 4 (statement_list -> statement .)
    VAR             reduce using rule 4 (statement_list -> statement .)
    TYPE            reduce using rule 4 (statement_list -> statement .)
    FOR             reduce using rule 4 (statement_list -> statement .)
    PACKAGE         reduce using rule 4 (statement_list -> statement .)
    IMPORT          reduce using rule 4 (statement_list -> statement .)
    SWITCH          reduce using rule 4 (statement_list -> statement .)
    IF              reduce using rule 4 (statement_list -> statement .)
    FUNC            reduce using rule 4 (statement_list -> statement .)
    RETURN          reduce using rule 4 (statement_list -> statement .)
    $end            reduce using rule 4 (statement_list -> statement .)
    RBRACE          reduce using rule 4 (statement_list -> statement .)
    CASE            reduce using rule 4 (statement_list -> statement .)
    DEFAULT         reduce using rule 4 (statement_list -> statement .)


state 4

    (6) statement -> assignment .

    IDENTIFIER      reduce using rule 6 (statement -> assignment .)
    VAR             reduce using rule 6 (statement -> assignment .)
    TYPE            reduce using rule 6 (statement -> assignment .)
    FOR             reduce using rule 6 (statement -> assignment .)
    PACKAGE         reduce using rule 6 (statement -> assignment .)
    IMPORT          reduce using rule 6 (statement -> assignment .)
    SWITCH          reduce using rule 6 (statement -> assignment .)
    IF              reduce using rule 6 (statement -> assignment .)
    FUNC            reduce using rule 6 (statement -> assignment .)
    RETURN          reduce using rule 6 (statement -> assignment .)
    $end            reduce using rule 6 (statement -> assignment .)
    RBRACE          reduce using rule 6 (statement -> assignment .)
    CASE            reduce using rule 6 (statement -> assignment .)
    DEFAULT         reduce using rule 6 (statement -> assignment .)


state 5

    (7) statement -> input .

    IDENTIFIER      reduce using rule 7 (statement -> input .)
    VAR             reduce using rule 7 (statement -> input .)
    TYPE            reduce using rule 7 (statement -> input .)
    FOR             reduce using rule 7 (statement -> input .)
    PACKAGE         reduce using rule 7 (statement -> input .)
    IMPORT          reduce using rule 7 (statement -> input .)
    SWITCH          reduce using rule 7 (statement -> input .)
    IF              reduce using rule 7 (statement -> input .)
    FUNC            reduce using rule 7 (statement -> input .)
    RETURN          reduce using rule 7 (statement -> input .)
    $end            reduce using rule 7 (statement -> input .)
    RBRACE          reduce using rule 7 (statement -> input .)
    CASE            reduce using rule 7 (statement -> input .)
    DEFAULT         reduce using rule 7 (statement -> input .)


state 6

    (8) statement -> llamarFuncion .

    IDENTIFIER      reduce using rule 8 (statement -> llamarFuncion .)
    VAR             reduce using rule 8 (statement -> llamarFuncion .)
    TYPE            reduce using rule 8 (statement -> llamarFuncion .)
    FOR             reduce using rule 8 (statement -> llamarFuncion .)
    PACKAGE         reduce using rule 8 (statement -> llamarFuncion .)
    IMPORT          reduce using rule 8 (statement -> llamarFuncion .)
    SWITCH          reduce using rule 8 (statement -> llamarFuncion .)
    IF              reduce using rule 8 (statement -> llamarFuncion .)
    FUNC            reduce using rule 8 (statement -> llamarFuncion .)
    RETURN          reduce using rule 8 (statement -> llamarFuncion .)
    $end            reduce using rule 8 (statement -> llamarFuncion .)
    RBRACE          reduce using rule 8 (statement -> llamarFuncion .)
    CASE            reduce using rule 8 (statement -> llamarFuncion .)
    DEFAULT         reduce using rule 8 (statement -> llamarFuncion .)


state 7

    (9) statement -> struct_definition .

    IDENTIFIER      reduce using rule 9 (statement -> struct_definition .)
    VAR             reduce using rule 9 (statement -> struct_definition .)
    TYPE            reduce using rule 9 (statement -> struct_definition .)
    FOR             reduce using rule 9 (statement -> struct_definition .)
    PACKAGE         reduce using rule 9 (statement -> struct_definition .)
    IMPORT          reduce using rule 9 (statement -> struct_definition .)
    SWITCH          reduce using rule 9 (statement -> struct_definition .)
    IF              reduce using rule 9 (statement -> struct_definition .)
    FUNC            reduce using rule 9 (statement -> struct_definition .)
    RETURN          reduce using rule 9 (statement -> struct_definition .)
    $end            reduce using rule 9 (statement -> struct_definition .)
    RBRACE          reduce using rule 9 (statement -> struct_definition .)
    CASE            reduce using rule 9 (statement -> struct_definition .)
    DEFAULT         reduce using rule 9 (statement -> struct_definition .)


state 8

    (10) statement -> for_statement .

    IDENTIFIER      reduce using rule 10 (statement -> for_statement .)
    VAR             reduce using rule 10 (statement -> for_statement .)
    TYPE            reduce using rule 10 (statement -> for_statement .)
    FOR             reduce using rule 10 (statement -> for_statement .)
    PACKAGE         reduce using rule 10 (statement -> for_statement .)
    IMPORT          reduce using rule 10 (statement -> for_statement .)
    SWITCH          reduce using rule 10 (statement -> for_statement .)
    IF              reduce using rule 10 (statement -> for_statement .)
    FUNC            reduce using rule 10 (statement -> for_statement .)
    RETURN          reduce using rule 10 (statement -> for_statement .)
    $end            reduce using rule 10 (statement -> for_statement .)
    RBRACE          reduce using rule 10 (statement -> for_statement .)
    CASE            reduce using rule 10 (statement -> for_statement .)
    DEFAULT         reduce using rule 10 (statement -> for_statement .)


state 9

    (11) statement -> package .

    IDENTIFIER      reduce using rule 11 (statement -> package .)
    VAR             reduce using rule 11 (statement -> package .)
    TYPE            reduce using rule 11 (statement -> package .)
    FOR             reduce using rule 11 (statement -> package .)
    PACKAGE         reduce using rule 11 (statement -> package .)
    IMPORT          reduce using rule 11 (statement -> package .)
    SWITCH          reduce using rule 11 (statement -> package .)
    IF              reduce using rule 11 (statement -> package .)
    FUNC            reduce using rule 11 (statement -> package .)
    RETURN          reduce using rule 11 (statement -> package .)
    $end            reduce using rule 11 (statement -> package .)
    RBRACE          reduce using rule 11 (statement -> package .)
    CASE            reduce using rule 11 (statement -> package .)
    DEFAULT         reduce using rule 11 (statement -> package .)


state 10

    (12) statement -> import .

    IDENTIFIER      reduce using rule 12 (statement -> import .)
    VAR             reduce using rule 12 (statement -> import .)
    TYPE            reduce using rule 12 (statement -> import .)
    FOR             reduce using rule 12 (statement -> import .)
    PACKAGE         reduce using rule 12 (statement -> import .)
    IMPORT          reduce using rule 12 (statement -> import .)
    SWITCH          reduce using rule 12 (statement -> import .)
    IF              reduce using rule 12 (statement -> import .)
    FUNC            reduce using rule 12 (statement -> import .)
    RETURN          reduce using rule 12 (statement -> import .)
    $end            reduce using rule 12 (statement -> import .)
    RBRACE          reduce using rule 12 (statement -> import .)
    CASE            reduce using rule 12 (statement -> import .)
    DEFAULT         reduce using rule 12 (statement -> import .)


state 11

    (13) statement -> switch .

    IDENTIFIER      reduce using rule 13 (statement -> switch .)
    VAR             reduce using rule 13 (statement -> switch .)
    TYPE            reduce using rule 13 (statement -> switch .)
    FOR             reduce using rule 13 (statement -> switch .)
    PACKAGE         reduce using rule 13 (statement -> switch .)
    IMPORT          reduce using rule 13 (statement -> switch .)
    SWITCH          reduce using rule 13 (statement -> switch .)
    IF              reduce using rule 13 (statement -> switch .)
    FUNC            reduce using rule 13 (statement -> switch .)
    RETURN          reduce using rule 13 (statement -> switch .)
    $end            reduce using rule 13 (statement -> switch .)
    RBRACE          reduce using rule 13 (statement -> switch .)
    CASE            reduce using rule 13 (statement -> switch .)
    DEFAULT         reduce using rule 13 (statement -> switch .)


state 12

    (14) statement -> map .

    IDENTIFIER      reduce using rule 14 (statement -> map .)
    VAR             reduce using rule 14 (statement -> map .)
    TYPE            reduce using rule 14 (statement -> map .)
    FOR             reduce using rule 14 (statement -> map .)
    PACKAGE         reduce using rule 14 (statement -> map .)
    IMPORT          reduce using rule 14 (statement -> map .)
    SWITCH          reduce using rule 14 (statement -> map .)
    IF              reduce using rule 14 (statement -> map .)
    FUNC            reduce using rule 14 (statement -> map .)
    RETURN          reduce using rule 14 (statement -> map .)
    $end            reduce using rule 14 (statement -> map .)
    RBRACE          reduce using rule 14 (statement -> map .)
    CASE            reduce using rule 14 (statement -> map .)
    DEFAULT         reduce using rule 14 (statement -> map .)


state 13

    (15) statement -> if_statement .

    IDENTIFIER      reduce using rule 15 (statement -> if_statement .)
    VAR             reduce using rule 15 (statement -> if_statement .)
    TYPE            reduce using rule 15 (statement -> if_statement .)
    FOR             reduce using rule 15 (statement -> if_statement .)
    PACKAGE         reduce using rule 15 (statement -> if_statement .)
    IMPORT          reduce using rule 15 (statement -> if_statement .)
    SWITCH          reduce using rule 15 (statement -> if_statement .)
    IF              reduce using rule 15 (statement -> if_statement .)
    FUNC            reduce using rule 15 (statement -> if_statement .)
    RETURN          reduce using rule 15 (statement -> if_statement .)
    $end            reduce using rule 15 (statement -> if_statement .)
    RBRACE          reduce using rule 15 (statement -> if_statement .)
    CASE            reduce using rule 15 (statement -> if_statement .)
    DEFAULT         reduce using rule 15 (statement -> if_statement .)


state 14

    (16) statement -> function .

    IDENTIFIER      reduce using rule 16 (statement -> function .)
    VAR             reduce using rule 16 (statement -> function .)
    TYPE            reduce using rule 16 (statement -> function .)
    FOR             reduce using rule 16 (statement -> function .)
    PACKAGE         reduce using rule 16 (statement -> function .)
    IMPORT          reduce using rule 16 (statement -> function .)
    SWITCH          reduce using rule 16 (statement -> function .)
    IF              reduce using rule 16 (statement -> function .)
    FUNC            reduce using rule 16 (statement -> function .)
    RETURN          reduce using rule 16 (statement -> function .)
    $end            reduce using rule 16 (statement -> function .)
    RBRACE          reduce using rule 16 (statement -> function .)
    CASE            reduce using rule 16 (statement -> function .)
    DEFAULT         reduce using rule 16 (statement -> function .)


state 15

    (17) statement -> method_definition .

    IDENTIFIER      reduce using rule 17 (statement -> method_definition .)
    VAR             reduce using rule 17 (statement -> method_definition .)
    TYPE            reduce using rule 17 (statement -> method_definition .)
    FOR             reduce using rule 17 (statement -> method_definition .)
    PACKAGE         reduce using rule 17 (statement -> method_definition .)
    IMPORT          reduce using rule 17 (statement -> method_definition .)
    SWITCH          reduce using rule 17 (statement -> method_definition .)
    IF              reduce using rule 17 (statement -> method_definition .)
    FUNC            reduce using rule 17 (statement -> method_definition .)
    RETURN          reduce using rule 17 (statement -> method_definition .)
    $end            reduce using rule 17 (statement -> method_definition .)
    RBRACE          reduce using rule 17 (statement -> method_definition .)
    CASE            reduce using rule 17 (statement -> method_definition .)
    DEFAULT         reduce using rule 17 (statement -> method_definition .)


state 16

    (18) statement -> function_literal .

    IDENTIFIER      reduce using rule 18 (statement -> function_literal .)
    VAR             reduce using rule 18 (statement -> function_literal .)
    TYPE            reduce using rule 18 (statement -> function_literal .)
    FOR             reduce using rule 18 (statement -> function_literal .)
    PACKAGE         reduce using rule 18 (statement -> function_literal .)
    IMPORT          reduce using rule 18 (statement -> function_literal .)
    SWITCH          reduce using rule 18 (statement -> function_literal .)
    IF              reduce using rule 18 (statement -> function_literal .)
    FUNC            reduce using rule 18 (statement -> function_literal .)
    RETURN          reduce using rule 18 (statement -> function_literal .)
    $end            reduce using rule 18 (statement -> function_literal .)
    RBRACE          reduce using rule 18 (statement -> function_literal .)
    CASE            reduce using rule 18 (statement -> function_literal .)
    DEFAULT         reduce using rule 18 (statement -> function_literal .)


state 17

    (19) statement -> var_declaration .

    IDENTIFIER      reduce using rule 19 (statement -> var_declaration .)
    VAR             reduce using rule 19 (statement -> var_declaration .)
    TYPE            reduce using rule 19 (statement -> var_declaration .)
    FOR             reduce using rule 19 (statement -> var_declaration .)
    PACKAGE         reduce using rule 19 (statement -> var_declaration .)
    IMPORT          reduce using rule 19 (statement -> var_declaration .)
    SWITCH          reduce using rule 19 (statement -> var_declaration .)
    IF              reduce using rule 19 (statement -> var_declaration .)
    FUNC            reduce using rule 19 (statement -> var_declaration .)
    RETURN          reduce using rule 19 (statement -> var_declaration .)
    $end            reduce using rule 19 (statement -> var_declaration .)
    RBRACE          reduce using rule 19 (statement -> var_declaration .)
    CASE            reduce using rule 19 (statement -> var_declaration .)
    DEFAULT         reduce using rule 19 (statement -> var_declaration .)


state 18

    (20) statement -> slice_declaration .

    IDENTIFIER      reduce using rule 20 (statement -> slice_declaration .)
    VAR             reduce using rule 20 (statement -> slice_declaration .)
    TYPE            reduce using rule 20 (statement -> slice_declaration .)
    FOR             reduce using rule 20 (statement -> slice_declaration .)
    PACKAGE         reduce using rule 20 (statement -> slice_declaration .)
    IMPORT          reduce using rule 20 (statement -> slice_declaration .)
    SWITCH          reduce using rule 20 (statement -> slice_declaration .)
    IF              reduce using rule 20 (statement -> slice_declaration .)
    FUNC            reduce using rule 20 (statement -> slice_declaration .)
    RETURN          reduce using rule 20 (statement -> slice_declaration .)
    $end            reduce using rule 20 (statement -> slice_declaration .)
    RBRACE          reduce using rule 20 (statement -> slice_declaration .)
    CASE            reduce using rule 20 (statement -> slice_declaration .)
    DEFAULT         reduce using rule 20 (statement -> slice_declaration .)


state 19

    (21) statement -> declare_assign .

    IDENTIFIER      reduce using rule 21 (statement -> declare_assign .)
    VAR             reduce using rule 21 (statement -> declare_assign .)
    TYPE            reduce using rule 21 (statement -> declare_assign .)
    FOR             reduce using rule 21 (statement -> declare_assign .)
    PACKAGE         reduce using rule 21 (statement -> declare_assign .)
    IMPORT          reduce using rule 21 (statement -> declare_assign .)
    SWITCH          reduce using rule 21 (statement -> declare_assign .)
    IF              reduce using rule 21 (statement -> declare_assign .)
    FUNC            reduce using rule 21 (statement -> declare_assign .)
    RETURN          reduce using rule 21 (statement -> declare_assign .)
    $end            reduce using rule 21 (statement -> declare_assign .)
    RBRACE          reduce using rule 21 (statement -> declare_assign .)
    CASE            reduce using rule 21 (statement -> declare_assign .)
    DEFAULT         reduce using rule 21 (statement -> declare_assign .)


state 20

    (22) statement -> return_statement .

    IDENTIFIER      reduce using rule 22 (statement -> return_statement .)
    VAR             reduce using rule 22 (statement -> return_statement .)
    TYPE            reduce using rule 22 (statement -> return_statement .)
    FOR             reduce using rule 22 (statement -> return_statement .)
    PACKAGE         reduce using rule 22 (statement -> return_statement .)
    IMPORT          reduce using rule 22 (statement -> return_statement .)
    SWITCH          reduce using rule 22 (statement -> return_statement .)
    IF              reduce using rule 22 (statement -> return_statement .)
    FUNC            reduce using rule 22 (statement -> return_statement .)
    RETURN          reduce using rule 22 (statement -> return_statement .)
    $end            reduce using rule 22 (statement -> return_statement .)
    RBRACE          reduce using rule 22 (statement -> return_statement .)
    CASE            reduce using rule 22 (statement -> return_statement .)
    DEFAULT         reduce using rule 22 (statement -> return_statement .)


state 21

    (35) assignment -> IDENTIFIER . DECLARE_ASSIGN expression
    (36) assignment -> IDENTIFIER . DECLARE_ASSIGN struct_literal
    (39) assignment -> IDENTIFIER . DECLARE_ASSIGN slice_literal
    (41) assignment -> IDENTIFIER . ASSIGN expression
    (33) input -> IDENTIFIER . DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (42) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (66) map -> IDENTIFIER . DECLARE_ASSIGN mapLiteral
    (146) declare_assign -> IDENTIFIER . DECLARE_ASSIGN slice_literal

    DECLARE_ASSIGN  shift and go to state 32
    ASSIGN          shift and go to state 33
    DOT             shift and go to state 34
    LPAREN          shift and go to state 35


state 22

    (37) assignment -> VAR . IDENTIFIER type_name ASSIGN expression
    (38) assignment -> VAR . IDENTIFIER type_name ASSIGN llamarFuncion
    (40) assignment -> VAR . IDENTIFIER type_name ASSIGN slice_literal
    (67) map -> VAR . IDENTIFIER ASSIGN mapLiteral
    (34) var_declaration -> VAR . IDENTIFIER type_name
    (145) slice_declaration -> VAR . IDENTIFIER LBRACKET RBRACKET type_name

    IDENTIFIER      shift and go to state 36


state 23

    (86) struct_definition -> TYPE . IDENTIFIER STRUCT LBRACE struct_fields RBRACE

    IDENTIFIER      shift and go to state 37


state 24

    (95) for_statement -> FOR . shortAssignment SEMICOLON condicion SEMICOLON expression block
    (97) for_statement -> FOR . condicion block
    (98) for_statement -> FOR . block
    (96) shortAssignment -> . identifier_list DECLARE_ASSIGN expression
    (49) condicion -> . expression comparador expression
    (100) block -> . LBRACE statement_list RBRACE
    (101) block -> . LBRACE RBRACE
    (133) identifier_list -> . IDENTIFIER
    (134) identifier_list -> . IDENTIFIER COMMA identifier_list
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    LBRACE          shift and go to state 43
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 45
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    shortAssignment                shift and go to state 38
    condicion                      shift and go to state 39
    expression                     shift and go to state 40
    block                          shift and go to state 41
    identifier_list                shift and go to state 42
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 25

    (23) package -> PACKAGE . MAIN
    (24) package -> PACKAGE . IDENTIFIER

    MAIN            shift and go to state 59
    IDENTIFIER      shift and go to state 60


state 26

    (25) import -> IMPORT . STRING
    (26) import -> IMPORT . LPAREN import_list RPAREN

    STRING          shift and go to state 61
    LPAREN          shift and go to state 62


state 27

    (61) switch -> SWITCH . expression LBRACE caseBlocks RBRACE
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    expression                     shift and go to state 63
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 28

    (123) if_statement -> IF . condicion block
    (124) if_statement -> IF . condicion block ELSE block
    (125) if_statement -> IF . condicion_compleja block
    (126) if_statement -> IF . condicion_compleja block ELSE block
    (49) condicion -> . expression comparador expression
    (50) condicion_compleja -> . condicion operadorLogico condicion
    (51) condicion_compleja -> . condicion operadorLogico condicion_compleja
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    condicion                      shift and go to state 65
    condicion_compleja             shift and go to state 66
    expression                     shift and go to state 40
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 29

    (74) function -> FUNC . IDENTIFIER LPAREN params_opt RPAREN block
    (75) function -> FUNC . IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (76) function -> FUNC . MAIN LPAREN params_opt RPAREN block
    (94) method_definition -> FUNC . LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (127) function_literal -> FUNC . LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 67
    MAIN            shift and go to state 69
    LPAREN          shift and go to state 68


state 30

    (77) return_statement -> RETURN . return_values
    (78) return_values -> . expression
    (79) return_values -> . expression COMMA return_values
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    return_values                  shift and go to state 70
    expression                     shift and go to state 71
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 31

    (5) statement_list -> statement_list statement .

    IDENTIFIER      reduce using rule 5 (statement_list -> statement_list statement .)
    VAR             reduce using rule 5 (statement_list -> statement_list statement .)
    TYPE            reduce using rule 5 (statement_list -> statement_list statement .)
    FOR             reduce using rule 5 (statement_list -> statement_list statement .)
    PACKAGE         reduce using rule 5 (statement_list -> statement_list statement .)
    IMPORT          reduce using rule 5 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 5 (statement_list -> statement_list statement .)
    IF              reduce using rule 5 (statement_list -> statement_list statement .)
    FUNC            reduce using rule 5 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 5 (statement_list -> statement_list statement .)
    $end            reduce using rule 5 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 5 (statement_list -> statement_list statement .)
    CASE            reduce using rule 5 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 5 (statement_list -> statement_list statement .)


state 32

    (35) assignment -> IDENTIFIER DECLARE_ASSIGN . expression
    (36) assignment -> IDENTIFIER DECLARE_ASSIGN . struct_literal
    (39) assignment -> IDENTIFIER DECLARE_ASSIGN . slice_literal
    (66) map -> IDENTIFIER DECLARE_ASSIGN . mapLiteral
    (146) declare_assign -> IDENTIFIER DECLARE_ASSIGN . slice_literal
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (87) struct_literal -> . IDENTIFIER LBRACE struct_field_assignments RBRACE
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (68) mapLiteral -> . MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 72
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    MAP             shift and go to state 77
    FUNC            shift and go to state 58

    expression                     shift and go to state 73
    struct_literal                 shift and go to state 74
    slice_literal                  shift and go to state 75
    mapLiteral                     shift and go to state 76
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 33

    (41) assignment -> IDENTIFIER ASSIGN . expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    expression                     shift and go to state 78
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 34

    (33) input -> IDENTIFIER DOT . IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (44) llamarFuncion -> IDENTIFIER DOT . IDENTIFIER LPAREN argument_list_opt RPAREN

    IDENTIFIER      shift and go to state 79


state 35

    (42) llamarFuncion -> IDENTIFIER LPAREN . argument_list_opt RPAREN
    (43) llamarFuncion -> IDENTIFIER LPAREN . argument_list_opt COMMA expression RPAREN
    (47) argument_list_opt -> . argument_list
    (48) argument_list_opt -> .
    (45) argument_list -> . expression
    (46) argument_list -> . argument_list COMMA expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    RPAREN          reduce using rule 48 (argument_list_opt -> .)
    COMMA           reduce using rule 48 (argument_list_opt -> .)
    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    argument_list_opt              shift and go to state 80
    expression                     shift and go to state 81
    argument_list                  shift and go to state 82
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 36

    (37) assignment -> VAR IDENTIFIER . type_name ASSIGN expression
    (38) assignment -> VAR IDENTIFIER . type_name ASSIGN llamarFuncion
    (40) assignment -> VAR IDENTIFIER . type_name ASSIGN slice_literal
    (67) map -> VAR IDENTIFIER . ASSIGN mapLiteral
    (34) var_declaration -> VAR IDENTIFIER . type_name
    (145) slice_declaration -> VAR IDENTIFIER . LBRACKET RBRACKET type_name
    (135) type_name -> . DATATYPE
    (136) type_name -> . IDENTIFIER
    (137) type_name -> . LBRACKET RBRACKET type_name
    (138) type_name -> . FUNC LPAREN parameters RPAREN return_type

    ASSIGN          shift and go to state 85
    LBRACKET        shift and go to state 86
    DATATYPE        shift and go to state 87
    IDENTIFIER      shift and go to state 83
    FUNC            shift and go to state 88

    type_name                      shift and go to state 84

state 37

    (86) struct_definition -> TYPE IDENTIFIER . STRUCT LBRACE struct_fields RBRACE

    STRUCT          shift and go to state 89


state 38

    (95) for_statement -> FOR shortAssignment . SEMICOLON condicion SEMICOLON expression block

    SEMICOLON       shift and go to state 90


state 39

    (97) for_statement -> FOR condicion . block
    (100) block -> . LBRACE statement_list RBRACE
    (101) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 43

    block                          shift and go to state 91

state 40

    (49) condicion -> expression . comparador expression
    (113) expression -> expression . operadorLogico expression
    (114) expression -> expression . comparador expression
    (115) expression -> expression . operator expression
    (150) expression -> expression . LBRACKET expression RBRACKET
    (151) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (152) expression -> expression . LBRACKET COLON expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON RBRACKET
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (116) operator -> . PLUS
    (117) operator -> . MINUS
    (118) operator -> . TIMES
    (119) operator -> . DIVIDE
    (120) operator -> . MOD

    LBRACKET        shift and go to state 95
    EQ              shift and go to state 96
    NEQ             shift and go to state 97
    GT              shift and go to state 98
    LT              shift and go to state 99
    GE              shift and go to state 100
    LE              shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108

    comparador                     shift and go to state 92
    operadorLogico                 shift and go to state 93
    operator                       shift and go to state 94

state 41

    (98) for_statement -> FOR block .

    IDENTIFIER      reduce using rule 98 (for_statement -> FOR block .)
    VAR             reduce using rule 98 (for_statement -> FOR block .)
    TYPE            reduce using rule 98 (for_statement -> FOR block .)
    FOR             reduce using rule 98 (for_statement -> FOR block .)
    PACKAGE         reduce using rule 98 (for_statement -> FOR block .)
    IMPORT          reduce using rule 98 (for_statement -> FOR block .)
    SWITCH          reduce using rule 98 (for_statement -> FOR block .)
    IF              reduce using rule 98 (for_statement -> FOR block .)
    FUNC            reduce using rule 98 (for_statement -> FOR block .)
    RETURN          reduce using rule 98 (for_statement -> FOR block .)
    $end            reduce using rule 98 (for_statement -> FOR block .)
    RBRACE          reduce using rule 98 (for_statement -> FOR block .)
    CASE            reduce using rule 98 (for_statement -> FOR block .)
    DEFAULT         reduce using rule 98 (for_statement -> FOR block .)


state 42

    (96) shortAssignment -> identifier_list . DECLARE_ASSIGN expression

    DECLARE_ASSIGN  shift and go to state 109


state 43

    (100) block -> LBRACE . statement_list RBRACE
    (101) block -> LBRACE . RBRACE
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . struct_definition
    (10) statement -> . for_statement
    (11) statement -> . package
    (12) statement -> . import
    (13) statement -> . switch
    (14) statement -> . map
    (15) statement -> . if_statement
    (16) statement -> . function
    (17) statement -> . method_definition
    (18) statement -> . function_literal
    (19) statement -> . var_declaration
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (22) statement -> . return_statement
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (39) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (40) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (41) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (86) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (95) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (97) for_statement -> . FOR condicion block
    (98) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (61) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (66) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (67) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (123) if_statement -> . IF condicion block
    (124) if_statement -> . IF condicion block ELSE block
    (125) if_statement -> . IF condicion_compleja block
    (126) if_statement -> . IF condicion_compleja block ELSE block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (76) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (94) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER type_name
    (145) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (146) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (77) return_statement -> . RETURN return_values

    RBRACE          shift and go to state 111
    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29
    RETURN          shift and go to state 30

    statement_list                 shift and go to state 110
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    struct_definition              shift and go to state 7
    for_statement                  shift and go to state 8
    package                        shift and go to state 9
    import                         shift and go to state 10
    switch                         shift and go to state 11
    map                            shift and go to state 12
    if_statement                   shift and go to state 13
    function                       shift and go to state 14
    method_definition              shift and go to state 15
    function_literal               shift and go to state 16
    var_declaration                shift and go to state 17
    slice_declaration              shift and go to state 18
    declare_assign                 shift and go to state 19
    return_statement               shift and go to state 20

state 44

    (133) identifier_list -> IDENTIFIER .
    (134) identifier_list -> IDENTIFIER . COMMA identifier_list
    (103) expression -> IDENTIFIER .
    (111) expression -> IDENTIFIER . DOT IDENTIFIER
    (42) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    DECLARE_ASSIGN  reduce using rule 133 (identifier_list -> IDENTIFIER .)
    COMMA           shift and go to state 112
    LBRACKET        reduce using rule 103 (expression -> IDENTIFIER .)
    EQ              reduce using rule 103 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 103 (expression -> IDENTIFIER .)
    GT              reduce using rule 103 (expression -> IDENTIFIER .)
    LT              reduce using rule 103 (expression -> IDENTIFIER .)
    GE              reduce using rule 103 (expression -> IDENTIFIER .)
    LE              reduce using rule 103 (expression -> IDENTIFIER .)
    AND             reduce using rule 103 (expression -> IDENTIFIER .)
    OR              reduce using rule 103 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 103 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 103 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 103 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 103 (expression -> IDENTIFIER .)
    MOD             reduce using rule 103 (expression -> IDENTIFIER .)
    DOT             shift and go to state 113
    LPAREN          shift and go to state 35


state 45

    (102) expression -> NUMBER .

    LBRACKET        reduce using rule 102 (expression -> NUMBER .)
    EQ              reduce using rule 102 (expression -> NUMBER .)
    NEQ             reduce using rule 102 (expression -> NUMBER .)
    GT              reduce using rule 102 (expression -> NUMBER .)
    LT              reduce using rule 102 (expression -> NUMBER .)
    GE              reduce using rule 102 (expression -> NUMBER .)
    LE              reduce using rule 102 (expression -> NUMBER .)
    AND             reduce using rule 102 (expression -> NUMBER .)
    OR              reduce using rule 102 (expression -> NUMBER .)
    PLUS            reduce using rule 102 (expression -> NUMBER .)
    MINUS           reduce using rule 102 (expression -> NUMBER .)
    TIMES           reduce using rule 102 (expression -> NUMBER .)
    DIVIDE          reduce using rule 102 (expression -> NUMBER .)
    MOD             reduce using rule 102 (expression -> NUMBER .)
    LBRACE          reduce using rule 102 (expression -> NUMBER .)
    COMMA           reduce using rule 102 (expression -> NUMBER .)
    IDENTIFIER      reduce using rule 102 (expression -> NUMBER .)
    VAR             reduce using rule 102 (expression -> NUMBER .)
    TYPE            reduce using rule 102 (expression -> NUMBER .)
    FOR             reduce using rule 102 (expression -> NUMBER .)
    PACKAGE         reduce using rule 102 (expression -> NUMBER .)
    IMPORT          reduce using rule 102 (expression -> NUMBER .)
    SWITCH          reduce using rule 102 (expression -> NUMBER .)
    IF              reduce using rule 102 (expression -> NUMBER .)
    FUNC            reduce using rule 102 (expression -> NUMBER .)
    RETURN          reduce using rule 102 (expression -> NUMBER .)
    $end            reduce using rule 102 (expression -> NUMBER .)
    RBRACE          reduce using rule 102 (expression -> NUMBER .)
    CASE            reduce using rule 102 (expression -> NUMBER .)
    DEFAULT         reduce using rule 102 (expression -> NUMBER .)
    RPAREN          reduce using rule 102 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 102 (expression -> NUMBER .)
    RBRACKET        reduce using rule 102 (expression -> NUMBER .)
    COLON           reduce using rule 102 (expression -> NUMBER .)


state 46

    (104) expression -> RUNE .

    LBRACKET        reduce using rule 104 (expression -> RUNE .)
    EQ              reduce using rule 104 (expression -> RUNE .)
    NEQ             reduce using rule 104 (expression -> RUNE .)
    GT              reduce using rule 104 (expression -> RUNE .)
    LT              reduce using rule 104 (expression -> RUNE .)
    GE              reduce using rule 104 (expression -> RUNE .)
    LE              reduce using rule 104 (expression -> RUNE .)
    AND             reduce using rule 104 (expression -> RUNE .)
    OR              reduce using rule 104 (expression -> RUNE .)
    PLUS            reduce using rule 104 (expression -> RUNE .)
    MINUS           reduce using rule 104 (expression -> RUNE .)
    TIMES           reduce using rule 104 (expression -> RUNE .)
    DIVIDE          reduce using rule 104 (expression -> RUNE .)
    MOD             reduce using rule 104 (expression -> RUNE .)
    LBRACE          reduce using rule 104 (expression -> RUNE .)
    COMMA           reduce using rule 104 (expression -> RUNE .)
    IDENTIFIER      reduce using rule 104 (expression -> RUNE .)
    VAR             reduce using rule 104 (expression -> RUNE .)
    TYPE            reduce using rule 104 (expression -> RUNE .)
    FOR             reduce using rule 104 (expression -> RUNE .)
    PACKAGE         reduce using rule 104 (expression -> RUNE .)
    IMPORT          reduce using rule 104 (expression -> RUNE .)
    SWITCH          reduce using rule 104 (expression -> RUNE .)
    IF              reduce using rule 104 (expression -> RUNE .)
    FUNC            reduce using rule 104 (expression -> RUNE .)
    RETURN          reduce using rule 104 (expression -> RUNE .)
    $end            reduce using rule 104 (expression -> RUNE .)
    RBRACE          reduce using rule 104 (expression -> RUNE .)
    CASE            reduce using rule 104 (expression -> RUNE .)
    DEFAULT         reduce using rule 104 (expression -> RUNE .)
    RPAREN          reduce using rule 104 (expression -> RUNE .)
    SEMICOLON       reduce using rule 104 (expression -> RUNE .)
    RBRACKET        reduce using rule 104 (expression -> RUNE .)
    COLON           reduce using rule 104 (expression -> RUNE .)


state 47

    (105) expression -> STRING .

    LBRACKET        reduce using rule 105 (expression -> STRING .)
    EQ              reduce using rule 105 (expression -> STRING .)
    NEQ             reduce using rule 105 (expression -> STRING .)
    GT              reduce using rule 105 (expression -> STRING .)
    LT              reduce using rule 105 (expression -> STRING .)
    GE              reduce using rule 105 (expression -> STRING .)
    LE              reduce using rule 105 (expression -> STRING .)
    AND             reduce using rule 105 (expression -> STRING .)
    OR              reduce using rule 105 (expression -> STRING .)
    PLUS            reduce using rule 105 (expression -> STRING .)
    MINUS           reduce using rule 105 (expression -> STRING .)
    TIMES           reduce using rule 105 (expression -> STRING .)
    DIVIDE          reduce using rule 105 (expression -> STRING .)
    MOD             reduce using rule 105 (expression -> STRING .)
    LBRACE          reduce using rule 105 (expression -> STRING .)
    COMMA           reduce using rule 105 (expression -> STRING .)
    IDENTIFIER      reduce using rule 105 (expression -> STRING .)
    VAR             reduce using rule 105 (expression -> STRING .)
    TYPE            reduce using rule 105 (expression -> STRING .)
    FOR             reduce using rule 105 (expression -> STRING .)
    PACKAGE         reduce using rule 105 (expression -> STRING .)
    IMPORT          reduce using rule 105 (expression -> STRING .)
    SWITCH          reduce using rule 105 (expression -> STRING .)
    IF              reduce using rule 105 (expression -> STRING .)
    FUNC            reduce using rule 105 (expression -> STRING .)
    RETURN          reduce using rule 105 (expression -> STRING .)
    $end            reduce using rule 105 (expression -> STRING .)
    RBRACE          reduce using rule 105 (expression -> STRING .)
    CASE            reduce using rule 105 (expression -> STRING .)
    DEFAULT         reduce using rule 105 (expression -> STRING .)
    RPAREN          reduce using rule 105 (expression -> STRING .)
    SEMICOLON       reduce using rule 105 (expression -> STRING .)
    RBRACKET        reduce using rule 105 (expression -> STRING .)
    COLON           reduce using rule 105 (expression -> STRING .)


state 48

    (106) expression -> RAW_STRING .

    LBRACKET        reduce using rule 106 (expression -> RAW_STRING .)
    EQ              reduce using rule 106 (expression -> RAW_STRING .)
    NEQ             reduce using rule 106 (expression -> RAW_STRING .)
    GT              reduce using rule 106 (expression -> RAW_STRING .)
    LT              reduce using rule 106 (expression -> RAW_STRING .)
    GE              reduce using rule 106 (expression -> RAW_STRING .)
    LE              reduce using rule 106 (expression -> RAW_STRING .)
    AND             reduce using rule 106 (expression -> RAW_STRING .)
    OR              reduce using rule 106 (expression -> RAW_STRING .)
    PLUS            reduce using rule 106 (expression -> RAW_STRING .)
    MINUS           reduce using rule 106 (expression -> RAW_STRING .)
    TIMES           reduce using rule 106 (expression -> RAW_STRING .)
    DIVIDE          reduce using rule 106 (expression -> RAW_STRING .)
    MOD             reduce using rule 106 (expression -> RAW_STRING .)
    LBRACE          reduce using rule 106 (expression -> RAW_STRING .)
    COMMA           reduce using rule 106 (expression -> RAW_STRING .)
    IDENTIFIER      reduce using rule 106 (expression -> RAW_STRING .)
    VAR             reduce using rule 106 (expression -> RAW_STRING .)
    TYPE            reduce using rule 106 (expression -> RAW_STRING .)
    FOR             reduce using rule 106 (expression -> RAW_STRING .)
    PACKAGE         reduce using rule 106 (expression -> RAW_STRING .)
    IMPORT          reduce using rule 106 (expression -> RAW_STRING .)
    SWITCH          reduce using rule 106 (expression -> RAW_STRING .)
    IF              reduce using rule 106 (expression -> RAW_STRING .)
    FUNC            reduce using rule 106 (expression -> RAW_STRING .)
    RETURN          reduce using rule 106 (expression -> RAW_STRING .)
    $end            reduce using rule 106 (expression -> RAW_STRING .)
    RBRACE          reduce using rule 106 (expression -> RAW_STRING .)
    CASE            reduce using rule 106 (expression -> RAW_STRING .)
    DEFAULT         reduce using rule 106 (expression -> RAW_STRING .)
    RPAREN          reduce using rule 106 (expression -> RAW_STRING .)
    SEMICOLON       reduce using rule 106 (expression -> RAW_STRING .)
    RBRACKET        reduce using rule 106 (expression -> RAW_STRING .)
    COLON           reduce using rule 106 (expression -> RAW_STRING .)


state 49

    (107) expression -> TRUE .

    LBRACKET        reduce using rule 107 (expression -> TRUE .)
    EQ              reduce using rule 107 (expression -> TRUE .)
    NEQ             reduce using rule 107 (expression -> TRUE .)
    GT              reduce using rule 107 (expression -> TRUE .)
    LT              reduce using rule 107 (expression -> TRUE .)
    GE              reduce using rule 107 (expression -> TRUE .)
    LE              reduce using rule 107 (expression -> TRUE .)
    AND             reduce using rule 107 (expression -> TRUE .)
    OR              reduce using rule 107 (expression -> TRUE .)
    PLUS            reduce using rule 107 (expression -> TRUE .)
    MINUS           reduce using rule 107 (expression -> TRUE .)
    TIMES           reduce using rule 107 (expression -> TRUE .)
    DIVIDE          reduce using rule 107 (expression -> TRUE .)
    MOD             reduce using rule 107 (expression -> TRUE .)
    LBRACE          reduce using rule 107 (expression -> TRUE .)
    COMMA           reduce using rule 107 (expression -> TRUE .)
    IDENTIFIER      reduce using rule 107 (expression -> TRUE .)
    VAR             reduce using rule 107 (expression -> TRUE .)
    TYPE            reduce using rule 107 (expression -> TRUE .)
    FOR             reduce using rule 107 (expression -> TRUE .)
    PACKAGE         reduce using rule 107 (expression -> TRUE .)
    IMPORT          reduce using rule 107 (expression -> TRUE .)
    SWITCH          reduce using rule 107 (expression -> TRUE .)
    IF              reduce using rule 107 (expression -> TRUE .)
    FUNC            reduce using rule 107 (expression -> TRUE .)
    RETURN          reduce using rule 107 (expression -> TRUE .)
    $end            reduce using rule 107 (expression -> TRUE .)
    RBRACE          reduce using rule 107 (expression -> TRUE .)
    CASE            reduce using rule 107 (expression -> TRUE .)
    DEFAULT         reduce using rule 107 (expression -> TRUE .)
    RPAREN          reduce using rule 107 (expression -> TRUE .)
    SEMICOLON       reduce using rule 107 (expression -> TRUE .)
    RBRACKET        reduce using rule 107 (expression -> TRUE .)
    COLON           reduce using rule 107 (expression -> TRUE .)


state 50

    (108) expression -> FALSE .

    LBRACKET        reduce using rule 108 (expression -> FALSE .)
    EQ              reduce using rule 108 (expression -> FALSE .)
    NEQ             reduce using rule 108 (expression -> FALSE .)
    GT              reduce using rule 108 (expression -> FALSE .)
    LT              reduce using rule 108 (expression -> FALSE .)
    GE              reduce using rule 108 (expression -> FALSE .)
    LE              reduce using rule 108 (expression -> FALSE .)
    AND             reduce using rule 108 (expression -> FALSE .)
    OR              reduce using rule 108 (expression -> FALSE .)
    PLUS            reduce using rule 108 (expression -> FALSE .)
    MINUS           reduce using rule 108 (expression -> FALSE .)
    TIMES           reduce using rule 108 (expression -> FALSE .)
    DIVIDE          reduce using rule 108 (expression -> FALSE .)
    MOD             reduce using rule 108 (expression -> FALSE .)
    LBRACE          reduce using rule 108 (expression -> FALSE .)
    COMMA           reduce using rule 108 (expression -> FALSE .)
    IDENTIFIER      reduce using rule 108 (expression -> FALSE .)
    VAR             reduce using rule 108 (expression -> FALSE .)
    TYPE            reduce using rule 108 (expression -> FALSE .)
    FOR             reduce using rule 108 (expression -> FALSE .)
    PACKAGE         reduce using rule 108 (expression -> FALSE .)
    IMPORT          reduce using rule 108 (expression -> FALSE .)
    SWITCH          reduce using rule 108 (expression -> FALSE .)
    IF              reduce using rule 108 (expression -> FALSE .)
    FUNC            reduce using rule 108 (expression -> FALSE .)
    RETURN          reduce using rule 108 (expression -> FALSE .)
    $end            reduce using rule 108 (expression -> FALSE .)
    RBRACE          reduce using rule 108 (expression -> FALSE .)
    CASE            reduce using rule 108 (expression -> FALSE .)
    DEFAULT         reduce using rule 108 (expression -> FALSE .)
    RPAREN          reduce using rule 108 (expression -> FALSE .)
    SEMICOLON       reduce using rule 108 (expression -> FALSE .)
    RBRACKET        reduce using rule 108 (expression -> FALSE .)
    COLON           reduce using rule 108 (expression -> FALSE .)


state 51

    (109) expression -> NIL .

    LBRACKET        reduce using rule 109 (expression -> NIL .)
    EQ              reduce using rule 109 (expression -> NIL .)
    NEQ             reduce using rule 109 (expression -> NIL .)
    GT              reduce using rule 109 (expression -> NIL .)
    LT              reduce using rule 109 (expression -> NIL .)
    GE              reduce using rule 109 (expression -> NIL .)
    LE              reduce using rule 109 (expression -> NIL .)
    AND             reduce using rule 109 (expression -> NIL .)
    OR              reduce using rule 109 (expression -> NIL .)
    PLUS            reduce using rule 109 (expression -> NIL .)
    MINUS           reduce using rule 109 (expression -> NIL .)
    TIMES           reduce using rule 109 (expression -> NIL .)
    DIVIDE          reduce using rule 109 (expression -> NIL .)
    MOD             reduce using rule 109 (expression -> NIL .)
    LBRACE          reduce using rule 109 (expression -> NIL .)
    COMMA           reduce using rule 109 (expression -> NIL .)
    IDENTIFIER      reduce using rule 109 (expression -> NIL .)
    VAR             reduce using rule 109 (expression -> NIL .)
    TYPE            reduce using rule 109 (expression -> NIL .)
    FOR             reduce using rule 109 (expression -> NIL .)
    PACKAGE         reduce using rule 109 (expression -> NIL .)
    IMPORT          reduce using rule 109 (expression -> NIL .)
    SWITCH          reduce using rule 109 (expression -> NIL .)
    IF              reduce using rule 109 (expression -> NIL .)
    FUNC            reduce using rule 109 (expression -> NIL .)
    RETURN          reduce using rule 109 (expression -> NIL .)
    $end            reduce using rule 109 (expression -> NIL .)
    RBRACE          reduce using rule 109 (expression -> NIL .)
    CASE            reduce using rule 109 (expression -> NIL .)
    DEFAULT         reduce using rule 109 (expression -> NIL .)
    RPAREN          reduce using rule 109 (expression -> NIL .)
    SEMICOLON       reduce using rule 109 (expression -> NIL .)
    RBRACKET        reduce using rule 109 (expression -> NIL .)
    COLON           reduce using rule 109 (expression -> NIL .)


state 52

    (110) expression -> slice_literal .

    LBRACKET        reduce using rule 110 (expression -> slice_literal .)
    EQ              reduce using rule 110 (expression -> slice_literal .)
    NEQ             reduce using rule 110 (expression -> slice_literal .)
    GT              reduce using rule 110 (expression -> slice_literal .)
    LT              reduce using rule 110 (expression -> slice_literal .)
    GE              reduce using rule 110 (expression -> slice_literal .)
    LE              reduce using rule 110 (expression -> slice_literal .)
    AND             reduce using rule 110 (expression -> slice_literal .)
    OR              reduce using rule 110 (expression -> slice_literal .)
    PLUS            reduce using rule 110 (expression -> slice_literal .)
    MINUS           reduce using rule 110 (expression -> slice_literal .)
    TIMES           reduce using rule 110 (expression -> slice_literal .)
    DIVIDE          reduce using rule 110 (expression -> slice_literal .)
    MOD             reduce using rule 110 (expression -> slice_literal .)
    LBRACE          reduce using rule 110 (expression -> slice_literal .)
    COMMA           reduce using rule 110 (expression -> slice_literal .)
    IDENTIFIER      reduce using rule 110 (expression -> slice_literal .)
    VAR             reduce using rule 110 (expression -> slice_literal .)
    TYPE            reduce using rule 110 (expression -> slice_literal .)
    FOR             reduce using rule 110 (expression -> slice_literal .)
    PACKAGE         reduce using rule 110 (expression -> slice_literal .)
    IMPORT          reduce using rule 110 (expression -> slice_literal .)
    SWITCH          reduce using rule 110 (expression -> slice_literal .)
    IF              reduce using rule 110 (expression -> slice_literal .)
    FUNC            reduce using rule 110 (expression -> slice_literal .)
    RETURN          reduce using rule 110 (expression -> slice_literal .)
    $end            reduce using rule 110 (expression -> slice_literal .)
    RBRACE          reduce using rule 110 (expression -> slice_literal .)
    CASE            reduce using rule 110 (expression -> slice_literal .)
    DEFAULT         reduce using rule 110 (expression -> slice_literal .)
    RPAREN          reduce using rule 110 (expression -> slice_literal .)
    SEMICOLON       reduce using rule 110 (expression -> slice_literal .)
    RBRACKET        reduce using rule 110 (expression -> slice_literal .)
    COLON           reduce using rule 110 (expression -> slice_literal .)


state 53

    (112) expression -> llamarFuncion .

    LBRACKET        reduce using rule 112 (expression -> llamarFuncion .)
    EQ              reduce using rule 112 (expression -> llamarFuncion .)
    NEQ             reduce using rule 112 (expression -> llamarFuncion .)
    GT              reduce using rule 112 (expression -> llamarFuncion .)
    LT              reduce using rule 112 (expression -> llamarFuncion .)
    GE              reduce using rule 112 (expression -> llamarFuncion .)
    LE              reduce using rule 112 (expression -> llamarFuncion .)
    AND             reduce using rule 112 (expression -> llamarFuncion .)
    OR              reduce using rule 112 (expression -> llamarFuncion .)
    PLUS            reduce using rule 112 (expression -> llamarFuncion .)
    MINUS           reduce using rule 112 (expression -> llamarFuncion .)
    TIMES           reduce using rule 112 (expression -> llamarFuncion .)
    DIVIDE          reduce using rule 112 (expression -> llamarFuncion .)
    MOD             reduce using rule 112 (expression -> llamarFuncion .)
    LBRACE          reduce using rule 112 (expression -> llamarFuncion .)
    COMMA           reduce using rule 112 (expression -> llamarFuncion .)
    IDENTIFIER      reduce using rule 112 (expression -> llamarFuncion .)
    VAR             reduce using rule 112 (expression -> llamarFuncion .)
    TYPE            reduce using rule 112 (expression -> llamarFuncion .)
    FOR             reduce using rule 112 (expression -> llamarFuncion .)
    PACKAGE         reduce using rule 112 (expression -> llamarFuncion .)
    IMPORT          reduce using rule 112 (expression -> llamarFuncion .)
    SWITCH          reduce using rule 112 (expression -> llamarFuncion .)
    IF              reduce using rule 112 (expression -> llamarFuncion .)
    FUNC            reduce using rule 112 (expression -> llamarFuncion .)
    RETURN          reduce using rule 112 (expression -> llamarFuncion .)
    $end            reduce using rule 112 (expression -> llamarFuncion .)
    RBRACE          reduce using rule 112 (expression -> llamarFuncion .)
    CASE            reduce using rule 112 (expression -> llamarFuncion .)
    DEFAULT         reduce using rule 112 (expression -> llamarFuncion .)
    RPAREN          reduce using rule 112 (expression -> llamarFuncion .)
    SEMICOLON       reduce using rule 112 (expression -> llamarFuncion .)
    RBRACKET        reduce using rule 112 (expression -> llamarFuncion .)
    COLON           reduce using rule 112 (expression -> llamarFuncion .)


state 54

    (121) expression -> MINUS . expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    expression                     shift and go to state 114
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 55

    (122) expression -> LPAREN . expression RPAREN
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    expression                     shift and go to state 115
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 56

    (141) expression -> function_literal .

    LBRACKET        reduce using rule 141 (expression -> function_literal .)
    EQ              reduce using rule 141 (expression -> function_literal .)
    NEQ             reduce using rule 141 (expression -> function_literal .)
    GT              reduce using rule 141 (expression -> function_literal .)
    LT              reduce using rule 141 (expression -> function_literal .)
    GE              reduce using rule 141 (expression -> function_literal .)
    LE              reduce using rule 141 (expression -> function_literal .)
    AND             reduce using rule 141 (expression -> function_literal .)
    OR              reduce using rule 141 (expression -> function_literal .)
    PLUS            reduce using rule 141 (expression -> function_literal .)
    MINUS           reduce using rule 141 (expression -> function_literal .)
    TIMES           reduce using rule 141 (expression -> function_literal .)
    DIVIDE          reduce using rule 141 (expression -> function_literal .)
    MOD             reduce using rule 141 (expression -> function_literal .)
    LBRACE          reduce using rule 141 (expression -> function_literal .)
    COMMA           reduce using rule 141 (expression -> function_literal .)
    IDENTIFIER      reduce using rule 141 (expression -> function_literal .)
    VAR             reduce using rule 141 (expression -> function_literal .)
    TYPE            reduce using rule 141 (expression -> function_literal .)
    FOR             reduce using rule 141 (expression -> function_literal .)
    PACKAGE         reduce using rule 141 (expression -> function_literal .)
    IMPORT          reduce using rule 141 (expression -> function_literal .)
    SWITCH          reduce using rule 141 (expression -> function_literal .)
    IF              reduce using rule 141 (expression -> function_literal .)
    FUNC            reduce using rule 141 (expression -> function_literal .)
    RETURN          reduce using rule 141 (expression -> function_literal .)
    $end            reduce using rule 141 (expression -> function_literal .)
    RBRACE          reduce using rule 141 (expression -> function_literal .)
    CASE            reduce using rule 141 (expression -> function_literal .)
    DEFAULT         reduce using rule 141 (expression -> function_literal .)
    RPAREN          reduce using rule 141 (expression -> function_literal .)
    SEMICOLON       reduce using rule 141 (expression -> function_literal .)
    RBRACKET        reduce using rule 141 (expression -> function_literal .)
    COLON           reduce using rule 141 (expression -> function_literal .)


state 57

    (147) slice_literal -> LBRACKET . RBRACKET type_name LBRACE elements RBRACE

    RBRACKET        shift and go to state 116


state 58

    (127) function_literal -> FUNC . LPAREN parameters RPAREN return_type block

    LPAREN          shift and go to state 117


state 59

    (23) package -> PACKAGE MAIN .

    IDENTIFIER      reduce using rule 23 (package -> PACKAGE MAIN .)
    VAR             reduce using rule 23 (package -> PACKAGE MAIN .)
    TYPE            reduce using rule 23 (package -> PACKAGE MAIN .)
    FOR             reduce using rule 23 (package -> PACKAGE MAIN .)
    PACKAGE         reduce using rule 23 (package -> PACKAGE MAIN .)
    IMPORT          reduce using rule 23 (package -> PACKAGE MAIN .)
    SWITCH          reduce using rule 23 (package -> PACKAGE MAIN .)
    IF              reduce using rule 23 (package -> PACKAGE MAIN .)
    FUNC            reduce using rule 23 (package -> PACKAGE MAIN .)
    RETURN          reduce using rule 23 (package -> PACKAGE MAIN .)
    $end            reduce using rule 23 (package -> PACKAGE MAIN .)
    RBRACE          reduce using rule 23 (package -> PACKAGE MAIN .)
    CASE            reduce using rule 23 (package -> PACKAGE MAIN .)
    DEFAULT         reduce using rule 23 (package -> PACKAGE MAIN .)


state 60

    (24) package -> PACKAGE IDENTIFIER .

    IDENTIFIER      reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    VAR             reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    TYPE            reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    FOR             reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    PACKAGE         reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    IMPORT          reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    SWITCH          reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    IF              reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    FUNC            reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    RETURN          reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    $end            reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    RBRACE          reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    CASE            reduce using rule 24 (package -> PACKAGE IDENTIFIER .)
    DEFAULT         reduce using rule 24 (package -> PACKAGE IDENTIFIER .)


state 61

    (25) import -> IMPORT STRING .

    IDENTIFIER      reduce using rule 25 (import -> IMPORT STRING .)
    VAR             reduce using rule 25 (import -> IMPORT STRING .)
    TYPE            reduce using rule 25 (import -> IMPORT STRING .)
    FOR             reduce using rule 25 (import -> IMPORT STRING .)
    PACKAGE         reduce using rule 25 (import -> IMPORT STRING .)
    IMPORT          reduce using rule 25 (import -> IMPORT STRING .)
    SWITCH          reduce using rule 25 (import -> IMPORT STRING .)
    IF              reduce using rule 25 (import -> IMPORT STRING .)
    FUNC            reduce using rule 25 (import -> IMPORT STRING .)
    RETURN          reduce using rule 25 (import -> IMPORT STRING .)
    $end            reduce using rule 25 (import -> IMPORT STRING .)
    RBRACE          reduce using rule 25 (import -> IMPORT STRING .)
    CASE            reduce using rule 25 (import -> IMPORT STRING .)
    DEFAULT         reduce using rule 25 (import -> IMPORT STRING .)


state 62

    (26) import -> IMPORT LPAREN . import_list RPAREN
    (27) import_list -> . STRING
    (28) import_list -> . import_list STRING

    STRING          shift and go to state 119

    import_list                    shift and go to state 118

state 63

    (61) switch -> SWITCH expression . LBRACE caseBlocks RBRACE
    (113) expression -> expression . operadorLogico expression
    (114) expression -> expression . comparador expression
    (115) expression -> expression . operator expression
    (150) expression -> expression . LBRACKET expression RBRACKET
    (151) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (152) expression -> expression . LBRACKET COLON expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON RBRACKET
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (116) operator -> . PLUS
    (117) operator -> . MINUS
    (118) operator -> . TIMES
    (119) operator -> . DIVIDE
    (120) operator -> . MOD

    LBRACE          shift and go to state 120
    LBRACKET        shift and go to state 95
    AND             shift and go to state 102
    OR              shift and go to state 103
    EQ              shift and go to state 96
    NEQ             shift and go to state 97
    GT              shift and go to state 98
    LT              shift and go to state 99
    GE              shift and go to state 100
    LE              shift and go to state 101
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108

    operadorLogico                 shift and go to state 93
    comparador                     shift and go to state 121
    operator                       shift and go to state 94

state 64

    (103) expression -> IDENTIFIER .
    (111) expression -> IDENTIFIER . DOT IDENTIFIER
    (42) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    LBRACE          reduce using rule 103 (expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 103 (expression -> IDENTIFIER .)
    AND             reduce using rule 103 (expression -> IDENTIFIER .)
    OR              reduce using rule 103 (expression -> IDENTIFIER .)
    EQ              reduce using rule 103 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 103 (expression -> IDENTIFIER .)
    GT              reduce using rule 103 (expression -> IDENTIFIER .)
    LT              reduce using rule 103 (expression -> IDENTIFIER .)
    GE              reduce using rule 103 (expression -> IDENTIFIER .)
    LE              reduce using rule 103 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 103 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 103 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 103 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 103 (expression -> IDENTIFIER .)
    MOD             reduce using rule 103 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 103 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 103 (expression -> IDENTIFIER .)
    VAR             reduce using rule 103 (expression -> IDENTIFIER .)
    TYPE            reduce using rule 103 (expression -> IDENTIFIER .)
    FOR             reduce using rule 103 (expression -> IDENTIFIER .)
    PACKAGE         reduce using rule 103 (expression -> IDENTIFIER .)
    IMPORT          reduce using rule 103 (expression -> IDENTIFIER .)
    SWITCH          reduce using rule 103 (expression -> IDENTIFIER .)
    IF              reduce using rule 103 (expression -> IDENTIFIER .)
    FUNC            reduce using rule 103 (expression -> IDENTIFIER .)
    RETURN          reduce using rule 103 (expression -> IDENTIFIER .)
    $end            reduce using rule 103 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 103 (expression -> IDENTIFIER .)
    CASE            reduce using rule 103 (expression -> IDENTIFIER .)
    DEFAULT         reduce using rule 103 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 103 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 103 (expression -> IDENTIFIER .)
    RBRACKET        reduce using rule 103 (expression -> IDENTIFIER .)
    COLON           reduce using rule 103 (expression -> IDENTIFIER .)
    DOT             shift and go to state 113
    LPAREN          shift and go to state 35


state 65

    (123) if_statement -> IF condicion . block
    (124) if_statement -> IF condicion . block ELSE block
    (50) condicion_compleja -> condicion . operadorLogico condicion
    (51) condicion_compleja -> condicion . operadorLogico condicion_compleja
    (100) block -> . LBRACE statement_list RBRACE
    (101) block -> . LBRACE RBRACE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR

    LBRACE          shift and go to state 43
    AND             shift and go to state 102
    OR              shift and go to state 103

    block                          shift and go to state 122
    operadorLogico                 shift and go to state 123

state 66

    (125) if_statement -> IF condicion_compleja . block
    (126) if_statement -> IF condicion_compleja . block ELSE block
    (100) block -> . LBRACE statement_list RBRACE
    (101) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 43

    block                          shift and go to state 124

state 67

    (74) function -> FUNC IDENTIFIER . LPAREN params_opt RPAREN block
    (75) function -> FUNC IDENTIFIER . LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE

    LPAREN          shift and go to state 125


state 68

    (94) method_definition -> FUNC LPAREN . IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (127) function_literal -> FUNC LPAREN . parameters RPAREN return_type block
    (128) parameters -> . parameters COMMA parameter
    (129) parameters -> . parameter
    (130) parameters -> . empty
    (131) parameter -> . IDENTIFIER type_name
    (132) parameter -> . identifier_list type_name
    (60) empty -> .
    (133) identifier_list -> . IDENTIFIER
    (134) identifier_list -> . IDENTIFIER COMMA identifier_list

    IDENTIFIER      shift and go to state 126
    RPAREN          reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)

    parameters                     shift and go to state 127
    parameter                      shift and go to state 128
    empty                          shift and go to state 129
    identifier_list                shift and go to state 130

state 69

    (76) function -> FUNC MAIN . LPAREN params_opt RPAREN block

    LPAREN          shift and go to state 131


state 70

    (77) return_statement -> RETURN return_values .

    IDENTIFIER      reduce using rule 77 (return_statement -> RETURN return_values .)
    VAR             reduce using rule 77 (return_statement -> RETURN return_values .)
    TYPE            reduce using rule 77 (return_statement -> RETURN return_values .)
    FOR             reduce using rule 77 (return_statement -> RETURN return_values .)
    PACKAGE         reduce using rule 77 (return_statement -> RETURN return_values .)
    IMPORT          reduce using rule 77 (return_statement -> RETURN return_values .)
    SWITCH          reduce using rule 77 (return_statement -> RETURN return_values .)
    IF              reduce using rule 77 (return_statement -> RETURN return_values .)
    FUNC            reduce using rule 77 (return_statement -> RETURN return_values .)
    RETURN          reduce using rule 77 (return_statement -> RETURN return_values .)
    $end            reduce using rule 77 (return_statement -> RETURN return_values .)
    RBRACE          reduce using rule 77 (return_statement -> RETURN return_values .)
    CASE            reduce using rule 77 (return_statement -> RETURN return_values .)
    DEFAULT         reduce using rule 77 (return_statement -> RETURN return_values .)


state 71

    (78) return_values -> expression .
    (79) return_values -> expression . COMMA return_values
    (113) expression -> expression . operadorLogico expression
    (114) expression -> expression . comparador expression
    (115) expression -> expression . operator expression
    (150) expression -> expression . LBRACKET expression RBRACKET
    (151) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (152) expression -> expression . LBRACKET COLON expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON RBRACKET
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (116) operator -> . PLUS
    (117) operator -> . MINUS
    (118) operator -> . TIMES
    (119) operator -> . DIVIDE
    (120) operator -> . MOD

    IDENTIFIER      reduce using rule 78 (return_values -> expression .)
    VAR             reduce using rule 78 (return_values -> expression .)
    TYPE            reduce using rule 78 (return_values -> expression .)
    FOR             reduce using rule 78 (return_values -> expression .)
    PACKAGE         reduce using rule 78 (return_values -> expression .)
    IMPORT          reduce using rule 78 (return_values -> expression .)
    SWITCH          reduce using rule 78 (return_values -> expression .)
    IF              reduce using rule 78 (return_values -> expression .)
    FUNC            reduce using rule 78 (return_values -> expression .)
    RETURN          reduce using rule 78 (return_values -> expression .)
    $end            reduce using rule 78 (return_values -> expression .)
    RBRACE          reduce using rule 78 (return_values -> expression .)
    CASE            reduce using rule 78 (return_values -> expression .)
    DEFAULT         reduce using rule 78 (return_values -> expression .)
    COMMA           shift and go to state 132
    LBRACKET        shift and go to state 95
    AND             shift and go to state 102
    OR              shift and go to state 103
    EQ              shift and go to state 96
    NEQ             shift and go to state 97
    GT              shift and go to state 98
    LT              shift and go to state 99
    GE              shift and go to state 100
    LE              shift and go to state 101
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108

    operadorLogico                 shift and go to state 93
    comparador                     shift and go to state 121
    operator                       shift and go to state 94

state 72

    (103) expression -> IDENTIFIER .
    (111) expression -> IDENTIFIER . DOT IDENTIFIER
    (87) struct_literal -> IDENTIFIER . LBRACE struct_field_assignments RBRACE
    (42) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    LBRACKET        reduce using rule 103 (expression -> IDENTIFIER .)
    AND             reduce using rule 103 (expression -> IDENTIFIER .)
    OR              reduce using rule 103 (expression -> IDENTIFIER .)
    EQ              reduce using rule 103 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 103 (expression -> IDENTIFIER .)
    GT              reduce using rule 103 (expression -> IDENTIFIER .)
    LT              reduce using rule 103 (expression -> IDENTIFIER .)
    GE              reduce using rule 103 (expression -> IDENTIFIER .)
    LE              reduce using rule 103 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 103 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 103 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 103 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 103 (expression -> IDENTIFIER .)
    MOD             reduce using rule 103 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 103 (expression -> IDENTIFIER .)
    VAR             reduce using rule 103 (expression -> IDENTIFIER .)
    TYPE            reduce using rule 103 (expression -> IDENTIFIER .)
    FOR             reduce using rule 103 (expression -> IDENTIFIER .)
    PACKAGE         reduce using rule 103 (expression -> IDENTIFIER .)
    IMPORT          reduce using rule 103 (expression -> IDENTIFIER .)
    SWITCH          reduce using rule 103 (expression -> IDENTIFIER .)
    IF              reduce using rule 103 (expression -> IDENTIFIER .)
    FUNC            reduce using rule 103 (expression -> IDENTIFIER .)
    RETURN          reduce using rule 103 (expression -> IDENTIFIER .)
    $end            reduce using rule 103 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 103 (expression -> IDENTIFIER .)
    CASE            reduce using rule 103 (expression -> IDENTIFIER .)
    DEFAULT         reduce using rule 103 (expression -> IDENTIFIER .)
    DOT             shift and go to state 113
    LBRACE          shift and go to state 133
    LPAREN          shift and go to state 35


state 73

    (35) assignment -> IDENTIFIER DECLARE_ASSIGN expression .
    (113) expression -> expression . operadorLogico expression
    (114) expression -> expression . comparador expression
    (115) expression -> expression . operator expression
    (150) expression -> expression . LBRACKET expression RBRACKET
    (151) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (152) expression -> expression . LBRACKET COLON expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON RBRACKET
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (116) operator -> . PLUS
    (117) operator -> . MINUS
    (118) operator -> . TIMES
    (119) operator -> . DIVIDE
    (120) operator -> . MOD

    IDENTIFIER      reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    VAR             reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    TYPE            reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    FOR             reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    PACKAGE         reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    IMPORT          reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    SWITCH          reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    IF              reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    FUNC            reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    RETURN          reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    $end            reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    RBRACE          reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    CASE            reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    DEFAULT         reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    LBRACKET        shift and go to state 95
    AND             shift and go to state 102
    OR              shift and go to state 103
    EQ              shift and go to state 96
    NEQ             shift and go to state 97
    GT              shift and go to state 98
    LT              shift and go to state 99
    GE              shift and go to state 100
    LE              shift and go to state 101
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108

    operadorLogico                 shift and go to state 93
    comparador                     shift and go to state 121
    operator                       shift and go to state 94

state 74

    (36) assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .

    IDENTIFIER      reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    VAR             reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    TYPE            reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    FOR             reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    PACKAGE         reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    IMPORT          reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    SWITCH          reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    IF              reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    FUNC            reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    RETURN          reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    $end            reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    RBRACE          reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    CASE            reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    DEFAULT         reduce using rule 36 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)


state 75

    (39) assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .
    (146) declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .
    (110) expression -> slice_literal .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for VAR resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for TYPE resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for FOR resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IMPORT resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for SWITCH resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IF resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for FUNC resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for RETURN resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for $end resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for RBRACE resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for CASE resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for VAR resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for TYPE resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for FOR resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IMPORT resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for SWITCH resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IF resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for FUNC resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for RETURN resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for $end resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for RBRACE resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for CASE resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    IDENTIFIER      reduce using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    VAR             reduce using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    TYPE            reduce using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    FOR             reduce using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    PACKAGE         reduce using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    IMPORT          reduce using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    SWITCH          reduce using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    IF              reduce using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    FUNC            reduce using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    RETURN          reduce using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    $end            reduce using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    RBRACE          reduce using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    CASE            reduce using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    DEFAULT         reduce using rule 39 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    LBRACKET        reduce using rule 110 (expression -> slice_literal .)
    AND             reduce using rule 110 (expression -> slice_literal .)
    OR              reduce using rule 110 (expression -> slice_literal .)
    EQ              reduce using rule 110 (expression -> slice_literal .)
    NEQ             reduce using rule 110 (expression -> slice_literal .)
    GT              reduce using rule 110 (expression -> slice_literal .)
    LT              reduce using rule 110 (expression -> slice_literal .)
    GE              reduce using rule 110 (expression -> slice_literal .)
    LE              reduce using rule 110 (expression -> slice_literal .)
    PLUS            reduce using rule 110 (expression -> slice_literal .)
    MINUS           reduce using rule 110 (expression -> slice_literal .)
    TIMES           reduce using rule 110 (expression -> slice_literal .)
    DIVIDE          reduce using rule 110 (expression -> slice_literal .)
    MOD             reduce using rule 110 (expression -> slice_literal .)

  ! IDENTIFIER      [ reduce using rule 146 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! VAR             [ reduce using rule 146 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! TYPE            [ reduce using rule 146 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! FOR             [ reduce using rule 146 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! PACKAGE         [ reduce using rule 146 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! IMPORT          [ reduce using rule 146 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! SWITCH          [ reduce using rule 146 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! IF              [ reduce using rule 146 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! FUNC            [ reduce using rule 146 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! RETURN          [ reduce using rule 146 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! $end            [ reduce using rule 146 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! RBRACE          [ reduce using rule 146 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! CASE            [ reduce using rule 146 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! DEFAULT         [ reduce using rule 146 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! IDENTIFIER      [ reduce using rule 110 (expression -> slice_literal .) ]
  ! VAR             [ reduce using rule 110 (expression -> slice_literal .) ]
  ! TYPE            [ reduce using rule 110 (expression -> slice_literal .) ]
  ! FOR             [ reduce using rule 110 (expression -> slice_literal .) ]
  ! PACKAGE         [ reduce using rule 110 (expression -> slice_literal .) ]
  ! IMPORT          [ reduce using rule 110 (expression -> slice_literal .) ]
  ! SWITCH          [ reduce using rule 110 (expression -> slice_literal .) ]
  ! IF              [ reduce using rule 110 (expression -> slice_literal .) ]
  ! FUNC            [ reduce using rule 110 (expression -> slice_literal .) ]
  ! RETURN          [ reduce using rule 110 (expression -> slice_literal .) ]
  ! $end            [ reduce using rule 110 (expression -> slice_literal .) ]
  ! RBRACE          [ reduce using rule 110 (expression -> slice_literal .) ]
  ! CASE            [ reduce using rule 110 (expression -> slice_literal .) ]
  ! DEFAULT         [ reduce using rule 110 (expression -> slice_literal .) ]


state 76

    (66) map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .

    IDENTIFIER      reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    VAR             reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    TYPE            reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    FOR             reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    PACKAGE         reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    IMPORT          reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    SWITCH          reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    IF              reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    FUNC            reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    RETURN          reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    $end            reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    RBRACE          reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    CASE            reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    DEFAULT         reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)


state 77

    (68) mapLiteral -> MAP . LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE

    LBRACKET        shift and go to state 134


state 78

    (41) assignment -> IDENTIFIER ASSIGN expression .
    (113) expression -> expression . operadorLogico expression
    (114) expression -> expression . comparador expression
    (115) expression -> expression . operator expression
    (150) expression -> expression . LBRACKET expression RBRACKET
    (151) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (152) expression -> expression . LBRACKET COLON expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON RBRACKET
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (116) operator -> . PLUS
    (117) operator -> . MINUS
    (118) operator -> . TIMES
    (119) operator -> . DIVIDE
    (120) operator -> . MOD

    IDENTIFIER      reduce using rule 41 (assignment -> IDENTIFIER ASSIGN expression .)
    VAR             reduce using rule 41 (assignment -> IDENTIFIER ASSIGN expression .)
    TYPE            reduce using rule 41 (assignment -> IDENTIFIER ASSIGN expression .)
    FOR             reduce using rule 41 (assignment -> IDENTIFIER ASSIGN expression .)
    PACKAGE         reduce using rule 41 (assignment -> IDENTIFIER ASSIGN expression .)
    IMPORT          reduce using rule 41 (assignment -> IDENTIFIER ASSIGN expression .)
    SWITCH          reduce using rule 41 (assignment -> IDENTIFIER ASSIGN expression .)
    IF              reduce using rule 41 (assignment -> IDENTIFIER ASSIGN expression .)
    FUNC            reduce using rule 41 (assignment -> IDENTIFIER ASSIGN expression .)
    RETURN          reduce using rule 41 (assignment -> IDENTIFIER ASSIGN expression .)
    $end            reduce using rule 41 (assignment -> IDENTIFIER ASSIGN expression .)
    RBRACE          reduce using rule 41 (assignment -> IDENTIFIER ASSIGN expression .)
    CASE            reduce using rule 41 (assignment -> IDENTIFIER ASSIGN expression .)
    DEFAULT         reduce using rule 41 (assignment -> IDENTIFIER ASSIGN expression .)
    LBRACKET        shift and go to state 95
    AND             shift and go to state 102
    OR              shift and go to state 103
    EQ              shift and go to state 96
    NEQ             shift and go to state 97
    GT              shift and go to state 98
    LT              shift and go to state 99
    GE              shift and go to state 100
    LE              shift and go to state 101
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108

    operadorLogico                 shift and go to state 93
    comparador                     shift and go to state 121
    operator                       shift and go to state 94

state 79

    (33) input -> IDENTIFIER DOT IDENTIFIER . LPAREN AMPERSAND IDENTIFIER RPAREN
    (44) llamarFuncion -> IDENTIFIER DOT IDENTIFIER . LPAREN argument_list_opt RPAREN

    LPAREN          shift and go to state 135


state 80

    (42) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt . RPAREN
    (43) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt . COMMA expression RPAREN

    RPAREN          shift and go to state 136
    COMMA           shift and go to state 137


state 81

    (45) argument_list -> expression .
    (113) expression -> expression . operadorLogico expression
    (114) expression -> expression . comparador expression
    (115) expression -> expression . operator expression
    (150) expression -> expression . LBRACKET expression RBRACKET
    (151) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (152) expression -> expression . LBRACKET COLON expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON RBRACKET
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (116) operator -> . PLUS
    (117) operator -> . MINUS
    (118) operator -> . TIMES
    (119) operator -> . DIVIDE
    (120) operator -> . MOD

    COMMA           reduce using rule 45 (argument_list -> expression .)
    RPAREN          reduce using rule 45 (argument_list -> expression .)
    LBRACKET        shift and go to state 95
    AND             shift and go to state 102
    OR              shift and go to state 103
    EQ              shift and go to state 96
    NEQ             shift and go to state 97
    GT              shift and go to state 98
    LT              shift and go to state 99
    GE              shift and go to state 100
    LE              shift and go to state 101
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108

    operadorLogico                 shift and go to state 93
    comparador                     shift and go to state 121
    operator                       shift and go to state 94

state 82

    (47) argument_list_opt -> argument_list .
    (46) argument_list -> argument_list . COMMA expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 47 (argument_list_opt -> argument_list .)
    COMMA           shift and go to state 138

  ! COMMA           [ reduce using rule 47 (argument_list_opt -> argument_list .) ]


state 83

    (136) type_name -> IDENTIFIER .

    ASSIGN          reduce using rule 136 (type_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 136 (type_name -> IDENTIFIER .)
    VAR             reduce using rule 136 (type_name -> IDENTIFIER .)
    TYPE            reduce using rule 136 (type_name -> IDENTIFIER .)
    FOR             reduce using rule 136 (type_name -> IDENTIFIER .)
    PACKAGE         reduce using rule 136 (type_name -> IDENTIFIER .)
    IMPORT          reduce using rule 136 (type_name -> IDENTIFIER .)
    SWITCH          reduce using rule 136 (type_name -> IDENTIFIER .)
    IF              reduce using rule 136 (type_name -> IDENTIFIER .)
    FUNC            reduce using rule 136 (type_name -> IDENTIFIER .)
    RETURN          reduce using rule 136 (type_name -> IDENTIFIER .)
    $end            reduce using rule 136 (type_name -> IDENTIFIER .)
    RBRACE          reduce using rule 136 (type_name -> IDENTIFIER .)
    CASE            reduce using rule 136 (type_name -> IDENTIFIER .)
    DEFAULT         reduce using rule 136 (type_name -> IDENTIFIER .)
    LBRACE          reduce using rule 136 (type_name -> IDENTIFIER .)
    RPAREN          reduce using rule 136 (type_name -> IDENTIFIER .)
    COMMA           reduce using rule 136 (type_name -> IDENTIFIER .)
    RBRACKET        reduce using rule 136 (type_name -> IDENTIFIER .)


state 84

    (37) assignment -> VAR IDENTIFIER type_name . ASSIGN expression
    (38) assignment -> VAR IDENTIFIER type_name . ASSIGN llamarFuncion
    (40) assignment -> VAR IDENTIFIER type_name . ASSIGN slice_literal
    (34) var_declaration -> VAR IDENTIFIER type_name .

    ASSIGN          shift and go to state 139
    IDENTIFIER      reduce using rule 34 (var_declaration -> VAR IDENTIFIER type_name .)
    VAR             reduce using rule 34 (var_declaration -> VAR IDENTIFIER type_name .)
    TYPE            reduce using rule 34 (var_declaration -> VAR IDENTIFIER type_name .)
    FOR             reduce using rule 34 (var_declaration -> VAR IDENTIFIER type_name .)
    PACKAGE         reduce using rule 34 (var_declaration -> VAR IDENTIFIER type_name .)
    IMPORT          reduce using rule 34 (var_declaration -> VAR IDENTIFIER type_name .)
    SWITCH          reduce using rule 34 (var_declaration -> VAR IDENTIFIER type_name .)
    IF              reduce using rule 34 (var_declaration -> VAR IDENTIFIER type_name .)
    FUNC            reduce using rule 34 (var_declaration -> VAR IDENTIFIER type_name .)
    RETURN          reduce using rule 34 (var_declaration -> VAR IDENTIFIER type_name .)
    $end            reduce using rule 34 (var_declaration -> VAR IDENTIFIER type_name .)
    RBRACE          reduce using rule 34 (var_declaration -> VAR IDENTIFIER type_name .)
    CASE            reduce using rule 34 (var_declaration -> VAR IDENTIFIER type_name .)
    DEFAULT         reduce using rule 34 (var_declaration -> VAR IDENTIFIER type_name .)


state 85

    (67) map -> VAR IDENTIFIER ASSIGN . mapLiteral
    (68) mapLiteral -> . MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE

    MAP             shift and go to state 77

    mapLiteral                     shift and go to state 140

state 86

    (145) slice_declaration -> VAR IDENTIFIER LBRACKET . RBRACKET type_name
    (137) type_name -> LBRACKET . RBRACKET type_name

    RBRACKET        shift and go to state 141


state 87

    (135) type_name -> DATATYPE .

    ASSIGN          reduce using rule 135 (type_name -> DATATYPE .)
    IDENTIFIER      reduce using rule 135 (type_name -> DATATYPE .)
    VAR             reduce using rule 135 (type_name -> DATATYPE .)
    TYPE            reduce using rule 135 (type_name -> DATATYPE .)
    FOR             reduce using rule 135 (type_name -> DATATYPE .)
    PACKAGE         reduce using rule 135 (type_name -> DATATYPE .)
    IMPORT          reduce using rule 135 (type_name -> DATATYPE .)
    SWITCH          reduce using rule 135 (type_name -> DATATYPE .)
    IF              reduce using rule 135 (type_name -> DATATYPE .)
    FUNC            reduce using rule 135 (type_name -> DATATYPE .)
    RETURN          reduce using rule 135 (type_name -> DATATYPE .)
    $end            reduce using rule 135 (type_name -> DATATYPE .)
    RBRACE          reduce using rule 135 (type_name -> DATATYPE .)
    CASE            reduce using rule 135 (type_name -> DATATYPE .)
    DEFAULT         reduce using rule 135 (type_name -> DATATYPE .)
    LBRACE          reduce using rule 135 (type_name -> DATATYPE .)
    RPAREN          reduce using rule 135 (type_name -> DATATYPE .)
    COMMA           reduce using rule 135 (type_name -> DATATYPE .)
    RBRACKET        reduce using rule 135 (type_name -> DATATYPE .)


state 88

    (138) type_name -> FUNC . LPAREN parameters RPAREN return_type

    LPAREN          shift and go to state 142


state 89

    (86) struct_definition -> TYPE IDENTIFIER STRUCT . LBRACE struct_fields RBRACE

    LBRACE          shift and go to state 143


state 90

    (95) for_statement -> FOR shortAssignment SEMICOLON . condicion SEMICOLON expression block
    (49) condicion -> . expression comparador expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    condicion                      shift and go to state 144
    expression                     shift and go to state 40
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 91

    (97) for_statement -> FOR condicion block .

    IDENTIFIER      reduce using rule 97 (for_statement -> FOR condicion block .)
    VAR             reduce using rule 97 (for_statement -> FOR condicion block .)
    TYPE            reduce using rule 97 (for_statement -> FOR condicion block .)
    FOR             reduce using rule 97 (for_statement -> FOR condicion block .)
    PACKAGE         reduce using rule 97 (for_statement -> FOR condicion block .)
    IMPORT          reduce using rule 97 (for_statement -> FOR condicion block .)
    SWITCH          reduce using rule 97 (for_statement -> FOR condicion block .)
    IF              reduce using rule 97 (for_statement -> FOR condicion block .)
    FUNC            reduce using rule 97 (for_statement -> FOR condicion block .)
    RETURN          reduce using rule 97 (for_statement -> FOR condicion block .)
    $end            reduce using rule 97 (for_statement -> FOR condicion block .)
    RBRACE          reduce using rule 97 (for_statement -> FOR condicion block .)
    CASE            reduce using rule 97 (for_statement -> FOR condicion block .)
    DEFAULT         reduce using rule 97 (for_statement -> FOR condicion block .)


state 92

    (49) condicion -> expression comparador . expression
    (114) expression -> expression comparador . expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    expression                     shift and go to state 145
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 93

    (113) expression -> expression operadorLogico . expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    expression                     shift and go to state 146
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 94

    (115) expression -> expression operator . expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    expression                     shift and go to state 147
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 95

    (150) expression -> expression LBRACKET . expression RBRACKET
    (151) expression -> expression LBRACKET . expression COLON expression RBRACKET
    (152) expression -> expression LBRACKET . COLON expression RBRACKET
    (153) expression -> expression LBRACKET . expression COLON RBRACKET
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    COLON           shift and go to state 149
    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    expression                     shift and go to state 148
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 96

    (54) comparador -> EQ .

    NUMBER          reduce using rule 54 (comparador -> EQ .)
    IDENTIFIER      reduce using rule 54 (comparador -> EQ .)
    RUNE            reduce using rule 54 (comparador -> EQ .)
    STRING          reduce using rule 54 (comparador -> EQ .)
    RAW_STRING      reduce using rule 54 (comparador -> EQ .)
    TRUE            reduce using rule 54 (comparador -> EQ .)
    FALSE           reduce using rule 54 (comparador -> EQ .)
    NIL             reduce using rule 54 (comparador -> EQ .)
    MINUS           reduce using rule 54 (comparador -> EQ .)
    LPAREN          reduce using rule 54 (comparador -> EQ .)
    LBRACKET        reduce using rule 54 (comparador -> EQ .)
    FUNC            reduce using rule 54 (comparador -> EQ .)


state 97

    (55) comparador -> NEQ .

    NUMBER          reduce using rule 55 (comparador -> NEQ .)
    IDENTIFIER      reduce using rule 55 (comparador -> NEQ .)
    RUNE            reduce using rule 55 (comparador -> NEQ .)
    STRING          reduce using rule 55 (comparador -> NEQ .)
    RAW_STRING      reduce using rule 55 (comparador -> NEQ .)
    TRUE            reduce using rule 55 (comparador -> NEQ .)
    FALSE           reduce using rule 55 (comparador -> NEQ .)
    NIL             reduce using rule 55 (comparador -> NEQ .)
    MINUS           reduce using rule 55 (comparador -> NEQ .)
    LPAREN          reduce using rule 55 (comparador -> NEQ .)
    LBRACKET        reduce using rule 55 (comparador -> NEQ .)
    FUNC            reduce using rule 55 (comparador -> NEQ .)


state 98

    (56) comparador -> GT .

    NUMBER          reduce using rule 56 (comparador -> GT .)
    IDENTIFIER      reduce using rule 56 (comparador -> GT .)
    RUNE            reduce using rule 56 (comparador -> GT .)
    STRING          reduce using rule 56 (comparador -> GT .)
    RAW_STRING      reduce using rule 56 (comparador -> GT .)
    TRUE            reduce using rule 56 (comparador -> GT .)
    FALSE           reduce using rule 56 (comparador -> GT .)
    NIL             reduce using rule 56 (comparador -> GT .)
    MINUS           reduce using rule 56 (comparador -> GT .)
    LPAREN          reduce using rule 56 (comparador -> GT .)
    LBRACKET        reduce using rule 56 (comparador -> GT .)
    FUNC            reduce using rule 56 (comparador -> GT .)


state 99

    (57) comparador -> LT .

    NUMBER          reduce using rule 57 (comparador -> LT .)
    IDENTIFIER      reduce using rule 57 (comparador -> LT .)
    RUNE            reduce using rule 57 (comparador -> LT .)
    STRING          reduce using rule 57 (comparador -> LT .)
    RAW_STRING      reduce using rule 57 (comparador -> LT .)
    TRUE            reduce using rule 57 (comparador -> LT .)
    FALSE           reduce using rule 57 (comparador -> LT .)
    NIL             reduce using rule 57 (comparador -> LT .)
    MINUS           reduce using rule 57 (comparador -> LT .)
    LPAREN          reduce using rule 57 (comparador -> LT .)
    LBRACKET        reduce using rule 57 (comparador -> LT .)
    FUNC            reduce using rule 57 (comparador -> LT .)


state 100

    (58) comparador -> GE .

    NUMBER          reduce using rule 58 (comparador -> GE .)
    IDENTIFIER      reduce using rule 58 (comparador -> GE .)
    RUNE            reduce using rule 58 (comparador -> GE .)
    STRING          reduce using rule 58 (comparador -> GE .)
    RAW_STRING      reduce using rule 58 (comparador -> GE .)
    TRUE            reduce using rule 58 (comparador -> GE .)
    FALSE           reduce using rule 58 (comparador -> GE .)
    NIL             reduce using rule 58 (comparador -> GE .)
    MINUS           reduce using rule 58 (comparador -> GE .)
    LPAREN          reduce using rule 58 (comparador -> GE .)
    LBRACKET        reduce using rule 58 (comparador -> GE .)
    FUNC            reduce using rule 58 (comparador -> GE .)


state 101

    (59) comparador -> LE .

    NUMBER          reduce using rule 59 (comparador -> LE .)
    IDENTIFIER      reduce using rule 59 (comparador -> LE .)
    RUNE            reduce using rule 59 (comparador -> LE .)
    STRING          reduce using rule 59 (comparador -> LE .)
    RAW_STRING      reduce using rule 59 (comparador -> LE .)
    TRUE            reduce using rule 59 (comparador -> LE .)
    FALSE           reduce using rule 59 (comparador -> LE .)
    NIL             reduce using rule 59 (comparador -> LE .)
    MINUS           reduce using rule 59 (comparador -> LE .)
    LPAREN          reduce using rule 59 (comparador -> LE .)
    LBRACKET        reduce using rule 59 (comparador -> LE .)
    FUNC            reduce using rule 59 (comparador -> LE .)


state 102

    (52) operadorLogico -> AND .

    NUMBER          reduce using rule 52 (operadorLogico -> AND .)
    IDENTIFIER      reduce using rule 52 (operadorLogico -> AND .)
    RUNE            reduce using rule 52 (operadorLogico -> AND .)
    STRING          reduce using rule 52 (operadorLogico -> AND .)
    RAW_STRING      reduce using rule 52 (operadorLogico -> AND .)
    TRUE            reduce using rule 52 (operadorLogico -> AND .)
    FALSE           reduce using rule 52 (operadorLogico -> AND .)
    NIL             reduce using rule 52 (operadorLogico -> AND .)
    MINUS           reduce using rule 52 (operadorLogico -> AND .)
    LPAREN          reduce using rule 52 (operadorLogico -> AND .)
    LBRACKET        reduce using rule 52 (operadorLogico -> AND .)
    FUNC            reduce using rule 52 (operadorLogico -> AND .)


state 103

    (53) operadorLogico -> OR .

    NUMBER          reduce using rule 53 (operadorLogico -> OR .)
    IDENTIFIER      reduce using rule 53 (operadorLogico -> OR .)
    RUNE            reduce using rule 53 (operadorLogico -> OR .)
    STRING          reduce using rule 53 (operadorLogico -> OR .)
    RAW_STRING      reduce using rule 53 (operadorLogico -> OR .)
    TRUE            reduce using rule 53 (operadorLogico -> OR .)
    FALSE           reduce using rule 53 (operadorLogico -> OR .)
    NIL             reduce using rule 53 (operadorLogico -> OR .)
    MINUS           reduce using rule 53 (operadorLogico -> OR .)
    LPAREN          reduce using rule 53 (operadorLogico -> OR .)
    LBRACKET        reduce using rule 53 (operadorLogico -> OR .)
    FUNC            reduce using rule 53 (operadorLogico -> OR .)


state 104

    (116) operator -> PLUS .

    NUMBER          reduce using rule 116 (operator -> PLUS .)
    IDENTIFIER      reduce using rule 116 (operator -> PLUS .)
    RUNE            reduce using rule 116 (operator -> PLUS .)
    STRING          reduce using rule 116 (operator -> PLUS .)
    RAW_STRING      reduce using rule 116 (operator -> PLUS .)
    TRUE            reduce using rule 116 (operator -> PLUS .)
    FALSE           reduce using rule 116 (operator -> PLUS .)
    NIL             reduce using rule 116 (operator -> PLUS .)
    MINUS           reduce using rule 116 (operator -> PLUS .)
    LPAREN          reduce using rule 116 (operator -> PLUS .)
    LBRACKET        reduce using rule 116 (operator -> PLUS .)
    FUNC            reduce using rule 116 (operator -> PLUS .)


state 105

    (117) operator -> MINUS .

    NUMBER          reduce using rule 117 (operator -> MINUS .)
    IDENTIFIER      reduce using rule 117 (operator -> MINUS .)
    RUNE            reduce using rule 117 (operator -> MINUS .)
    STRING          reduce using rule 117 (operator -> MINUS .)
    RAW_STRING      reduce using rule 117 (operator -> MINUS .)
    TRUE            reduce using rule 117 (operator -> MINUS .)
    FALSE           reduce using rule 117 (operator -> MINUS .)
    NIL             reduce using rule 117 (operator -> MINUS .)
    MINUS           reduce using rule 117 (operator -> MINUS .)
    LPAREN          reduce using rule 117 (operator -> MINUS .)
    LBRACKET        reduce using rule 117 (operator -> MINUS .)
    FUNC            reduce using rule 117 (operator -> MINUS .)


state 106

    (118) operator -> TIMES .

    NUMBER          reduce using rule 118 (operator -> TIMES .)
    IDENTIFIER      reduce using rule 118 (operator -> TIMES .)
    RUNE            reduce using rule 118 (operator -> TIMES .)
    STRING          reduce using rule 118 (operator -> TIMES .)
    RAW_STRING      reduce using rule 118 (operator -> TIMES .)
    TRUE            reduce using rule 118 (operator -> TIMES .)
    FALSE           reduce using rule 118 (operator -> TIMES .)
    NIL             reduce using rule 118 (operator -> TIMES .)
    MINUS           reduce using rule 118 (operator -> TIMES .)
    LPAREN          reduce using rule 118 (operator -> TIMES .)
    LBRACKET        reduce using rule 118 (operator -> TIMES .)
    FUNC            reduce using rule 118 (operator -> TIMES .)


state 107

    (119) operator -> DIVIDE .

    NUMBER          reduce using rule 119 (operator -> DIVIDE .)
    IDENTIFIER      reduce using rule 119 (operator -> DIVIDE .)
    RUNE            reduce using rule 119 (operator -> DIVIDE .)
    STRING          reduce using rule 119 (operator -> DIVIDE .)
    RAW_STRING      reduce using rule 119 (operator -> DIVIDE .)
    TRUE            reduce using rule 119 (operator -> DIVIDE .)
    FALSE           reduce using rule 119 (operator -> DIVIDE .)
    NIL             reduce using rule 119 (operator -> DIVIDE .)
    MINUS           reduce using rule 119 (operator -> DIVIDE .)
    LPAREN          reduce using rule 119 (operator -> DIVIDE .)
    LBRACKET        reduce using rule 119 (operator -> DIVIDE .)
    FUNC            reduce using rule 119 (operator -> DIVIDE .)


state 108

    (120) operator -> MOD .

    NUMBER          reduce using rule 120 (operator -> MOD .)
    IDENTIFIER      reduce using rule 120 (operator -> MOD .)
    RUNE            reduce using rule 120 (operator -> MOD .)
    STRING          reduce using rule 120 (operator -> MOD .)
    RAW_STRING      reduce using rule 120 (operator -> MOD .)
    TRUE            reduce using rule 120 (operator -> MOD .)
    FALSE           reduce using rule 120 (operator -> MOD .)
    NIL             reduce using rule 120 (operator -> MOD .)
    MINUS           reduce using rule 120 (operator -> MOD .)
    LPAREN          reduce using rule 120 (operator -> MOD .)
    LBRACKET        reduce using rule 120 (operator -> MOD .)
    FUNC            reduce using rule 120 (operator -> MOD .)


state 109

    (96) shortAssignment -> identifier_list DECLARE_ASSIGN . expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    expression                     shift and go to state 150
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 110

    (100) block -> LBRACE statement_list . RBRACE
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . struct_definition
    (10) statement -> . for_statement
    (11) statement -> . package
    (12) statement -> . import
    (13) statement -> . switch
    (14) statement -> . map
    (15) statement -> . if_statement
    (16) statement -> . function
    (17) statement -> . method_definition
    (18) statement -> . function_literal
    (19) statement -> . var_declaration
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (22) statement -> . return_statement
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (39) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (40) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (41) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (86) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (95) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (97) for_statement -> . FOR condicion block
    (98) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (61) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (66) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (67) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (123) if_statement -> . IF condicion block
    (124) if_statement -> . IF condicion block ELSE block
    (125) if_statement -> . IF condicion_compleja block
    (126) if_statement -> . IF condicion_compleja block ELSE block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (76) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (94) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER type_name
    (145) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (146) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (77) return_statement -> . RETURN return_values

    RBRACE          shift and go to state 151
    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29
    RETURN          shift and go to state 30

    statement                      shift and go to state 31
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    struct_definition              shift and go to state 7
    for_statement                  shift and go to state 8
    package                        shift and go to state 9
    import                         shift and go to state 10
    switch                         shift and go to state 11
    map                            shift and go to state 12
    if_statement                   shift and go to state 13
    function                       shift and go to state 14
    method_definition              shift and go to state 15
    function_literal               shift and go to state 16
    var_declaration                shift and go to state 17
    slice_declaration              shift and go to state 18
    declare_assign                 shift and go to state 19
    return_statement               shift and go to state 20

state 111

    (101) block -> LBRACE RBRACE .

    IDENTIFIER      reduce using rule 101 (block -> LBRACE RBRACE .)
    VAR             reduce using rule 101 (block -> LBRACE RBRACE .)
    TYPE            reduce using rule 101 (block -> LBRACE RBRACE .)
    FOR             reduce using rule 101 (block -> LBRACE RBRACE .)
    PACKAGE         reduce using rule 101 (block -> LBRACE RBRACE .)
    IMPORT          reduce using rule 101 (block -> LBRACE RBRACE .)
    SWITCH          reduce using rule 101 (block -> LBRACE RBRACE .)
    IF              reduce using rule 101 (block -> LBRACE RBRACE .)
    FUNC            reduce using rule 101 (block -> LBRACE RBRACE .)
    RETURN          reduce using rule 101 (block -> LBRACE RBRACE .)
    $end            reduce using rule 101 (block -> LBRACE RBRACE .)
    RBRACE          reduce using rule 101 (block -> LBRACE RBRACE .)
    CASE            reduce using rule 101 (block -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 101 (block -> LBRACE RBRACE .)
    ELSE            reduce using rule 101 (block -> LBRACE RBRACE .)
    LBRACKET        reduce using rule 101 (block -> LBRACE RBRACE .)
    EQ              reduce using rule 101 (block -> LBRACE RBRACE .)
    NEQ             reduce using rule 101 (block -> LBRACE RBRACE .)
    GT              reduce using rule 101 (block -> LBRACE RBRACE .)
    LT              reduce using rule 101 (block -> LBRACE RBRACE .)
    GE              reduce using rule 101 (block -> LBRACE RBRACE .)
    LE              reduce using rule 101 (block -> LBRACE RBRACE .)
    AND             reduce using rule 101 (block -> LBRACE RBRACE .)
    OR              reduce using rule 101 (block -> LBRACE RBRACE .)
    PLUS            reduce using rule 101 (block -> LBRACE RBRACE .)
    MINUS           reduce using rule 101 (block -> LBRACE RBRACE .)
    TIMES           reduce using rule 101 (block -> LBRACE RBRACE .)
    DIVIDE          reduce using rule 101 (block -> LBRACE RBRACE .)
    MOD             reduce using rule 101 (block -> LBRACE RBRACE .)
    LBRACE          reduce using rule 101 (block -> LBRACE RBRACE .)
    COMMA           reduce using rule 101 (block -> LBRACE RBRACE .)
    RPAREN          reduce using rule 101 (block -> LBRACE RBRACE .)
    SEMICOLON       reduce using rule 101 (block -> LBRACE RBRACE .)
    RBRACKET        reduce using rule 101 (block -> LBRACE RBRACE .)
    COLON           reduce using rule 101 (block -> LBRACE RBRACE .)


state 112

    (134) identifier_list -> IDENTIFIER COMMA . identifier_list
    (133) identifier_list -> . IDENTIFIER
    (134) identifier_list -> . IDENTIFIER COMMA identifier_list

    IDENTIFIER      shift and go to state 152

    identifier_list                shift and go to state 153

state 113

    (111) expression -> IDENTIFIER DOT . IDENTIFIER
    (44) llamarFuncion -> IDENTIFIER DOT . IDENTIFIER LPAREN argument_list_opt RPAREN

    IDENTIFIER      shift and go to state 154


state 114

    (121) expression -> MINUS expression .
    (113) expression -> expression . operadorLogico expression
    (114) expression -> expression . comparador expression
    (115) expression -> expression . operator expression
    (150) expression -> expression . LBRACKET expression RBRACKET
    (151) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (152) expression -> expression . LBRACKET COLON expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON RBRACKET
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (116) operator -> . PLUS
    (117) operator -> . MINUS
    (118) operator -> . TIMES
    (119) operator -> . DIVIDE
    (120) operator -> . MOD

    LBRACKET        reduce using rule 121 (expression -> MINUS expression .)
    EQ              reduce using rule 121 (expression -> MINUS expression .)
    NEQ             reduce using rule 121 (expression -> MINUS expression .)
    GT              reduce using rule 121 (expression -> MINUS expression .)
    LT              reduce using rule 121 (expression -> MINUS expression .)
    GE              reduce using rule 121 (expression -> MINUS expression .)
    LE              reduce using rule 121 (expression -> MINUS expression .)
    AND             reduce using rule 121 (expression -> MINUS expression .)
    OR              reduce using rule 121 (expression -> MINUS expression .)
    PLUS            reduce using rule 121 (expression -> MINUS expression .)
    MINUS           reduce using rule 121 (expression -> MINUS expression .)
    TIMES           reduce using rule 121 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 121 (expression -> MINUS expression .)
    MOD             reduce using rule 121 (expression -> MINUS expression .)
    LBRACE          reduce using rule 121 (expression -> MINUS expression .)
    COMMA           reduce using rule 121 (expression -> MINUS expression .)
    IDENTIFIER      reduce using rule 121 (expression -> MINUS expression .)
    VAR             reduce using rule 121 (expression -> MINUS expression .)
    TYPE            reduce using rule 121 (expression -> MINUS expression .)
    FOR             reduce using rule 121 (expression -> MINUS expression .)
    PACKAGE         reduce using rule 121 (expression -> MINUS expression .)
    IMPORT          reduce using rule 121 (expression -> MINUS expression .)
    SWITCH          reduce using rule 121 (expression -> MINUS expression .)
    IF              reduce using rule 121 (expression -> MINUS expression .)
    FUNC            reduce using rule 121 (expression -> MINUS expression .)
    RETURN          reduce using rule 121 (expression -> MINUS expression .)
    $end            reduce using rule 121 (expression -> MINUS expression .)
    RBRACE          reduce using rule 121 (expression -> MINUS expression .)
    CASE            reduce using rule 121 (expression -> MINUS expression .)
    DEFAULT         reduce using rule 121 (expression -> MINUS expression .)
    RPAREN          reduce using rule 121 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 121 (expression -> MINUS expression .)
    RBRACKET        reduce using rule 121 (expression -> MINUS expression .)
    COLON           reduce using rule 121 (expression -> MINUS expression .)

  ! LBRACKET        [ shift and go to state 95 ]
  ! AND             [ shift and go to state 102 ]
  ! OR              [ shift and go to state 103 ]
  ! EQ              [ shift and go to state 96 ]
  ! NEQ             [ shift and go to state 97 ]
  ! GT              [ shift and go to state 98 ]
  ! LT              [ shift and go to state 99 ]
  ! GE              [ shift and go to state 100 ]
  ! LE              [ shift and go to state 101 ]
  ! PLUS            [ shift and go to state 104 ]
  ! MINUS           [ shift and go to state 105 ]
  ! TIMES           [ shift and go to state 106 ]
  ! DIVIDE          [ shift and go to state 107 ]
  ! MOD             [ shift and go to state 108 ]

    operadorLogico                 shift and go to state 93
    comparador                     shift and go to state 121
    operator                       shift and go to state 94

state 115

    (122) expression -> LPAREN expression . RPAREN
    (113) expression -> expression . operadorLogico expression
    (114) expression -> expression . comparador expression
    (115) expression -> expression . operator expression
    (150) expression -> expression . LBRACKET expression RBRACKET
    (151) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (152) expression -> expression . LBRACKET COLON expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON RBRACKET
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (116) operator -> . PLUS
    (117) operator -> . MINUS
    (118) operator -> . TIMES
    (119) operator -> . DIVIDE
    (120) operator -> . MOD

    RPAREN          shift and go to state 155
    LBRACKET        shift and go to state 95
    AND             shift and go to state 102
    OR              shift and go to state 103
    EQ              shift and go to state 96
    NEQ             shift and go to state 97
    GT              shift and go to state 98
    LT              shift and go to state 99
    GE              shift and go to state 100
    LE              shift and go to state 101
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108

    operadorLogico                 shift and go to state 93
    comparador                     shift and go to state 121
    operator                       shift and go to state 94

state 116

    (147) slice_literal -> LBRACKET RBRACKET . type_name LBRACE elements RBRACE
    (135) type_name -> . DATATYPE
    (136) type_name -> . IDENTIFIER
    (137) type_name -> . LBRACKET RBRACKET type_name
    (138) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 87
    IDENTIFIER      shift and go to state 83
    LBRACKET        shift and go to state 156
    FUNC            shift and go to state 88

    type_name                      shift and go to state 157

state 117

    (127) function_literal -> FUNC LPAREN . parameters RPAREN return_type block
    (128) parameters -> . parameters COMMA parameter
    (129) parameters -> . parameter
    (130) parameters -> . empty
    (131) parameter -> . IDENTIFIER type_name
    (132) parameter -> . identifier_list type_name
    (60) empty -> .
    (133) identifier_list -> . IDENTIFIER
    (134) identifier_list -> . IDENTIFIER COMMA identifier_list

    IDENTIFIER      shift and go to state 158
    RPAREN          reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)

    parameters                     shift and go to state 127
    parameter                      shift and go to state 128
    empty                          shift and go to state 129
    identifier_list                shift and go to state 130

state 118

    (26) import -> IMPORT LPAREN import_list . RPAREN
    (28) import_list -> import_list . STRING

    RPAREN          shift and go to state 159
    STRING          shift and go to state 160


state 119

    (27) import_list -> STRING .

    RPAREN          reduce using rule 27 (import_list -> STRING .)
    STRING          reduce using rule 27 (import_list -> STRING .)


state 120

    (61) switch -> SWITCH expression LBRACE . caseBlocks RBRACE
    (62) caseBlocks -> . caseBlock
    (63) caseBlocks -> . caseBlock caseBlocks
    (64) caseBlock -> . CASE expression COLON statement_list
    (65) caseBlock -> . DEFAULT COLON statement_list

    CASE            shift and go to state 163
    DEFAULT         shift and go to state 164

    caseBlocks                     shift and go to state 161
    caseBlock                      shift and go to state 162

state 121

    (114) expression -> expression comparador . expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    expression                     shift and go to state 165
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 122

    (123) if_statement -> IF condicion block .
    (124) if_statement -> IF condicion block . ELSE block

    IDENTIFIER      reduce using rule 123 (if_statement -> IF condicion block .)
    VAR             reduce using rule 123 (if_statement -> IF condicion block .)
    TYPE            reduce using rule 123 (if_statement -> IF condicion block .)
    FOR             reduce using rule 123 (if_statement -> IF condicion block .)
    PACKAGE         reduce using rule 123 (if_statement -> IF condicion block .)
    IMPORT          reduce using rule 123 (if_statement -> IF condicion block .)
    SWITCH          reduce using rule 123 (if_statement -> IF condicion block .)
    IF              reduce using rule 123 (if_statement -> IF condicion block .)
    FUNC            reduce using rule 123 (if_statement -> IF condicion block .)
    RETURN          reduce using rule 123 (if_statement -> IF condicion block .)
    $end            reduce using rule 123 (if_statement -> IF condicion block .)
    RBRACE          reduce using rule 123 (if_statement -> IF condicion block .)
    CASE            reduce using rule 123 (if_statement -> IF condicion block .)
    DEFAULT         reduce using rule 123 (if_statement -> IF condicion block .)
    ELSE            shift and go to state 166


state 123

    (50) condicion_compleja -> condicion operadorLogico . condicion
    (51) condicion_compleja -> condicion operadorLogico . condicion_compleja
    (49) condicion -> . expression comparador expression
    (50) condicion_compleja -> . condicion operadorLogico condicion
    (51) condicion_compleja -> . condicion operadorLogico condicion_compleja
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    condicion                      shift and go to state 167
    condicion_compleja             shift and go to state 168
    expression                     shift and go to state 40
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 124

    (125) if_statement -> IF condicion_compleja block .
    (126) if_statement -> IF condicion_compleja block . ELSE block

    IDENTIFIER      reduce using rule 125 (if_statement -> IF condicion_compleja block .)
    VAR             reduce using rule 125 (if_statement -> IF condicion_compleja block .)
    TYPE            reduce using rule 125 (if_statement -> IF condicion_compleja block .)
    FOR             reduce using rule 125 (if_statement -> IF condicion_compleja block .)
    PACKAGE         reduce using rule 125 (if_statement -> IF condicion_compleja block .)
    IMPORT          reduce using rule 125 (if_statement -> IF condicion_compleja block .)
    SWITCH          reduce using rule 125 (if_statement -> IF condicion_compleja block .)
    IF              reduce using rule 125 (if_statement -> IF condicion_compleja block .)
    FUNC            reduce using rule 125 (if_statement -> IF condicion_compleja block .)
    RETURN          reduce using rule 125 (if_statement -> IF condicion_compleja block .)
    $end            reduce using rule 125 (if_statement -> IF condicion_compleja block .)
    RBRACE          reduce using rule 125 (if_statement -> IF condicion_compleja block .)
    CASE            reduce using rule 125 (if_statement -> IF condicion_compleja block .)
    DEFAULT         reduce using rule 125 (if_statement -> IF condicion_compleja block .)
    ELSE            shift and go to state 169


state 125

    (74) function -> FUNC IDENTIFIER LPAREN . params_opt RPAREN block
    (75) function -> FUNC IDENTIFIER LPAREN . params_opt RPAREN return_type LBRACE statement_list RBRACE
    (80) params_opt -> . params
    (81) params_opt -> .
    (82) params -> . param
    (83) params -> . param COMMA params
    (84) param -> . IDENTIFIER type_name
    (85) param -> . identifier_list type_name
    (133) identifier_list -> . IDENTIFIER
    (134) identifier_list -> . IDENTIFIER COMMA identifier_list

    RPAREN          reduce using rule 81 (params_opt -> .)
    IDENTIFIER      shift and go to state 170

    params_opt                     shift and go to state 171
    params                         shift and go to state 172
    param                          shift and go to state 173
    identifier_list                shift and go to state 174

state 126

    (94) method_definition -> FUNC LPAREN IDENTIFIER . IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (131) parameter -> IDENTIFIER . type_name
    (133) identifier_list -> IDENTIFIER .
    (134) identifier_list -> IDENTIFIER . COMMA identifier_list
    (135) type_name -> . DATATYPE
    (136) type_name -> . IDENTIFIER
    (137) type_name -> . LBRACKET RBRACKET type_name
    (138) type_name -> . FUNC LPAREN parameters RPAREN return_type

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for DATATYPE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
    IDENTIFIER      shift and go to state 175
    COMMA           shift and go to state 112
    DATATYPE        shift and go to state 87
    LBRACKET        shift and go to state 156
    FUNC            shift and go to state 88

  ! DATATYPE        [ reduce using rule 133 (identifier_list -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 133 (identifier_list -> IDENTIFIER .) ]
  ! LBRACKET        [ reduce using rule 133 (identifier_list -> IDENTIFIER .) ]
  ! FUNC            [ reduce using rule 133 (identifier_list -> IDENTIFIER .) ]

    type_name                      shift and go to state 176

state 127

    (127) function_literal -> FUNC LPAREN parameters . RPAREN return_type block
    (128) parameters -> parameters . COMMA parameter

    RPAREN          shift and go to state 177
    COMMA           shift and go to state 178


state 128

    (129) parameters -> parameter .

    RPAREN          reduce using rule 129 (parameters -> parameter .)
    COMMA           reduce using rule 129 (parameters -> parameter .)


state 129

    (130) parameters -> empty .

    RPAREN          reduce using rule 130 (parameters -> empty .)
    COMMA           reduce using rule 130 (parameters -> empty .)


state 130

    (132) parameter -> identifier_list . type_name
    (135) type_name -> . DATATYPE
    (136) type_name -> . IDENTIFIER
    (137) type_name -> . LBRACKET RBRACKET type_name
    (138) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 87
    IDENTIFIER      shift and go to state 83
    LBRACKET        shift and go to state 156
    FUNC            shift and go to state 88

    type_name                      shift and go to state 179

state 131

    (76) function -> FUNC MAIN LPAREN . params_opt RPAREN block
    (80) params_opt -> . params
    (81) params_opt -> .
    (82) params -> . param
    (83) params -> . param COMMA params
    (84) param -> . IDENTIFIER type_name
    (85) param -> . identifier_list type_name
    (133) identifier_list -> . IDENTIFIER
    (134) identifier_list -> . IDENTIFIER COMMA identifier_list

    RPAREN          reduce using rule 81 (params_opt -> .)
    IDENTIFIER      shift and go to state 170

    params_opt                     shift and go to state 180
    params                         shift and go to state 172
    param                          shift and go to state 173
    identifier_list                shift and go to state 174

state 132

    (79) return_values -> expression COMMA . return_values
    (78) return_values -> . expression
    (79) return_values -> . expression COMMA return_values
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    expression                     shift and go to state 71
    return_values                  shift and go to state 181
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 133

    (87) struct_literal -> IDENTIFIER LBRACE . struct_field_assignments RBRACE
    (88) struct_field_assignments -> . struct_field_assignment
    (89) struct_field_assignments -> . struct_field_assignments COMMA struct_field_assignment
    (90) struct_field_assignment -> . IDENTIFIER COLON expression

    IDENTIFIER      shift and go to state 182

    struct_field_assignments       shift and go to state 183
    struct_field_assignment        shift and go to state 184

state 134

    (68) mapLiteral -> MAP LBRACKET . type_name RBRACKET type_name LBRACE mapEntries RBRACE
    (135) type_name -> . DATATYPE
    (136) type_name -> . IDENTIFIER
    (137) type_name -> . LBRACKET RBRACKET type_name
    (138) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 87
    IDENTIFIER      shift and go to state 83
    LBRACKET        shift and go to state 156
    FUNC            shift and go to state 88

    type_name                      shift and go to state 185

state 135

    (33) input -> IDENTIFIER DOT IDENTIFIER LPAREN . AMPERSAND IDENTIFIER RPAREN
    (44) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN . argument_list_opt RPAREN
    (47) argument_list_opt -> . argument_list
    (48) argument_list_opt -> .
    (45) argument_list -> . expression
    (46) argument_list -> . argument_list COMMA expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    AMPERSAND       shift and go to state 186
    RPAREN          reduce using rule 48 (argument_list_opt -> .)
    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    argument_list_opt              shift and go to state 187
    argument_list                  shift and go to state 82
    expression                     shift and go to state 81
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 136

    (42) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .

    IDENTIFIER      reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    VAR             reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TYPE            reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FOR             reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PACKAGE         reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IMPORT          reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SWITCH          reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IF              reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FUNC            reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RETURN          reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    $end            reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LBRACKET        reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    EQ              reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    NEQ             reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    GT              reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LT              reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    GE              reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LE              reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    AND             reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    OR              reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PLUS            reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    MINUS           reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TIMES           reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DIVIDE          reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    MOD             reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LBRACE          reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    CASE            reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DEFAULT         reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RPAREN          reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SEMICOLON       reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACKET        reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    COLON           reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)


state 137

    (43) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA . expression RPAREN
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    expression                     shift and go to state 188
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 138

    (46) argument_list -> argument_list COMMA . expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    expression                     shift and go to state 189
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 139

    (37) assignment -> VAR IDENTIFIER type_name ASSIGN . expression
    (38) assignment -> VAR IDENTIFIER type_name ASSIGN . llamarFuncion
    (40) assignment -> VAR IDENTIFIER type_name ASSIGN . slice_literal
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    expression                     shift and go to state 190
    llamarFuncion                  shift and go to state 191
    slice_literal                  shift and go to state 192
    function_literal               shift and go to state 56

state 140

    (67) map -> VAR IDENTIFIER ASSIGN mapLiteral .

    IDENTIFIER      reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    VAR             reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    TYPE            reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    FOR             reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    PACKAGE         reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    IMPORT          reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    SWITCH          reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    IF              reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    FUNC            reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    RETURN          reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    $end            reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    RBRACE          reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    CASE            reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    DEFAULT         reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)


state 141

    (145) slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET . type_name
    (137) type_name -> LBRACKET RBRACKET . type_name
    (135) type_name -> . DATATYPE
    (136) type_name -> . IDENTIFIER
    (137) type_name -> . LBRACKET RBRACKET type_name
    (138) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 87
    IDENTIFIER      shift and go to state 83
    LBRACKET        shift and go to state 156
    FUNC            shift and go to state 88

    type_name                      shift and go to state 193

state 142

    (138) type_name -> FUNC LPAREN . parameters RPAREN return_type
    (128) parameters -> . parameters COMMA parameter
    (129) parameters -> . parameter
    (130) parameters -> . empty
    (131) parameter -> . IDENTIFIER type_name
    (132) parameter -> . identifier_list type_name
    (60) empty -> .
    (133) identifier_list -> . IDENTIFIER
    (134) identifier_list -> . IDENTIFIER COMMA identifier_list

    IDENTIFIER      shift and go to state 158
    RPAREN          reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)

    parameters                     shift and go to state 194
    parameter                      shift and go to state 128
    empty                          shift and go to state 129
    identifier_list                shift and go to state 130

state 143

    (86) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE . struct_fields RBRACE
    (92) struct_fields -> . struct_field
    (93) struct_fields -> . struct_fields struct_field
    (91) struct_field -> . IDENTIFIER type_name

    IDENTIFIER      shift and go to state 195

    struct_fields                  shift and go to state 196
    struct_field                   shift and go to state 197

state 144

    (95) for_statement -> FOR shortAssignment SEMICOLON condicion . SEMICOLON expression block

    SEMICOLON       shift and go to state 198


state 145

    (49) condicion -> expression comparador expression .
    (114) expression -> expression comparador expression .
    (113) expression -> expression . operadorLogico expression
    (114) expression -> expression . comparador expression
    (115) expression -> expression . operator expression
    (150) expression -> expression . LBRACKET expression RBRACKET
    (151) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (152) expression -> expression . LBRACKET COLON expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON RBRACKET
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (116) operator -> . PLUS
    (117) operator -> . MINUS
    (118) operator -> . TIMES
    (119) operator -> . DIVIDE
    (120) operator -> . MOD

  ! reduce/reduce conflict for AND resolved using rule 49 (condicion -> expression comparador expression .)
  ! reduce/reduce conflict for OR resolved using rule 49 (condicion -> expression comparador expression .)
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 49 (condicion -> expression comparador expression .)
    SEMICOLON       reduce using rule 49 (condicion -> expression comparador expression .)
    LBRACKET        shift and go to state 95
    AND             shift and go to state 102
    OR              shift and go to state 103
    EQ              shift and go to state 96
    NEQ             shift and go to state 97
    GT              shift and go to state 98
    LT              shift and go to state 99
    GE              shift and go to state 100
    LE              shift and go to state 101
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108

  ! AND             [ reduce using rule 49 (condicion -> expression comparador expression .) ]
  ! OR              [ reduce using rule 49 (condicion -> expression comparador expression .) ]
  ! LBRACKET        [ reduce using rule 114 (expression -> expression comparador expression .) ]
  ! EQ              [ reduce using rule 114 (expression -> expression comparador expression .) ]
  ! NEQ             [ reduce using rule 114 (expression -> expression comparador expression .) ]
  ! GT              [ reduce using rule 114 (expression -> expression comparador expression .) ]
  ! LT              [ reduce using rule 114 (expression -> expression comparador expression .) ]
  ! GE              [ reduce using rule 114 (expression -> expression comparador expression .) ]
  ! LE              [ reduce using rule 114 (expression -> expression comparador expression .) ]
  ! AND             [ reduce using rule 114 (expression -> expression comparador expression .) ]
  ! OR              [ reduce using rule 114 (expression -> expression comparador expression .) ]
  ! PLUS            [ reduce using rule 114 (expression -> expression comparador expression .) ]
  ! MINUS           [ reduce using rule 114 (expression -> expression comparador expression .) ]
  ! TIMES           [ reduce using rule 114 (expression -> expression comparador expression .) ]
  ! DIVIDE          [ reduce using rule 114 (expression -> expression comparador expression .) ]
  ! MOD             [ reduce using rule 114 (expression -> expression comparador expression .) ]

    comparador                     shift and go to state 121
    operadorLogico                 shift and go to state 93
    operator                       shift and go to state 94

state 146

    (113) expression -> expression operadorLogico expression .
    (113) expression -> expression . operadorLogico expression
    (114) expression -> expression . comparador expression
    (115) expression -> expression . operator expression
    (150) expression -> expression . LBRACKET expression RBRACKET
    (151) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (152) expression -> expression . LBRACKET COLON expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON RBRACKET
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (116) operator -> . PLUS
    (117) operator -> . MINUS
    (118) operator -> . TIMES
    (119) operator -> . DIVIDE
    (120) operator -> . MOD

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 113 (expression -> expression operadorLogico expression .)
    COMMA           reduce using rule 113 (expression -> expression operadorLogico expression .)
    IDENTIFIER      reduce using rule 113 (expression -> expression operadorLogico expression .)
    VAR             reduce using rule 113 (expression -> expression operadorLogico expression .)
    TYPE            reduce using rule 113 (expression -> expression operadorLogico expression .)
    FOR             reduce using rule 113 (expression -> expression operadorLogico expression .)
    PACKAGE         reduce using rule 113 (expression -> expression operadorLogico expression .)
    IMPORT          reduce using rule 113 (expression -> expression operadorLogico expression .)
    SWITCH          reduce using rule 113 (expression -> expression operadorLogico expression .)
    IF              reduce using rule 113 (expression -> expression operadorLogico expression .)
    FUNC            reduce using rule 113 (expression -> expression operadorLogico expression .)
    RETURN          reduce using rule 113 (expression -> expression operadorLogico expression .)
    $end            reduce using rule 113 (expression -> expression operadorLogico expression .)
    RBRACE          reduce using rule 113 (expression -> expression operadorLogico expression .)
    CASE            reduce using rule 113 (expression -> expression operadorLogico expression .)
    DEFAULT         reduce using rule 113 (expression -> expression operadorLogico expression .)
    RPAREN          reduce using rule 113 (expression -> expression operadorLogico expression .)
    SEMICOLON       reduce using rule 113 (expression -> expression operadorLogico expression .)
    RBRACKET        reduce using rule 113 (expression -> expression operadorLogico expression .)
    COLON           reduce using rule 113 (expression -> expression operadorLogico expression .)
    LBRACKET        shift and go to state 95
    AND             shift and go to state 102
    OR              shift and go to state 103
    EQ              shift and go to state 96
    NEQ             shift and go to state 97
    GT              shift and go to state 98
    LT              shift and go to state 99
    GE              shift and go to state 100
    LE              shift and go to state 101
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108

  ! LBRACKET        [ reduce using rule 113 (expression -> expression operadorLogico expression .) ]
  ! EQ              [ reduce using rule 113 (expression -> expression operadorLogico expression .) ]
  ! NEQ             [ reduce using rule 113 (expression -> expression operadorLogico expression .) ]
  ! GT              [ reduce using rule 113 (expression -> expression operadorLogico expression .) ]
  ! LT              [ reduce using rule 113 (expression -> expression operadorLogico expression .) ]
  ! GE              [ reduce using rule 113 (expression -> expression operadorLogico expression .) ]
  ! LE              [ reduce using rule 113 (expression -> expression operadorLogico expression .) ]
  ! AND             [ reduce using rule 113 (expression -> expression operadorLogico expression .) ]
  ! OR              [ reduce using rule 113 (expression -> expression operadorLogico expression .) ]
  ! PLUS            [ reduce using rule 113 (expression -> expression operadorLogico expression .) ]
  ! MINUS           [ reduce using rule 113 (expression -> expression operadorLogico expression .) ]
  ! TIMES           [ reduce using rule 113 (expression -> expression operadorLogico expression .) ]
  ! DIVIDE          [ reduce using rule 113 (expression -> expression operadorLogico expression .) ]
  ! MOD             [ reduce using rule 113 (expression -> expression operadorLogico expression .) ]

    operadorLogico                 shift and go to state 93
    comparador                     shift and go to state 121
    operator                       shift and go to state 94

state 147

    (115) expression -> expression operator expression .
    (113) expression -> expression . operadorLogico expression
    (114) expression -> expression . comparador expression
    (115) expression -> expression . operator expression
    (150) expression -> expression . LBRACKET expression RBRACKET
    (151) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (152) expression -> expression . LBRACKET COLON expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON RBRACKET
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (116) operator -> . PLUS
    (117) operator -> . MINUS
    (118) operator -> . TIMES
    (119) operator -> . DIVIDE
    (120) operator -> . MOD

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 115 (expression -> expression operator expression .)
    COMMA           reduce using rule 115 (expression -> expression operator expression .)
    IDENTIFIER      reduce using rule 115 (expression -> expression operator expression .)
    VAR             reduce using rule 115 (expression -> expression operator expression .)
    TYPE            reduce using rule 115 (expression -> expression operator expression .)
    FOR             reduce using rule 115 (expression -> expression operator expression .)
    PACKAGE         reduce using rule 115 (expression -> expression operator expression .)
    IMPORT          reduce using rule 115 (expression -> expression operator expression .)
    SWITCH          reduce using rule 115 (expression -> expression operator expression .)
    IF              reduce using rule 115 (expression -> expression operator expression .)
    FUNC            reduce using rule 115 (expression -> expression operator expression .)
    RETURN          reduce using rule 115 (expression -> expression operator expression .)
    $end            reduce using rule 115 (expression -> expression operator expression .)
    RBRACE          reduce using rule 115 (expression -> expression operator expression .)
    CASE            reduce using rule 115 (expression -> expression operator expression .)
    DEFAULT         reduce using rule 115 (expression -> expression operator expression .)
    RPAREN          reduce using rule 115 (expression -> expression operator expression .)
    SEMICOLON       reduce using rule 115 (expression -> expression operator expression .)
    RBRACKET        reduce using rule 115 (expression -> expression operator expression .)
    COLON           reduce using rule 115 (expression -> expression operator expression .)
    LBRACKET        shift and go to state 95
    AND             shift and go to state 102
    OR              shift and go to state 103
    EQ              shift and go to state 96
    NEQ             shift and go to state 97
    GT              shift and go to state 98
    LT              shift and go to state 99
    GE              shift and go to state 100
    LE              shift and go to state 101
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108

  ! LBRACKET        [ reduce using rule 115 (expression -> expression operator expression .) ]
  ! EQ              [ reduce using rule 115 (expression -> expression operator expression .) ]
  ! NEQ             [ reduce using rule 115 (expression -> expression operator expression .) ]
  ! GT              [ reduce using rule 115 (expression -> expression operator expression .) ]
  ! LT              [ reduce using rule 115 (expression -> expression operator expression .) ]
  ! GE              [ reduce using rule 115 (expression -> expression operator expression .) ]
  ! LE              [ reduce using rule 115 (expression -> expression operator expression .) ]
  ! AND             [ reduce using rule 115 (expression -> expression operator expression .) ]
  ! OR              [ reduce using rule 115 (expression -> expression operator expression .) ]
  ! PLUS            [ reduce using rule 115 (expression -> expression operator expression .) ]
  ! MINUS           [ reduce using rule 115 (expression -> expression operator expression .) ]
  ! TIMES           [ reduce using rule 115 (expression -> expression operator expression .) ]
  ! DIVIDE          [ reduce using rule 115 (expression -> expression operator expression .) ]
  ! MOD             [ reduce using rule 115 (expression -> expression operator expression .) ]

    operator                       shift and go to state 94
    operadorLogico                 shift and go to state 93
    comparador                     shift and go to state 121

state 148

    (150) expression -> expression LBRACKET expression . RBRACKET
    (151) expression -> expression LBRACKET expression . COLON expression RBRACKET
    (153) expression -> expression LBRACKET expression . COLON RBRACKET
    (113) expression -> expression . operadorLogico expression
    (114) expression -> expression . comparador expression
    (115) expression -> expression . operator expression
    (150) expression -> expression . LBRACKET expression RBRACKET
    (151) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (152) expression -> expression . LBRACKET COLON expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON RBRACKET
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (116) operator -> . PLUS
    (117) operator -> . MINUS
    (118) operator -> . TIMES
    (119) operator -> . DIVIDE
    (120) operator -> . MOD

    RBRACKET        shift and go to state 199
    COLON           shift and go to state 200
    LBRACKET        shift and go to state 95
    AND             shift and go to state 102
    OR              shift and go to state 103
    EQ              shift and go to state 96
    NEQ             shift and go to state 97
    GT              shift and go to state 98
    LT              shift and go to state 99
    GE              shift and go to state 100
    LE              shift and go to state 101
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108

    operadorLogico                 shift and go to state 93
    comparador                     shift and go to state 121
    operator                       shift and go to state 94

state 149

    (152) expression -> expression LBRACKET COLON . expression RBRACKET
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    expression                     shift and go to state 201
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 150

    (96) shortAssignment -> identifier_list DECLARE_ASSIGN expression .
    (113) expression -> expression . operadorLogico expression
    (114) expression -> expression . comparador expression
    (115) expression -> expression . operator expression
    (150) expression -> expression . LBRACKET expression RBRACKET
    (151) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (152) expression -> expression . LBRACKET COLON expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON RBRACKET
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (116) operator -> . PLUS
    (117) operator -> . MINUS
    (118) operator -> . TIMES
    (119) operator -> . DIVIDE
    (120) operator -> . MOD

    SEMICOLON       reduce using rule 96 (shortAssignment -> identifier_list DECLARE_ASSIGN expression .)
    LBRACKET        shift and go to state 95
    AND             shift and go to state 102
    OR              shift and go to state 103
    EQ              shift and go to state 96
    NEQ             shift and go to state 97
    GT              shift and go to state 98
    LT              shift and go to state 99
    GE              shift and go to state 100
    LE              shift and go to state 101
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108

    operadorLogico                 shift and go to state 93
    comparador                     shift and go to state 121
    operator                       shift and go to state 94

state 151

    (100) block -> LBRACE statement_list RBRACE .

    IDENTIFIER      reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    VAR             reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    TYPE            reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    PACKAGE         reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    IMPORT          reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    SWITCH          reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    FUNC            reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    CASE            reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    DEFAULT         reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    LBRACKET        reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    EQ              reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    NEQ             reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    GT              reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    LT              reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    GE              reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    LE              reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    AND             reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    OR              reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    DIVIDE          reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    MOD             reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    COMMA           reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    RPAREN          reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    SEMICOLON       reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    RBRACKET        reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    COLON           reduce using rule 100 (block -> LBRACE statement_list RBRACE .)


state 152

    (133) identifier_list -> IDENTIFIER .
    (134) identifier_list -> IDENTIFIER . COMMA identifier_list

    DECLARE_ASSIGN  reduce using rule 133 (identifier_list -> IDENTIFIER .)
    DATATYPE        reduce using rule 133 (identifier_list -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 133 (identifier_list -> IDENTIFIER .)
    LBRACKET        reduce using rule 133 (identifier_list -> IDENTIFIER .)
    FUNC            reduce using rule 133 (identifier_list -> IDENTIFIER .)
    COMMA           shift and go to state 112


state 153

    (134) identifier_list -> IDENTIFIER COMMA identifier_list .

    DECLARE_ASSIGN  reduce using rule 134 (identifier_list -> IDENTIFIER COMMA identifier_list .)
    DATATYPE        reduce using rule 134 (identifier_list -> IDENTIFIER COMMA identifier_list .)
    IDENTIFIER      reduce using rule 134 (identifier_list -> IDENTIFIER COMMA identifier_list .)
    LBRACKET        reduce using rule 134 (identifier_list -> IDENTIFIER COMMA identifier_list .)
    FUNC            reduce using rule 134 (identifier_list -> IDENTIFIER COMMA identifier_list .)


state 154

    (111) expression -> IDENTIFIER DOT IDENTIFIER .
    (44) llamarFuncion -> IDENTIFIER DOT IDENTIFIER . LPAREN argument_list_opt RPAREN

    LBRACKET        reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    EQ              reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    NEQ             reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    GT              reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    LT              reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    GE              reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    LE              reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    AND             reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    OR              reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    PLUS            reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    MINUS           reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    TIMES           reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    DIVIDE          reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    MOD             reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    LBRACE          reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    COMMA           reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    VAR             reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    TYPE            reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    FOR             reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    PACKAGE         reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    IMPORT          reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    SWITCH          reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    IF              reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    FUNC            reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    RETURN          reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    $end            reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    RBRACE          reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    CASE            reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    DEFAULT         reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    RPAREN          reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    RBRACKET        reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    COLON           reduce using rule 111 (expression -> IDENTIFIER DOT IDENTIFIER .)
    LPAREN          shift and go to state 202


state 155

    (122) expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    TYPE            reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    PACKAGE         reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    IMPORT          reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    FUNC            reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    CASE            reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 122 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 122 (expression -> LPAREN expression RPAREN .)


state 156

    (137) type_name -> LBRACKET . RBRACKET type_name

    RBRACKET        shift and go to state 203


state 157

    (147) slice_literal -> LBRACKET RBRACKET type_name . LBRACE elements RBRACE

    LBRACE          shift and go to state 204


state 158

    (131) parameter -> IDENTIFIER . type_name
    (133) identifier_list -> IDENTIFIER .
    (134) identifier_list -> IDENTIFIER . COMMA identifier_list
    (135) type_name -> . DATATYPE
    (136) type_name -> . IDENTIFIER
    (137) type_name -> . LBRACKET RBRACKET type_name
    (138) type_name -> . FUNC LPAREN parameters RPAREN return_type

  ! shift/reduce conflict for DATATYPE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
    COMMA           shift and go to state 112
    DATATYPE        shift and go to state 87
    IDENTIFIER      shift and go to state 83
    LBRACKET        shift and go to state 156
    FUNC            shift and go to state 88

  ! DATATYPE        [ reduce using rule 133 (identifier_list -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 133 (identifier_list -> IDENTIFIER .) ]
  ! LBRACKET        [ reduce using rule 133 (identifier_list -> IDENTIFIER .) ]
  ! FUNC            [ reduce using rule 133 (identifier_list -> IDENTIFIER .) ]

    type_name                      shift and go to state 176

state 159

    (26) import -> IMPORT LPAREN import_list RPAREN .

    IDENTIFIER      reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    VAR             reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    TYPE            reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    FOR             reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    PACKAGE         reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    IMPORT          reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    SWITCH          reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    IF              reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    FUNC            reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    RETURN          reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    $end            reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    RBRACE          reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    CASE            reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)
    DEFAULT         reduce using rule 26 (import -> IMPORT LPAREN import_list RPAREN .)


state 160

    (28) import_list -> import_list STRING .

    RPAREN          reduce using rule 28 (import_list -> import_list STRING .)
    STRING          reduce using rule 28 (import_list -> import_list STRING .)


state 161

    (61) switch -> SWITCH expression LBRACE caseBlocks . RBRACE

    RBRACE          shift and go to state 205


state 162

    (62) caseBlocks -> caseBlock .
    (63) caseBlocks -> caseBlock . caseBlocks
    (62) caseBlocks -> . caseBlock
    (63) caseBlocks -> . caseBlock caseBlocks
    (64) caseBlock -> . CASE expression COLON statement_list
    (65) caseBlock -> . DEFAULT COLON statement_list

    RBRACE          reduce using rule 62 (caseBlocks -> caseBlock .)
    CASE            shift and go to state 163
    DEFAULT         shift and go to state 164

    caseBlock                      shift and go to state 162
    caseBlocks                     shift and go to state 206

state 163

    (64) caseBlock -> CASE . expression COLON statement_list
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    expression                     shift and go to state 207
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 164

    (65) caseBlock -> DEFAULT . COLON statement_list

    COLON           shift and go to state 208


state 165

    (114) expression -> expression comparador expression .
    (113) expression -> expression . operadorLogico expression
    (114) expression -> expression . comparador expression
    (115) expression -> expression . operator expression
    (150) expression -> expression . LBRACKET expression RBRACKET
    (151) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (152) expression -> expression . LBRACKET COLON expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON RBRACKET
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (116) operator -> . PLUS
    (117) operator -> . MINUS
    (118) operator -> . TIMES
    (119) operator -> . DIVIDE
    (120) operator -> . MOD

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 114 (expression -> expression comparador expression .)
    COMMA           reduce using rule 114 (expression -> expression comparador expression .)
    IDENTIFIER      reduce using rule 114 (expression -> expression comparador expression .)
    VAR             reduce using rule 114 (expression -> expression comparador expression .)
    TYPE            reduce using rule 114 (expression -> expression comparador expression .)
    FOR             reduce using rule 114 (expression -> expression comparador expression .)
    PACKAGE         reduce using rule 114 (expression -> expression comparador expression .)
    IMPORT          reduce using rule 114 (expression -> expression comparador expression .)
    SWITCH          reduce using rule 114 (expression -> expression comparador expression .)
    IF              reduce using rule 114 (expression -> expression comparador expression .)
    FUNC            reduce using rule 114 (expression -> expression comparador expression .)
    RETURN          reduce using rule 114 (expression -> expression comparador expression .)
    $end            reduce using rule 114 (expression -> expression comparador expression .)
    RBRACE          reduce using rule 114 (expression -> expression comparador expression .)
    CASE            reduce using rule 114 (expression -> expression comparador expression .)
    DEFAULT         reduce using rule 114 (expression -> expression comparador expression .)
    RPAREN          reduce using rule 114 (expression -> expression comparador expression .)
    SEMICOLON       reduce using rule 114 (expression -> expression comparador expression .)
    RBRACKET        reduce using rule 114 (expression -> expression comparador expression .)
    COLON           reduce using rule 114 (expression -> expression comparador expression .)
    LBRACKET        shift and go to state 95
    AND             shift and go to state 102
    OR              shift and go to state 103
    EQ              shift and go to state 96
    NEQ             shift and go to state 97
    GT              shift and go to state 98
    LT              shift and go to state 99
    GE              shift and go to state 100
    LE              shift and go to state 101
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108

  ! LBRACKET        [ reduce using rule 114 (expression -> expression comparador expression .) ]
  ! AND             [ reduce using rule 114 (expression -> expression comparador expression .) ]
  ! OR              [ reduce using rule 114 (expression -> expression comparador expression .) ]
  ! EQ              [ reduce using rule 114 (expression -> expression comparador expression .) ]
  ! NEQ             [ reduce using rule 114 (expression -> expression comparador expression .) ]
  ! GT              [ reduce using rule 114 (expression -> expression comparador expression .) ]
  ! LT              [ reduce using rule 114 (expression -> expression comparador expression .) ]
  ! GE              [ reduce using rule 114 (expression -> expression comparador expression .) ]
  ! LE              [ reduce using rule 114 (expression -> expression comparador expression .) ]
  ! PLUS            [ reduce using rule 114 (expression -> expression comparador expression .) ]
  ! MINUS           [ reduce using rule 114 (expression -> expression comparador expression .) ]
  ! TIMES           [ reduce using rule 114 (expression -> expression comparador expression .) ]
  ! DIVIDE          [ reduce using rule 114 (expression -> expression comparador expression .) ]
  ! MOD             [ reduce using rule 114 (expression -> expression comparador expression .) ]

    comparador                     shift and go to state 121
    operadorLogico                 shift and go to state 93
    operator                       shift and go to state 94

state 166

    (124) if_statement -> IF condicion block ELSE . block
    (100) block -> . LBRACE statement_list RBRACE
    (101) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 43

    block                          shift and go to state 209

state 167

    (50) condicion_compleja -> condicion operadorLogico condicion .
    (50) condicion_compleja -> condicion . operadorLogico condicion
    (51) condicion_compleja -> condicion . operadorLogico condicion_compleja
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR

    LBRACE          reduce using rule 50 (condicion_compleja -> condicion operadorLogico condicion .)
    AND             shift and go to state 102
    OR              shift and go to state 103

    operadorLogico                 shift and go to state 123

state 168

    (51) condicion_compleja -> condicion operadorLogico condicion_compleja .

    LBRACE          reduce using rule 51 (condicion_compleja -> condicion operadorLogico condicion_compleja .)


state 169

    (126) if_statement -> IF condicion_compleja block ELSE . block
    (100) block -> . LBRACE statement_list RBRACE
    (101) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 43

    block                          shift and go to state 210

state 170

    (84) param -> IDENTIFIER . type_name
    (133) identifier_list -> IDENTIFIER .
    (134) identifier_list -> IDENTIFIER . COMMA identifier_list
    (135) type_name -> . DATATYPE
    (136) type_name -> . IDENTIFIER
    (137) type_name -> . LBRACKET RBRACKET type_name
    (138) type_name -> . FUNC LPAREN parameters RPAREN return_type

  ! shift/reduce conflict for DATATYPE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
    COMMA           shift and go to state 112
    DATATYPE        shift and go to state 87
    IDENTIFIER      shift and go to state 83
    LBRACKET        shift and go to state 156
    FUNC            shift and go to state 88

  ! DATATYPE        [ reduce using rule 133 (identifier_list -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 133 (identifier_list -> IDENTIFIER .) ]
  ! LBRACKET        [ reduce using rule 133 (identifier_list -> IDENTIFIER .) ]
  ! FUNC            [ reduce using rule 133 (identifier_list -> IDENTIFIER .) ]

    type_name                      shift and go to state 211

state 171

    (74) function -> FUNC IDENTIFIER LPAREN params_opt . RPAREN block
    (75) function -> FUNC IDENTIFIER LPAREN params_opt . RPAREN return_type LBRACE statement_list RBRACE

    RPAREN          shift and go to state 212


state 172

    (80) params_opt -> params .

    RPAREN          reduce using rule 80 (params_opt -> params .)


state 173

    (82) params -> param .
    (83) params -> param . COMMA params

    RPAREN          reduce using rule 82 (params -> param .)
    COMMA           shift and go to state 213


state 174

    (85) param -> identifier_list . type_name
    (135) type_name -> . DATATYPE
    (136) type_name -> . IDENTIFIER
    (137) type_name -> . LBRACKET RBRACKET type_name
    (138) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 87
    IDENTIFIER      shift and go to state 83
    LBRACKET        shift and go to state 156
    FUNC            shift and go to state 88

    type_name                      shift and go to state 214

state 175

    (94) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER . RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (136) type_name -> IDENTIFIER .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 215
    COMMA           reduce using rule 136 (type_name -> IDENTIFIER .)

  ! RPAREN          [ reduce using rule 136 (type_name -> IDENTIFIER .) ]


state 176

    (131) parameter -> IDENTIFIER type_name .

    RPAREN          reduce using rule 131 (parameter -> IDENTIFIER type_name .)
    COMMA           reduce using rule 131 (parameter -> IDENTIFIER type_name .)


state 177

    (127) function_literal -> FUNC LPAREN parameters RPAREN . return_type block
    (139) return_type -> . DATATYPE
    (140) return_type -> . LPAREN type_list RPAREN
    (142) return_type -> . empty
    (60) empty -> .

    DATATYPE        shift and go to state 218
    LPAREN          shift and go to state 216
    LBRACE          reduce using rule 60 (empty -> .)

    return_type                    shift and go to state 217
    empty                          shift and go to state 219

state 178

    (128) parameters -> parameters COMMA . parameter
    (131) parameter -> . IDENTIFIER type_name
    (132) parameter -> . identifier_list type_name
    (133) identifier_list -> . IDENTIFIER
    (134) identifier_list -> . IDENTIFIER COMMA identifier_list

    IDENTIFIER      shift and go to state 158

    parameter                      shift and go to state 220
    identifier_list                shift and go to state 130

state 179

    (132) parameter -> identifier_list type_name .

    RPAREN          reduce using rule 132 (parameter -> identifier_list type_name .)
    COMMA           reduce using rule 132 (parameter -> identifier_list type_name .)


state 180

    (76) function -> FUNC MAIN LPAREN params_opt . RPAREN block

    RPAREN          shift and go to state 221


state 181

    (79) return_values -> expression COMMA return_values .

    IDENTIFIER      reduce using rule 79 (return_values -> expression COMMA return_values .)
    VAR             reduce using rule 79 (return_values -> expression COMMA return_values .)
    TYPE            reduce using rule 79 (return_values -> expression COMMA return_values .)
    FOR             reduce using rule 79 (return_values -> expression COMMA return_values .)
    PACKAGE         reduce using rule 79 (return_values -> expression COMMA return_values .)
    IMPORT          reduce using rule 79 (return_values -> expression COMMA return_values .)
    SWITCH          reduce using rule 79 (return_values -> expression COMMA return_values .)
    IF              reduce using rule 79 (return_values -> expression COMMA return_values .)
    FUNC            reduce using rule 79 (return_values -> expression COMMA return_values .)
    RETURN          reduce using rule 79 (return_values -> expression COMMA return_values .)
    $end            reduce using rule 79 (return_values -> expression COMMA return_values .)
    RBRACE          reduce using rule 79 (return_values -> expression COMMA return_values .)
    CASE            reduce using rule 79 (return_values -> expression COMMA return_values .)
    DEFAULT         reduce using rule 79 (return_values -> expression COMMA return_values .)


state 182

    (90) struct_field_assignment -> IDENTIFIER . COLON expression

    COLON           shift and go to state 222


state 183

    (87) struct_literal -> IDENTIFIER LBRACE struct_field_assignments . RBRACE
    (89) struct_field_assignments -> struct_field_assignments . COMMA struct_field_assignment

    RBRACE          shift and go to state 223
    COMMA           shift and go to state 224


state 184

    (88) struct_field_assignments -> struct_field_assignment .

    RBRACE          reduce using rule 88 (struct_field_assignments -> struct_field_assignment .)
    COMMA           reduce using rule 88 (struct_field_assignments -> struct_field_assignment .)


state 185

    (68) mapLiteral -> MAP LBRACKET type_name . RBRACKET type_name LBRACE mapEntries RBRACE

    RBRACKET        shift and go to state 225


state 186

    (33) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND . IDENTIFIER RPAREN

    IDENTIFIER      shift and go to state 226


state 187

    (44) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 227


state 188

    (43) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression . RPAREN
    (113) expression -> expression . operadorLogico expression
    (114) expression -> expression . comparador expression
    (115) expression -> expression . operator expression
    (150) expression -> expression . LBRACKET expression RBRACKET
    (151) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (152) expression -> expression . LBRACKET COLON expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON RBRACKET
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (116) operator -> . PLUS
    (117) operator -> . MINUS
    (118) operator -> . TIMES
    (119) operator -> . DIVIDE
    (120) operator -> . MOD

    RPAREN          shift and go to state 228
    LBRACKET        shift and go to state 95
    AND             shift and go to state 102
    OR              shift and go to state 103
    EQ              shift and go to state 96
    NEQ             shift and go to state 97
    GT              shift and go to state 98
    LT              shift and go to state 99
    GE              shift and go to state 100
    LE              shift and go to state 101
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108

    operadorLogico                 shift and go to state 93
    comparador                     shift and go to state 121
    operator                       shift and go to state 94

state 189

    (46) argument_list -> argument_list COMMA expression .
    (113) expression -> expression . operadorLogico expression
    (114) expression -> expression . comparador expression
    (115) expression -> expression . operator expression
    (150) expression -> expression . LBRACKET expression RBRACKET
    (151) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (152) expression -> expression . LBRACKET COLON expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON RBRACKET
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (116) operator -> . PLUS
    (117) operator -> . MINUS
    (118) operator -> . TIMES
    (119) operator -> . DIVIDE
    (120) operator -> . MOD

    COMMA           reduce using rule 46 (argument_list -> argument_list COMMA expression .)
    RPAREN          reduce using rule 46 (argument_list -> argument_list COMMA expression .)
    LBRACKET        shift and go to state 95
    AND             shift and go to state 102
    OR              shift and go to state 103
    EQ              shift and go to state 96
    NEQ             shift and go to state 97
    GT              shift and go to state 98
    LT              shift and go to state 99
    GE              shift and go to state 100
    LE              shift and go to state 101
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108

    operadorLogico                 shift and go to state 93
    comparador                     shift and go to state 121
    operator                       shift and go to state 94

state 190

    (37) assignment -> VAR IDENTIFIER type_name ASSIGN expression .
    (113) expression -> expression . operadorLogico expression
    (114) expression -> expression . comparador expression
    (115) expression -> expression . operator expression
    (150) expression -> expression . LBRACKET expression RBRACKET
    (151) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (152) expression -> expression . LBRACKET COLON expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON RBRACKET
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (116) operator -> . PLUS
    (117) operator -> . MINUS
    (118) operator -> . TIMES
    (119) operator -> . DIVIDE
    (120) operator -> . MOD

    IDENTIFIER      reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    VAR             reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    TYPE            reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    FOR             reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    PACKAGE         reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    IMPORT          reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    SWITCH          reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    IF              reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    FUNC            reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    RETURN          reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    $end            reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    RBRACE          reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    CASE            reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    DEFAULT         reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    LBRACKET        shift and go to state 95
    AND             shift and go to state 102
    OR              shift and go to state 103
    EQ              shift and go to state 96
    NEQ             shift and go to state 97
    GT              shift and go to state 98
    LT              shift and go to state 99
    GE              shift and go to state 100
    LE              shift and go to state 101
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108

    operadorLogico                 shift and go to state 93
    comparador                     shift and go to state 121
    operator                       shift and go to state 94

state 191

    (38) assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .
    (112) expression -> llamarFuncion .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for VAR resolved using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for TYPE resolved using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for FOR resolved using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for IMPORT resolved using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for SWITCH resolved using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for IF resolved using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for FUNC resolved using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for RETURN resolved using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for $end resolved using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for RBRACE resolved using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for CASE resolved using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    IDENTIFIER      reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    VAR             reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    TYPE            reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    FOR             reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    PACKAGE         reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    IMPORT          reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    SWITCH          reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    IF              reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    FUNC            reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    RETURN          reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    $end            reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    RBRACE          reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    CASE            reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    DEFAULT         reduce using rule 38 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    LBRACKET        reduce using rule 112 (expression -> llamarFuncion .)
    AND             reduce using rule 112 (expression -> llamarFuncion .)
    OR              reduce using rule 112 (expression -> llamarFuncion .)
    EQ              reduce using rule 112 (expression -> llamarFuncion .)
    NEQ             reduce using rule 112 (expression -> llamarFuncion .)
    GT              reduce using rule 112 (expression -> llamarFuncion .)
    LT              reduce using rule 112 (expression -> llamarFuncion .)
    GE              reduce using rule 112 (expression -> llamarFuncion .)
    LE              reduce using rule 112 (expression -> llamarFuncion .)
    PLUS            reduce using rule 112 (expression -> llamarFuncion .)
    MINUS           reduce using rule 112 (expression -> llamarFuncion .)
    TIMES           reduce using rule 112 (expression -> llamarFuncion .)
    DIVIDE          reduce using rule 112 (expression -> llamarFuncion .)
    MOD             reduce using rule 112 (expression -> llamarFuncion .)

  ! IDENTIFIER      [ reduce using rule 112 (expression -> llamarFuncion .) ]
  ! VAR             [ reduce using rule 112 (expression -> llamarFuncion .) ]
  ! TYPE            [ reduce using rule 112 (expression -> llamarFuncion .) ]
  ! FOR             [ reduce using rule 112 (expression -> llamarFuncion .) ]
  ! PACKAGE         [ reduce using rule 112 (expression -> llamarFuncion .) ]
  ! IMPORT          [ reduce using rule 112 (expression -> llamarFuncion .) ]
  ! SWITCH          [ reduce using rule 112 (expression -> llamarFuncion .) ]
  ! IF              [ reduce using rule 112 (expression -> llamarFuncion .) ]
  ! FUNC            [ reduce using rule 112 (expression -> llamarFuncion .) ]
  ! RETURN          [ reduce using rule 112 (expression -> llamarFuncion .) ]
  ! $end            [ reduce using rule 112 (expression -> llamarFuncion .) ]
  ! RBRACE          [ reduce using rule 112 (expression -> llamarFuncion .) ]
  ! CASE            [ reduce using rule 112 (expression -> llamarFuncion .) ]
  ! DEFAULT         [ reduce using rule 112 (expression -> llamarFuncion .) ]


state 192

    (40) assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .
    (110) expression -> slice_literal .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for VAR resolved using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for TYPE resolved using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for FOR resolved using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for IMPORT resolved using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for SWITCH resolved using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for IF resolved using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for FUNC resolved using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for RETURN resolved using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for $end resolved using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for RBRACE resolved using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for CASE resolved using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    IDENTIFIER      reduce using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    VAR             reduce using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    TYPE            reduce using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    FOR             reduce using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    PACKAGE         reduce using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    IMPORT          reduce using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    SWITCH          reduce using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    IF              reduce using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    FUNC            reduce using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    RETURN          reduce using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    $end            reduce using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    RBRACE          reduce using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    CASE            reduce using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    DEFAULT         reduce using rule 40 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    LBRACKET        reduce using rule 110 (expression -> slice_literal .)
    AND             reduce using rule 110 (expression -> slice_literal .)
    OR              reduce using rule 110 (expression -> slice_literal .)
    EQ              reduce using rule 110 (expression -> slice_literal .)
    NEQ             reduce using rule 110 (expression -> slice_literal .)
    GT              reduce using rule 110 (expression -> slice_literal .)
    LT              reduce using rule 110 (expression -> slice_literal .)
    GE              reduce using rule 110 (expression -> slice_literal .)
    LE              reduce using rule 110 (expression -> slice_literal .)
    PLUS            reduce using rule 110 (expression -> slice_literal .)
    MINUS           reduce using rule 110 (expression -> slice_literal .)
    TIMES           reduce using rule 110 (expression -> slice_literal .)
    DIVIDE          reduce using rule 110 (expression -> slice_literal .)
    MOD             reduce using rule 110 (expression -> slice_literal .)

  ! IDENTIFIER      [ reduce using rule 110 (expression -> slice_literal .) ]
  ! VAR             [ reduce using rule 110 (expression -> slice_literal .) ]
  ! TYPE            [ reduce using rule 110 (expression -> slice_literal .) ]
  ! FOR             [ reduce using rule 110 (expression -> slice_literal .) ]
  ! PACKAGE         [ reduce using rule 110 (expression -> slice_literal .) ]
  ! IMPORT          [ reduce using rule 110 (expression -> slice_literal .) ]
  ! SWITCH          [ reduce using rule 110 (expression -> slice_literal .) ]
  ! IF              [ reduce using rule 110 (expression -> slice_literal .) ]
  ! FUNC            [ reduce using rule 110 (expression -> slice_literal .) ]
  ! RETURN          [ reduce using rule 110 (expression -> slice_literal .) ]
  ! $end            [ reduce using rule 110 (expression -> slice_literal .) ]
  ! RBRACE          [ reduce using rule 110 (expression -> slice_literal .) ]
  ! CASE            [ reduce using rule 110 (expression -> slice_literal .) ]
  ! DEFAULT         [ reduce using rule 110 (expression -> slice_literal .) ]


state 193

    (145) slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .
    (137) type_name -> LBRACKET RBRACKET type_name .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for VAR resolved using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for TYPE resolved using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for FOR resolved using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for IMPORT resolved using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for SWITCH resolved using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for IF resolved using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for FUNC resolved using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for RETURN resolved using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for $end resolved using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for RBRACE resolved using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for CASE resolved using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    ASSIGN          reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    IDENTIFIER      reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    VAR             reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    TYPE            reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    FOR             reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    PACKAGE         reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    IMPORT          reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    SWITCH          reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    IF              reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    FUNC            reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    RETURN          reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    $end            reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    RBRACE          reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    CASE            reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    DEFAULT         reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)

  ! IDENTIFIER      [ reduce using rule 145 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! VAR             [ reduce using rule 145 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! TYPE            [ reduce using rule 145 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! FOR             [ reduce using rule 145 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! PACKAGE         [ reduce using rule 145 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! IMPORT          [ reduce using rule 145 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! SWITCH          [ reduce using rule 145 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! IF              [ reduce using rule 145 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! FUNC            [ reduce using rule 145 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! RETURN          [ reduce using rule 145 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! $end            [ reduce using rule 145 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! RBRACE          [ reduce using rule 145 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! CASE            [ reduce using rule 145 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! DEFAULT         [ reduce using rule 145 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]


state 194

    (138) type_name -> FUNC LPAREN parameters . RPAREN return_type
    (128) parameters -> parameters . COMMA parameter

    RPAREN          shift and go to state 229
    COMMA           shift and go to state 178


state 195

    (91) struct_field -> IDENTIFIER . type_name
    (135) type_name -> . DATATYPE
    (136) type_name -> . IDENTIFIER
    (137) type_name -> . LBRACKET RBRACKET type_name
    (138) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 87
    IDENTIFIER      shift and go to state 83
    LBRACKET        shift and go to state 156
    FUNC            shift and go to state 88

    type_name                      shift and go to state 230

state 196

    (86) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields . RBRACE
    (93) struct_fields -> struct_fields . struct_field
    (91) struct_field -> . IDENTIFIER type_name

    RBRACE          shift and go to state 231
    IDENTIFIER      shift and go to state 195

    struct_field                   shift and go to state 232

state 197

    (92) struct_fields -> struct_field .

    RBRACE          reduce using rule 92 (struct_fields -> struct_field .)
    IDENTIFIER      reduce using rule 92 (struct_fields -> struct_field .)


state 198

    (95) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON . expression block
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    expression                     shift and go to state 233
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 199

    (150) expression -> expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    NEQ             reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    LBRACE          reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    IDENTIFIER      reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    VAR             reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    TYPE            reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    FOR             reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    PACKAGE         reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    IMPORT          reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    SWITCH          reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    IF              reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    FUNC            reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    RETURN          reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    $end            reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    CASE            reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    DEFAULT         reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 150 (expression -> expression LBRACKET expression RBRACKET .)


state 200

    (151) expression -> expression LBRACKET expression COLON . expression RBRACKET
    (153) expression -> expression LBRACKET expression COLON . RBRACKET
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    RBRACKET        shift and go to state 235
    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    expression                     shift and go to state 234
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 201

    (152) expression -> expression LBRACKET COLON expression . RBRACKET
    (113) expression -> expression . operadorLogico expression
    (114) expression -> expression . comparador expression
    (115) expression -> expression . operator expression
    (150) expression -> expression . LBRACKET expression RBRACKET
    (151) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (152) expression -> expression . LBRACKET COLON expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON RBRACKET
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (116) operator -> . PLUS
    (117) operator -> . MINUS
    (118) operator -> . TIMES
    (119) operator -> . DIVIDE
    (120) operator -> . MOD

    RBRACKET        shift and go to state 236
    LBRACKET        shift and go to state 95
    AND             shift and go to state 102
    OR              shift and go to state 103
    EQ              shift and go to state 96
    NEQ             shift and go to state 97
    GT              shift and go to state 98
    LT              shift and go to state 99
    GE              shift and go to state 100
    LE              shift and go to state 101
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108

    operadorLogico                 shift and go to state 93
    comparador                     shift and go to state 121
    operator                       shift and go to state 94

state 202

    (44) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN . argument_list_opt RPAREN
    (47) argument_list_opt -> . argument_list
    (48) argument_list_opt -> .
    (45) argument_list -> . expression
    (46) argument_list -> . argument_list COMMA expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    RPAREN          reduce using rule 48 (argument_list_opt -> .)
    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    argument_list_opt              shift and go to state 187
    argument_list                  shift and go to state 82
    expression                     shift and go to state 81
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 203

    (137) type_name -> LBRACKET RBRACKET . type_name
    (135) type_name -> . DATATYPE
    (136) type_name -> . IDENTIFIER
    (137) type_name -> . LBRACKET RBRACKET type_name
    (138) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 87
    IDENTIFIER      shift and go to state 83
    LBRACKET        shift and go to state 156
    FUNC            shift and go to state 88

    type_name                      shift and go to state 237

state 204

    (147) slice_literal -> LBRACKET RBRACKET type_name LBRACE . elements RBRACE
    (148) elements -> . elements COMMA expression
    (149) elements -> . expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    elements                       shift and go to state 238
    expression                     shift and go to state 239
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 205

    (61) switch -> SWITCH expression LBRACE caseBlocks RBRACE .

    IDENTIFIER      reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    VAR             reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    TYPE            reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    FOR             reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    PACKAGE         reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    IMPORT          reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    SWITCH          reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    IF              reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    FUNC            reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    RETURN          reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    $end            reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    RBRACE          reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    CASE            reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    DEFAULT         reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)


state 206

    (63) caseBlocks -> caseBlock caseBlocks .

    RBRACE          reduce using rule 63 (caseBlocks -> caseBlock caseBlocks .)


state 207

    (64) caseBlock -> CASE expression . COLON statement_list
    (113) expression -> expression . operadorLogico expression
    (114) expression -> expression . comparador expression
    (115) expression -> expression . operator expression
    (150) expression -> expression . LBRACKET expression RBRACKET
    (151) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (152) expression -> expression . LBRACKET COLON expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON RBRACKET
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (116) operator -> . PLUS
    (117) operator -> . MINUS
    (118) operator -> . TIMES
    (119) operator -> . DIVIDE
    (120) operator -> . MOD

    COLON           shift and go to state 240
    LBRACKET        shift and go to state 95
    AND             shift and go to state 102
    OR              shift and go to state 103
    EQ              shift and go to state 96
    NEQ             shift and go to state 97
    GT              shift and go to state 98
    LT              shift and go to state 99
    GE              shift and go to state 100
    LE              shift and go to state 101
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108

    operadorLogico                 shift and go to state 93
    comparador                     shift and go to state 121
    operator                       shift and go to state 94

state 208

    (65) caseBlock -> DEFAULT COLON . statement_list
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . struct_definition
    (10) statement -> . for_statement
    (11) statement -> . package
    (12) statement -> . import
    (13) statement -> . switch
    (14) statement -> . map
    (15) statement -> . if_statement
    (16) statement -> . function
    (17) statement -> . method_definition
    (18) statement -> . function_literal
    (19) statement -> . var_declaration
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (22) statement -> . return_statement
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (39) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (40) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (41) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (86) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (95) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (97) for_statement -> . FOR condicion block
    (98) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (61) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (66) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (67) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (123) if_statement -> . IF condicion block
    (124) if_statement -> . IF condicion block ELSE block
    (125) if_statement -> . IF condicion_compleja block
    (126) if_statement -> . IF condicion_compleja block ELSE block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (76) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (94) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER type_name
    (145) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (146) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (77) return_statement -> . RETURN return_values

    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29
    RETURN          shift and go to state 30

    statement_list                 shift and go to state 241
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    struct_definition              shift and go to state 7
    for_statement                  shift and go to state 8
    package                        shift and go to state 9
    import                         shift and go to state 10
    switch                         shift and go to state 11
    map                            shift and go to state 12
    if_statement                   shift and go to state 13
    function                       shift and go to state 14
    method_definition              shift and go to state 15
    function_literal               shift and go to state 16
    var_declaration                shift and go to state 17
    slice_declaration              shift and go to state 18
    declare_assign                 shift and go to state 19
    return_statement               shift and go to state 20

state 209

    (124) if_statement -> IF condicion block ELSE block .

    IDENTIFIER      reduce using rule 124 (if_statement -> IF condicion block ELSE block .)
    VAR             reduce using rule 124 (if_statement -> IF condicion block ELSE block .)
    TYPE            reduce using rule 124 (if_statement -> IF condicion block ELSE block .)
    FOR             reduce using rule 124 (if_statement -> IF condicion block ELSE block .)
    PACKAGE         reduce using rule 124 (if_statement -> IF condicion block ELSE block .)
    IMPORT          reduce using rule 124 (if_statement -> IF condicion block ELSE block .)
    SWITCH          reduce using rule 124 (if_statement -> IF condicion block ELSE block .)
    IF              reduce using rule 124 (if_statement -> IF condicion block ELSE block .)
    FUNC            reduce using rule 124 (if_statement -> IF condicion block ELSE block .)
    RETURN          reduce using rule 124 (if_statement -> IF condicion block ELSE block .)
    $end            reduce using rule 124 (if_statement -> IF condicion block ELSE block .)
    RBRACE          reduce using rule 124 (if_statement -> IF condicion block ELSE block .)
    CASE            reduce using rule 124 (if_statement -> IF condicion block ELSE block .)
    DEFAULT         reduce using rule 124 (if_statement -> IF condicion block ELSE block .)


state 210

    (126) if_statement -> IF condicion_compleja block ELSE block .

    IDENTIFIER      reduce using rule 126 (if_statement -> IF condicion_compleja block ELSE block .)
    VAR             reduce using rule 126 (if_statement -> IF condicion_compleja block ELSE block .)
    TYPE            reduce using rule 126 (if_statement -> IF condicion_compleja block ELSE block .)
    FOR             reduce using rule 126 (if_statement -> IF condicion_compleja block ELSE block .)
    PACKAGE         reduce using rule 126 (if_statement -> IF condicion_compleja block ELSE block .)
    IMPORT          reduce using rule 126 (if_statement -> IF condicion_compleja block ELSE block .)
    SWITCH          reduce using rule 126 (if_statement -> IF condicion_compleja block ELSE block .)
    IF              reduce using rule 126 (if_statement -> IF condicion_compleja block ELSE block .)
    FUNC            reduce using rule 126 (if_statement -> IF condicion_compleja block ELSE block .)
    RETURN          reduce using rule 126 (if_statement -> IF condicion_compleja block ELSE block .)
    $end            reduce using rule 126 (if_statement -> IF condicion_compleja block ELSE block .)
    RBRACE          reduce using rule 126 (if_statement -> IF condicion_compleja block ELSE block .)
    CASE            reduce using rule 126 (if_statement -> IF condicion_compleja block ELSE block .)
    DEFAULT         reduce using rule 126 (if_statement -> IF condicion_compleja block ELSE block .)


state 211

    (84) param -> IDENTIFIER type_name .

    COMMA           reduce using rule 84 (param -> IDENTIFIER type_name .)
    RPAREN          reduce using rule 84 (param -> IDENTIFIER type_name .)


state 212

    (74) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN . block
    (75) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN . return_type LBRACE statement_list RBRACE
    (100) block -> . LBRACE statement_list RBRACE
    (101) block -> . LBRACE RBRACE
    (139) return_type -> . DATATYPE
    (140) return_type -> . LPAREN type_list RPAREN
    (142) return_type -> . empty
    (60) empty -> .

  ! shift/reduce conflict for LBRACE resolved as shift
    LBRACE          shift and go to state 43
    DATATYPE        shift and go to state 218
    LPAREN          shift and go to state 216

  ! LBRACE          [ reduce using rule 60 (empty -> .) ]

    block                          shift and go to state 242
    return_type                    shift and go to state 243
    empty                          shift and go to state 219

state 213

    (83) params -> param COMMA . params
    (82) params -> . param
    (83) params -> . param COMMA params
    (84) param -> . IDENTIFIER type_name
    (85) param -> . identifier_list type_name
    (133) identifier_list -> . IDENTIFIER
    (134) identifier_list -> . IDENTIFIER COMMA identifier_list

    IDENTIFIER      shift and go to state 170

    param                          shift and go to state 173
    params                         shift and go to state 244
    identifier_list                shift and go to state 174

state 214

    (85) param -> identifier_list type_name .

    COMMA           reduce using rule 85 (param -> identifier_list type_name .)
    RPAREN          reduce using rule 85 (param -> identifier_list type_name .)


state 215

    (94) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN . IDENTIFIER LPAREN arguments RPAREN block

    IDENTIFIER      shift and go to state 245


state 216

    (140) return_type -> LPAREN . type_list RPAREN
    (143) type_list -> . DATATYPE
    (144) type_list -> . DATATYPE COMMA type_list

    DATATYPE        shift and go to state 247

    type_list                      shift and go to state 246

state 217

    (127) function_literal -> FUNC LPAREN parameters RPAREN return_type . block
    (100) block -> . LBRACE statement_list RBRACE
    (101) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 43

    block                          shift and go to state 248

state 218

    (139) return_type -> DATATYPE .

    LBRACE          reduce using rule 139 (return_type -> DATATYPE .)
    ASSIGN          reduce using rule 139 (return_type -> DATATYPE .)
    IDENTIFIER      reduce using rule 139 (return_type -> DATATYPE .)
    VAR             reduce using rule 139 (return_type -> DATATYPE .)
    TYPE            reduce using rule 139 (return_type -> DATATYPE .)
    FOR             reduce using rule 139 (return_type -> DATATYPE .)
    PACKAGE         reduce using rule 139 (return_type -> DATATYPE .)
    IMPORT          reduce using rule 139 (return_type -> DATATYPE .)
    SWITCH          reduce using rule 139 (return_type -> DATATYPE .)
    IF              reduce using rule 139 (return_type -> DATATYPE .)
    FUNC            reduce using rule 139 (return_type -> DATATYPE .)
    RETURN          reduce using rule 139 (return_type -> DATATYPE .)
    $end            reduce using rule 139 (return_type -> DATATYPE .)
    RBRACE          reduce using rule 139 (return_type -> DATATYPE .)
    CASE            reduce using rule 139 (return_type -> DATATYPE .)
    DEFAULT         reduce using rule 139 (return_type -> DATATYPE .)
    RPAREN          reduce using rule 139 (return_type -> DATATYPE .)
    COMMA           reduce using rule 139 (return_type -> DATATYPE .)
    RBRACKET        reduce using rule 139 (return_type -> DATATYPE .)


state 219

    (142) return_type -> empty .

    LBRACE          reduce using rule 142 (return_type -> empty .)
    ASSIGN          reduce using rule 142 (return_type -> empty .)
    IDENTIFIER      reduce using rule 142 (return_type -> empty .)
    VAR             reduce using rule 142 (return_type -> empty .)
    TYPE            reduce using rule 142 (return_type -> empty .)
    FOR             reduce using rule 142 (return_type -> empty .)
    PACKAGE         reduce using rule 142 (return_type -> empty .)
    IMPORT          reduce using rule 142 (return_type -> empty .)
    SWITCH          reduce using rule 142 (return_type -> empty .)
    IF              reduce using rule 142 (return_type -> empty .)
    FUNC            reduce using rule 142 (return_type -> empty .)
    RETURN          reduce using rule 142 (return_type -> empty .)
    $end            reduce using rule 142 (return_type -> empty .)
    RBRACE          reduce using rule 142 (return_type -> empty .)
    CASE            reduce using rule 142 (return_type -> empty .)
    DEFAULT         reduce using rule 142 (return_type -> empty .)
    RPAREN          reduce using rule 142 (return_type -> empty .)
    COMMA           reduce using rule 142 (return_type -> empty .)
    RBRACKET        reduce using rule 142 (return_type -> empty .)


state 220

    (128) parameters -> parameters COMMA parameter .

    RPAREN          reduce using rule 128 (parameters -> parameters COMMA parameter .)
    COMMA           reduce using rule 128 (parameters -> parameters COMMA parameter .)


state 221

    (76) function -> FUNC MAIN LPAREN params_opt RPAREN . block
    (100) block -> . LBRACE statement_list RBRACE
    (101) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 43

    block                          shift and go to state 249

state 222

    (90) struct_field_assignment -> IDENTIFIER COLON . expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    expression                     shift and go to state 250
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 223

    (87) struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .

    IDENTIFIER      reduce using rule 87 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    VAR             reduce using rule 87 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    TYPE            reduce using rule 87 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    FOR             reduce using rule 87 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    PACKAGE         reduce using rule 87 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    IMPORT          reduce using rule 87 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    SWITCH          reduce using rule 87 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    IF              reduce using rule 87 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    FUNC            reduce using rule 87 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    RETURN          reduce using rule 87 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    $end            reduce using rule 87 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    RBRACE          reduce using rule 87 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    CASE            reduce using rule 87 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    DEFAULT         reduce using rule 87 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)


state 224

    (89) struct_field_assignments -> struct_field_assignments COMMA . struct_field_assignment
    (90) struct_field_assignment -> . IDENTIFIER COLON expression

    IDENTIFIER      shift and go to state 182

    struct_field_assignment        shift and go to state 251

state 225

    (68) mapLiteral -> MAP LBRACKET type_name RBRACKET . type_name LBRACE mapEntries RBRACE
    (135) type_name -> . DATATYPE
    (136) type_name -> . IDENTIFIER
    (137) type_name -> . LBRACKET RBRACKET type_name
    (138) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 87
    IDENTIFIER      shift and go to state 83
    LBRACKET        shift and go to state 156
    FUNC            shift and go to state 88

    type_name                      shift and go to state 252

state 226

    (33) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER . RPAREN

    RPAREN          shift and go to state 253


state 227

    (44) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .

    IDENTIFIER      reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    VAR             reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TYPE            reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FOR             reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PACKAGE         reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IMPORT          reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SWITCH          reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IF              reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FUNC            reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RETURN          reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    $end            reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LBRACKET        reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    EQ              reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    NEQ             reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    GT              reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LT              reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    GE              reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LE              reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    AND             reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    OR              reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PLUS            reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    MINUS           reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TIMES           reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DIVIDE          reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    MOD             reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LBRACE          reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    CASE            reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DEFAULT         reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RPAREN          reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SEMICOLON       reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACKET        reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    COLON           reduce using rule 44 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)


state 228

    (43) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .

    IDENTIFIER      reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    VAR             reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    TYPE            reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    FOR             reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    PACKAGE         reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    IMPORT          reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    SWITCH          reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    IF              reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    FUNC            reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    RETURN          reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    $end            reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    LBRACKET        reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    EQ              reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    NEQ             reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    GT              reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    LT              reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    GE              reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    LE              reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    AND             reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    OR              reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    PLUS            reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    MINUS           reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    TIMES           reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    DIVIDE          reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    MOD             reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    LBRACE          reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    COMMA           reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    RBRACE          reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    CASE            reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    DEFAULT         reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    RPAREN          reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    SEMICOLON       reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    RBRACKET        reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    COLON           reduce using rule 43 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)


state 229

    (138) type_name -> FUNC LPAREN parameters RPAREN . return_type
    (139) return_type -> . DATATYPE
    (140) return_type -> . LPAREN type_list RPAREN
    (142) return_type -> . empty
    (60) empty -> .

    DATATYPE        shift and go to state 218
    LPAREN          shift and go to state 216
    ASSIGN          reduce using rule 60 (empty -> .)
    IDENTIFIER      reduce using rule 60 (empty -> .)
    VAR             reduce using rule 60 (empty -> .)
    TYPE            reduce using rule 60 (empty -> .)
    FOR             reduce using rule 60 (empty -> .)
    PACKAGE         reduce using rule 60 (empty -> .)
    IMPORT          reduce using rule 60 (empty -> .)
    SWITCH          reduce using rule 60 (empty -> .)
    IF              reduce using rule 60 (empty -> .)
    FUNC            reduce using rule 60 (empty -> .)
    RETURN          reduce using rule 60 (empty -> .)
    $end            reduce using rule 60 (empty -> .)
    RBRACE          reduce using rule 60 (empty -> .)
    CASE            reduce using rule 60 (empty -> .)
    DEFAULT         reduce using rule 60 (empty -> .)
    LBRACE          reduce using rule 60 (empty -> .)
    RPAREN          reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)
    RBRACKET        reduce using rule 60 (empty -> .)

    return_type                    shift and go to state 254
    empty                          shift and go to state 219

state 230

    (91) struct_field -> IDENTIFIER type_name .

    RBRACE          reduce using rule 91 (struct_field -> IDENTIFIER type_name .)
    IDENTIFIER      reduce using rule 91 (struct_field -> IDENTIFIER type_name .)


state 231

    (86) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .

    IDENTIFIER      reduce using rule 86 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    VAR             reduce using rule 86 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    TYPE            reduce using rule 86 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    FOR             reduce using rule 86 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    PACKAGE         reduce using rule 86 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    IMPORT          reduce using rule 86 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    SWITCH          reduce using rule 86 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    IF              reduce using rule 86 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    FUNC            reduce using rule 86 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    RETURN          reduce using rule 86 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    $end            reduce using rule 86 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    RBRACE          reduce using rule 86 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    CASE            reduce using rule 86 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    DEFAULT         reduce using rule 86 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)


state 232

    (93) struct_fields -> struct_fields struct_field .

    RBRACE          reduce using rule 93 (struct_fields -> struct_fields struct_field .)
    IDENTIFIER      reduce using rule 93 (struct_fields -> struct_fields struct_field .)


state 233

    (95) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression . block
    (113) expression -> expression . operadorLogico expression
    (114) expression -> expression . comparador expression
    (115) expression -> expression . operator expression
    (150) expression -> expression . LBRACKET expression RBRACKET
    (151) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (152) expression -> expression . LBRACKET COLON expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON RBRACKET
    (100) block -> . LBRACE statement_list RBRACE
    (101) block -> . LBRACE RBRACE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (116) operator -> . PLUS
    (117) operator -> . MINUS
    (118) operator -> . TIMES
    (119) operator -> . DIVIDE
    (120) operator -> . MOD

    LBRACKET        shift and go to state 95
    LBRACE          shift and go to state 43
    AND             shift and go to state 102
    OR              shift and go to state 103
    EQ              shift and go to state 96
    NEQ             shift and go to state 97
    GT              shift and go to state 98
    LT              shift and go to state 99
    GE              shift and go to state 100
    LE              shift and go to state 101
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108

    block                          shift and go to state 255
    operadorLogico                 shift and go to state 93
    comparador                     shift and go to state 121
    operator                       shift and go to state 94

state 234

    (151) expression -> expression LBRACKET expression COLON expression . RBRACKET
    (113) expression -> expression . operadorLogico expression
    (114) expression -> expression . comparador expression
    (115) expression -> expression . operator expression
    (150) expression -> expression . LBRACKET expression RBRACKET
    (151) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (152) expression -> expression . LBRACKET COLON expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON RBRACKET
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (116) operator -> . PLUS
    (117) operator -> . MINUS
    (118) operator -> . TIMES
    (119) operator -> . DIVIDE
    (120) operator -> . MOD

    RBRACKET        shift and go to state 256
    LBRACKET        shift and go to state 95
    AND             shift and go to state 102
    OR              shift and go to state 103
    EQ              shift and go to state 96
    NEQ             shift and go to state 97
    GT              shift and go to state 98
    LT              shift and go to state 99
    GE              shift and go to state 100
    LE              shift and go to state 101
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108

    operadorLogico                 shift and go to state 93
    comparador                     shift and go to state 121
    operator                       shift and go to state 94

state 235

    (153) expression -> expression LBRACKET expression COLON RBRACKET .

    LBRACKET        reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    EQ              reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    NEQ             reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    GT              reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    LT              reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    GE              reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    LE              reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    AND             reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    OR              reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    PLUS            reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    MINUS           reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    TIMES           reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    DIVIDE          reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    MOD             reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    LBRACE          reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    COMMA           reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    IDENTIFIER      reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    VAR             reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    TYPE            reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    FOR             reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    PACKAGE         reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    IMPORT          reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    SWITCH          reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    IF              reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    FUNC            reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    RETURN          reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    $end            reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    RBRACE          reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    CASE            reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    DEFAULT         reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    RPAREN          reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    SEMICOLON       reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    RBRACKET        reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)
    COLON           reduce using rule 153 (expression -> expression LBRACKET expression COLON RBRACKET .)


state 236

    (152) expression -> expression LBRACKET COLON expression RBRACKET .

    LBRACKET        reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    EQ              reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    NEQ             reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    GT              reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    LT              reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    GE              reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    LE              reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    AND             reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    OR              reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    PLUS            reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    MINUS           reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    TIMES           reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    DIVIDE          reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    MOD             reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    LBRACE          reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    COMMA           reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    IDENTIFIER      reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    VAR             reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    TYPE            reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    FOR             reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    PACKAGE         reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    IMPORT          reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    SWITCH          reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    IF              reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    FUNC            reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    RETURN          reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    $end            reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    RBRACE          reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    CASE            reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    DEFAULT         reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    RPAREN          reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    SEMICOLON       reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    RBRACKET        reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)
    COLON           reduce using rule 152 (expression -> expression LBRACKET COLON expression RBRACKET .)


state 237

    (137) type_name -> LBRACKET RBRACKET type_name .

    LBRACE          reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    RPAREN          reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    COMMA           reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    RBRACKET        reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    IDENTIFIER      reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    VAR             reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    TYPE            reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    FOR             reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    PACKAGE         reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    IMPORT          reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    SWITCH          reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    IF              reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    FUNC            reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    RETURN          reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    $end            reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    ASSIGN          reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    RBRACE          reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    CASE            reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)
    DEFAULT         reduce using rule 137 (type_name -> LBRACKET RBRACKET type_name .)


state 238

    (147) slice_literal -> LBRACKET RBRACKET type_name LBRACE elements . RBRACE
    (148) elements -> elements . COMMA expression

    RBRACE          shift and go to state 257
    COMMA           shift and go to state 258


state 239

    (149) elements -> expression .
    (113) expression -> expression . operadorLogico expression
    (114) expression -> expression . comparador expression
    (115) expression -> expression . operator expression
    (150) expression -> expression . LBRACKET expression RBRACKET
    (151) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (152) expression -> expression . LBRACKET COLON expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON RBRACKET
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (116) operator -> . PLUS
    (117) operator -> . MINUS
    (118) operator -> . TIMES
    (119) operator -> . DIVIDE
    (120) operator -> . MOD

    RBRACE          reduce using rule 149 (elements -> expression .)
    COMMA           reduce using rule 149 (elements -> expression .)
    LBRACKET        shift and go to state 95
    AND             shift and go to state 102
    OR              shift and go to state 103
    EQ              shift and go to state 96
    NEQ             shift and go to state 97
    GT              shift and go to state 98
    LT              shift and go to state 99
    GE              shift and go to state 100
    LE              shift and go to state 101
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108

    operadorLogico                 shift and go to state 93
    comparador                     shift and go to state 121
    operator                       shift and go to state 94

state 240

    (64) caseBlock -> CASE expression COLON . statement_list
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . struct_definition
    (10) statement -> . for_statement
    (11) statement -> . package
    (12) statement -> . import
    (13) statement -> . switch
    (14) statement -> . map
    (15) statement -> . if_statement
    (16) statement -> . function
    (17) statement -> . method_definition
    (18) statement -> . function_literal
    (19) statement -> . var_declaration
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (22) statement -> . return_statement
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (39) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (40) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (41) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (86) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (95) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (97) for_statement -> . FOR condicion block
    (98) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (61) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (66) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (67) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (123) if_statement -> . IF condicion block
    (124) if_statement -> . IF condicion block ELSE block
    (125) if_statement -> . IF condicion_compleja block
    (126) if_statement -> . IF condicion_compleja block ELSE block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (76) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (94) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER type_name
    (145) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (146) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (77) return_statement -> . RETURN return_values

    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29
    RETURN          shift and go to state 30

    statement_list                 shift and go to state 259
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    struct_definition              shift and go to state 7
    for_statement                  shift and go to state 8
    package                        shift and go to state 9
    import                         shift and go to state 10
    switch                         shift and go to state 11
    map                            shift and go to state 12
    if_statement                   shift and go to state 13
    function                       shift and go to state 14
    method_definition              shift and go to state 15
    function_literal               shift and go to state 16
    var_declaration                shift and go to state 17
    slice_declaration              shift and go to state 18
    declare_assign                 shift and go to state 19
    return_statement               shift and go to state 20

state 241

    (65) caseBlock -> DEFAULT COLON statement_list .
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . struct_definition
    (10) statement -> . for_statement
    (11) statement -> . package
    (12) statement -> . import
    (13) statement -> . switch
    (14) statement -> . map
    (15) statement -> . if_statement
    (16) statement -> . function
    (17) statement -> . method_definition
    (18) statement -> . function_literal
    (19) statement -> . var_declaration
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (22) statement -> . return_statement
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (39) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (40) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (41) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (86) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (95) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (97) for_statement -> . FOR condicion block
    (98) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (61) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (66) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (67) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (123) if_statement -> . IF condicion block
    (124) if_statement -> . IF condicion block ELSE block
    (125) if_statement -> . IF condicion_compleja block
    (126) if_statement -> . IF condicion_compleja block ELSE block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (76) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (94) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER type_name
    (145) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (146) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (77) return_statement -> . RETURN return_values

    CASE            reduce using rule 65 (caseBlock -> DEFAULT COLON statement_list .)
    DEFAULT         reduce using rule 65 (caseBlock -> DEFAULT COLON statement_list .)
    RBRACE          reduce using rule 65 (caseBlock -> DEFAULT COLON statement_list .)
    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29
    RETURN          shift and go to state 30

    statement                      shift and go to state 31
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    struct_definition              shift and go to state 7
    for_statement                  shift and go to state 8
    package                        shift and go to state 9
    import                         shift and go to state 10
    switch                         shift and go to state 11
    map                            shift and go to state 12
    if_statement                   shift and go to state 13
    function                       shift and go to state 14
    method_definition              shift and go to state 15
    function_literal               shift and go to state 16
    var_declaration                shift and go to state 17
    slice_declaration              shift and go to state 18
    declare_assign                 shift and go to state 19
    return_statement               shift and go to state 20

state 242

    (74) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .

    IDENTIFIER      reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    VAR             reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    TYPE            reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    FOR             reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    PACKAGE         reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    IMPORT          reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    SWITCH          reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    IF              reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    FUNC            reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    RETURN          reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    $end            reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    RBRACE          reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    CASE            reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    DEFAULT         reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)


state 243

    (75) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 260


state 244

    (83) params -> param COMMA params .

    RPAREN          reduce using rule 83 (params -> param COMMA params .)


state 245

    (94) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER . LPAREN arguments RPAREN block

    LPAREN          shift and go to state 261


state 246

    (140) return_type -> LPAREN type_list . RPAREN

    RPAREN          shift and go to state 262


state 247

    (143) type_list -> DATATYPE .
    (144) type_list -> DATATYPE . COMMA type_list

    RPAREN          reduce using rule 143 (type_list -> DATATYPE .)
    COMMA           shift and go to state 263


state 248

    (127) function_literal -> FUNC LPAREN parameters RPAREN return_type block .

    IDENTIFIER      reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    VAR             reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    TYPE            reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    FOR             reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    PACKAGE         reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    IMPORT          reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    SWITCH          reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    IF              reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    FUNC            reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    RETURN          reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    $end            reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    LBRACKET        reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    EQ              reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    NEQ             reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    GT              reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    LT              reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    GE              reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    LE              reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    AND             reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    OR              reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    PLUS            reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    MINUS           reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    TIMES           reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    DIVIDE          reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    MOD             reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    LBRACE          reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    COMMA           reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    RBRACE          reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    CASE            reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    DEFAULT         reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    RPAREN          reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    SEMICOLON       reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    RBRACKET        reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    COLON           reduce using rule 127 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)


state 249

    (76) function -> FUNC MAIN LPAREN params_opt RPAREN block .

    IDENTIFIER      reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    VAR             reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    TYPE            reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    FOR             reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    PACKAGE         reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    IMPORT          reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    SWITCH          reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    IF              reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    FUNC            reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    RETURN          reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    $end            reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    RBRACE          reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    CASE            reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    DEFAULT         reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)


state 250

    (90) struct_field_assignment -> IDENTIFIER COLON expression .
    (113) expression -> expression . operadorLogico expression
    (114) expression -> expression . comparador expression
    (115) expression -> expression . operator expression
    (150) expression -> expression . LBRACKET expression RBRACKET
    (151) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (152) expression -> expression . LBRACKET COLON expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON RBRACKET
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (116) operator -> . PLUS
    (117) operator -> . MINUS
    (118) operator -> . TIMES
    (119) operator -> . DIVIDE
    (120) operator -> . MOD

    RBRACE          reduce using rule 90 (struct_field_assignment -> IDENTIFIER COLON expression .)
    COMMA           reduce using rule 90 (struct_field_assignment -> IDENTIFIER COLON expression .)
    LBRACKET        shift and go to state 95
    AND             shift and go to state 102
    OR              shift and go to state 103
    EQ              shift and go to state 96
    NEQ             shift and go to state 97
    GT              shift and go to state 98
    LT              shift and go to state 99
    GE              shift and go to state 100
    LE              shift and go to state 101
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108

    operadorLogico                 shift and go to state 93
    comparador                     shift and go to state 121
    operator                       shift and go to state 94

state 251

    (89) struct_field_assignments -> struct_field_assignments COMMA struct_field_assignment .

    RBRACE          reduce using rule 89 (struct_field_assignments -> struct_field_assignments COMMA struct_field_assignment .)
    COMMA           reduce using rule 89 (struct_field_assignments -> struct_field_assignments COMMA struct_field_assignment .)


state 252

    (68) mapLiteral -> MAP LBRACKET type_name RBRACKET type_name . LBRACE mapEntries RBRACE

    LBRACE          shift and go to state 264


state 253

    (33) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .

    IDENTIFIER      reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    VAR             reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    TYPE            reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    FOR             reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    PACKAGE         reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    IMPORT          reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    SWITCH          reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    IF              reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    FUNC            reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    RETURN          reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    $end            reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    RBRACE          reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    CASE            reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    DEFAULT         reduce using rule 33 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)


state 254

    (138) type_name -> FUNC LPAREN parameters RPAREN return_type .

    ASSIGN          reduce using rule 138 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    IDENTIFIER      reduce using rule 138 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    VAR             reduce using rule 138 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    TYPE            reduce using rule 138 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    FOR             reduce using rule 138 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    PACKAGE         reduce using rule 138 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    IMPORT          reduce using rule 138 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    SWITCH          reduce using rule 138 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    IF              reduce using rule 138 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    FUNC            reduce using rule 138 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    RETURN          reduce using rule 138 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    $end            reduce using rule 138 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    RBRACE          reduce using rule 138 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    CASE            reduce using rule 138 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    DEFAULT         reduce using rule 138 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    LBRACE          reduce using rule 138 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    RPAREN          reduce using rule 138 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    COMMA           reduce using rule 138 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    RBRACKET        reduce using rule 138 (type_name -> FUNC LPAREN parameters RPAREN return_type .)


state 255

    (95) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .

    IDENTIFIER      reduce using rule 95 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    VAR             reduce using rule 95 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    TYPE            reduce using rule 95 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    FOR             reduce using rule 95 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    PACKAGE         reduce using rule 95 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    IMPORT          reduce using rule 95 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    SWITCH          reduce using rule 95 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    IF              reduce using rule 95 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    FUNC            reduce using rule 95 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    RETURN          reduce using rule 95 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    $end            reduce using rule 95 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    RBRACE          reduce using rule 95 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    CASE            reduce using rule 95 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    DEFAULT         reduce using rule 95 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)


state 256

    (151) expression -> expression LBRACKET expression COLON expression RBRACKET .

    LBRACKET        reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    EQ              reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    NEQ             reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    GT              reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    LT              reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    GE              reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    LE              reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    AND             reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    OR              reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    PLUS            reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    MINUS           reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    TIMES           reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    DIVIDE          reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    MOD             reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    LBRACE          reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    IDENTIFIER      reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    VAR             reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    TYPE            reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    FOR             reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    PACKAGE         reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    IMPORT          reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    SWITCH          reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    IF              reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    FUNC            reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    RETURN          reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    $end            reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    RBRACE          reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    CASE            reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    DEFAULT         reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    RPAREN          reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    SEMICOLON       reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    RBRACKET        reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    COLON           reduce using rule 151 (expression -> expression LBRACKET expression COLON expression RBRACKET .)


state 257

    (147) slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .

    LBRACKET        reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    EQ              reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    NEQ             reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    GT              reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    LT              reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    GE              reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    LE              reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    AND             reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    OR              reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    PLUS            reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    MINUS           reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    TIMES           reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    DIVIDE          reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    MOD             reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    LBRACE          reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    COMMA           reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    IDENTIFIER      reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    VAR             reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    TYPE            reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    FOR             reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    PACKAGE         reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    IMPORT          reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    SWITCH          reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    IF              reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    FUNC            reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    RETURN          reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    $end            reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    RBRACE          reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    CASE            reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    DEFAULT         reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    RPAREN          reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    SEMICOLON       reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    RBRACKET        reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    COLON           reduce using rule 147 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)


state 258

    (148) elements -> elements COMMA . expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    expression                     shift and go to state 265
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 259

    (64) caseBlock -> CASE expression COLON statement_list .
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . struct_definition
    (10) statement -> . for_statement
    (11) statement -> . package
    (12) statement -> . import
    (13) statement -> . switch
    (14) statement -> . map
    (15) statement -> . if_statement
    (16) statement -> . function
    (17) statement -> . method_definition
    (18) statement -> . function_literal
    (19) statement -> . var_declaration
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (22) statement -> . return_statement
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (39) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (40) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (41) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (86) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (95) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (97) for_statement -> . FOR condicion block
    (98) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (61) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (66) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (67) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (123) if_statement -> . IF condicion block
    (124) if_statement -> . IF condicion block ELSE block
    (125) if_statement -> . IF condicion_compleja block
    (126) if_statement -> . IF condicion_compleja block ELSE block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (76) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (94) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER type_name
    (145) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (146) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (77) return_statement -> . RETURN return_values

    CASE            reduce using rule 64 (caseBlock -> CASE expression COLON statement_list .)
    DEFAULT         reduce using rule 64 (caseBlock -> CASE expression COLON statement_list .)
    RBRACE          reduce using rule 64 (caseBlock -> CASE expression COLON statement_list .)
    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29
    RETURN          shift and go to state 30

    statement                      shift and go to state 31
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    struct_definition              shift and go to state 7
    for_statement                  shift and go to state 8
    package                        shift and go to state 9
    import                         shift and go to state 10
    switch                         shift and go to state 11
    map                            shift and go to state 12
    if_statement                   shift and go to state 13
    function                       shift and go to state 14
    method_definition              shift and go to state 15
    function_literal               shift and go to state 16
    var_declaration                shift and go to state 17
    slice_declaration              shift and go to state 18
    declare_assign                 shift and go to state 19
    return_statement               shift and go to state 20

state 260

    (75) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE . statement_list RBRACE
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . struct_definition
    (10) statement -> . for_statement
    (11) statement -> . package
    (12) statement -> . import
    (13) statement -> . switch
    (14) statement -> . map
    (15) statement -> . if_statement
    (16) statement -> . function
    (17) statement -> . method_definition
    (18) statement -> . function_literal
    (19) statement -> . var_declaration
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (22) statement -> . return_statement
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (39) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (40) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (41) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (86) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (95) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (97) for_statement -> . FOR condicion block
    (98) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (61) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (66) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (67) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (123) if_statement -> . IF condicion block
    (124) if_statement -> . IF condicion block ELSE block
    (125) if_statement -> . IF condicion_compleja block
    (126) if_statement -> . IF condicion_compleja block ELSE block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (76) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (94) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER type_name
    (145) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (146) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (77) return_statement -> . RETURN return_values

    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29
    RETURN          shift and go to state 30

    statement_list                 shift and go to state 266
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    struct_definition              shift and go to state 7
    for_statement                  shift and go to state 8
    package                        shift and go to state 9
    import                         shift and go to state 10
    switch                         shift and go to state 11
    map                            shift and go to state 12
    if_statement                   shift and go to state 13
    function                       shift and go to state 14
    method_definition              shift and go to state 15
    function_literal               shift and go to state 16
    var_declaration                shift and go to state 17
    slice_declaration              shift and go to state 18
    declare_assign                 shift and go to state 19
    return_statement               shift and go to state 20

state 261

    (94) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN . arguments RPAREN block
    (29) arguments -> . expression
    (30) arguments -> . arguments COMMA expression
    (31) arguments -> .
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    RPAREN          reduce using rule 31 (arguments -> .)
    COMMA           reduce using rule 31 (arguments -> .)
    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    arguments                      shift and go to state 267
    expression                     shift and go to state 268
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 262

    (140) return_type -> LPAREN type_list RPAREN .

    LBRACE          reduce using rule 140 (return_type -> LPAREN type_list RPAREN .)
    ASSIGN          reduce using rule 140 (return_type -> LPAREN type_list RPAREN .)
    IDENTIFIER      reduce using rule 140 (return_type -> LPAREN type_list RPAREN .)
    VAR             reduce using rule 140 (return_type -> LPAREN type_list RPAREN .)
    TYPE            reduce using rule 140 (return_type -> LPAREN type_list RPAREN .)
    FOR             reduce using rule 140 (return_type -> LPAREN type_list RPAREN .)
    PACKAGE         reduce using rule 140 (return_type -> LPAREN type_list RPAREN .)
    IMPORT          reduce using rule 140 (return_type -> LPAREN type_list RPAREN .)
    SWITCH          reduce using rule 140 (return_type -> LPAREN type_list RPAREN .)
    IF              reduce using rule 140 (return_type -> LPAREN type_list RPAREN .)
    FUNC            reduce using rule 140 (return_type -> LPAREN type_list RPAREN .)
    RETURN          reduce using rule 140 (return_type -> LPAREN type_list RPAREN .)
    $end            reduce using rule 140 (return_type -> LPAREN type_list RPAREN .)
    RBRACE          reduce using rule 140 (return_type -> LPAREN type_list RPAREN .)
    CASE            reduce using rule 140 (return_type -> LPAREN type_list RPAREN .)
    DEFAULT         reduce using rule 140 (return_type -> LPAREN type_list RPAREN .)
    RPAREN          reduce using rule 140 (return_type -> LPAREN type_list RPAREN .)
    COMMA           reduce using rule 140 (return_type -> LPAREN type_list RPAREN .)
    RBRACKET        reduce using rule 140 (return_type -> LPAREN type_list RPAREN .)


state 263

    (144) type_list -> DATATYPE COMMA . type_list
    (143) type_list -> . DATATYPE
    (144) type_list -> . DATATYPE COMMA type_list

    DATATYPE        shift and go to state 247

    type_list                      shift and go to state 269

state 264

    (68) mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE . mapEntries RBRACE
    (69) mapEntries -> . mapEntry
    (70) mapEntries -> . mapEntry COMMA mapEntries
    (71) mapEntry -> . value_key COLON value_key
    (72) value_key -> . expression
    (73) value_key -> . STRING
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    STRING          shift and go to state 274
    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    mapEntries                     shift and go to state 270
    mapEntry                       shift and go to state 271
    value_key                      shift and go to state 272
    expression                     shift and go to state 273
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 265

    (148) elements -> elements COMMA expression .
    (113) expression -> expression . operadorLogico expression
    (114) expression -> expression . comparador expression
    (115) expression -> expression . operator expression
    (150) expression -> expression . LBRACKET expression RBRACKET
    (151) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (152) expression -> expression . LBRACKET COLON expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON RBRACKET
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (116) operator -> . PLUS
    (117) operator -> . MINUS
    (118) operator -> . TIMES
    (119) operator -> . DIVIDE
    (120) operator -> . MOD

    RBRACE          reduce using rule 148 (elements -> elements COMMA expression .)
    COMMA           reduce using rule 148 (elements -> elements COMMA expression .)
    LBRACKET        shift and go to state 95
    AND             shift and go to state 102
    OR              shift and go to state 103
    EQ              shift and go to state 96
    NEQ             shift and go to state 97
    GT              shift and go to state 98
    LT              shift and go to state 99
    GE              shift and go to state 100
    LE              shift and go to state 101
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108

    operadorLogico                 shift and go to state 93
    comparador                     shift and go to state 121
    operator                       shift and go to state 94

state 266

    (75) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list . RBRACE
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . struct_definition
    (10) statement -> . for_statement
    (11) statement -> . package
    (12) statement -> . import
    (13) statement -> . switch
    (14) statement -> . map
    (15) statement -> . if_statement
    (16) statement -> . function
    (17) statement -> . method_definition
    (18) statement -> . function_literal
    (19) statement -> . var_declaration
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (22) statement -> . return_statement
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (36) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (38) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (39) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (40) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (41) assignment -> . IDENTIFIER ASSIGN expression
    (33) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (86) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (95) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (97) for_statement -> . FOR condicion block
    (98) for_statement -> . FOR block
    (23) package -> . PACKAGE MAIN
    (24) package -> . PACKAGE IDENTIFIER
    (25) import -> . IMPORT STRING
    (26) import -> . IMPORT LPAREN import_list RPAREN
    (61) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (66) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (67) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (123) if_statement -> . IF condicion block
    (124) if_statement -> . IF condicion block ELSE block
    (125) if_statement -> . IF condicion_compleja block
    (126) if_statement -> . IF condicion_compleja block ELSE block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (76) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (94) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (34) var_declaration -> . VAR IDENTIFIER type_name
    (145) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (146) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (77) return_statement -> . RETURN return_values

    RBRACE          shift and go to state 275
    IDENTIFIER      shift and go to state 21
    VAR             shift and go to state 22
    TYPE            shift and go to state 23
    FOR             shift and go to state 24
    PACKAGE         shift and go to state 25
    IMPORT          shift and go to state 26
    SWITCH          shift and go to state 27
    IF              shift and go to state 28
    FUNC            shift and go to state 29
    RETURN          shift and go to state 30

    statement                      shift and go to state 31
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    struct_definition              shift and go to state 7
    for_statement                  shift and go to state 8
    package                        shift and go to state 9
    import                         shift and go to state 10
    switch                         shift and go to state 11
    map                            shift and go to state 12
    if_statement                   shift and go to state 13
    function                       shift and go to state 14
    method_definition              shift and go to state 15
    function_literal               shift and go to state 16
    var_declaration                shift and go to state 17
    slice_declaration              shift and go to state 18
    declare_assign                 shift and go to state 19
    return_statement               shift and go to state 20

state 267

    (94) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments . RPAREN block
    (30) arguments -> arguments . COMMA expression

    RPAREN          shift and go to state 276
    COMMA           shift and go to state 277


state 268

    (29) arguments -> expression .
    (113) expression -> expression . operadorLogico expression
    (114) expression -> expression . comparador expression
    (115) expression -> expression . operator expression
    (150) expression -> expression . LBRACKET expression RBRACKET
    (151) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (152) expression -> expression . LBRACKET COLON expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON RBRACKET
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (116) operator -> . PLUS
    (117) operator -> . MINUS
    (118) operator -> . TIMES
    (119) operator -> . DIVIDE
    (120) operator -> . MOD

    RPAREN          reduce using rule 29 (arguments -> expression .)
    COMMA           reduce using rule 29 (arguments -> expression .)
    LBRACKET        shift and go to state 95
    AND             shift and go to state 102
    OR              shift and go to state 103
    EQ              shift and go to state 96
    NEQ             shift and go to state 97
    GT              shift and go to state 98
    LT              shift and go to state 99
    GE              shift and go to state 100
    LE              shift and go to state 101
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108

    operadorLogico                 shift and go to state 93
    comparador                     shift and go to state 121
    operator                       shift and go to state 94

state 269

    (144) type_list -> DATATYPE COMMA type_list .

    RPAREN          reduce using rule 144 (type_list -> DATATYPE COMMA type_list .)


state 270

    (68) mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries . RBRACE

    RBRACE          shift and go to state 278


state 271

    (69) mapEntries -> mapEntry .
    (70) mapEntries -> mapEntry . COMMA mapEntries

    RBRACE          reduce using rule 69 (mapEntries -> mapEntry .)
    COMMA           shift and go to state 279


state 272

    (71) mapEntry -> value_key . COLON value_key

    COLON           shift and go to state 280


state 273

    (72) value_key -> expression .
    (113) expression -> expression . operadorLogico expression
    (114) expression -> expression . comparador expression
    (115) expression -> expression . operator expression
    (150) expression -> expression . LBRACKET expression RBRACKET
    (151) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (152) expression -> expression . LBRACKET COLON expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON RBRACKET
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (116) operator -> . PLUS
    (117) operator -> . MINUS
    (118) operator -> . TIMES
    (119) operator -> . DIVIDE
    (120) operator -> . MOD

    COLON           reduce using rule 72 (value_key -> expression .)
    COMMA           reduce using rule 72 (value_key -> expression .)
    RBRACE          reduce using rule 72 (value_key -> expression .)
    LBRACKET        shift and go to state 95
    AND             shift and go to state 102
    OR              shift and go to state 103
    EQ              shift and go to state 96
    NEQ             shift and go to state 97
    GT              shift and go to state 98
    LT              shift and go to state 99
    GE              shift and go to state 100
    LE              shift and go to state 101
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108

    operadorLogico                 shift and go to state 93
    comparador                     shift and go to state 121
    operator                       shift and go to state 94

state 274

    (73) value_key -> STRING .
    (105) expression -> STRING .

  ! reduce/reduce conflict for COLON resolved using rule 73 (value_key -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 73 (value_key -> STRING .)
  ! reduce/reduce conflict for RBRACE resolved using rule 73 (value_key -> STRING .)
    COLON           reduce using rule 73 (value_key -> STRING .)
    COMMA           reduce using rule 73 (value_key -> STRING .)
    RBRACE          reduce using rule 73 (value_key -> STRING .)
    LBRACKET        reduce using rule 105 (expression -> STRING .)
    AND             reduce using rule 105 (expression -> STRING .)
    OR              reduce using rule 105 (expression -> STRING .)
    EQ              reduce using rule 105 (expression -> STRING .)
    NEQ             reduce using rule 105 (expression -> STRING .)
    GT              reduce using rule 105 (expression -> STRING .)
    LT              reduce using rule 105 (expression -> STRING .)
    GE              reduce using rule 105 (expression -> STRING .)
    LE              reduce using rule 105 (expression -> STRING .)
    PLUS            reduce using rule 105 (expression -> STRING .)
    MINUS           reduce using rule 105 (expression -> STRING .)
    TIMES           reduce using rule 105 (expression -> STRING .)
    DIVIDE          reduce using rule 105 (expression -> STRING .)
    MOD             reduce using rule 105 (expression -> STRING .)

  ! COLON           [ reduce using rule 105 (expression -> STRING .) ]
  ! COMMA           [ reduce using rule 105 (expression -> STRING .) ]
  ! RBRACE          [ reduce using rule 105 (expression -> STRING .) ]


state 275

    (75) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .

    IDENTIFIER      reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    VAR             reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    TYPE            reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    FOR             reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    PACKAGE         reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    IMPORT          reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    SWITCH          reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    IF              reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    FUNC            reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    $end            reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    CASE            reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    DEFAULT         reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)


state 276

    (94) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN . block
    (100) block -> . LBRACE statement_list RBRACE
    (101) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 43

    block                          shift and go to state 281

state 277

    (30) arguments -> arguments COMMA . expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    STRING          shift and go to state 47
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    expression                     shift and go to state 282
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 278

    (68) mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .

    IDENTIFIER      reduce using rule 68 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    VAR             reduce using rule 68 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    TYPE            reduce using rule 68 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    FOR             reduce using rule 68 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    PACKAGE         reduce using rule 68 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    IMPORT          reduce using rule 68 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    SWITCH          reduce using rule 68 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    IF              reduce using rule 68 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    FUNC            reduce using rule 68 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    RETURN          reduce using rule 68 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    $end            reduce using rule 68 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    RBRACE          reduce using rule 68 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    CASE            reduce using rule 68 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    DEFAULT         reduce using rule 68 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)


state 279

    (70) mapEntries -> mapEntry COMMA . mapEntries
    (69) mapEntries -> . mapEntry
    (70) mapEntries -> . mapEntry COMMA mapEntries
    (71) mapEntry -> . value_key COLON value_key
    (72) value_key -> . expression
    (73) value_key -> . STRING
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    STRING          shift and go to state 274
    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    mapEntry                       shift and go to state 271
    mapEntries                     shift and go to state 283
    value_key                      shift and go to state 272
    expression                     shift and go to state 273
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 280

    (71) mapEntry -> value_key COLON . value_key
    (72) value_key -> . expression
    (73) value_key -> . STRING
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . IDENTIFIER DOT IDENTIFIER
    (112) expression -> . llamarFuncion
    (113) expression -> . expression operadorLogico expression
    (114) expression -> . expression comparador expression
    (115) expression -> . expression operator expression
    (121) expression -> . MINUS expression
    (122) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (150) expression -> . expression LBRACKET expression RBRACKET
    (151) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (152) expression -> . expression LBRACKET COLON expression RBRACKET
    (153) expression -> . expression LBRACKET expression COLON RBRACKET
    (147) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (43) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (44) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (127) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    STRING          shift and go to state 274
    NUMBER          shift and go to state 45
    IDENTIFIER      shift and go to state 64
    RUNE            shift and go to state 46
    RAW_STRING      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    NIL             shift and go to state 51
    MINUS           shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 57
    FUNC            shift and go to state 58

    value_key                      shift and go to state 284
    expression                     shift and go to state 273
    slice_literal                  shift and go to state 52
    llamarFuncion                  shift and go to state 53
    function_literal               shift and go to state 56

state 281

    (94) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .

    IDENTIFIER      reduce using rule 94 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    VAR             reduce using rule 94 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    TYPE            reduce using rule 94 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    FOR             reduce using rule 94 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    PACKAGE         reduce using rule 94 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    IMPORT          reduce using rule 94 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    SWITCH          reduce using rule 94 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    IF              reduce using rule 94 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    FUNC            reduce using rule 94 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    RETURN          reduce using rule 94 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    $end            reduce using rule 94 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    RBRACE          reduce using rule 94 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    CASE            reduce using rule 94 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    DEFAULT         reduce using rule 94 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)


state 282

    (30) arguments -> arguments COMMA expression .
    (113) expression -> expression . operadorLogico expression
    (114) expression -> expression . comparador expression
    (115) expression -> expression . operator expression
    (150) expression -> expression . LBRACKET expression RBRACKET
    (151) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (152) expression -> expression . LBRACKET COLON expression RBRACKET
    (153) expression -> expression . LBRACKET expression COLON RBRACKET
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (116) operator -> . PLUS
    (117) operator -> . MINUS
    (118) operator -> . TIMES
    (119) operator -> . DIVIDE
    (120) operator -> . MOD

    RPAREN          reduce using rule 30 (arguments -> arguments COMMA expression .)
    COMMA           reduce using rule 30 (arguments -> arguments COMMA expression .)
    LBRACKET        shift and go to state 95
    AND             shift and go to state 102
    OR              shift and go to state 103
    EQ              shift and go to state 96
    NEQ             shift and go to state 97
    GT              shift and go to state 98
    LT              shift and go to state 99
    GE              shift and go to state 100
    LE              shift and go to state 101
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108

    operadorLogico                 shift and go to state 93
    comparador                     shift and go to state 121
    operator                       shift and go to state 94

state 283

    (70) mapEntries -> mapEntry COMMA mapEntries .

    RBRACE          reduce using rule 70 (mapEntries -> mapEntry COMMA mapEntries .)


state 284

    (71) mapEntry -> value_key COLON value_key .

    COMMA           reduce using rule 71 (mapEntry -> value_key COLON value_key .)
    RBRACE          reduce using rule 71 (mapEntry -> value_key COLON value_key .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 82 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 126 resolved as shift
WARNING: shift/reduce conflict for DATATYPE in state 126 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 126 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 126 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 145 resolved as shift
WARNING: shift/reduce conflict for AND in state 145 resolved as shift
WARNING: shift/reduce conflict for OR in state 145 resolved as shift
WARNING: shift/reduce conflict for EQ in state 145 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 145 resolved as shift
WARNING: shift/reduce conflict for GT in state 145 resolved as shift
WARNING: shift/reduce conflict for LT in state 145 resolved as shift
WARNING: shift/reduce conflict for GE in state 145 resolved as shift
WARNING: shift/reduce conflict for LE in state 145 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 145 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 145 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 145 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 145 resolved as shift
WARNING: shift/reduce conflict for MOD in state 145 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 146 resolved as shift
WARNING: shift/reduce conflict for AND in state 146 resolved as shift
WARNING: shift/reduce conflict for OR in state 146 resolved as shift
WARNING: shift/reduce conflict for EQ in state 146 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 146 resolved as shift
WARNING: shift/reduce conflict for GT in state 146 resolved as shift
WARNING: shift/reduce conflict for LT in state 146 resolved as shift
WARNING: shift/reduce conflict for GE in state 146 resolved as shift
WARNING: shift/reduce conflict for LE in state 146 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 146 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 146 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 146 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 146 resolved as shift
WARNING: shift/reduce conflict for MOD in state 146 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 147 resolved as shift
WARNING: shift/reduce conflict for AND in state 147 resolved as shift
WARNING: shift/reduce conflict for OR in state 147 resolved as shift
WARNING: shift/reduce conflict for EQ in state 147 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 147 resolved as shift
WARNING: shift/reduce conflict for GT in state 147 resolved as shift
WARNING: shift/reduce conflict for LT in state 147 resolved as shift
WARNING: shift/reduce conflict for GE in state 147 resolved as shift
WARNING: shift/reduce conflict for LE in state 147 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 147 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 147 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 147 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 147 resolved as shift
WARNING: shift/reduce conflict for MOD in state 147 resolved as shift
WARNING: shift/reduce conflict for DATATYPE in state 158 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 158 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 158 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 158 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 165 resolved as shift
WARNING: shift/reduce conflict for AND in state 165 resolved as shift
WARNING: shift/reduce conflict for OR in state 165 resolved as shift
WARNING: shift/reduce conflict for EQ in state 165 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 165 resolved as shift
WARNING: shift/reduce conflict for GT in state 165 resolved as shift
WARNING: shift/reduce conflict for LT in state 165 resolved as shift
WARNING: shift/reduce conflict for GE in state 165 resolved as shift
WARNING: shift/reduce conflict for LE in state 165 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 165 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 165 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 165 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 165 resolved as shift
WARNING: shift/reduce conflict for MOD in state 165 resolved as shift
WARNING: shift/reduce conflict for DATATYPE in state 170 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 170 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 170 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 170 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 175 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 212 resolved as shift
WARNING: reduce/reduce conflict in state 75 resolved using rule (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal)
WARNING: rejected rule (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal) in state 75
WARNING: reduce/reduce conflict in state 75 resolved using rule (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal)
WARNING: rejected rule (expression -> slice_literal) in state 75
WARNING: reduce/reduce conflict in state 145 resolved using rule (condicion -> expression comparador expression)
WARNING: rejected rule (expression -> expression comparador expression) in state 145
WARNING: reduce/reduce conflict in state 191 resolved using rule (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion)
WARNING: rejected rule (expression -> llamarFuncion) in state 191
WARNING: reduce/reduce conflict in state 192 resolved using rule (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal)
WARNING: rejected rule (expression -> slice_literal) in state 192
WARNING: reduce/reduce conflict in state 193 resolved using rule (type_name -> LBRACKET RBRACKET type_name)
WARNING: rejected rule (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name) in state 193
WARNING: reduce/reduce conflict in state 274 resolved using rule (value_key -> STRING)
WARNING: rejected rule (expression -> STRING) in state 274
WARNING: Rule (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal) is never reduced
WARNING: Rule (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name) is never reduced
