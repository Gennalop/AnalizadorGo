Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CONTINUE
    DEFER
    FALLTHROUGH
    GO
    INTERFACE
    SELECT
    STRING_UNCLOSED

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list_opt -> statement_list
Rule 3     statement_list_opt -> <empty>
Rule 4     statement_list -> statement
Rule 5     statement_list -> statement_list statement
Rule 6     statement -> assignment
Rule 7     statement -> input
Rule 8     statement -> llamarFuncion
Rule 9     statement -> print_statement
Rule 10    statement -> struct_definition
Rule 11    statement -> for_statement
Rule 12    statement -> package
Rule 13    statement -> import
Rule 14    statement -> switch
Rule 15    statement -> map
Rule 16    statement -> if_statement
Rule 17    statement -> function
Rule 18    statement -> method_definition
Rule 19    statement -> function_literal
Rule 20    statement -> var_declaration
Rule 21    package -> PACKAGE MAIN
Rule 22    package -> PACKAGE IDENTIFIER
Rule 23    import -> IMPORT STRING
Rule 24    import -> IMPORT LPAREN import_list RPAREN
Rule 25    import_list -> STRING
Rule 26    import_list -> import_list STRING
Rule 27    arguments -> expression
Rule 28    arguments -> arguments COMMA expression
Rule 29    arguments -> <empty>
Rule 30    const_declaration -> CONST IDENTIFIER ASSIGN expression
Rule 31    input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
Rule 32    var_declaration -> VAR IDENTIFIER DATATYPE
Rule 33    assignment -> IDENTIFIER DECLARE_ASSIGN expression
Rule 34    assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression
Rule 35    assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
Rule 36    assignment -> IDENTIFIER ASSIGN expression
Rule 37    llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN
Rule 38    expression -> expression comparador expression
Rule 39    expression -> expression operadorLogico expression
Rule 40    argument_list -> expression
Rule 41    argument_list -> argument_list COMMA expression
Rule 42    argument_list_opt -> argument_list
Rule 43    argument_list_opt -> <empty>
Rule 44    condicion -> expression comparador expression
Rule 45    condicion_compleja -> condicion operadorLogico condicion
Rule 46    condicion_compleja -> condicion operadorLogico condicion_compleja
Rule 47    operadorLogico -> AND
Rule 48    operadorLogico -> OR
Rule 49    comparador -> EQ
Rule 50    comparador -> NEQ
Rule 51    comparador -> GT
Rule 52    comparador -> LT
Rule 53    comparador -> GE
Rule 54    comparador -> LE
Rule 55    empty -> <empty>
Rule 56    switch -> SWITCH expression LBRACE caseBlocks RBRACE
Rule 57    caseBlocks -> caseBlock
Rule 58    caseBlocks -> caseBlock caseBlocks
Rule 59    caseBlock -> CASE expression COLON statement_list
Rule 60    caseBlock -> DEFAULT COLON statement_list
Rule 61    map -> IDENTIFIER DECLARE_ASSIGN mapLiteral
Rule 62    map -> VAR IDENTIFIER ASSIGN mapLiteral
Rule 63    mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE
Rule 64    mapEntries -> mapEntry
Rule 65    mapEntries -> mapEntry COMMA mapEntries
Rule 66    mapEntry -> value_key COLON value_key
Rule 67    value_key -> expression
Rule 68    value_key -> STRING
Rule 69    function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block
Rule 70    function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
Rule 71    return_values -> expression
Rule 72    return_values -> return_values COMMA expression
Rule 73    function -> FUNC MAIN LPAREN params_opt RPAREN block
Rule 74    return_statement -> RETURN expression
Rule 75    params_opt -> params
Rule 76    params_opt -> <empty>
Rule 77    params -> param
Rule 78    params -> param COMMA params
Rule 79    param -> IDENTIFIER type_name
Rule 80    type_name -> DATATYPE
Rule 81    type_name -> IDENTIFIER
Rule 82    print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
Rule 83    struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
Rule 84    struct_field -> IDENTIFIER DATATYPE
Rule 85    struct_fields -> struct_field
Rule 86    struct_fields -> struct_fields struct_field
Rule 87    method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
Rule 88    for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
Rule 89    identifier_list -> IDENTIFIER
Rule 90    identifier_list -> IDENTIFIER COMMA identifier_list
Rule 91    shortAssignment -> identifier_list DECLARE_ASSIGN expression
Rule 92    for_statement -> FOR condicion block
Rule 93    for_statement -> FOR block
Rule 94    for_range_clause -> shortAssignment RANGE expression
Rule 95    block -> LBRACE statement_list RBRACE
Rule 96    block -> LBRACE RBRACE
Rule 97    expression -> NUMBER
Rule 98    expression -> IDENTIFIER
Rule 99    expression -> RUNE
Rule 100   expression -> STRING
Rule 101   expression -> RAW_STRING
Rule 102   expression -> TRUE
Rule 103   expression -> FALSE
Rule 104   expression -> NIL
Rule 105   expression -> expression operator expression
Rule 106   expression -> expression DOT IDENTIFIER
Rule 107   operator -> PLUS
Rule 108   operator -> MINUS
Rule 109   operator -> TIMES
Rule 110   operator -> DIVIDE
Rule 111   operator -> MOD
Rule 112   expression -> MINUS expression
Rule 113   expression -> LPAREN expression RPAREN
Rule 114   if_statement -> IF condicion_compleja block
Rule 115   if_statement -> IF condicion_compleja block ELSE block
Rule 116   function_literal -> FUNC LPAREN parameters RPAREN return_type block
Rule 117   parameters -> parameters COMMA parameter
Rule 118   parameters -> parameter
Rule 119   parameters -> empty
Rule 120   parameter -> IDENTIFIER DATATYPE
Rule 121   parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE
Rule 122   return_type -> DATATYPE
Rule 123   return_type -> empty
Rule 124   return_type -> LPAREN DATATYPE COMMA return_type RPAREN
Rule 125   slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name
Rule 126   declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal
Rule 127   slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE
Rule 128   elements -> elements COMMA expression
Rule 129   elements -> expression

Terminals, with rules where they appear

AMPERSAND            : 31
AND                  : 47
ASSIGN               : 30 34 35 36 62
BREAK                : 
CASE                 : 59
COLON                : 59 60 66
COMMA                : 28 41 65 72 78 90 117 124 128
CONST                : 30
CONTINUE             : 
DATATYPE             : 32 34 35 63 63 80 84 120 121 122 124
DECLARE_ASSIGN       : 33 61 91 126
DEFAULT              : 60
DEFER                : 
DIVIDE               : 110
DOT                  : 31 82 106
ELSE                 : 115
EQ                   : 49
FALLTHROUGH          : 
FALSE                : 103
FOR                  : 88 92 93
FUNC                 : 69 70 73 87 116 121
GE                   : 53
GO                   : 
GT                   : 51
IDENTIFIER           : 22 30 31 31 31 32 33 34 35 36 37 61 62 69 70 79 81 82 82 83 84 87 87 87 89 90 98 106 120 121 125 126
IF                   : 114 115
IMPORT               : 23 24
INTERFACE            : 
LBRACE               : 56 63 70 83 95 96 127
LBRACKET             : 63 125 127
LE                   : 54
LPAREN               : 24 31 37 69 70 73 82 87 87 113 116 121 124
LT                   : 52
MAIN                 : 21 73
MAP                  : 63
MINUS                : 108 112
MOD                  : 111
NEQ                  : 50
NIL                  : 104
NUMBER               : 97
OR                   : 48
PACKAGE              : 21 22
PLUS                 : 107
RANGE                : 94
RAW_STRING           : 101
RBRACE               : 56 63 70 83 95 96 127
RBRACKET             : 63 125 127
RETURN               : 70 74
RPAREN               : 24 31 37 69 70 73 82 87 87 113 116 121 124
RUNE                 : 99
SELECT               : 
SEMICOLON            : 88 88
STRING               : 23 25 26 68 100
STRING_UNCLOSED      : 
STRUCT               : 83
SWITCH               : 56
TIMES                : 109
TRUE                 : 102
TYPE                 : 83
VAR                  : 32 34 35 62 125
error                : 

Nonterminals, with rules where they appear

argument_list        : 41 42
argument_list_opt    : 37 82
arguments            : 28 87
assignment           : 6
block                : 69 73 87 88 92 93 114 115 115 116
caseBlock            : 57 58
caseBlocks           : 56 58
comparador           : 38 44
condicion            : 45 45 46 88 92
condicion_compleja   : 46 114 115
const_declaration    : 
declare_assign       : 
elements             : 127 128
empty                : 119 123
expression           : 27 28 30 33 34 36 38 38 39 39 40 41 44 44 56 59 67 71 72 74 88 91 94 105 105 106 112 113 128 129
for_range_clause     : 
for_statement        : 11
function             : 17
function_literal     : 19
identifier_list      : 90 91
if_statement         : 16
import               : 13
import_list          : 24 26
input                : 7
llamarFuncion        : 8 35
map                  : 15
mapEntries           : 63 65
mapEntry             : 64 65
mapLiteral           : 61 62
method_definition    : 18
operadorLogico       : 39 45 46
operator             : 105
package              : 12
param                : 77 78
parameter            : 117 118
parameters           : 116 117 121
params               : 75 78
params_opt           : 69 70 73
print_statement      : 9
program              : 0
return_statement     : 
return_type          : 70 116 124
return_values        : 70 72
shortAssignment      : 88 94
slice_declaration    : 
slice_literal        : 126
statement            : 4 5
statement_list       : 1 2 5 59 60 95
statement_list_opt   : 70
struct_definition    : 10
struct_field         : 85 86
struct_fields        : 83 86
switch               : 14
type_name            : 79 125 127
value_key            : 66 66
var_declaration      : 20

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (33) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (34) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (35) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (31) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (37) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (82) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (83) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (88) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (92) for_statement -> . FOR condicion block
    (93) for_statement -> . FOR block
    (21) package -> . PACKAGE MAIN
    (22) package -> . PACKAGE IDENTIFIER
    (23) import -> . IMPORT STRING
    (24) import -> . IMPORT LPAREN import_list RPAREN
    (56) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (61) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (62) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (114) if_statement -> . IF condicion_compleja block
    (115) if_statement -> . IF condicion_compleja block ELSE block
    (69) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (70) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (73) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (87) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (116) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (32) var_declaration -> . VAR IDENTIFIER DATATYPE

    IDENTIFIER      shift and go to state 19
    VAR             shift and go to state 20
    TYPE            shift and go to state 21
    FOR             shift and go to state 22
    PACKAGE         shift and go to state 23
    IMPORT          shift and go to state 24
    SWITCH          shift and go to state 25
    IF              shift and go to state 26
    FUNC            shift and go to state 27

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (33) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (34) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (35) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (31) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (37) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (82) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (83) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (88) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (92) for_statement -> . FOR condicion block
    (93) for_statement -> . FOR block
    (21) package -> . PACKAGE MAIN
    (22) package -> . PACKAGE IDENTIFIER
    (23) import -> . IMPORT STRING
    (24) import -> . IMPORT LPAREN import_list RPAREN
    (56) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (61) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (62) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (114) if_statement -> . IF condicion_compleja block
    (115) if_statement -> . IF condicion_compleja block ELSE block
    (69) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (70) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (73) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (87) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (116) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (32) var_declaration -> . VAR IDENTIFIER DATATYPE

    $end            reduce using rule 1 (program -> statement_list .)
    IDENTIFIER      shift and go to state 19
    VAR             shift and go to state 20
    TYPE            shift and go to state 21
    FOR             shift and go to state 22
    PACKAGE         shift and go to state 23
    IMPORT          shift and go to state 24
    SWITCH          shift and go to state 25
    IF              shift and go to state 26
    FUNC            shift and go to state 27

    statement                      shift and go to state 28
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18

state 3

    (4) statement_list -> statement .

    IDENTIFIER      reduce using rule 4 (statement_list -> statement .)
    VAR             reduce using rule 4 (statement_list -> statement .)
    TYPE            reduce using rule 4 (statement_list -> statement .)
    FOR             reduce using rule 4 (statement_list -> statement .)
    PACKAGE         reduce using rule 4 (statement_list -> statement .)
    IMPORT          reduce using rule 4 (statement_list -> statement .)
    SWITCH          reduce using rule 4 (statement_list -> statement .)
    IF              reduce using rule 4 (statement_list -> statement .)
    FUNC            reduce using rule 4 (statement_list -> statement .)
    $end            reduce using rule 4 (statement_list -> statement .)
    RBRACE          reduce using rule 4 (statement_list -> statement .)
    CASE            reduce using rule 4 (statement_list -> statement .)
    DEFAULT         reduce using rule 4 (statement_list -> statement .)
    RETURN          reduce using rule 4 (statement_list -> statement .)


state 4

    (6) statement -> assignment .

    IDENTIFIER      reduce using rule 6 (statement -> assignment .)
    VAR             reduce using rule 6 (statement -> assignment .)
    TYPE            reduce using rule 6 (statement -> assignment .)
    FOR             reduce using rule 6 (statement -> assignment .)
    PACKAGE         reduce using rule 6 (statement -> assignment .)
    IMPORT          reduce using rule 6 (statement -> assignment .)
    SWITCH          reduce using rule 6 (statement -> assignment .)
    IF              reduce using rule 6 (statement -> assignment .)
    FUNC            reduce using rule 6 (statement -> assignment .)
    $end            reduce using rule 6 (statement -> assignment .)
    RBRACE          reduce using rule 6 (statement -> assignment .)
    CASE            reduce using rule 6 (statement -> assignment .)
    DEFAULT         reduce using rule 6 (statement -> assignment .)
    RETURN          reduce using rule 6 (statement -> assignment .)


state 5

    (7) statement -> input .

    IDENTIFIER      reduce using rule 7 (statement -> input .)
    VAR             reduce using rule 7 (statement -> input .)
    TYPE            reduce using rule 7 (statement -> input .)
    FOR             reduce using rule 7 (statement -> input .)
    PACKAGE         reduce using rule 7 (statement -> input .)
    IMPORT          reduce using rule 7 (statement -> input .)
    SWITCH          reduce using rule 7 (statement -> input .)
    IF              reduce using rule 7 (statement -> input .)
    FUNC            reduce using rule 7 (statement -> input .)
    $end            reduce using rule 7 (statement -> input .)
    RBRACE          reduce using rule 7 (statement -> input .)
    CASE            reduce using rule 7 (statement -> input .)
    DEFAULT         reduce using rule 7 (statement -> input .)
    RETURN          reduce using rule 7 (statement -> input .)


state 6

    (8) statement -> llamarFuncion .

    IDENTIFIER      reduce using rule 8 (statement -> llamarFuncion .)
    VAR             reduce using rule 8 (statement -> llamarFuncion .)
    TYPE            reduce using rule 8 (statement -> llamarFuncion .)
    FOR             reduce using rule 8 (statement -> llamarFuncion .)
    PACKAGE         reduce using rule 8 (statement -> llamarFuncion .)
    IMPORT          reduce using rule 8 (statement -> llamarFuncion .)
    SWITCH          reduce using rule 8 (statement -> llamarFuncion .)
    IF              reduce using rule 8 (statement -> llamarFuncion .)
    FUNC            reduce using rule 8 (statement -> llamarFuncion .)
    $end            reduce using rule 8 (statement -> llamarFuncion .)
    RBRACE          reduce using rule 8 (statement -> llamarFuncion .)
    CASE            reduce using rule 8 (statement -> llamarFuncion .)
    DEFAULT         reduce using rule 8 (statement -> llamarFuncion .)
    RETURN          reduce using rule 8 (statement -> llamarFuncion .)


state 7

    (9) statement -> print_statement .

    IDENTIFIER      reduce using rule 9 (statement -> print_statement .)
    VAR             reduce using rule 9 (statement -> print_statement .)
    TYPE            reduce using rule 9 (statement -> print_statement .)
    FOR             reduce using rule 9 (statement -> print_statement .)
    PACKAGE         reduce using rule 9 (statement -> print_statement .)
    IMPORT          reduce using rule 9 (statement -> print_statement .)
    SWITCH          reduce using rule 9 (statement -> print_statement .)
    IF              reduce using rule 9 (statement -> print_statement .)
    FUNC            reduce using rule 9 (statement -> print_statement .)
    $end            reduce using rule 9 (statement -> print_statement .)
    RBRACE          reduce using rule 9 (statement -> print_statement .)
    CASE            reduce using rule 9 (statement -> print_statement .)
    DEFAULT         reduce using rule 9 (statement -> print_statement .)
    RETURN          reduce using rule 9 (statement -> print_statement .)


state 8

    (10) statement -> struct_definition .

    IDENTIFIER      reduce using rule 10 (statement -> struct_definition .)
    VAR             reduce using rule 10 (statement -> struct_definition .)
    TYPE            reduce using rule 10 (statement -> struct_definition .)
    FOR             reduce using rule 10 (statement -> struct_definition .)
    PACKAGE         reduce using rule 10 (statement -> struct_definition .)
    IMPORT          reduce using rule 10 (statement -> struct_definition .)
    SWITCH          reduce using rule 10 (statement -> struct_definition .)
    IF              reduce using rule 10 (statement -> struct_definition .)
    FUNC            reduce using rule 10 (statement -> struct_definition .)
    $end            reduce using rule 10 (statement -> struct_definition .)
    RBRACE          reduce using rule 10 (statement -> struct_definition .)
    CASE            reduce using rule 10 (statement -> struct_definition .)
    DEFAULT         reduce using rule 10 (statement -> struct_definition .)
    RETURN          reduce using rule 10 (statement -> struct_definition .)


state 9

    (11) statement -> for_statement .

    IDENTIFIER      reduce using rule 11 (statement -> for_statement .)
    VAR             reduce using rule 11 (statement -> for_statement .)
    TYPE            reduce using rule 11 (statement -> for_statement .)
    FOR             reduce using rule 11 (statement -> for_statement .)
    PACKAGE         reduce using rule 11 (statement -> for_statement .)
    IMPORT          reduce using rule 11 (statement -> for_statement .)
    SWITCH          reduce using rule 11 (statement -> for_statement .)
    IF              reduce using rule 11 (statement -> for_statement .)
    FUNC            reduce using rule 11 (statement -> for_statement .)
    $end            reduce using rule 11 (statement -> for_statement .)
    RBRACE          reduce using rule 11 (statement -> for_statement .)
    CASE            reduce using rule 11 (statement -> for_statement .)
    DEFAULT         reduce using rule 11 (statement -> for_statement .)
    RETURN          reduce using rule 11 (statement -> for_statement .)


state 10

    (12) statement -> package .

    IDENTIFIER      reduce using rule 12 (statement -> package .)
    VAR             reduce using rule 12 (statement -> package .)
    TYPE            reduce using rule 12 (statement -> package .)
    FOR             reduce using rule 12 (statement -> package .)
    PACKAGE         reduce using rule 12 (statement -> package .)
    IMPORT          reduce using rule 12 (statement -> package .)
    SWITCH          reduce using rule 12 (statement -> package .)
    IF              reduce using rule 12 (statement -> package .)
    FUNC            reduce using rule 12 (statement -> package .)
    $end            reduce using rule 12 (statement -> package .)
    RBRACE          reduce using rule 12 (statement -> package .)
    CASE            reduce using rule 12 (statement -> package .)
    DEFAULT         reduce using rule 12 (statement -> package .)
    RETURN          reduce using rule 12 (statement -> package .)


state 11

    (13) statement -> import .

    IDENTIFIER      reduce using rule 13 (statement -> import .)
    VAR             reduce using rule 13 (statement -> import .)
    TYPE            reduce using rule 13 (statement -> import .)
    FOR             reduce using rule 13 (statement -> import .)
    PACKAGE         reduce using rule 13 (statement -> import .)
    IMPORT          reduce using rule 13 (statement -> import .)
    SWITCH          reduce using rule 13 (statement -> import .)
    IF              reduce using rule 13 (statement -> import .)
    FUNC            reduce using rule 13 (statement -> import .)
    $end            reduce using rule 13 (statement -> import .)
    RBRACE          reduce using rule 13 (statement -> import .)
    CASE            reduce using rule 13 (statement -> import .)
    DEFAULT         reduce using rule 13 (statement -> import .)
    RETURN          reduce using rule 13 (statement -> import .)


state 12

    (14) statement -> switch .

    IDENTIFIER      reduce using rule 14 (statement -> switch .)
    VAR             reduce using rule 14 (statement -> switch .)
    TYPE            reduce using rule 14 (statement -> switch .)
    FOR             reduce using rule 14 (statement -> switch .)
    PACKAGE         reduce using rule 14 (statement -> switch .)
    IMPORT          reduce using rule 14 (statement -> switch .)
    SWITCH          reduce using rule 14 (statement -> switch .)
    IF              reduce using rule 14 (statement -> switch .)
    FUNC            reduce using rule 14 (statement -> switch .)
    $end            reduce using rule 14 (statement -> switch .)
    RBRACE          reduce using rule 14 (statement -> switch .)
    CASE            reduce using rule 14 (statement -> switch .)
    DEFAULT         reduce using rule 14 (statement -> switch .)
    RETURN          reduce using rule 14 (statement -> switch .)


state 13

    (15) statement -> map .

    IDENTIFIER      reduce using rule 15 (statement -> map .)
    VAR             reduce using rule 15 (statement -> map .)
    TYPE            reduce using rule 15 (statement -> map .)
    FOR             reduce using rule 15 (statement -> map .)
    PACKAGE         reduce using rule 15 (statement -> map .)
    IMPORT          reduce using rule 15 (statement -> map .)
    SWITCH          reduce using rule 15 (statement -> map .)
    IF              reduce using rule 15 (statement -> map .)
    FUNC            reduce using rule 15 (statement -> map .)
    $end            reduce using rule 15 (statement -> map .)
    RBRACE          reduce using rule 15 (statement -> map .)
    CASE            reduce using rule 15 (statement -> map .)
    DEFAULT         reduce using rule 15 (statement -> map .)
    RETURN          reduce using rule 15 (statement -> map .)


state 14

    (16) statement -> if_statement .

    IDENTIFIER      reduce using rule 16 (statement -> if_statement .)
    VAR             reduce using rule 16 (statement -> if_statement .)
    TYPE            reduce using rule 16 (statement -> if_statement .)
    FOR             reduce using rule 16 (statement -> if_statement .)
    PACKAGE         reduce using rule 16 (statement -> if_statement .)
    IMPORT          reduce using rule 16 (statement -> if_statement .)
    SWITCH          reduce using rule 16 (statement -> if_statement .)
    IF              reduce using rule 16 (statement -> if_statement .)
    FUNC            reduce using rule 16 (statement -> if_statement .)
    $end            reduce using rule 16 (statement -> if_statement .)
    RBRACE          reduce using rule 16 (statement -> if_statement .)
    CASE            reduce using rule 16 (statement -> if_statement .)
    DEFAULT         reduce using rule 16 (statement -> if_statement .)
    RETURN          reduce using rule 16 (statement -> if_statement .)


state 15

    (17) statement -> function .

    IDENTIFIER      reduce using rule 17 (statement -> function .)
    VAR             reduce using rule 17 (statement -> function .)
    TYPE            reduce using rule 17 (statement -> function .)
    FOR             reduce using rule 17 (statement -> function .)
    PACKAGE         reduce using rule 17 (statement -> function .)
    IMPORT          reduce using rule 17 (statement -> function .)
    SWITCH          reduce using rule 17 (statement -> function .)
    IF              reduce using rule 17 (statement -> function .)
    FUNC            reduce using rule 17 (statement -> function .)
    $end            reduce using rule 17 (statement -> function .)
    RBRACE          reduce using rule 17 (statement -> function .)
    CASE            reduce using rule 17 (statement -> function .)
    DEFAULT         reduce using rule 17 (statement -> function .)
    RETURN          reduce using rule 17 (statement -> function .)


state 16

    (18) statement -> method_definition .

    IDENTIFIER      reduce using rule 18 (statement -> method_definition .)
    VAR             reduce using rule 18 (statement -> method_definition .)
    TYPE            reduce using rule 18 (statement -> method_definition .)
    FOR             reduce using rule 18 (statement -> method_definition .)
    PACKAGE         reduce using rule 18 (statement -> method_definition .)
    IMPORT          reduce using rule 18 (statement -> method_definition .)
    SWITCH          reduce using rule 18 (statement -> method_definition .)
    IF              reduce using rule 18 (statement -> method_definition .)
    FUNC            reduce using rule 18 (statement -> method_definition .)
    $end            reduce using rule 18 (statement -> method_definition .)
    RBRACE          reduce using rule 18 (statement -> method_definition .)
    CASE            reduce using rule 18 (statement -> method_definition .)
    DEFAULT         reduce using rule 18 (statement -> method_definition .)
    RETURN          reduce using rule 18 (statement -> method_definition .)


state 17

    (19) statement -> function_literal .

    IDENTIFIER      reduce using rule 19 (statement -> function_literal .)
    VAR             reduce using rule 19 (statement -> function_literal .)
    TYPE            reduce using rule 19 (statement -> function_literal .)
    FOR             reduce using rule 19 (statement -> function_literal .)
    PACKAGE         reduce using rule 19 (statement -> function_literal .)
    IMPORT          reduce using rule 19 (statement -> function_literal .)
    SWITCH          reduce using rule 19 (statement -> function_literal .)
    IF              reduce using rule 19 (statement -> function_literal .)
    FUNC            reduce using rule 19 (statement -> function_literal .)
    $end            reduce using rule 19 (statement -> function_literal .)
    RBRACE          reduce using rule 19 (statement -> function_literal .)
    CASE            reduce using rule 19 (statement -> function_literal .)
    DEFAULT         reduce using rule 19 (statement -> function_literal .)
    RETURN          reduce using rule 19 (statement -> function_literal .)


state 18

    (20) statement -> var_declaration .

    IDENTIFIER      reduce using rule 20 (statement -> var_declaration .)
    VAR             reduce using rule 20 (statement -> var_declaration .)
    TYPE            reduce using rule 20 (statement -> var_declaration .)
    FOR             reduce using rule 20 (statement -> var_declaration .)
    PACKAGE         reduce using rule 20 (statement -> var_declaration .)
    IMPORT          reduce using rule 20 (statement -> var_declaration .)
    SWITCH          reduce using rule 20 (statement -> var_declaration .)
    IF              reduce using rule 20 (statement -> var_declaration .)
    FUNC            reduce using rule 20 (statement -> var_declaration .)
    $end            reduce using rule 20 (statement -> var_declaration .)
    RBRACE          reduce using rule 20 (statement -> var_declaration .)
    CASE            reduce using rule 20 (statement -> var_declaration .)
    DEFAULT         reduce using rule 20 (statement -> var_declaration .)
    RETURN          reduce using rule 20 (statement -> var_declaration .)


state 19

    (33) assignment -> IDENTIFIER . DECLARE_ASSIGN expression
    (36) assignment -> IDENTIFIER . ASSIGN expression
    (31) input -> IDENTIFIER . DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (37) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN
    (82) print_statement -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (61) map -> IDENTIFIER . DECLARE_ASSIGN mapLiteral

    DECLARE_ASSIGN  shift and go to state 29
    ASSIGN          shift and go to state 30
    DOT             shift and go to state 31
    LPAREN          shift and go to state 32


state 20

    (34) assignment -> VAR . IDENTIFIER DATATYPE ASSIGN expression
    (35) assignment -> VAR . IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (62) map -> VAR . IDENTIFIER ASSIGN mapLiteral
    (32) var_declaration -> VAR . IDENTIFIER DATATYPE

    IDENTIFIER      shift and go to state 33


state 21

    (83) struct_definition -> TYPE . IDENTIFIER STRUCT LBRACE struct_fields RBRACE

    IDENTIFIER      shift and go to state 34


state 22

    (88) for_statement -> FOR . shortAssignment SEMICOLON condicion SEMICOLON expression block
    (92) for_statement -> FOR . condicion block
    (93) for_statement -> FOR . block
    (91) shortAssignment -> . identifier_list DECLARE_ASSIGN expression
    (44) condicion -> . expression comparador expression
    (95) block -> . LBRACE statement_list RBRACE
    (96) block -> . LBRACE RBRACE
    (89) identifier_list -> . IDENTIFIER
    (90) identifier_list -> . IDENTIFIER COMMA identifier_list
    (38) expression -> . expression comparador expression
    (39) expression -> . expression operadorLogico expression
    (97) expression -> . NUMBER
    (98) expression -> . IDENTIFIER
    (99) expression -> . RUNE
    (100) expression -> . STRING
    (101) expression -> . RAW_STRING
    (102) expression -> . TRUE
    (103) expression -> . FALSE
    (104) expression -> . NIL
    (105) expression -> . expression operator expression
    (106) expression -> . expression DOT IDENTIFIER
    (112) expression -> . MINUS expression
    (113) expression -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 40
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 42
    RUNE            shift and go to state 43
    STRING          shift and go to state 44
    RAW_STRING      shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NIL             shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50

    shortAssignment                shift and go to state 35
    condicion                      shift and go to state 36
    expression                     shift and go to state 37
    block                          shift and go to state 38
    identifier_list                shift and go to state 39

state 23

    (21) package -> PACKAGE . MAIN
    (22) package -> PACKAGE . IDENTIFIER

    MAIN            shift and go to state 51
    IDENTIFIER      shift and go to state 52


state 24

    (23) import -> IMPORT . STRING
    (24) import -> IMPORT . LPAREN import_list RPAREN

    STRING          shift and go to state 53
    LPAREN          shift and go to state 54


state 25

    (56) switch -> SWITCH . expression LBRACE caseBlocks RBRACE
    (38) expression -> . expression comparador expression
    (39) expression -> . expression operadorLogico expression
    (97) expression -> . NUMBER
    (98) expression -> . IDENTIFIER
    (99) expression -> . RUNE
    (100) expression -> . STRING
    (101) expression -> . RAW_STRING
    (102) expression -> . TRUE
    (103) expression -> . FALSE
    (104) expression -> . NIL
    (105) expression -> . expression operator expression
    (106) expression -> . expression DOT IDENTIFIER
    (112) expression -> . MINUS expression
    (113) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 42
    IDENTIFIER      shift and go to state 56
    RUNE            shift and go to state 43
    STRING          shift and go to state 44
    RAW_STRING      shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NIL             shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50

    expression                     shift and go to state 55

state 26

    (114) if_statement -> IF . condicion_compleja block
    (115) if_statement -> IF . condicion_compleja block ELSE block
    (45) condicion_compleja -> . condicion operadorLogico condicion
    (46) condicion_compleja -> . condicion operadorLogico condicion_compleja
    (44) condicion -> . expression comparador expression
    (38) expression -> . expression comparador expression
    (39) expression -> . expression operadorLogico expression
    (97) expression -> . NUMBER
    (98) expression -> . IDENTIFIER
    (99) expression -> . RUNE
    (100) expression -> . STRING
    (101) expression -> . RAW_STRING
    (102) expression -> . TRUE
    (103) expression -> . FALSE
    (104) expression -> . NIL
    (105) expression -> . expression operator expression
    (106) expression -> . expression DOT IDENTIFIER
    (112) expression -> . MINUS expression
    (113) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 42
    IDENTIFIER      shift and go to state 56
    RUNE            shift and go to state 43
    STRING          shift and go to state 44
    RAW_STRING      shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NIL             shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50

    condicion_compleja             shift and go to state 57
    condicion                      shift and go to state 58
    expression                     shift and go to state 37

state 27

    (69) function -> FUNC . IDENTIFIER LPAREN params_opt RPAREN block
    (70) function -> FUNC . IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (73) function -> FUNC . MAIN LPAREN params_opt RPAREN block
    (87) method_definition -> FUNC . LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (116) function_literal -> FUNC . LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 59
    MAIN            shift and go to state 61
    LPAREN          shift and go to state 60


state 28

    (5) statement_list -> statement_list statement .

    IDENTIFIER      reduce using rule 5 (statement_list -> statement_list statement .)
    VAR             reduce using rule 5 (statement_list -> statement_list statement .)
    TYPE            reduce using rule 5 (statement_list -> statement_list statement .)
    FOR             reduce using rule 5 (statement_list -> statement_list statement .)
    PACKAGE         reduce using rule 5 (statement_list -> statement_list statement .)
    IMPORT          reduce using rule 5 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 5 (statement_list -> statement_list statement .)
    IF              reduce using rule 5 (statement_list -> statement_list statement .)
    FUNC            reduce using rule 5 (statement_list -> statement_list statement .)
    $end            reduce using rule 5 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 5 (statement_list -> statement_list statement .)
    CASE            reduce using rule 5 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 5 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 5 (statement_list -> statement_list statement .)


state 29

    (33) assignment -> IDENTIFIER DECLARE_ASSIGN . expression
    (61) map -> IDENTIFIER DECLARE_ASSIGN . mapLiteral
    (38) expression -> . expression comparador expression
    (39) expression -> . expression operadorLogico expression
    (97) expression -> . NUMBER
    (98) expression -> . IDENTIFIER
    (99) expression -> . RUNE
    (100) expression -> . STRING
    (101) expression -> . RAW_STRING
    (102) expression -> . TRUE
    (103) expression -> . FALSE
    (104) expression -> . NIL
    (105) expression -> . expression operator expression
    (106) expression -> . expression DOT IDENTIFIER
    (112) expression -> . MINUS expression
    (113) expression -> . LPAREN expression RPAREN
    (63) mapLiteral -> . MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE

    NUMBER          shift and go to state 42
    IDENTIFIER      shift and go to state 56
    RUNE            shift and go to state 43
    STRING          shift and go to state 44
    RAW_STRING      shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NIL             shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    MAP             shift and go to state 64

    expression                     shift and go to state 62
    mapLiteral                     shift and go to state 63

state 30

    (36) assignment -> IDENTIFIER ASSIGN . expression
    (38) expression -> . expression comparador expression
    (39) expression -> . expression operadorLogico expression
    (97) expression -> . NUMBER
    (98) expression -> . IDENTIFIER
    (99) expression -> . RUNE
    (100) expression -> . STRING
    (101) expression -> . RAW_STRING
    (102) expression -> . TRUE
    (103) expression -> . FALSE
    (104) expression -> . NIL
    (105) expression -> . expression operator expression
    (106) expression -> . expression DOT IDENTIFIER
    (112) expression -> . MINUS expression
    (113) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 42
    IDENTIFIER      shift and go to state 56
    RUNE            shift and go to state 43
    STRING          shift and go to state 44
    RAW_STRING      shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NIL             shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50

    expression                     shift and go to state 65

state 31

    (31) input -> IDENTIFIER DOT . IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (82) print_statement -> IDENTIFIER DOT . IDENTIFIER LPAREN argument_list_opt RPAREN

    IDENTIFIER      shift and go to state 66


state 32

    (37) llamarFuncion -> IDENTIFIER LPAREN . argument_list_opt RPAREN
    (42) argument_list_opt -> . argument_list
    (43) argument_list_opt -> .
    (40) argument_list -> . expression
    (41) argument_list -> . argument_list COMMA expression
    (38) expression -> . expression comparador expression
    (39) expression -> . expression operadorLogico expression
    (97) expression -> . NUMBER
    (98) expression -> . IDENTIFIER
    (99) expression -> . RUNE
    (100) expression -> . STRING
    (101) expression -> . RAW_STRING
    (102) expression -> . TRUE
    (103) expression -> . FALSE
    (104) expression -> . NIL
    (105) expression -> . expression operator expression
    (106) expression -> . expression DOT IDENTIFIER
    (112) expression -> . MINUS expression
    (113) expression -> . LPAREN expression RPAREN

    RPAREN          reduce using rule 43 (argument_list_opt -> .)
    NUMBER          shift and go to state 42
    IDENTIFIER      shift and go to state 56
    RUNE            shift and go to state 43
    STRING          shift and go to state 44
    RAW_STRING      shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NIL             shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50

    argument_list_opt              shift and go to state 67
    argument_list                  shift and go to state 68
    expression                     shift and go to state 69

state 33

    (34) assignment -> VAR IDENTIFIER . DATATYPE ASSIGN expression
    (35) assignment -> VAR IDENTIFIER . DATATYPE ASSIGN llamarFuncion
    (62) map -> VAR IDENTIFIER . ASSIGN mapLiteral
    (32) var_declaration -> VAR IDENTIFIER . DATATYPE

    DATATYPE        shift and go to state 70
    ASSIGN          shift and go to state 71


state 34

    (83) struct_definition -> TYPE IDENTIFIER . STRUCT LBRACE struct_fields RBRACE

    STRUCT          shift and go to state 72


state 35

    (88) for_statement -> FOR shortAssignment . SEMICOLON condicion SEMICOLON expression block

    SEMICOLON       shift and go to state 73


state 36

    (92) for_statement -> FOR condicion . block
    (95) block -> . LBRACE statement_list RBRACE
    (96) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 40

    block                          shift and go to state 74

state 37

    (44) condicion -> expression . comparador expression
    (38) expression -> expression . comparador expression
    (39) expression -> expression . operadorLogico expression
    (105) expression -> expression . operator expression
    (106) expression -> expression . DOT IDENTIFIER
    (49) comparador -> . EQ
    (50) comparador -> . NEQ
    (51) comparador -> . GT
    (52) comparador -> . LT
    (53) comparador -> . GE
    (54) comparador -> . LE
    (47) operadorLogico -> . AND
    (48) operadorLogico -> . OR
    (107) operator -> . PLUS
    (108) operator -> . MINUS
    (109) operator -> . TIMES
    (110) operator -> . DIVIDE
    (111) operator -> . MOD

    DOT             shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    GT              shift and go to state 81
    LT              shift and go to state 82
    GE              shift and go to state 83
    LE              shift and go to state 84
    AND             shift and go to state 85
    OR              shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    MOD             shift and go to state 91

    comparador                     shift and go to state 75
    operadorLogico                 shift and go to state 76
    operator                       shift and go to state 77

state 38

    (93) for_statement -> FOR block .

    IDENTIFIER      reduce using rule 93 (for_statement -> FOR block .)
    VAR             reduce using rule 93 (for_statement -> FOR block .)
    TYPE            reduce using rule 93 (for_statement -> FOR block .)
    FOR             reduce using rule 93 (for_statement -> FOR block .)
    PACKAGE         reduce using rule 93 (for_statement -> FOR block .)
    IMPORT          reduce using rule 93 (for_statement -> FOR block .)
    SWITCH          reduce using rule 93 (for_statement -> FOR block .)
    IF              reduce using rule 93 (for_statement -> FOR block .)
    FUNC            reduce using rule 93 (for_statement -> FOR block .)
    $end            reduce using rule 93 (for_statement -> FOR block .)
    RBRACE          reduce using rule 93 (for_statement -> FOR block .)
    CASE            reduce using rule 93 (for_statement -> FOR block .)
    DEFAULT         reduce using rule 93 (for_statement -> FOR block .)
    RETURN          reduce using rule 93 (for_statement -> FOR block .)


state 39

    (91) shortAssignment -> identifier_list . DECLARE_ASSIGN expression

    DECLARE_ASSIGN  shift and go to state 92


state 40

    (95) block -> LBRACE . statement_list RBRACE
    (96) block -> LBRACE . RBRACE
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (33) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (34) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (35) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (31) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (37) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (82) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (83) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (88) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (92) for_statement -> . FOR condicion block
    (93) for_statement -> . FOR block
    (21) package -> . PACKAGE MAIN
    (22) package -> . PACKAGE IDENTIFIER
    (23) import -> . IMPORT STRING
    (24) import -> . IMPORT LPAREN import_list RPAREN
    (56) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (61) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (62) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (114) if_statement -> . IF condicion_compleja block
    (115) if_statement -> . IF condicion_compleja block ELSE block
    (69) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (70) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (73) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (87) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (116) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (32) var_declaration -> . VAR IDENTIFIER DATATYPE

    RBRACE          shift and go to state 94
    IDENTIFIER      shift and go to state 19
    VAR             shift and go to state 20
    TYPE            shift and go to state 21
    FOR             shift and go to state 22
    PACKAGE         shift and go to state 23
    IMPORT          shift and go to state 24
    SWITCH          shift and go to state 25
    IF              shift and go to state 26
    FUNC            shift and go to state 27

    statement_list                 shift and go to state 93
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18

state 41

    (89) identifier_list -> IDENTIFIER .
    (90) identifier_list -> IDENTIFIER . COMMA identifier_list
    (98) expression -> IDENTIFIER .

    DECLARE_ASSIGN  reduce using rule 89 (identifier_list -> IDENTIFIER .)
    COMMA           shift and go to state 95
    DOT             reduce using rule 98 (expression -> IDENTIFIER .)
    EQ              reduce using rule 98 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 98 (expression -> IDENTIFIER .)
    GT              reduce using rule 98 (expression -> IDENTIFIER .)
    LT              reduce using rule 98 (expression -> IDENTIFIER .)
    GE              reduce using rule 98 (expression -> IDENTIFIER .)
    LE              reduce using rule 98 (expression -> IDENTIFIER .)
    AND             reduce using rule 98 (expression -> IDENTIFIER .)
    OR              reduce using rule 98 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 98 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 98 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 98 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 98 (expression -> IDENTIFIER .)
    MOD             reduce using rule 98 (expression -> IDENTIFIER .)


state 42

    (97) expression -> NUMBER .

    DOT             reduce using rule 97 (expression -> NUMBER .)
    EQ              reduce using rule 97 (expression -> NUMBER .)
    NEQ             reduce using rule 97 (expression -> NUMBER .)
    GT              reduce using rule 97 (expression -> NUMBER .)
    LT              reduce using rule 97 (expression -> NUMBER .)
    GE              reduce using rule 97 (expression -> NUMBER .)
    LE              reduce using rule 97 (expression -> NUMBER .)
    AND             reduce using rule 97 (expression -> NUMBER .)
    OR              reduce using rule 97 (expression -> NUMBER .)
    PLUS            reduce using rule 97 (expression -> NUMBER .)
    MINUS           reduce using rule 97 (expression -> NUMBER .)
    TIMES           reduce using rule 97 (expression -> NUMBER .)
    DIVIDE          reduce using rule 97 (expression -> NUMBER .)
    MOD             reduce using rule 97 (expression -> NUMBER .)
    LBRACE          reduce using rule 97 (expression -> NUMBER .)
    IDENTIFIER      reduce using rule 97 (expression -> NUMBER .)
    VAR             reduce using rule 97 (expression -> NUMBER .)
    TYPE            reduce using rule 97 (expression -> NUMBER .)
    FOR             reduce using rule 97 (expression -> NUMBER .)
    PACKAGE         reduce using rule 97 (expression -> NUMBER .)
    IMPORT          reduce using rule 97 (expression -> NUMBER .)
    SWITCH          reduce using rule 97 (expression -> NUMBER .)
    IF              reduce using rule 97 (expression -> NUMBER .)
    FUNC            reduce using rule 97 (expression -> NUMBER .)
    $end            reduce using rule 97 (expression -> NUMBER .)
    RBRACE          reduce using rule 97 (expression -> NUMBER .)
    CASE            reduce using rule 97 (expression -> NUMBER .)
    DEFAULT         reduce using rule 97 (expression -> NUMBER .)
    RETURN          reduce using rule 97 (expression -> NUMBER .)
    COMMA           reduce using rule 97 (expression -> NUMBER .)
    RPAREN          reduce using rule 97 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 97 (expression -> NUMBER .)
    COLON           reduce using rule 97 (expression -> NUMBER .)


state 43

    (99) expression -> RUNE .

    DOT             reduce using rule 99 (expression -> RUNE .)
    EQ              reduce using rule 99 (expression -> RUNE .)
    NEQ             reduce using rule 99 (expression -> RUNE .)
    GT              reduce using rule 99 (expression -> RUNE .)
    LT              reduce using rule 99 (expression -> RUNE .)
    GE              reduce using rule 99 (expression -> RUNE .)
    LE              reduce using rule 99 (expression -> RUNE .)
    AND             reduce using rule 99 (expression -> RUNE .)
    OR              reduce using rule 99 (expression -> RUNE .)
    PLUS            reduce using rule 99 (expression -> RUNE .)
    MINUS           reduce using rule 99 (expression -> RUNE .)
    TIMES           reduce using rule 99 (expression -> RUNE .)
    DIVIDE          reduce using rule 99 (expression -> RUNE .)
    MOD             reduce using rule 99 (expression -> RUNE .)
    LBRACE          reduce using rule 99 (expression -> RUNE .)
    IDENTIFIER      reduce using rule 99 (expression -> RUNE .)
    VAR             reduce using rule 99 (expression -> RUNE .)
    TYPE            reduce using rule 99 (expression -> RUNE .)
    FOR             reduce using rule 99 (expression -> RUNE .)
    PACKAGE         reduce using rule 99 (expression -> RUNE .)
    IMPORT          reduce using rule 99 (expression -> RUNE .)
    SWITCH          reduce using rule 99 (expression -> RUNE .)
    IF              reduce using rule 99 (expression -> RUNE .)
    FUNC            reduce using rule 99 (expression -> RUNE .)
    $end            reduce using rule 99 (expression -> RUNE .)
    RBRACE          reduce using rule 99 (expression -> RUNE .)
    CASE            reduce using rule 99 (expression -> RUNE .)
    DEFAULT         reduce using rule 99 (expression -> RUNE .)
    RETURN          reduce using rule 99 (expression -> RUNE .)
    COMMA           reduce using rule 99 (expression -> RUNE .)
    RPAREN          reduce using rule 99 (expression -> RUNE .)
    SEMICOLON       reduce using rule 99 (expression -> RUNE .)
    COLON           reduce using rule 99 (expression -> RUNE .)


state 44

    (100) expression -> STRING .

    DOT             reduce using rule 100 (expression -> STRING .)
    EQ              reduce using rule 100 (expression -> STRING .)
    NEQ             reduce using rule 100 (expression -> STRING .)
    GT              reduce using rule 100 (expression -> STRING .)
    LT              reduce using rule 100 (expression -> STRING .)
    GE              reduce using rule 100 (expression -> STRING .)
    LE              reduce using rule 100 (expression -> STRING .)
    AND             reduce using rule 100 (expression -> STRING .)
    OR              reduce using rule 100 (expression -> STRING .)
    PLUS            reduce using rule 100 (expression -> STRING .)
    MINUS           reduce using rule 100 (expression -> STRING .)
    TIMES           reduce using rule 100 (expression -> STRING .)
    DIVIDE          reduce using rule 100 (expression -> STRING .)
    MOD             reduce using rule 100 (expression -> STRING .)
    LBRACE          reduce using rule 100 (expression -> STRING .)
    IDENTIFIER      reduce using rule 100 (expression -> STRING .)
    VAR             reduce using rule 100 (expression -> STRING .)
    TYPE            reduce using rule 100 (expression -> STRING .)
    FOR             reduce using rule 100 (expression -> STRING .)
    PACKAGE         reduce using rule 100 (expression -> STRING .)
    IMPORT          reduce using rule 100 (expression -> STRING .)
    SWITCH          reduce using rule 100 (expression -> STRING .)
    IF              reduce using rule 100 (expression -> STRING .)
    FUNC            reduce using rule 100 (expression -> STRING .)
    $end            reduce using rule 100 (expression -> STRING .)
    RBRACE          reduce using rule 100 (expression -> STRING .)
    CASE            reduce using rule 100 (expression -> STRING .)
    DEFAULT         reduce using rule 100 (expression -> STRING .)
    RETURN          reduce using rule 100 (expression -> STRING .)
    COMMA           reduce using rule 100 (expression -> STRING .)
    RPAREN          reduce using rule 100 (expression -> STRING .)
    SEMICOLON       reduce using rule 100 (expression -> STRING .)
    COLON           reduce using rule 100 (expression -> STRING .)


state 45

    (101) expression -> RAW_STRING .

    DOT             reduce using rule 101 (expression -> RAW_STRING .)
    EQ              reduce using rule 101 (expression -> RAW_STRING .)
    NEQ             reduce using rule 101 (expression -> RAW_STRING .)
    GT              reduce using rule 101 (expression -> RAW_STRING .)
    LT              reduce using rule 101 (expression -> RAW_STRING .)
    GE              reduce using rule 101 (expression -> RAW_STRING .)
    LE              reduce using rule 101 (expression -> RAW_STRING .)
    AND             reduce using rule 101 (expression -> RAW_STRING .)
    OR              reduce using rule 101 (expression -> RAW_STRING .)
    PLUS            reduce using rule 101 (expression -> RAW_STRING .)
    MINUS           reduce using rule 101 (expression -> RAW_STRING .)
    TIMES           reduce using rule 101 (expression -> RAW_STRING .)
    DIVIDE          reduce using rule 101 (expression -> RAW_STRING .)
    MOD             reduce using rule 101 (expression -> RAW_STRING .)
    LBRACE          reduce using rule 101 (expression -> RAW_STRING .)
    IDENTIFIER      reduce using rule 101 (expression -> RAW_STRING .)
    VAR             reduce using rule 101 (expression -> RAW_STRING .)
    TYPE            reduce using rule 101 (expression -> RAW_STRING .)
    FOR             reduce using rule 101 (expression -> RAW_STRING .)
    PACKAGE         reduce using rule 101 (expression -> RAW_STRING .)
    IMPORT          reduce using rule 101 (expression -> RAW_STRING .)
    SWITCH          reduce using rule 101 (expression -> RAW_STRING .)
    IF              reduce using rule 101 (expression -> RAW_STRING .)
    FUNC            reduce using rule 101 (expression -> RAW_STRING .)
    $end            reduce using rule 101 (expression -> RAW_STRING .)
    RBRACE          reduce using rule 101 (expression -> RAW_STRING .)
    CASE            reduce using rule 101 (expression -> RAW_STRING .)
    DEFAULT         reduce using rule 101 (expression -> RAW_STRING .)
    RETURN          reduce using rule 101 (expression -> RAW_STRING .)
    COMMA           reduce using rule 101 (expression -> RAW_STRING .)
    RPAREN          reduce using rule 101 (expression -> RAW_STRING .)
    SEMICOLON       reduce using rule 101 (expression -> RAW_STRING .)
    COLON           reduce using rule 101 (expression -> RAW_STRING .)


state 46

    (102) expression -> TRUE .

    DOT             reduce using rule 102 (expression -> TRUE .)
    EQ              reduce using rule 102 (expression -> TRUE .)
    NEQ             reduce using rule 102 (expression -> TRUE .)
    GT              reduce using rule 102 (expression -> TRUE .)
    LT              reduce using rule 102 (expression -> TRUE .)
    GE              reduce using rule 102 (expression -> TRUE .)
    LE              reduce using rule 102 (expression -> TRUE .)
    AND             reduce using rule 102 (expression -> TRUE .)
    OR              reduce using rule 102 (expression -> TRUE .)
    PLUS            reduce using rule 102 (expression -> TRUE .)
    MINUS           reduce using rule 102 (expression -> TRUE .)
    TIMES           reduce using rule 102 (expression -> TRUE .)
    DIVIDE          reduce using rule 102 (expression -> TRUE .)
    MOD             reduce using rule 102 (expression -> TRUE .)
    LBRACE          reduce using rule 102 (expression -> TRUE .)
    IDENTIFIER      reduce using rule 102 (expression -> TRUE .)
    VAR             reduce using rule 102 (expression -> TRUE .)
    TYPE            reduce using rule 102 (expression -> TRUE .)
    FOR             reduce using rule 102 (expression -> TRUE .)
    PACKAGE         reduce using rule 102 (expression -> TRUE .)
    IMPORT          reduce using rule 102 (expression -> TRUE .)
    SWITCH          reduce using rule 102 (expression -> TRUE .)
    IF              reduce using rule 102 (expression -> TRUE .)
    FUNC            reduce using rule 102 (expression -> TRUE .)
    $end            reduce using rule 102 (expression -> TRUE .)
    RBRACE          reduce using rule 102 (expression -> TRUE .)
    CASE            reduce using rule 102 (expression -> TRUE .)
    DEFAULT         reduce using rule 102 (expression -> TRUE .)
    RETURN          reduce using rule 102 (expression -> TRUE .)
    COMMA           reduce using rule 102 (expression -> TRUE .)
    RPAREN          reduce using rule 102 (expression -> TRUE .)
    SEMICOLON       reduce using rule 102 (expression -> TRUE .)
    COLON           reduce using rule 102 (expression -> TRUE .)


state 47

    (103) expression -> FALSE .

    DOT             reduce using rule 103 (expression -> FALSE .)
    EQ              reduce using rule 103 (expression -> FALSE .)
    NEQ             reduce using rule 103 (expression -> FALSE .)
    GT              reduce using rule 103 (expression -> FALSE .)
    LT              reduce using rule 103 (expression -> FALSE .)
    GE              reduce using rule 103 (expression -> FALSE .)
    LE              reduce using rule 103 (expression -> FALSE .)
    AND             reduce using rule 103 (expression -> FALSE .)
    OR              reduce using rule 103 (expression -> FALSE .)
    PLUS            reduce using rule 103 (expression -> FALSE .)
    MINUS           reduce using rule 103 (expression -> FALSE .)
    TIMES           reduce using rule 103 (expression -> FALSE .)
    DIVIDE          reduce using rule 103 (expression -> FALSE .)
    MOD             reduce using rule 103 (expression -> FALSE .)
    LBRACE          reduce using rule 103 (expression -> FALSE .)
    IDENTIFIER      reduce using rule 103 (expression -> FALSE .)
    VAR             reduce using rule 103 (expression -> FALSE .)
    TYPE            reduce using rule 103 (expression -> FALSE .)
    FOR             reduce using rule 103 (expression -> FALSE .)
    PACKAGE         reduce using rule 103 (expression -> FALSE .)
    IMPORT          reduce using rule 103 (expression -> FALSE .)
    SWITCH          reduce using rule 103 (expression -> FALSE .)
    IF              reduce using rule 103 (expression -> FALSE .)
    FUNC            reduce using rule 103 (expression -> FALSE .)
    $end            reduce using rule 103 (expression -> FALSE .)
    RBRACE          reduce using rule 103 (expression -> FALSE .)
    CASE            reduce using rule 103 (expression -> FALSE .)
    DEFAULT         reduce using rule 103 (expression -> FALSE .)
    RETURN          reduce using rule 103 (expression -> FALSE .)
    COMMA           reduce using rule 103 (expression -> FALSE .)
    RPAREN          reduce using rule 103 (expression -> FALSE .)
    SEMICOLON       reduce using rule 103 (expression -> FALSE .)
    COLON           reduce using rule 103 (expression -> FALSE .)


state 48

    (104) expression -> NIL .

    DOT             reduce using rule 104 (expression -> NIL .)
    EQ              reduce using rule 104 (expression -> NIL .)
    NEQ             reduce using rule 104 (expression -> NIL .)
    GT              reduce using rule 104 (expression -> NIL .)
    LT              reduce using rule 104 (expression -> NIL .)
    GE              reduce using rule 104 (expression -> NIL .)
    LE              reduce using rule 104 (expression -> NIL .)
    AND             reduce using rule 104 (expression -> NIL .)
    OR              reduce using rule 104 (expression -> NIL .)
    PLUS            reduce using rule 104 (expression -> NIL .)
    MINUS           reduce using rule 104 (expression -> NIL .)
    TIMES           reduce using rule 104 (expression -> NIL .)
    DIVIDE          reduce using rule 104 (expression -> NIL .)
    MOD             reduce using rule 104 (expression -> NIL .)
    LBRACE          reduce using rule 104 (expression -> NIL .)
    IDENTIFIER      reduce using rule 104 (expression -> NIL .)
    VAR             reduce using rule 104 (expression -> NIL .)
    TYPE            reduce using rule 104 (expression -> NIL .)
    FOR             reduce using rule 104 (expression -> NIL .)
    PACKAGE         reduce using rule 104 (expression -> NIL .)
    IMPORT          reduce using rule 104 (expression -> NIL .)
    SWITCH          reduce using rule 104 (expression -> NIL .)
    IF              reduce using rule 104 (expression -> NIL .)
    FUNC            reduce using rule 104 (expression -> NIL .)
    $end            reduce using rule 104 (expression -> NIL .)
    RBRACE          reduce using rule 104 (expression -> NIL .)
    CASE            reduce using rule 104 (expression -> NIL .)
    DEFAULT         reduce using rule 104 (expression -> NIL .)
    RETURN          reduce using rule 104 (expression -> NIL .)
    COMMA           reduce using rule 104 (expression -> NIL .)
    RPAREN          reduce using rule 104 (expression -> NIL .)
    SEMICOLON       reduce using rule 104 (expression -> NIL .)
    COLON           reduce using rule 104 (expression -> NIL .)


state 49

    (112) expression -> MINUS . expression
    (38) expression -> . expression comparador expression
    (39) expression -> . expression operadorLogico expression
    (97) expression -> . NUMBER
    (98) expression -> . IDENTIFIER
    (99) expression -> . RUNE
    (100) expression -> . STRING
    (101) expression -> . RAW_STRING
    (102) expression -> . TRUE
    (103) expression -> . FALSE
    (104) expression -> . NIL
    (105) expression -> . expression operator expression
    (106) expression -> . expression DOT IDENTIFIER
    (112) expression -> . MINUS expression
    (113) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 42
    IDENTIFIER      shift and go to state 56
    RUNE            shift and go to state 43
    STRING          shift and go to state 44
    RAW_STRING      shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NIL             shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50

    expression                     shift and go to state 96

state 50

    (113) expression -> LPAREN . expression RPAREN
    (38) expression -> . expression comparador expression
    (39) expression -> . expression operadorLogico expression
    (97) expression -> . NUMBER
    (98) expression -> . IDENTIFIER
    (99) expression -> . RUNE
    (100) expression -> . STRING
    (101) expression -> . RAW_STRING
    (102) expression -> . TRUE
    (103) expression -> . FALSE
    (104) expression -> . NIL
    (105) expression -> . expression operator expression
    (106) expression -> . expression DOT IDENTIFIER
    (112) expression -> . MINUS expression
    (113) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 42
    IDENTIFIER      shift and go to state 56
    RUNE            shift and go to state 43
    STRING          shift and go to state 44
    RAW_STRING      shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NIL             shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50

    expression                     shift and go to state 97

state 51

    (21) package -> PACKAGE MAIN .

    IDENTIFIER      reduce using rule 21 (package -> PACKAGE MAIN .)
    VAR             reduce using rule 21 (package -> PACKAGE MAIN .)
    TYPE            reduce using rule 21 (package -> PACKAGE MAIN .)
    FOR             reduce using rule 21 (package -> PACKAGE MAIN .)
    PACKAGE         reduce using rule 21 (package -> PACKAGE MAIN .)
    IMPORT          reduce using rule 21 (package -> PACKAGE MAIN .)
    SWITCH          reduce using rule 21 (package -> PACKAGE MAIN .)
    IF              reduce using rule 21 (package -> PACKAGE MAIN .)
    FUNC            reduce using rule 21 (package -> PACKAGE MAIN .)
    $end            reduce using rule 21 (package -> PACKAGE MAIN .)
    RBRACE          reduce using rule 21 (package -> PACKAGE MAIN .)
    CASE            reduce using rule 21 (package -> PACKAGE MAIN .)
    DEFAULT         reduce using rule 21 (package -> PACKAGE MAIN .)
    RETURN          reduce using rule 21 (package -> PACKAGE MAIN .)


state 52

    (22) package -> PACKAGE IDENTIFIER .

    IDENTIFIER      reduce using rule 22 (package -> PACKAGE IDENTIFIER .)
    VAR             reduce using rule 22 (package -> PACKAGE IDENTIFIER .)
    TYPE            reduce using rule 22 (package -> PACKAGE IDENTIFIER .)
    FOR             reduce using rule 22 (package -> PACKAGE IDENTIFIER .)
    PACKAGE         reduce using rule 22 (package -> PACKAGE IDENTIFIER .)
    IMPORT          reduce using rule 22 (package -> PACKAGE IDENTIFIER .)
    SWITCH          reduce using rule 22 (package -> PACKAGE IDENTIFIER .)
    IF              reduce using rule 22 (package -> PACKAGE IDENTIFIER .)
    FUNC            reduce using rule 22 (package -> PACKAGE IDENTIFIER .)
    $end            reduce using rule 22 (package -> PACKAGE IDENTIFIER .)
    RBRACE          reduce using rule 22 (package -> PACKAGE IDENTIFIER .)
    CASE            reduce using rule 22 (package -> PACKAGE IDENTIFIER .)
    DEFAULT         reduce using rule 22 (package -> PACKAGE IDENTIFIER .)
    RETURN          reduce using rule 22 (package -> PACKAGE IDENTIFIER .)


state 53

    (23) import -> IMPORT STRING .

    IDENTIFIER      reduce using rule 23 (import -> IMPORT STRING .)
    VAR             reduce using rule 23 (import -> IMPORT STRING .)
    TYPE            reduce using rule 23 (import -> IMPORT STRING .)
    FOR             reduce using rule 23 (import -> IMPORT STRING .)
    PACKAGE         reduce using rule 23 (import -> IMPORT STRING .)
    IMPORT          reduce using rule 23 (import -> IMPORT STRING .)
    SWITCH          reduce using rule 23 (import -> IMPORT STRING .)
    IF              reduce using rule 23 (import -> IMPORT STRING .)
    FUNC            reduce using rule 23 (import -> IMPORT STRING .)
    $end            reduce using rule 23 (import -> IMPORT STRING .)
    RBRACE          reduce using rule 23 (import -> IMPORT STRING .)
    CASE            reduce using rule 23 (import -> IMPORT STRING .)
    DEFAULT         reduce using rule 23 (import -> IMPORT STRING .)
    RETURN          reduce using rule 23 (import -> IMPORT STRING .)


state 54

    (24) import -> IMPORT LPAREN . import_list RPAREN
    (25) import_list -> . STRING
    (26) import_list -> . import_list STRING

    STRING          shift and go to state 99

    import_list                    shift and go to state 98

state 55

    (56) switch -> SWITCH expression . LBRACE caseBlocks RBRACE
    (38) expression -> expression . comparador expression
    (39) expression -> expression . operadorLogico expression
    (105) expression -> expression . operator expression
    (106) expression -> expression . DOT IDENTIFIER
    (49) comparador -> . EQ
    (50) comparador -> . NEQ
    (51) comparador -> . GT
    (52) comparador -> . LT
    (53) comparador -> . GE
    (54) comparador -> . LE
    (47) operadorLogico -> . AND
    (48) operadorLogico -> . OR
    (107) operator -> . PLUS
    (108) operator -> . MINUS
    (109) operator -> . TIMES
    (110) operator -> . DIVIDE
    (111) operator -> . MOD

    LBRACE          shift and go to state 100
    DOT             shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    GT              shift and go to state 81
    LT              shift and go to state 82
    GE              shift and go to state 83
    LE              shift and go to state 84
    AND             shift and go to state 85
    OR              shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    MOD             shift and go to state 91

    comparador                     shift and go to state 101
    operadorLogico                 shift and go to state 76
    operator                       shift and go to state 77

state 56

    (98) expression -> IDENTIFIER .

    LBRACE          reduce using rule 98 (expression -> IDENTIFIER .)
    DOT             reduce using rule 98 (expression -> IDENTIFIER .)
    EQ              reduce using rule 98 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 98 (expression -> IDENTIFIER .)
    GT              reduce using rule 98 (expression -> IDENTIFIER .)
    LT              reduce using rule 98 (expression -> IDENTIFIER .)
    GE              reduce using rule 98 (expression -> IDENTIFIER .)
    LE              reduce using rule 98 (expression -> IDENTIFIER .)
    AND             reduce using rule 98 (expression -> IDENTIFIER .)
    OR              reduce using rule 98 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 98 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 98 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 98 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 98 (expression -> IDENTIFIER .)
    MOD             reduce using rule 98 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 98 (expression -> IDENTIFIER .)
    VAR             reduce using rule 98 (expression -> IDENTIFIER .)
    TYPE            reduce using rule 98 (expression -> IDENTIFIER .)
    FOR             reduce using rule 98 (expression -> IDENTIFIER .)
    PACKAGE         reduce using rule 98 (expression -> IDENTIFIER .)
    IMPORT          reduce using rule 98 (expression -> IDENTIFIER .)
    SWITCH          reduce using rule 98 (expression -> IDENTIFIER .)
    IF              reduce using rule 98 (expression -> IDENTIFIER .)
    FUNC            reduce using rule 98 (expression -> IDENTIFIER .)
    $end            reduce using rule 98 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 98 (expression -> IDENTIFIER .)
    CASE            reduce using rule 98 (expression -> IDENTIFIER .)
    DEFAULT         reduce using rule 98 (expression -> IDENTIFIER .)
    RETURN          reduce using rule 98 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 98 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 98 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 98 (expression -> IDENTIFIER .)
    COLON           reduce using rule 98 (expression -> IDENTIFIER .)


state 57

    (114) if_statement -> IF condicion_compleja . block
    (115) if_statement -> IF condicion_compleja . block ELSE block
    (95) block -> . LBRACE statement_list RBRACE
    (96) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 40

    block                          shift and go to state 102

state 58

    (45) condicion_compleja -> condicion . operadorLogico condicion
    (46) condicion_compleja -> condicion . operadorLogico condicion_compleja
    (47) operadorLogico -> . AND
    (48) operadorLogico -> . OR

    AND             shift and go to state 85
    OR              shift and go to state 86

    operadorLogico                 shift and go to state 103

state 59

    (69) function -> FUNC IDENTIFIER . LPAREN params_opt RPAREN block
    (70) function -> FUNC IDENTIFIER . LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE

    LPAREN          shift and go to state 104


state 60

    (87) method_definition -> FUNC LPAREN . IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (116) function_literal -> FUNC LPAREN . parameters RPAREN return_type block
    (117) parameters -> . parameters COMMA parameter
    (118) parameters -> . parameter
    (119) parameters -> . empty
    (120) parameter -> . IDENTIFIER DATATYPE
    (121) parameter -> . IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE
    (55) empty -> .

    IDENTIFIER      shift and go to state 105
    RPAREN          reduce using rule 55 (empty -> .)
    COMMA           reduce using rule 55 (empty -> .)

    parameters                     shift and go to state 106
    parameter                      shift and go to state 107
    empty                          shift and go to state 108

state 61

    (73) function -> FUNC MAIN . LPAREN params_opt RPAREN block

    LPAREN          shift and go to state 109


state 62

    (33) assignment -> IDENTIFIER DECLARE_ASSIGN expression .
    (38) expression -> expression . comparador expression
    (39) expression -> expression . operadorLogico expression
    (105) expression -> expression . operator expression
    (106) expression -> expression . DOT IDENTIFIER
    (49) comparador -> . EQ
    (50) comparador -> . NEQ
    (51) comparador -> . GT
    (52) comparador -> . LT
    (53) comparador -> . GE
    (54) comparador -> . LE
    (47) operadorLogico -> . AND
    (48) operadorLogico -> . OR
    (107) operator -> . PLUS
    (108) operator -> . MINUS
    (109) operator -> . TIMES
    (110) operator -> . DIVIDE
    (111) operator -> . MOD

    IDENTIFIER      reduce using rule 33 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    VAR             reduce using rule 33 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    TYPE            reduce using rule 33 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    FOR             reduce using rule 33 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    PACKAGE         reduce using rule 33 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    IMPORT          reduce using rule 33 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    SWITCH          reduce using rule 33 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    IF              reduce using rule 33 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    FUNC            reduce using rule 33 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    $end            reduce using rule 33 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    RBRACE          reduce using rule 33 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    CASE            reduce using rule 33 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    DEFAULT         reduce using rule 33 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    RETURN          reduce using rule 33 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    DOT             shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    GT              shift and go to state 81
    LT              shift and go to state 82
    GE              shift and go to state 83
    LE              shift and go to state 84
    AND             shift and go to state 85
    OR              shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    MOD             shift and go to state 91

    comparador                     shift and go to state 101
    operadorLogico                 shift and go to state 76
    operator                       shift and go to state 77

state 63

    (61) map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .

    IDENTIFIER      reduce using rule 61 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    VAR             reduce using rule 61 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    TYPE            reduce using rule 61 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    FOR             reduce using rule 61 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    PACKAGE         reduce using rule 61 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    IMPORT          reduce using rule 61 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    SWITCH          reduce using rule 61 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    IF              reduce using rule 61 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    FUNC            reduce using rule 61 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    $end            reduce using rule 61 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    RBRACE          reduce using rule 61 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    CASE            reduce using rule 61 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    DEFAULT         reduce using rule 61 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    RETURN          reduce using rule 61 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)


state 64

    (63) mapLiteral -> MAP . LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE

    LBRACKET        shift and go to state 110


state 65

    (36) assignment -> IDENTIFIER ASSIGN expression .
    (38) expression -> expression . comparador expression
    (39) expression -> expression . operadorLogico expression
    (105) expression -> expression . operator expression
    (106) expression -> expression . DOT IDENTIFIER
    (49) comparador -> . EQ
    (50) comparador -> . NEQ
    (51) comparador -> . GT
    (52) comparador -> . LT
    (53) comparador -> . GE
    (54) comparador -> . LE
    (47) operadorLogico -> . AND
    (48) operadorLogico -> . OR
    (107) operator -> . PLUS
    (108) operator -> . MINUS
    (109) operator -> . TIMES
    (110) operator -> . DIVIDE
    (111) operator -> . MOD

    IDENTIFIER      reduce using rule 36 (assignment -> IDENTIFIER ASSIGN expression .)
    VAR             reduce using rule 36 (assignment -> IDENTIFIER ASSIGN expression .)
    TYPE            reduce using rule 36 (assignment -> IDENTIFIER ASSIGN expression .)
    FOR             reduce using rule 36 (assignment -> IDENTIFIER ASSIGN expression .)
    PACKAGE         reduce using rule 36 (assignment -> IDENTIFIER ASSIGN expression .)
    IMPORT          reduce using rule 36 (assignment -> IDENTIFIER ASSIGN expression .)
    SWITCH          reduce using rule 36 (assignment -> IDENTIFIER ASSIGN expression .)
    IF              reduce using rule 36 (assignment -> IDENTIFIER ASSIGN expression .)
    FUNC            reduce using rule 36 (assignment -> IDENTIFIER ASSIGN expression .)
    $end            reduce using rule 36 (assignment -> IDENTIFIER ASSIGN expression .)
    RBRACE          reduce using rule 36 (assignment -> IDENTIFIER ASSIGN expression .)
    CASE            reduce using rule 36 (assignment -> IDENTIFIER ASSIGN expression .)
    DEFAULT         reduce using rule 36 (assignment -> IDENTIFIER ASSIGN expression .)
    RETURN          reduce using rule 36 (assignment -> IDENTIFIER ASSIGN expression .)
    DOT             shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    GT              shift and go to state 81
    LT              shift and go to state 82
    GE              shift and go to state 83
    LE              shift and go to state 84
    AND             shift and go to state 85
    OR              shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    MOD             shift and go to state 91

    comparador                     shift and go to state 101
    operadorLogico                 shift and go to state 76
    operator                       shift and go to state 77

state 66

    (31) input -> IDENTIFIER DOT IDENTIFIER . LPAREN AMPERSAND IDENTIFIER RPAREN
    (82) print_statement -> IDENTIFIER DOT IDENTIFIER . LPAREN argument_list_opt RPAREN

    LPAREN          shift and go to state 111


state 67

    (37) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 112


state 68

    (42) argument_list_opt -> argument_list .
    (41) argument_list -> argument_list . COMMA expression

    RPAREN          reduce using rule 42 (argument_list_opt -> argument_list .)
    COMMA           shift and go to state 113


state 69

    (40) argument_list -> expression .
    (38) expression -> expression . comparador expression
    (39) expression -> expression . operadorLogico expression
    (105) expression -> expression . operator expression
    (106) expression -> expression . DOT IDENTIFIER
    (49) comparador -> . EQ
    (50) comparador -> . NEQ
    (51) comparador -> . GT
    (52) comparador -> . LT
    (53) comparador -> . GE
    (54) comparador -> . LE
    (47) operadorLogico -> . AND
    (48) operadorLogico -> . OR
    (107) operator -> . PLUS
    (108) operator -> . MINUS
    (109) operator -> . TIMES
    (110) operator -> . DIVIDE
    (111) operator -> . MOD

    COMMA           reduce using rule 40 (argument_list -> expression .)
    RPAREN          reduce using rule 40 (argument_list -> expression .)
    DOT             shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    GT              shift and go to state 81
    LT              shift and go to state 82
    GE              shift and go to state 83
    LE              shift and go to state 84
    AND             shift and go to state 85
    OR              shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    MOD             shift and go to state 91

    comparador                     shift and go to state 101
    operadorLogico                 shift and go to state 76
    operator                       shift and go to state 77

state 70

    (34) assignment -> VAR IDENTIFIER DATATYPE . ASSIGN expression
    (35) assignment -> VAR IDENTIFIER DATATYPE . ASSIGN llamarFuncion
    (32) var_declaration -> VAR IDENTIFIER DATATYPE .

    ASSIGN          shift and go to state 114
    IDENTIFIER      reduce using rule 32 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    VAR             reduce using rule 32 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    TYPE            reduce using rule 32 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    FOR             reduce using rule 32 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    PACKAGE         reduce using rule 32 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    IMPORT          reduce using rule 32 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    SWITCH          reduce using rule 32 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    IF              reduce using rule 32 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    FUNC            reduce using rule 32 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    $end            reduce using rule 32 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    RBRACE          reduce using rule 32 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    CASE            reduce using rule 32 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    DEFAULT         reduce using rule 32 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    RETURN          reduce using rule 32 (var_declaration -> VAR IDENTIFIER DATATYPE .)


state 71

    (62) map -> VAR IDENTIFIER ASSIGN . mapLiteral
    (63) mapLiteral -> . MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE

    MAP             shift and go to state 64

    mapLiteral                     shift and go to state 115

state 72

    (83) struct_definition -> TYPE IDENTIFIER STRUCT . LBRACE struct_fields RBRACE

    LBRACE          shift and go to state 116


state 73

    (88) for_statement -> FOR shortAssignment SEMICOLON . condicion SEMICOLON expression block
    (44) condicion -> . expression comparador expression
    (38) expression -> . expression comparador expression
    (39) expression -> . expression operadorLogico expression
    (97) expression -> . NUMBER
    (98) expression -> . IDENTIFIER
    (99) expression -> . RUNE
    (100) expression -> . STRING
    (101) expression -> . RAW_STRING
    (102) expression -> . TRUE
    (103) expression -> . FALSE
    (104) expression -> . NIL
    (105) expression -> . expression operator expression
    (106) expression -> . expression DOT IDENTIFIER
    (112) expression -> . MINUS expression
    (113) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 42
    IDENTIFIER      shift and go to state 56
    RUNE            shift and go to state 43
    STRING          shift and go to state 44
    RAW_STRING      shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NIL             shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50

    condicion                      shift and go to state 117
    expression                     shift and go to state 37

state 74

    (92) for_statement -> FOR condicion block .

    IDENTIFIER      reduce using rule 92 (for_statement -> FOR condicion block .)
    VAR             reduce using rule 92 (for_statement -> FOR condicion block .)
    TYPE            reduce using rule 92 (for_statement -> FOR condicion block .)
    FOR             reduce using rule 92 (for_statement -> FOR condicion block .)
    PACKAGE         reduce using rule 92 (for_statement -> FOR condicion block .)
    IMPORT          reduce using rule 92 (for_statement -> FOR condicion block .)
    SWITCH          reduce using rule 92 (for_statement -> FOR condicion block .)
    IF              reduce using rule 92 (for_statement -> FOR condicion block .)
    FUNC            reduce using rule 92 (for_statement -> FOR condicion block .)
    $end            reduce using rule 92 (for_statement -> FOR condicion block .)
    RBRACE          reduce using rule 92 (for_statement -> FOR condicion block .)
    CASE            reduce using rule 92 (for_statement -> FOR condicion block .)
    DEFAULT         reduce using rule 92 (for_statement -> FOR condicion block .)
    RETURN          reduce using rule 92 (for_statement -> FOR condicion block .)


state 75

    (44) condicion -> expression comparador . expression
    (38) expression -> expression comparador . expression
    (38) expression -> . expression comparador expression
    (39) expression -> . expression operadorLogico expression
    (97) expression -> . NUMBER
    (98) expression -> . IDENTIFIER
    (99) expression -> . RUNE
    (100) expression -> . STRING
    (101) expression -> . RAW_STRING
    (102) expression -> . TRUE
    (103) expression -> . FALSE
    (104) expression -> . NIL
    (105) expression -> . expression operator expression
    (106) expression -> . expression DOT IDENTIFIER
    (112) expression -> . MINUS expression
    (113) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 42
    IDENTIFIER      shift and go to state 56
    RUNE            shift and go to state 43
    STRING          shift and go to state 44
    RAW_STRING      shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NIL             shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50

    expression                     shift and go to state 118

state 76

    (39) expression -> expression operadorLogico . expression
    (38) expression -> . expression comparador expression
    (39) expression -> . expression operadorLogico expression
    (97) expression -> . NUMBER
    (98) expression -> . IDENTIFIER
    (99) expression -> . RUNE
    (100) expression -> . STRING
    (101) expression -> . RAW_STRING
    (102) expression -> . TRUE
    (103) expression -> . FALSE
    (104) expression -> . NIL
    (105) expression -> . expression operator expression
    (106) expression -> . expression DOT IDENTIFIER
    (112) expression -> . MINUS expression
    (113) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 42
    IDENTIFIER      shift and go to state 56
    RUNE            shift and go to state 43
    STRING          shift and go to state 44
    RAW_STRING      shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NIL             shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50

    expression                     shift and go to state 119

state 77

    (105) expression -> expression operator . expression
    (38) expression -> . expression comparador expression
    (39) expression -> . expression operadorLogico expression
    (97) expression -> . NUMBER
    (98) expression -> . IDENTIFIER
    (99) expression -> . RUNE
    (100) expression -> . STRING
    (101) expression -> . RAW_STRING
    (102) expression -> . TRUE
    (103) expression -> . FALSE
    (104) expression -> . NIL
    (105) expression -> . expression operator expression
    (106) expression -> . expression DOT IDENTIFIER
    (112) expression -> . MINUS expression
    (113) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 42
    IDENTIFIER      shift and go to state 56
    RUNE            shift and go to state 43
    STRING          shift and go to state 44
    RAW_STRING      shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NIL             shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50

    expression                     shift and go to state 120

state 78

    (106) expression -> expression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 121


state 79

    (49) comparador -> EQ .

    NUMBER          reduce using rule 49 (comparador -> EQ .)
    IDENTIFIER      reduce using rule 49 (comparador -> EQ .)
    RUNE            reduce using rule 49 (comparador -> EQ .)
    STRING          reduce using rule 49 (comparador -> EQ .)
    RAW_STRING      reduce using rule 49 (comparador -> EQ .)
    TRUE            reduce using rule 49 (comparador -> EQ .)
    FALSE           reduce using rule 49 (comparador -> EQ .)
    NIL             reduce using rule 49 (comparador -> EQ .)
    MINUS           reduce using rule 49 (comparador -> EQ .)
    LPAREN          reduce using rule 49 (comparador -> EQ .)


state 80

    (50) comparador -> NEQ .

    NUMBER          reduce using rule 50 (comparador -> NEQ .)
    IDENTIFIER      reduce using rule 50 (comparador -> NEQ .)
    RUNE            reduce using rule 50 (comparador -> NEQ .)
    STRING          reduce using rule 50 (comparador -> NEQ .)
    RAW_STRING      reduce using rule 50 (comparador -> NEQ .)
    TRUE            reduce using rule 50 (comparador -> NEQ .)
    FALSE           reduce using rule 50 (comparador -> NEQ .)
    NIL             reduce using rule 50 (comparador -> NEQ .)
    MINUS           reduce using rule 50 (comparador -> NEQ .)
    LPAREN          reduce using rule 50 (comparador -> NEQ .)


state 81

    (51) comparador -> GT .

    NUMBER          reduce using rule 51 (comparador -> GT .)
    IDENTIFIER      reduce using rule 51 (comparador -> GT .)
    RUNE            reduce using rule 51 (comparador -> GT .)
    STRING          reduce using rule 51 (comparador -> GT .)
    RAW_STRING      reduce using rule 51 (comparador -> GT .)
    TRUE            reduce using rule 51 (comparador -> GT .)
    FALSE           reduce using rule 51 (comparador -> GT .)
    NIL             reduce using rule 51 (comparador -> GT .)
    MINUS           reduce using rule 51 (comparador -> GT .)
    LPAREN          reduce using rule 51 (comparador -> GT .)


state 82

    (52) comparador -> LT .

    NUMBER          reduce using rule 52 (comparador -> LT .)
    IDENTIFIER      reduce using rule 52 (comparador -> LT .)
    RUNE            reduce using rule 52 (comparador -> LT .)
    STRING          reduce using rule 52 (comparador -> LT .)
    RAW_STRING      reduce using rule 52 (comparador -> LT .)
    TRUE            reduce using rule 52 (comparador -> LT .)
    FALSE           reduce using rule 52 (comparador -> LT .)
    NIL             reduce using rule 52 (comparador -> LT .)
    MINUS           reduce using rule 52 (comparador -> LT .)
    LPAREN          reduce using rule 52 (comparador -> LT .)


state 83

    (53) comparador -> GE .

    NUMBER          reduce using rule 53 (comparador -> GE .)
    IDENTIFIER      reduce using rule 53 (comparador -> GE .)
    RUNE            reduce using rule 53 (comparador -> GE .)
    STRING          reduce using rule 53 (comparador -> GE .)
    RAW_STRING      reduce using rule 53 (comparador -> GE .)
    TRUE            reduce using rule 53 (comparador -> GE .)
    FALSE           reduce using rule 53 (comparador -> GE .)
    NIL             reduce using rule 53 (comparador -> GE .)
    MINUS           reduce using rule 53 (comparador -> GE .)
    LPAREN          reduce using rule 53 (comparador -> GE .)


state 84

    (54) comparador -> LE .

    NUMBER          reduce using rule 54 (comparador -> LE .)
    IDENTIFIER      reduce using rule 54 (comparador -> LE .)
    RUNE            reduce using rule 54 (comparador -> LE .)
    STRING          reduce using rule 54 (comparador -> LE .)
    RAW_STRING      reduce using rule 54 (comparador -> LE .)
    TRUE            reduce using rule 54 (comparador -> LE .)
    FALSE           reduce using rule 54 (comparador -> LE .)
    NIL             reduce using rule 54 (comparador -> LE .)
    MINUS           reduce using rule 54 (comparador -> LE .)
    LPAREN          reduce using rule 54 (comparador -> LE .)


state 85

    (47) operadorLogico -> AND .

    NUMBER          reduce using rule 47 (operadorLogico -> AND .)
    IDENTIFIER      reduce using rule 47 (operadorLogico -> AND .)
    RUNE            reduce using rule 47 (operadorLogico -> AND .)
    STRING          reduce using rule 47 (operadorLogico -> AND .)
    RAW_STRING      reduce using rule 47 (operadorLogico -> AND .)
    TRUE            reduce using rule 47 (operadorLogico -> AND .)
    FALSE           reduce using rule 47 (operadorLogico -> AND .)
    NIL             reduce using rule 47 (operadorLogico -> AND .)
    MINUS           reduce using rule 47 (operadorLogico -> AND .)
    LPAREN          reduce using rule 47 (operadorLogico -> AND .)


state 86

    (48) operadorLogico -> OR .

    NUMBER          reduce using rule 48 (operadorLogico -> OR .)
    IDENTIFIER      reduce using rule 48 (operadorLogico -> OR .)
    RUNE            reduce using rule 48 (operadorLogico -> OR .)
    STRING          reduce using rule 48 (operadorLogico -> OR .)
    RAW_STRING      reduce using rule 48 (operadorLogico -> OR .)
    TRUE            reduce using rule 48 (operadorLogico -> OR .)
    FALSE           reduce using rule 48 (operadorLogico -> OR .)
    NIL             reduce using rule 48 (operadorLogico -> OR .)
    MINUS           reduce using rule 48 (operadorLogico -> OR .)
    LPAREN          reduce using rule 48 (operadorLogico -> OR .)


state 87

    (107) operator -> PLUS .

    NUMBER          reduce using rule 107 (operator -> PLUS .)
    IDENTIFIER      reduce using rule 107 (operator -> PLUS .)
    RUNE            reduce using rule 107 (operator -> PLUS .)
    STRING          reduce using rule 107 (operator -> PLUS .)
    RAW_STRING      reduce using rule 107 (operator -> PLUS .)
    TRUE            reduce using rule 107 (operator -> PLUS .)
    FALSE           reduce using rule 107 (operator -> PLUS .)
    NIL             reduce using rule 107 (operator -> PLUS .)
    MINUS           reduce using rule 107 (operator -> PLUS .)
    LPAREN          reduce using rule 107 (operator -> PLUS .)


state 88

    (108) operator -> MINUS .

    NUMBER          reduce using rule 108 (operator -> MINUS .)
    IDENTIFIER      reduce using rule 108 (operator -> MINUS .)
    RUNE            reduce using rule 108 (operator -> MINUS .)
    STRING          reduce using rule 108 (operator -> MINUS .)
    RAW_STRING      reduce using rule 108 (operator -> MINUS .)
    TRUE            reduce using rule 108 (operator -> MINUS .)
    FALSE           reduce using rule 108 (operator -> MINUS .)
    NIL             reduce using rule 108 (operator -> MINUS .)
    MINUS           reduce using rule 108 (operator -> MINUS .)
    LPAREN          reduce using rule 108 (operator -> MINUS .)


state 89

    (109) operator -> TIMES .

    NUMBER          reduce using rule 109 (operator -> TIMES .)
    IDENTIFIER      reduce using rule 109 (operator -> TIMES .)
    RUNE            reduce using rule 109 (operator -> TIMES .)
    STRING          reduce using rule 109 (operator -> TIMES .)
    RAW_STRING      reduce using rule 109 (operator -> TIMES .)
    TRUE            reduce using rule 109 (operator -> TIMES .)
    FALSE           reduce using rule 109 (operator -> TIMES .)
    NIL             reduce using rule 109 (operator -> TIMES .)
    MINUS           reduce using rule 109 (operator -> TIMES .)
    LPAREN          reduce using rule 109 (operator -> TIMES .)


state 90

    (110) operator -> DIVIDE .

    NUMBER          reduce using rule 110 (operator -> DIVIDE .)
    IDENTIFIER      reduce using rule 110 (operator -> DIVIDE .)
    RUNE            reduce using rule 110 (operator -> DIVIDE .)
    STRING          reduce using rule 110 (operator -> DIVIDE .)
    RAW_STRING      reduce using rule 110 (operator -> DIVIDE .)
    TRUE            reduce using rule 110 (operator -> DIVIDE .)
    FALSE           reduce using rule 110 (operator -> DIVIDE .)
    NIL             reduce using rule 110 (operator -> DIVIDE .)
    MINUS           reduce using rule 110 (operator -> DIVIDE .)
    LPAREN          reduce using rule 110 (operator -> DIVIDE .)


state 91

    (111) operator -> MOD .

    NUMBER          reduce using rule 111 (operator -> MOD .)
    IDENTIFIER      reduce using rule 111 (operator -> MOD .)
    RUNE            reduce using rule 111 (operator -> MOD .)
    STRING          reduce using rule 111 (operator -> MOD .)
    RAW_STRING      reduce using rule 111 (operator -> MOD .)
    TRUE            reduce using rule 111 (operator -> MOD .)
    FALSE           reduce using rule 111 (operator -> MOD .)
    NIL             reduce using rule 111 (operator -> MOD .)
    MINUS           reduce using rule 111 (operator -> MOD .)
    LPAREN          reduce using rule 111 (operator -> MOD .)


state 92

    (91) shortAssignment -> identifier_list DECLARE_ASSIGN . expression
    (38) expression -> . expression comparador expression
    (39) expression -> . expression operadorLogico expression
    (97) expression -> . NUMBER
    (98) expression -> . IDENTIFIER
    (99) expression -> . RUNE
    (100) expression -> . STRING
    (101) expression -> . RAW_STRING
    (102) expression -> . TRUE
    (103) expression -> . FALSE
    (104) expression -> . NIL
    (105) expression -> . expression operator expression
    (106) expression -> . expression DOT IDENTIFIER
    (112) expression -> . MINUS expression
    (113) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 42
    IDENTIFIER      shift and go to state 56
    RUNE            shift and go to state 43
    STRING          shift and go to state 44
    RAW_STRING      shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NIL             shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50

    expression                     shift and go to state 122

state 93

    (95) block -> LBRACE statement_list . RBRACE
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (33) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (34) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (35) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (31) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (37) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (82) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (83) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (88) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (92) for_statement -> . FOR condicion block
    (93) for_statement -> . FOR block
    (21) package -> . PACKAGE MAIN
    (22) package -> . PACKAGE IDENTIFIER
    (23) import -> . IMPORT STRING
    (24) import -> . IMPORT LPAREN import_list RPAREN
    (56) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (61) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (62) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (114) if_statement -> . IF condicion_compleja block
    (115) if_statement -> . IF condicion_compleja block ELSE block
    (69) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (70) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (73) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (87) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (116) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (32) var_declaration -> . VAR IDENTIFIER DATATYPE

    RBRACE          shift and go to state 123
    IDENTIFIER      shift and go to state 19
    VAR             shift and go to state 20
    TYPE            shift and go to state 21
    FOR             shift and go to state 22
    PACKAGE         shift and go to state 23
    IMPORT          shift and go to state 24
    SWITCH          shift and go to state 25
    IF              shift and go to state 26
    FUNC            shift and go to state 27

    statement                      shift and go to state 28
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18

state 94

    (96) block -> LBRACE RBRACE .

    IDENTIFIER      reduce using rule 96 (block -> LBRACE RBRACE .)
    VAR             reduce using rule 96 (block -> LBRACE RBRACE .)
    TYPE            reduce using rule 96 (block -> LBRACE RBRACE .)
    FOR             reduce using rule 96 (block -> LBRACE RBRACE .)
    PACKAGE         reduce using rule 96 (block -> LBRACE RBRACE .)
    IMPORT          reduce using rule 96 (block -> LBRACE RBRACE .)
    SWITCH          reduce using rule 96 (block -> LBRACE RBRACE .)
    IF              reduce using rule 96 (block -> LBRACE RBRACE .)
    FUNC            reduce using rule 96 (block -> LBRACE RBRACE .)
    $end            reduce using rule 96 (block -> LBRACE RBRACE .)
    RBRACE          reduce using rule 96 (block -> LBRACE RBRACE .)
    CASE            reduce using rule 96 (block -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 96 (block -> LBRACE RBRACE .)
    RETURN          reduce using rule 96 (block -> LBRACE RBRACE .)
    ELSE            reduce using rule 96 (block -> LBRACE RBRACE .)


state 95

    (90) identifier_list -> IDENTIFIER COMMA . identifier_list
    (89) identifier_list -> . IDENTIFIER
    (90) identifier_list -> . IDENTIFIER COMMA identifier_list

    IDENTIFIER      shift and go to state 124

    identifier_list                shift and go to state 125

state 96

    (112) expression -> MINUS expression .
    (38) expression -> expression . comparador expression
    (39) expression -> expression . operadorLogico expression
    (105) expression -> expression . operator expression
    (106) expression -> expression . DOT IDENTIFIER
    (49) comparador -> . EQ
    (50) comparador -> . NEQ
    (51) comparador -> . GT
    (52) comparador -> . LT
    (53) comparador -> . GE
    (54) comparador -> . LE
    (47) operadorLogico -> . AND
    (48) operadorLogico -> . OR
    (107) operator -> . PLUS
    (108) operator -> . MINUS
    (109) operator -> . TIMES
    (110) operator -> . DIVIDE
    (111) operator -> . MOD

    DOT             reduce using rule 112 (expression -> MINUS expression .)
    EQ              reduce using rule 112 (expression -> MINUS expression .)
    NEQ             reduce using rule 112 (expression -> MINUS expression .)
    GT              reduce using rule 112 (expression -> MINUS expression .)
    LT              reduce using rule 112 (expression -> MINUS expression .)
    GE              reduce using rule 112 (expression -> MINUS expression .)
    LE              reduce using rule 112 (expression -> MINUS expression .)
    AND             reduce using rule 112 (expression -> MINUS expression .)
    OR              reduce using rule 112 (expression -> MINUS expression .)
    PLUS            reduce using rule 112 (expression -> MINUS expression .)
    MINUS           reduce using rule 112 (expression -> MINUS expression .)
    TIMES           reduce using rule 112 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 112 (expression -> MINUS expression .)
    MOD             reduce using rule 112 (expression -> MINUS expression .)
    LBRACE          reduce using rule 112 (expression -> MINUS expression .)
    IDENTIFIER      reduce using rule 112 (expression -> MINUS expression .)
    VAR             reduce using rule 112 (expression -> MINUS expression .)
    TYPE            reduce using rule 112 (expression -> MINUS expression .)
    FOR             reduce using rule 112 (expression -> MINUS expression .)
    PACKAGE         reduce using rule 112 (expression -> MINUS expression .)
    IMPORT          reduce using rule 112 (expression -> MINUS expression .)
    SWITCH          reduce using rule 112 (expression -> MINUS expression .)
    IF              reduce using rule 112 (expression -> MINUS expression .)
    FUNC            reduce using rule 112 (expression -> MINUS expression .)
    $end            reduce using rule 112 (expression -> MINUS expression .)
    RBRACE          reduce using rule 112 (expression -> MINUS expression .)
    CASE            reduce using rule 112 (expression -> MINUS expression .)
    DEFAULT         reduce using rule 112 (expression -> MINUS expression .)
    RETURN          reduce using rule 112 (expression -> MINUS expression .)
    COMMA           reduce using rule 112 (expression -> MINUS expression .)
    RPAREN          reduce using rule 112 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 112 (expression -> MINUS expression .)
    COLON           reduce using rule 112 (expression -> MINUS expression .)

  ! DOT             [ shift and go to state 78 ]
  ! EQ              [ shift and go to state 79 ]
  ! NEQ             [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! LT              [ shift and go to state 82 ]
  ! GE              [ shift and go to state 83 ]
  ! LE              [ shift and go to state 84 ]
  ! AND             [ shift and go to state 85 ]
  ! OR              [ shift and go to state 86 ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 88 ]
  ! TIMES           [ shift and go to state 89 ]
  ! DIVIDE          [ shift and go to state 90 ]
  ! MOD             [ shift and go to state 91 ]

    comparador                     shift and go to state 101
    operadorLogico                 shift and go to state 76
    operator                       shift and go to state 77

state 97

    (113) expression -> LPAREN expression . RPAREN
    (38) expression -> expression . comparador expression
    (39) expression -> expression . operadorLogico expression
    (105) expression -> expression . operator expression
    (106) expression -> expression . DOT IDENTIFIER
    (49) comparador -> . EQ
    (50) comparador -> . NEQ
    (51) comparador -> . GT
    (52) comparador -> . LT
    (53) comparador -> . GE
    (54) comparador -> . LE
    (47) operadorLogico -> . AND
    (48) operadorLogico -> . OR
    (107) operator -> . PLUS
    (108) operator -> . MINUS
    (109) operator -> . TIMES
    (110) operator -> . DIVIDE
    (111) operator -> . MOD

    RPAREN          shift and go to state 126
    DOT             shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    GT              shift and go to state 81
    LT              shift and go to state 82
    GE              shift and go to state 83
    LE              shift and go to state 84
    AND             shift and go to state 85
    OR              shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    MOD             shift and go to state 91

    comparador                     shift and go to state 101
    operadorLogico                 shift and go to state 76
    operator                       shift and go to state 77

state 98

    (24) import -> IMPORT LPAREN import_list . RPAREN
    (26) import_list -> import_list . STRING

    RPAREN          shift and go to state 127
    STRING          shift and go to state 128


state 99

    (25) import_list -> STRING .

    RPAREN          reduce using rule 25 (import_list -> STRING .)
    STRING          reduce using rule 25 (import_list -> STRING .)


state 100

    (56) switch -> SWITCH expression LBRACE . caseBlocks RBRACE
    (57) caseBlocks -> . caseBlock
    (58) caseBlocks -> . caseBlock caseBlocks
    (59) caseBlock -> . CASE expression COLON statement_list
    (60) caseBlock -> . DEFAULT COLON statement_list

    CASE            shift and go to state 131
    DEFAULT         shift and go to state 132

    caseBlocks                     shift and go to state 129
    caseBlock                      shift and go to state 130

state 101

    (38) expression -> expression comparador . expression
    (38) expression -> . expression comparador expression
    (39) expression -> . expression operadorLogico expression
    (97) expression -> . NUMBER
    (98) expression -> . IDENTIFIER
    (99) expression -> . RUNE
    (100) expression -> . STRING
    (101) expression -> . RAW_STRING
    (102) expression -> . TRUE
    (103) expression -> . FALSE
    (104) expression -> . NIL
    (105) expression -> . expression operator expression
    (106) expression -> . expression DOT IDENTIFIER
    (112) expression -> . MINUS expression
    (113) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 42
    IDENTIFIER      shift and go to state 56
    RUNE            shift and go to state 43
    STRING          shift and go to state 44
    RAW_STRING      shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NIL             shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50

    expression                     shift and go to state 133

state 102

    (114) if_statement -> IF condicion_compleja block .
    (115) if_statement -> IF condicion_compleja block . ELSE block

    IDENTIFIER      reduce using rule 114 (if_statement -> IF condicion_compleja block .)
    VAR             reduce using rule 114 (if_statement -> IF condicion_compleja block .)
    TYPE            reduce using rule 114 (if_statement -> IF condicion_compleja block .)
    FOR             reduce using rule 114 (if_statement -> IF condicion_compleja block .)
    PACKAGE         reduce using rule 114 (if_statement -> IF condicion_compleja block .)
    IMPORT          reduce using rule 114 (if_statement -> IF condicion_compleja block .)
    SWITCH          reduce using rule 114 (if_statement -> IF condicion_compleja block .)
    IF              reduce using rule 114 (if_statement -> IF condicion_compleja block .)
    FUNC            reduce using rule 114 (if_statement -> IF condicion_compleja block .)
    $end            reduce using rule 114 (if_statement -> IF condicion_compleja block .)
    RBRACE          reduce using rule 114 (if_statement -> IF condicion_compleja block .)
    CASE            reduce using rule 114 (if_statement -> IF condicion_compleja block .)
    DEFAULT         reduce using rule 114 (if_statement -> IF condicion_compleja block .)
    RETURN          reduce using rule 114 (if_statement -> IF condicion_compleja block .)
    ELSE            shift and go to state 134


state 103

    (45) condicion_compleja -> condicion operadorLogico . condicion
    (46) condicion_compleja -> condicion operadorLogico . condicion_compleja
    (44) condicion -> . expression comparador expression
    (45) condicion_compleja -> . condicion operadorLogico condicion
    (46) condicion_compleja -> . condicion operadorLogico condicion_compleja
    (38) expression -> . expression comparador expression
    (39) expression -> . expression operadorLogico expression
    (97) expression -> . NUMBER
    (98) expression -> . IDENTIFIER
    (99) expression -> . RUNE
    (100) expression -> . STRING
    (101) expression -> . RAW_STRING
    (102) expression -> . TRUE
    (103) expression -> . FALSE
    (104) expression -> . NIL
    (105) expression -> . expression operator expression
    (106) expression -> . expression DOT IDENTIFIER
    (112) expression -> . MINUS expression
    (113) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 42
    IDENTIFIER      shift and go to state 56
    RUNE            shift and go to state 43
    STRING          shift and go to state 44
    RAW_STRING      shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NIL             shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50

    condicion                      shift and go to state 135
    condicion_compleja             shift and go to state 136
    expression                     shift and go to state 37

state 104

    (69) function -> FUNC IDENTIFIER LPAREN . params_opt RPAREN block
    (70) function -> FUNC IDENTIFIER LPAREN . params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (75) params_opt -> . params
    (76) params_opt -> .
    (77) params -> . param
    (78) params -> . param COMMA params
    (79) param -> . IDENTIFIER type_name

    RPAREN          reduce using rule 76 (params_opt -> .)
    IDENTIFIER      shift and go to state 137

    params_opt                     shift and go to state 138
    params                         shift and go to state 139
    param                          shift and go to state 140

state 105

    (87) method_definition -> FUNC LPAREN IDENTIFIER . IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (120) parameter -> IDENTIFIER . DATATYPE
    (121) parameter -> IDENTIFIER . FUNC LPAREN parameters RPAREN DATATYPE

    IDENTIFIER      shift and go to state 142
    DATATYPE        shift and go to state 143
    FUNC            shift and go to state 141


state 106

    (116) function_literal -> FUNC LPAREN parameters . RPAREN return_type block
    (117) parameters -> parameters . COMMA parameter

    RPAREN          shift and go to state 144
    COMMA           shift and go to state 145


state 107

    (118) parameters -> parameter .

    RPAREN          reduce using rule 118 (parameters -> parameter .)
    COMMA           reduce using rule 118 (parameters -> parameter .)


state 108

    (119) parameters -> empty .

    RPAREN          reduce using rule 119 (parameters -> empty .)
    COMMA           reduce using rule 119 (parameters -> empty .)


state 109

    (73) function -> FUNC MAIN LPAREN . params_opt RPAREN block
    (75) params_opt -> . params
    (76) params_opt -> .
    (77) params -> . param
    (78) params -> . param COMMA params
    (79) param -> . IDENTIFIER type_name

    RPAREN          reduce using rule 76 (params_opt -> .)
    IDENTIFIER      shift and go to state 137

    params_opt                     shift and go to state 146
    params                         shift and go to state 139
    param                          shift and go to state 140

state 110

    (63) mapLiteral -> MAP LBRACKET . DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE

    DATATYPE        shift and go to state 147


state 111

    (31) input -> IDENTIFIER DOT IDENTIFIER LPAREN . AMPERSAND IDENTIFIER RPAREN
    (82) print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN . argument_list_opt RPAREN
    (42) argument_list_opt -> . argument_list
    (43) argument_list_opt -> .
    (40) argument_list -> . expression
    (41) argument_list -> . argument_list COMMA expression
    (38) expression -> . expression comparador expression
    (39) expression -> . expression operadorLogico expression
    (97) expression -> . NUMBER
    (98) expression -> . IDENTIFIER
    (99) expression -> . RUNE
    (100) expression -> . STRING
    (101) expression -> . RAW_STRING
    (102) expression -> . TRUE
    (103) expression -> . FALSE
    (104) expression -> . NIL
    (105) expression -> . expression operator expression
    (106) expression -> . expression DOT IDENTIFIER
    (112) expression -> . MINUS expression
    (113) expression -> . LPAREN expression RPAREN

    AMPERSAND       shift and go to state 148
    RPAREN          reduce using rule 43 (argument_list_opt -> .)
    NUMBER          shift and go to state 42
    IDENTIFIER      shift and go to state 56
    RUNE            shift and go to state 43
    STRING          shift and go to state 44
    RAW_STRING      shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NIL             shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50

    argument_list_opt              shift and go to state 149
    argument_list                  shift and go to state 68
    expression                     shift and go to state 69

state 112

    (37) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .

    IDENTIFIER      reduce using rule 37 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    VAR             reduce using rule 37 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TYPE            reduce using rule 37 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FOR             reduce using rule 37 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PACKAGE         reduce using rule 37 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IMPORT          reduce using rule 37 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SWITCH          reduce using rule 37 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IF              reduce using rule 37 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FUNC            reduce using rule 37 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    $end            reduce using rule 37 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 37 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    CASE            reduce using rule 37 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DEFAULT         reduce using rule 37 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RETURN          reduce using rule 37 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)


state 113

    (41) argument_list -> argument_list COMMA . expression
    (38) expression -> . expression comparador expression
    (39) expression -> . expression operadorLogico expression
    (97) expression -> . NUMBER
    (98) expression -> . IDENTIFIER
    (99) expression -> . RUNE
    (100) expression -> . STRING
    (101) expression -> . RAW_STRING
    (102) expression -> . TRUE
    (103) expression -> . FALSE
    (104) expression -> . NIL
    (105) expression -> . expression operator expression
    (106) expression -> . expression DOT IDENTIFIER
    (112) expression -> . MINUS expression
    (113) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 42
    IDENTIFIER      shift and go to state 56
    RUNE            shift and go to state 43
    STRING          shift and go to state 44
    RAW_STRING      shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NIL             shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50

    expression                     shift and go to state 150

state 114

    (34) assignment -> VAR IDENTIFIER DATATYPE ASSIGN . expression
    (35) assignment -> VAR IDENTIFIER DATATYPE ASSIGN . llamarFuncion
    (38) expression -> . expression comparador expression
    (39) expression -> . expression operadorLogico expression
    (97) expression -> . NUMBER
    (98) expression -> . IDENTIFIER
    (99) expression -> . RUNE
    (100) expression -> . STRING
    (101) expression -> . RAW_STRING
    (102) expression -> . TRUE
    (103) expression -> . FALSE
    (104) expression -> . NIL
    (105) expression -> . expression operator expression
    (106) expression -> . expression DOT IDENTIFIER
    (112) expression -> . MINUS expression
    (113) expression -> . LPAREN expression RPAREN
    (37) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 42
    IDENTIFIER      shift and go to state 151
    RUNE            shift and go to state 43
    STRING          shift and go to state 44
    RAW_STRING      shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NIL             shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50

    expression                     shift and go to state 152
    llamarFuncion                  shift and go to state 153

state 115

    (62) map -> VAR IDENTIFIER ASSIGN mapLiteral .

    IDENTIFIER      reduce using rule 62 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    VAR             reduce using rule 62 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    TYPE            reduce using rule 62 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    FOR             reduce using rule 62 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    PACKAGE         reduce using rule 62 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    IMPORT          reduce using rule 62 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    SWITCH          reduce using rule 62 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    IF              reduce using rule 62 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    FUNC            reduce using rule 62 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    $end            reduce using rule 62 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    RBRACE          reduce using rule 62 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    CASE            reduce using rule 62 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    DEFAULT         reduce using rule 62 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    RETURN          reduce using rule 62 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)


state 116

    (83) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE . struct_fields RBRACE
    (85) struct_fields -> . struct_field
    (86) struct_fields -> . struct_fields struct_field
    (84) struct_field -> . IDENTIFIER DATATYPE

    IDENTIFIER      shift and go to state 154

    struct_fields                  shift and go to state 155
    struct_field                   shift and go to state 156

state 117

    (88) for_statement -> FOR shortAssignment SEMICOLON condicion . SEMICOLON expression block

    SEMICOLON       shift and go to state 157


state 118

    (44) condicion -> expression comparador expression .
    (38) expression -> expression comparador expression .
    (38) expression -> expression . comparador expression
    (39) expression -> expression . operadorLogico expression
    (105) expression -> expression . operator expression
    (106) expression -> expression . DOT IDENTIFIER
    (49) comparador -> . EQ
    (50) comparador -> . NEQ
    (51) comparador -> . GT
    (52) comparador -> . LT
    (53) comparador -> . GE
    (54) comparador -> . LE
    (47) operadorLogico -> . AND
    (48) operadorLogico -> . OR
    (107) operator -> . PLUS
    (108) operator -> . MINUS
    (109) operator -> . TIMES
    (110) operator -> . DIVIDE
    (111) operator -> . MOD

  ! reduce/reduce conflict for AND resolved using rule 38 (expression -> expression comparador expression .)
  ! reduce/reduce conflict for OR resolved using rule 38 (expression -> expression comparador expression .)
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 44 (condicion -> expression comparador expression .)
    SEMICOLON       reduce using rule 44 (condicion -> expression comparador expression .)
    DOT             shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    GT              shift and go to state 81
    LT              shift and go to state 82
    GE              shift and go to state 83
    LE              shift and go to state 84
    AND             shift and go to state 85
    OR              shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    MOD             shift and go to state 91

  ! AND             [ reduce using rule 44 (condicion -> expression comparador expression .) ]
  ! OR              [ reduce using rule 44 (condicion -> expression comparador expression .) ]
  ! DOT             [ reduce using rule 38 (expression -> expression comparador expression .) ]
  ! EQ              [ reduce using rule 38 (expression -> expression comparador expression .) ]
  ! NEQ             [ reduce using rule 38 (expression -> expression comparador expression .) ]
  ! GT              [ reduce using rule 38 (expression -> expression comparador expression .) ]
  ! LT              [ reduce using rule 38 (expression -> expression comparador expression .) ]
  ! GE              [ reduce using rule 38 (expression -> expression comparador expression .) ]
  ! LE              [ reduce using rule 38 (expression -> expression comparador expression .) ]
  ! AND             [ reduce using rule 38 (expression -> expression comparador expression .) ]
  ! OR              [ reduce using rule 38 (expression -> expression comparador expression .) ]
  ! PLUS            [ reduce using rule 38 (expression -> expression comparador expression .) ]
  ! MINUS           [ reduce using rule 38 (expression -> expression comparador expression .) ]
  ! TIMES           [ reduce using rule 38 (expression -> expression comparador expression .) ]
  ! DIVIDE          [ reduce using rule 38 (expression -> expression comparador expression .) ]
  ! MOD             [ reduce using rule 38 (expression -> expression comparador expression .) ]

    comparador                     shift and go to state 101
    operadorLogico                 shift and go to state 76
    operator                       shift and go to state 77

state 119

    (39) expression -> expression operadorLogico expression .
    (38) expression -> expression . comparador expression
    (39) expression -> expression . operadorLogico expression
    (105) expression -> expression . operator expression
    (106) expression -> expression . DOT IDENTIFIER
    (49) comparador -> . EQ
    (50) comparador -> . NEQ
    (51) comparador -> . GT
    (52) comparador -> . LT
    (53) comparador -> . GE
    (54) comparador -> . LE
    (47) operadorLogico -> . AND
    (48) operadorLogico -> . OR
    (107) operator -> . PLUS
    (108) operator -> . MINUS
    (109) operator -> . TIMES
    (110) operator -> . DIVIDE
    (111) operator -> . MOD

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 39 (expression -> expression operadorLogico expression .)
    IDENTIFIER      reduce using rule 39 (expression -> expression operadorLogico expression .)
    VAR             reduce using rule 39 (expression -> expression operadorLogico expression .)
    TYPE            reduce using rule 39 (expression -> expression operadorLogico expression .)
    FOR             reduce using rule 39 (expression -> expression operadorLogico expression .)
    PACKAGE         reduce using rule 39 (expression -> expression operadorLogico expression .)
    IMPORT          reduce using rule 39 (expression -> expression operadorLogico expression .)
    SWITCH          reduce using rule 39 (expression -> expression operadorLogico expression .)
    IF              reduce using rule 39 (expression -> expression operadorLogico expression .)
    FUNC            reduce using rule 39 (expression -> expression operadorLogico expression .)
    $end            reduce using rule 39 (expression -> expression operadorLogico expression .)
    RBRACE          reduce using rule 39 (expression -> expression operadorLogico expression .)
    CASE            reduce using rule 39 (expression -> expression operadorLogico expression .)
    DEFAULT         reduce using rule 39 (expression -> expression operadorLogico expression .)
    RETURN          reduce using rule 39 (expression -> expression operadorLogico expression .)
    COMMA           reduce using rule 39 (expression -> expression operadorLogico expression .)
    RPAREN          reduce using rule 39 (expression -> expression operadorLogico expression .)
    SEMICOLON       reduce using rule 39 (expression -> expression operadorLogico expression .)
    COLON           reduce using rule 39 (expression -> expression operadorLogico expression .)
    DOT             shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    GT              shift and go to state 81
    LT              shift and go to state 82
    GE              shift and go to state 83
    LE              shift and go to state 84
    AND             shift and go to state 85
    OR              shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    MOD             shift and go to state 91

  ! DOT             [ reduce using rule 39 (expression -> expression operadorLogico expression .) ]
  ! EQ              [ reduce using rule 39 (expression -> expression operadorLogico expression .) ]
  ! NEQ             [ reduce using rule 39 (expression -> expression operadorLogico expression .) ]
  ! GT              [ reduce using rule 39 (expression -> expression operadorLogico expression .) ]
  ! LT              [ reduce using rule 39 (expression -> expression operadorLogico expression .) ]
  ! GE              [ reduce using rule 39 (expression -> expression operadorLogico expression .) ]
  ! LE              [ reduce using rule 39 (expression -> expression operadorLogico expression .) ]
  ! AND             [ reduce using rule 39 (expression -> expression operadorLogico expression .) ]
  ! OR              [ reduce using rule 39 (expression -> expression operadorLogico expression .) ]
  ! PLUS            [ reduce using rule 39 (expression -> expression operadorLogico expression .) ]
  ! MINUS           [ reduce using rule 39 (expression -> expression operadorLogico expression .) ]
  ! TIMES           [ reduce using rule 39 (expression -> expression operadorLogico expression .) ]
  ! DIVIDE          [ reduce using rule 39 (expression -> expression operadorLogico expression .) ]
  ! MOD             [ reduce using rule 39 (expression -> expression operadorLogico expression .) ]

    operadorLogico                 shift and go to state 76
    comparador                     shift and go to state 101
    operator                       shift and go to state 77

state 120

    (105) expression -> expression operator expression .
    (38) expression -> expression . comparador expression
    (39) expression -> expression . operadorLogico expression
    (105) expression -> expression . operator expression
    (106) expression -> expression . DOT IDENTIFIER
    (49) comparador -> . EQ
    (50) comparador -> . NEQ
    (51) comparador -> . GT
    (52) comparador -> . LT
    (53) comparador -> . GE
    (54) comparador -> . LE
    (47) operadorLogico -> . AND
    (48) operadorLogico -> . OR
    (107) operator -> . PLUS
    (108) operator -> . MINUS
    (109) operator -> . TIMES
    (110) operator -> . DIVIDE
    (111) operator -> . MOD

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 105 (expression -> expression operator expression .)
    IDENTIFIER      reduce using rule 105 (expression -> expression operator expression .)
    VAR             reduce using rule 105 (expression -> expression operator expression .)
    TYPE            reduce using rule 105 (expression -> expression operator expression .)
    FOR             reduce using rule 105 (expression -> expression operator expression .)
    PACKAGE         reduce using rule 105 (expression -> expression operator expression .)
    IMPORT          reduce using rule 105 (expression -> expression operator expression .)
    SWITCH          reduce using rule 105 (expression -> expression operator expression .)
    IF              reduce using rule 105 (expression -> expression operator expression .)
    FUNC            reduce using rule 105 (expression -> expression operator expression .)
    $end            reduce using rule 105 (expression -> expression operator expression .)
    RBRACE          reduce using rule 105 (expression -> expression operator expression .)
    CASE            reduce using rule 105 (expression -> expression operator expression .)
    DEFAULT         reduce using rule 105 (expression -> expression operator expression .)
    RETURN          reduce using rule 105 (expression -> expression operator expression .)
    COMMA           reduce using rule 105 (expression -> expression operator expression .)
    RPAREN          reduce using rule 105 (expression -> expression operator expression .)
    SEMICOLON       reduce using rule 105 (expression -> expression operator expression .)
    COLON           reduce using rule 105 (expression -> expression operator expression .)
    DOT             shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    GT              shift and go to state 81
    LT              shift and go to state 82
    GE              shift and go to state 83
    LE              shift and go to state 84
    AND             shift and go to state 85
    OR              shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    MOD             shift and go to state 91

  ! DOT             [ reduce using rule 105 (expression -> expression operator expression .) ]
  ! EQ              [ reduce using rule 105 (expression -> expression operator expression .) ]
  ! NEQ             [ reduce using rule 105 (expression -> expression operator expression .) ]
  ! GT              [ reduce using rule 105 (expression -> expression operator expression .) ]
  ! LT              [ reduce using rule 105 (expression -> expression operator expression .) ]
  ! GE              [ reduce using rule 105 (expression -> expression operator expression .) ]
  ! LE              [ reduce using rule 105 (expression -> expression operator expression .) ]
  ! AND             [ reduce using rule 105 (expression -> expression operator expression .) ]
  ! OR              [ reduce using rule 105 (expression -> expression operator expression .) ]
  ! PLUS            [ reduce using rule 105 (expression -> expression operator expression .) ]
  ! MINUS           [ reduce using rule 105 (expression -> expression operator expression .) ]
  ! TIMES           [ reduce using rule 105 (expression -> expression operator expression .) ]
  ! DIVIDE          [ reduce using rule 105 (expression -> expression operator expression .) ]
  ! MOD             [ reduce using rule 105 (expression -> expression operator expression .) ]

    operator                       shift and go to state 77
    comparador                     shift and go to state 101
    operadorLogico                 shift and go to state 76

state 121

    (106) expression -> expression DOT IDENTIFIER .

    DOT             reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    EQ              reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    NEQ             reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    GT              reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    LT              reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    GE              reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    LE              reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    AND             reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    OR              reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    PLUS            reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    MINUS           reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    TIMES           reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    DIVIDE          reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    MOD             reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    LBRACE          reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    VAR             reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    TYPE            reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    FOR             reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    PACKAGE         reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    IMPORT          reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    SWITCH          reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    IF              reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    FUNC            reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    $end            reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    RBRACE          reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    CASE            reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    DEFAULT         reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    RETURN          reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    COMMA           reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    RPAREN          reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 106 (expression -> expression DOT IDENTIFIER .)
    COLON           reduce using rule 106 (expression -> expression DOT IDENTIFIER .)


state 122

    (91) shortAssignment -> identifier_list DECLARE_ASSIGN expression .
    (38) expression -> expression . comparador expression
    (39) expression -> expression . operadorLogico expression
    (105) expression -> expression . operator expression
    (106) expression -> expression . DOT IDENTIFIER
    (49) comparador -> . EQ
    (50) comparador -> . NEQ
    (51) comparador -> . GT
    (52) comparador -> . LT
    (53) comparador -> . GE
    (54) comparador -> . LE
    (47) operadorLogico -> . AND
    (48) operadorLogico -> . OR
    (107) operator -> . PLUS
    (108) operator -> . MINUS
    (109) operator -> . TIMES
    (110) operator -> . DIVIDE
    (111) operator -> . MOD

    SEMICOLON       reduce using rule 91 (shortAssignment -> identifier_list DECLARE_ASSIGN expression .)
    DOT             shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    GT              shift and go to state 81
    LT              shift and go to state 82
    GE              shift and go to state 83
    LE              shift and go to state 84
    AND             shift and go to state 85
    OR              shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    MOD             shift and go to state 91

    comparador                     shift and go to state 101
    operadorLogico                 shift and go to state 76
    operator                       shift and go to state 77

state 123

    (95) block -> LBRACE statement_list RBRACE .

    IDENTIFIER      reduce using rule 95 (block -> LBRACE statement_list RBRACE .)
    VAR             reduce using rule 95 (block -> LBRACE statement_list RBRACE .)
    TYPE            reduce using rule 95 (block -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 95 (block -> LBRACE statement_list RBRACE .)
    PACKAGE         reduce using rule 95 (block -> LBRACE statement_list RBRACE .)
    IMPORT          reduce using rule 95 (block -> LBRACE statement_list RBRACE .)
    SWITCH          reduce using rule 95 (block -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 95 (block -> LBRACE statement_list RBRACE .)
    FUNC            reduce using rule 95 (block -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 95 (block -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 95 (block -> LBRACE statement_list RBRACE .)
    CASE            reduce using rule 95 (block -> LBRACE statement_list RBRACE .)
    DEFAULT         reduce using rule 95 (block -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 95 (block -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 95 (block -> LBRACE statement_list RBRACE .)


state 124

    (89) identifier_list -> IDENTIFIER .
    (90) identifier_list -> IDENTIFIER . COMMA identifier_list

    DECLARE_ASSIGN  reduce using rule 89 (identifier_list -> IDENTIFIER .)
    COMMA           shift and go to state 95


state 125

    (90) identifier_list -> IDENTIFIER COMMA identifier_list .

    DECLARE_ASSIGN  reduce using rule 90 (identifier_list -> IDENTIFIER COMMA identifier_list .)


state 126

    (113) expression -> LPAREN expression RPAREN .

    DOT             reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    TYPE            reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    PACKAGE         reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    IMPORT          reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    FUNC            reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    CASE            reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 113 (expression -> LPAREN expression RPAREN .)


state 127

    (24) import -> IMPORT LPAREN import_list RPAREN .

    IDENTIFIER      reduce using rule 24 (import -> IMPORT LPAREN import_list RPAREN .)
    VAR             reduce using rule 24 (import -> IMPORT LPAREN import_list RPAREN .)
    TYPE            reduce using rule 24 (import -> IMPORT LPAREN import_list RPAREN .)
    FOR             reduce using rule 24 (import -> IMPORT LPAREN import_list RPAREN .)
    PACKAGE         reduce using rule 24 (import -> IMPORT LPAREN import_list RPAREN .)
    IMPORT          reduce using rule 24 (import -> IMPORT LPAREN import_list RPAREN .)
    SWITCH          reduce using rule 24 (import -> IMPORT LPAREN import_list RPAREN .)
    IF              reduce using rule 24 (import -> IMPORT LPAREN import_list RPAREN .)
    FUNC            reduce using rule 24 (import -> IMPORT LPAREN import_list RPAREN .)
    $end            reduce using rule 24 (import -> IMPORT LPAREN import_list RPAREN .)
    RBRACE          reduce using rule 24 (import -> IMPORT LPAREN import_list RPAREN .)
    CASE            reduce using rule 24 (import -> IMPORT LPAREN import_list RPAREN .)
    DEFAULT         reduce using rule 24 (import -> IMPORT LPAREN import_list RPAREN .)
    RETURN          reduce using rule 24 (import -> IMPORT LPAREN import_list RPAREN .)


state 128

    (26) import_list -> import_list STRING .

    RPAREN          reduce using rule 26 (import_list -> import_list STRING .)
    STRING          reduce using rule 26 (import_list -> import_list STRING .)


state 129

    (56) switch -> SWITCH expression LBRACE caseBlocks . RBRACE

    RBRACE          shift and go to state 158


state 130

    (57) caseBlocks -> caseBlock .
    (58) caseBlocks -> caseBlock . caseBlocks
    (57) caseBlocks -> . caseBlock
    (58) caseBlocks -> . caseBlock caseBlocks
    (59) caseBlock -> . CASE expression COLON statement_list
    (60) caseBlock -> . DEFAULT COLON statement_list

    RBRACE          reduce using rule 57 (caseBlocks -> caseBlock .)
    CASE            shift and go to state 131
    DEFAULT         shift and go to state 132

    caseBlock                      shift and go to state 130
    caseBlocks                     shift and go to state 159

state 131

    (59) caseBlock -> CASE . expression COLON statement_list
    (38) expression -> . expression comparador expression
    (39) expression -> . expression operadorLogico expression
    (97) expression -> . NUMBER
    (98) expression -> . IDENTIFIER
    (99) expression -> . RUNE
    (100) expression -> . STRING
    (101) expression -> . RAW_STRING
    (102) expression -> . TRUE
    (103) expression -> . FALSE
    (104) expression -> . NIL
    (105) expression -> . expression operator expression
    (106) expression -> . expression DOT IDENTIFIER
    (112) expression -> . MINUS expression
    (113) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 42
    IDENTIFIER      shift and go to state 56
    RUNE            shift and go to state 43
    STRING          shift and go to state 44
    RAW_STRING      shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NIL             shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50

    expression                     shift and go to state 160

state 132

    (60) caseBlock -> DEFAULT . COLON statement_list

    COLON           shift and go to state 161


state 133

    (38) expression -> expression comparador expression .
    (38) expression -> expression . comparador expression
    (39) expression -> expression . operadorLogico expression
    (105) expression -> expression . operator expression
    (106) expression -> expression . DOT IDENTIFIER
    (49) comparador -> . EQ
    (50) comparador -> . NEQ
    (51) comparador -> . GT
    (52) comparador -> . LT
    (53) comparador -> . GE
    (54) comparador -> . LE
    (47) operadorLogico -> . AND
    (48) operadorLogico -> . OR
    (107) operator -> . PLUS
    (108) operator -> . MINUS
    (109) operator -> . TIMES
    (110) operator -> . DIVIDE
    (111) operator -> . MOD

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 38 (expression -> expression comparador expression .)
    IDENTIFIER      reduce using rule 38 (expression -> expression comparador expression .)
    VAR             reduce using rule 38 (expression -> expression comparador expression .)
    TYPE            reduce using rule 38 (expression -> expression comparador expression .)
    FOR             reduce using rule 38 (expression -> expression comparador expression .)
    PACKAGE         reduce using rule 38 (expression -> expression comparador expression .)
    IMPORT          reduce using rule 38 (expression -> expression comparador expression .)
    SWITCH          reduce using rule 38 (expression -> expression comparador expression .)
    IF              reduce using rule 38 (expression -> expression comparador expression .)
    FUNC            reduce using rule 38 (expression -> expression comparador expression .)
    $end            reduce using rule 38 (expression -> expression comparador expression .)
    RBRACE          reduce using rule 38 (expression -> expression comparador expression .)
    CASE            reduce using rule 38 (expression -> expression comparador expression .)
    DEFAULT         reduce using rule 38 (expression -> expression comparador expression .)
    RETURN          reduce using rule 38 (expression -> expression comparador expression .)
    COMMA           reduce using rule 38 (expression -> expression comparador expression .)
    RPAREN          reduce using rule 38 (expression -> expression comparador expression .)
    SEMICOLON       reduce using rule 38 (expression -> expression comparador expression .)
    COLON           reduce using rule 38 (expression -> expression comparador expression .)
    DOT             shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    GT              shift and go to state 81
    LT              shift and go to state 82
    GE              shift and go to state 83
    LE              shift and go to state 84
    AND             shift and go to state 85
    OR              shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    MOD             shift and go to state 91

  ! DOT             [ reduce using rule 38 (expression -> expression comparador expression .) ]
  ! EQ              [ reduce using rule 38 (expression -> expression comparador expression .) ]
  ! NEQ             [ reduce using rule 38 (expression -> expression comparador expression .) ]
  ! GT              [ reduce using rule 38 (expression -> expression comparador expression .) ]
  ! LT              [ reduce using rule 38 (expression -> expression comparador expression .) ]
  ! GE              [ reduce using rule 38 (expression -> expression comparador expression .) ]
  ! LE              [ reduce using rule 38 (expression -> expression comparador expression .) ]
  ! AND             [ reduce using rule 38 (expression -> expression comparador expression .) ]
  ! OR              [ reduce using rule 38 (expression -> expression comparador expression .) ]
  ! PLUS            [ reduce using rule 38 (expression -> expression comparador expression .) ]
  ! MINUS           [ reduce using rule 38 (expression -> expression comparador expression .) ]
  ! TIMES           [ reduce using rule 38 (expression -> expression comparador expression .) ]
  ! DIVIDE          [ reduce using rule 38 (expression -> expression comparador expression .) ]
  ! MOD             [ reduce using rule 38 (expression -> expression comparador expression .) ]

    comparador                     shift and go to state 101
    operadorLogico                 shift and go to state 76
    operator                       shift and go to state 77

state 134

    (115) if_statement -> IF condicion_compleja block ELSE . block
    (95) block -> . LBRACE statement_list RBRACE
    (96) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 40

    block                          shift and go to state 162

state 135

    (45) condicion_compleja -> condicion operadorLogico condicion .
    (45) condicion_compleja -> condicion . operadorLogico condicion
    (46) condicion_compleja -> condicion . operadorLogico condicion_compleja
    (47) operadorLogico -> . AND
    (48) operadorLogico -> . OR

    LBRACE          reduce using rule 45 (condicion_compleja -> condicion operadorLogico condicion .)
    AND             shift and go to state 85
    OR              shift and go to state 86

    operadorLogico                 shift and go to state 103

state 136

    (46) condicion_compleja -> condicion operadorLogico condicion_compleja .

    LBRACE          reduce using rule 46 (condicion_compleja -> condicion operadorLogico condicion_compleja .)


state 137

    (79) param -> IDENTIFIER . type_name
    (80) type_name -> . DATATYPE
    (81) type_name -> . IDENTIFIER

    DATATYPE        shift and go to state 165
    IDENTIFIER      shift and go to state 163

    type_name                      shift and go to state 164

state 138

    (69) function -> FUNC IDENTIFIER LPAREN params_opt . RPAREN block
    (70) function -> FUNC IDENTIFIER LPAREN params_opt . RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE

    RPAREN          shift and go to state 166


state 139

    (75) params_opt -> params .

    RPAREN          reduce using rule 75 (params_opt -> params .)


state 140

    (77) params -> param .
    (78) params -> param . COMMA params

    RPAREN          reduce using rule 77 (params -> param .)
    COMMA           shift and go to state 167


state 141

    (121) parameter -> IDENTIFIER FUNC . LPAREN parameters RPAREN DATATYPE

    LPAREN          shift and go to state 168


state 142

    (87) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER . RPAREN IDENTIFIER LPAREN arguments RPAREN block

    RPAREN          shift and go to state 169


state 143

    (120) parameter -> IDENTIFIER DATATYPE .

    RPAREN          reduce using rule 120 (parameter -> IDENTIFIER DATATYPE .)
    COMMA           reduce using rule 120 (parameter -> IDENTIFIER DATATYPE .)


state 144

    (116) function_literal -> FUNC LPAREN parameters RPAREN . return_type block
    (122) return_type -> . DATATYPE
    (123) return_type -> . empty
    (124) return_type -> . LPAREN DATATYPE COMMA return_type RPAREN
    (55) empty -> .

    DATATYPE        shift and go to state 172
    LPAREN          shift and go to state 170
    LBRACE          reduce using rule 55 (empty -> .)

    return_type                    shift and go to state 171
    empty                          shift and go to state 173

state 145

    (117) parameters -> parameters COMMA . parameter
    (120) parameter -> . IDENTIFIER DATATYPE
    (121) parameter -> . IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE

    IDENTIFIER      shift and go to state 175

    parameter                      shift and go to state 174

state 146

    (73) function -> FUNC MAIN LPAREN params_opt . RPAREN block

    RPAREN          shift and go to state 176


state 147

    (63) mapLiteral -> MAP LBRACKET DATATYPE . RBRACKET DATATYPE LBRACE mapEntries RBRACE

    RBRACKET        shift and go to state 177


state 148

    (31) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND . IDENTIFIER RPAREN

    IDENTIFIER      shift and go to state 178


state 149

    (82) print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 179


state 150

    (41) argument_list -> argument_list COMMA expression .
    (38) expression -> expression . comparador expression
    (39) expression -> expression . operadorLogico expression
    (105) expression -> expression . operator expression
    (106) expression -> expression . DOT IDENTIFIER
    (49) comparador -> . EQ
    (50) comparador -> . NEQ
    (51) comparador -> . GT
    (52) comparador -> . LT
    (53) comparador -> . GE
    (54) comparador -> . LE
    (47) operadorLogico -> . AND
    (48) operadorLogico -> . OR
    (107) operator -> . PLUS
    (108) operator -> . MINUS
    (109) operator -> . TIMES
    (110) operator -> . DIVIDE
    (111) operator -> . MOD

    COMMA           reduce using rule 41 (argument_list -> argument_list COMMA expression .)
    RPAREN          reduce using rule 41 (argument_list -> argument_list COMMA expression .)
    DOT             shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    GT              shift and go to state 81
    LT              shift and go to state 82
    GE              shift and go to state 83
    LE              shift and go to state 84
    AND             shift and go to state 85
    OR              shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    MOD             shift and go to state 91

    comparador                     shift and go to state 101
    operadorLogico                 shift and go to state 76
    operator                       shift and go to state 77

state 151

    (98) expression -> IDENTIFIER .
    (37) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN

    DOT             reduce using rule 98 (expression -> IDENTIFIER .)
    EQ              reduce using rule 98 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 98 (expression -> IDENTIFIER .)
    GT              reduce using rule 98 (expression -> IDENTIFIER .)
    LT              reduce using rule 98 (expression -> IDENTIFIER .)
    GE              reduce using rule 98 (expression -> IDENTIFIER .)
    LE              reduce using rule 98 (expression -> IDENTIFIER .)
    AND             reduce using rule 98 (expression -> IDENTIFIER .)
    OR              reduce using rule 98 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 98 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 98 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 98 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 98 (expression -> IDENTIFIER .)
    MOD             reduce using rule 98 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 98 (expression -> IDENTIFIER .)
    VAR             reduce using rule 98 (expression -> IDENTIFIER .)
    TYPE            reduce using rule 98 (expression -> IDENTIFIER .)
    FOR             reduce using rule 98 (expression -> IDENTIFIER .)
    PACKAGE         reduce using rule 98 (expression -> IDENTIFIER .)
    IMPORT          reduce using rule 98 (expression -> IDENTIFIER .)
    SWITCH          reduce using rule 98 (expression -> IDENTIFIER .)
    IF              reduce using rule 98 (expression -> IDENTIFIER .)
    FUNC            reduce using rule 98 (expression -> IDENTIFIER .)
    $end            reduce using rule 98 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 98 (expression -> IDENTIFIER .)
    CASE            reduce using rule 98 (expression -> IDENTIFIER .)
    DEFAULT         reduce using rule 98 (expression -> IDENTIFIER .)
    RETURN          reduce using rule 98 (expression -> IDENTIFIER .)
    LPAREN          shift and go to state 32


state 152

    (34) assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .
    (38) expression -> expression . comparador expression
    (39) expression -> expression . operadorLogico expression
    (105) expression -> expression . operator expression
    (106) expression -> expression . DOT IDENTIFIER
    (49) comparador -> . EQ
    (50) comparador -> . NEQ
    (51) comparador -> . GT
    (52) comparador -> . LT
    (53) comparador -> . GE
    (54) comparador -> . LE
    (47) operadorLogico -> . AND
    (48) operadorLogico -> . OR
    (107) operator -> . PLUS
    (108) operator -> . MINUS
    (109) operator -> . TIMES
    (110) operator -> . DIVIDE
    (111) operator -> . MOD

    IDENTIFIER      reduce using rule 34 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    VAR             reduce using rule 34 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    TYPE            reduce using rule 34 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    FOR             reduce using rule 34 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    PACKAGE         reduce using rule 34 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    IMPORT          reduce using rule 34 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    SWITCH          reduce using rule 34 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    IF              reduce using rule 34 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    FUNC            reduce using rule 34 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    $end            reduce using rule 34 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    RBRACE          reduce using rule 34 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    CASE            reduce using rule 34 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    DEFAULT         reduce using rule 34 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    RETURN          reduce using rule 34 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    DOT             shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    GT              shift and go to state 81
    LT              shift and go to state 82
    GE              shift and go to state 83
    LE              shift and go to state 84
    AND             shift and go to state 85
    OR              shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    MOD             shift and go to state 91

    comparador                     shift and go to state 101
    operadorLogico                 shift and go to state 76
    operator                       shift and go to state 77

state 153

    (35) assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .

    IDENTIFIER      reduce using rule 35 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    VAR             reduce using rule 35 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    TYPE            reduce using rule 35 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    FOR             reduce using rule 35 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    PACKAGE         reduce using rule 35 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    IMPORT          reduce using rule 35 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    SWITCH          reduce using rule 35 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    IF              reduce using rule 35 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    FUNC            reduce using rule 35 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    $end            reduce using rule 35 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    RBRACE          reduce using rule 35 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    CASE            reduce using rule 35 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    DEFAULT         reduce using rule 35 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    RETURN          reduce using rule 35 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)


state 154

    (84) struct_field -> IDENTIFIER . DATATYPE

    DATATYPE        shift and go to state 180


state 155

    (83) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields . RBRACE
    (86) struct_fields -> struct_fields . struct_field
    (84) struct_field -> . IDENTIFIER DATATYPE

    RBRACE          shift and go to state 181
    IDENTIFIER      shift and go to state 154

    struct_field                   shift and go to state 182

state 156

    (85) struct_fields -> struct_field .

    RBRACE          reduce using rule 85 (struct_fields -> struct_field .)
    IDENTIFIER      reduce using rule 85 (struct_fields -> struct_field .)


state 157

    (88) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON . expression block
    (38) expression -> . expression comparador expression
    (39) expression -> . expression operadorLogico expression
    (97) expression -> . NUMBER
    (98) expression -> . IDENTIFIER
    (99) expression -> . RUNE
    (100) expression -> . STRING
    (101) expression -> . RAW_STRING
    (102) expression -> . TRUE
    (103) expression -> . FALSE
    (104) expression -> . NIL
    (105) expression -> . expression operator expression
    (106) expression -> . expression DOT IDENTIFIER
    (112) expression -> . MINUS expression
    (113) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 42
    IDENTIFIER      shift and go to state 56
    RUNE            shift and go to state 43
    STRING          shift and go to state 44
    RAW_STRING      shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NIL             shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50

    expression                     shift and go to state 183

state 158

    (56) switch -> SWITCH expression LBRACE caseBlocks RBRACE .

    IDENTIFIER      reduce using rule 56 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    VAR             reduce using rule 56 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    TYPE            reduce using rule 56 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    FOR             reduce using rule 56 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    PACKAGE         reduce using rule 56 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    IMPORT          reduce using rule 56 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    SWITCH          reduce using rule 56 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    IF              reduce using rule 56 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    FUNC            reduce using rule 56 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    $end            reduce using rule 56 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    RBRACE          reduce using rule 56 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    CASE            reduce using rule 56 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    DEFAULT         reduce using rule 56 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    RETURN          reduce using rule 56 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)


state 159

    (58) caseBlocks -> caseBlock caseBlocks .

    RBRACE          reduce using rule 58 (caseBlocks -> caseBlock caseBlocks .)


state 160

    (59) caseBlock -> CASE expression . COLON statement_list
    (38) expression -> expression . comparador expression
    (39) expression -> expression . operadorLogico expression
    (105) expression -> expression . operator expression
    (106) expression -> expression . DOT IDENTIFIER
    (49) comparador -> . EQ
    (50) comparador -> . NEQ
    (51) comparador -> . GT
    (52) comparador -> . LT
    (53) comparador -> . GE
    (54) comparador -> . LE
    (47) operadorLogico -> . AND
    (48) operadorLogico -> . OR
    (107) operator -> . PLUS
    (108) operator -> . MINUS
    (109) operator -> . TIMES
    (110) operator -> . DIVIDE
    (111) operator -> . MOD

    COLON           shift and go to state 184
    DOT             shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    GT              shift and go to state 81
    LT              shift and go to state 82
    GE              shift and go to state 83
    LE              shift and go to state 84
    AND             shift and go to state 85
    OR              shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    MOD             shift and go to state 91

    comparador                     shift and go to state 101
    operadorLogico                 shift and go to state 76
    operator                       shift and go to state 77

state 161

    (60) caseBlock -> DEFAULT COLON . statement_list
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (33) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (34) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (35) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (31) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (37) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (82) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (83) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (88) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (92) for_statement -> . FOR condicion block
    (93) for_statement -> . FOR block
    (21) package -> . PACKAGE MAIN
    (22) package -> . PACKAGE IDENTIFIER
    (23) import -> . IMPORT STRING
    (24) import -> . IMPORT LPAREN import_list RPAREN
    (56) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (61) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (62) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (114) if_statement -> . IF condicion_compleja block
    (115) if_statement -> . IF condicion_compleja block ELSE block
    (69) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (70) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (73) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (87) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (116) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (32) var_declaration -> . VAR IDENTIFIER DATATYPE

    IDENTIFIER      shift and go to state 19
    VAR             shift and go to state 20
    TYPE            shift and go to state 21
    FOR             shift and go to state 22
    PACKAGE         shift and go to state 23
    IMPORT          shift and go to state 24
    SWITCH          shift and go to state 25
    IF              shift and go to state 26
    FUNC            shift and go to state 27

    statement_list                 shift and go to state 185
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18

state 162

    (115) if_statement -> IF condicion_compleja block ELSE block .

    IDENTIFIER      reduce using rule 115 (if_statement -> IF condicion_compleja block ELSE block .)
    VAR             reduce using rule 115 (if_statement -> IF condicion_compleja block ELSE block .)
    TYPE            reduce using rule 115 (if_statement -> IF condicion_compleja block ELSE block .)
    FOR             reduce using rule 115 (if_statement -> IF condicion_compleja block ELSE block .)
    PACKAGE         reduce using rule 115 (if_statement -> IF condicion_compleja block ELSE block .)
    IMPORT          reduce using rule 115 (if_statement -> IF condicion_compleja block ELSE block .)
    SWITCH          reduce using rule 115 (if_statement -> IF condicion_compleja block ELSE block .)
    IF              reduce using rule 115 (if_statement -> IF condicion_compleja block ELSE block .)
    FUNC            reduce using rule 115 (if_statement -> IF condicion_compleja block ELSE block .)
    $end            reduce using rule 115 (if_statement -> IF condicion_compleja block ELSE block .)
    RBRACE          reduce using rule 115 (if_statement -> IF condicion_compleja block ELSE block .)
    CASE            reduce using rule 115 (if_statement -> IF condicion_compleja block ELSE block .)
    DEFAULT         reduce using rule 115 (if_statement -> IF condicion_compleja block ELSE block .)
    RETURN          reduce using rule 115 (if_statement -> IF condicion_compleja block ELSE block .)


state 163

    (81) type_name -> IDENTIFIER .

    COMMA           reduce using rule 81 (type_name -> IDENTIFIER .)
    RPAREN          reduce using rule 81 (type_name -> IDENTIFIER .)


state 164

    (79) param -> IDENTIFIER type_name .

    COMMA           reduce using rule 79 (param -> IDENTIFIER type_name .)
    RPAREN          reduce using rule 79 (param -> IDENTIFIER type_name .)


state 165

    (80) type_name -> DATATYPE .

    COMMA           reduce using rule 80 (type_name -> DATATYPE .)
    RPAREN          reduce using rule 80 (type_name -> DATATYPE .)


state 166

    (69) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN . block
    (70) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN . return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (95) block -> . LBRACE statement_list RBRACE
    (96) block -> . LBRACE RBRACE
    (122) return_type -> . DATATYPE
    (123) return_type -> . empty
    (124) return_type -> . LPAREN DATATYPE COMMA return_type RPAREN
    (55) empty -> .

  ! shift/reduce conflict for LBRACE resolved as shift
    LBRACE          shift and go to state 40
    DATATYPE        shift and go to state 172
    LPAREN          shift and go to state 170

  ! LBRACE          [ reduce using rule 55 (empty -> .) ]

    block                          shift and go to state 186
    return_type                    shift and go to state 187
    empty                          shift and go to state 173

state 167

    (78) params -> param COMMA . params
    (77) params -> . param
    (78) params -> . param COMMA params
    (79) param -> . IDENTIFIER type_name

    IDENTIFIER      shift and go to state 137

    param                          shift and go to state 140
    params                         shift and go to state 188

state 168

    (121) parameter -> IDENTIFIER FUNC LPAREN . parameters RPAREN DATATYPE
    (117) parameters -> . parameters COMMA parameter
    (118) parameters -> . parameter
    (119) parameters -> . empty
    (120) parameter -> . IDENTIFIER DATATYPE
    (121) parameter -> . IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE
    (55) empty -> .

    IDENTIFIER      shift and go to state 175
    RPAREN          reduce using rule 55 (empty -> .)
    COMMA           reduce using rule 55 (empty -> .)

    parameters                     shift and go to state 189
    parameter                      shift and go to state 107
    empty                          shift and go to state 108

state 169

    (87) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN . IDENTIFIER LPAREN arguments RPAREN block

    IDENTIFIER      shift and go to state 190


state 170

    (124) return_type -> LPAREN . DATATYPE COMMA return_type RPAREN

    DATATYPE        shift and go to state 191


state 171

    (116) function_literal -> FUNC LPAREN parameters RPAREN return_type . block
    (95) block -> . LBRACE statement_list RBRACE
    (96) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 40

    block                          shift and go to state 192

state 172

    (122) return_type -> DATATYPE .

    LBRACE          reduce using rule 122 (return_type -> DATATYPE .)
    RPAREN          reduce using rule 122 (return_type -> DATATYPE .)


state 173

    (123) return_type -> empty .

    LBRACE          reduce using rule 123 (return_type -> empty .)
    RPAREN          reduce using rule 123 (return_type -> empty .)


state 174

    (117) parameters -> parameters COMMA parameter .

    RPAREN          reduce using rule 117 (parameters -> parameters COMMA parameter .)
    COMMA           reduce using rule 117 (parameters -> parameters COMMA parameter .)


state 175

    (120) parameter -> IDENTIFIER . DATATYPE
    (121) parameter -> IDENTIFIER . FUNC LPAREN parameters RPAREN DATATYPE

    DATATYPE        shift and go to state 143
    FUNC            shift and go to state 141


state 176

    (73) function -> FUNC MAIN LPAREN params_opt RPAREN . block
    (95) block -> . LBRACE statement_list RBRACE
    (96) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 40

    block                          shift and go to state 193

state 177

    (63) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET . DATATYPE LBRACE mapEntries RBRACE

    DATATYPE        shift and go to state 194


state 178

    (31) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER . RPAREN

    RPAREN          shift and go to state 195


state 179

    (82) print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .

    IDENTIFIER      reduce using rule 82 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    VAR             reduce using rule 82 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TYPE            reduce using rule 82 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FOR             reduce using rule 82 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PACKAGE         reduce using rule 82 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IMPORT          reduce using rule 82 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SWITCH          reduce using rule 82 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IF              reduce using rule 82 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FUNC            reduce using rule 82 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    $end            reduce using rule 82 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 82 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    CASE            reduce using rule 82 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DEFAULT         reduce using rule 82 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RETURN          reduce using rule 82 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)


state 180

    (84) struct_field -> IDENTIFIER DATATYPE .

    RBRACE          reduce using rule 84 (struct_field -> IDENTIFIER DATATYPE .)
    IDENTIFIER      reduce using rule 84 (struct_field -> IDENTIFIER DATATYPE .)


state 181

    (83) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .

    IDENTIFIER      reduce using rule 83 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    VAR             reduce using rule 83 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    TYPE            reduce using rule 83 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    FOR             reduce using rule 83 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    PACKAGE         reduce using rule 83 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    IMPORT          reduce using rule 83 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    SWITCH          reduce using rule 83 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    IF              reduce using rule 83 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    FUNC            reduce using rule 83 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    $end            reduce using rule 83 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    RBRACE          reduce using rule 83 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    CASE            reduce using rule 83 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    DEFAULT         reduce using rule 83 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    RETURN          reduce using rule 83 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)


state 182

    (86) struct_fields -> struct_fields struct_field .

    RBRACE          reduce using rule 86 (struct_fields -> struct_fields struct_field .)
    IDENTIFIER      reduce using rule 86 (struct_fields -> struct_fields struct_field .)


state 183

    (88) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression . block
    (38) expression -> expression . comparador expression
    (39) expression -> expression . operadorLogico expression
    (105) expression -> expression . operator expression
    (106) expression -> expression . DOT IDENTIFIER
    (95) block -> . LBRACE statement_list RBRACE
    (96) block -> . LBRACE RBRACE
    (49) comparador -> . EQ
    (50) comparador -> . NEQ
    (51) comparador -> . GT
    (52) comparador -> . LT
    (53) comparador -> . GE
    (54) comparador -> . LE
    (47) operadorLogico -> . AND
    (48) operadorLogico -> . OR
    (107) operator -> . PLUS
    (108) operator -> . MINUS
    (109) operator -> . TIMES
    (110) operator -> . DIVIDE
    (111) operator -> . MOD

    DOT             shift and go to state 78
    LBRACE          shift and go to state 40
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    GT              shift and go to state 81
    LT              shift and go to state 82
    GE              shift and go to state 83
    LE              shift and go to state 84
    AND             shift and go to state 85
    OR              shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    MOD             shift and go to state 91

    block                          shift and go to state 196
    comparador                     shift and go to state 101
    operadorLogico                 shift and go to state 76
    operator                       shift and go to state 77

state 184

    (59) caseBlock -> CASE expression COLON . statement_list
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (33) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (34) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (35) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (31) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (37) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (82) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (83) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (88) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (92) for_statement -> . FOR condicion block
    (93) for_statement -> . FOR block
    (21) package -> . PACKAGE MAIN
    (22) package -> . PACKAGE IDENTIFIER
    (23) import -> . IMPORT STRING
    (24) import -> . IMPORT LPAREN import_list RPAREN
    (56) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (61) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (62) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (114) if_statement -> . IF condicion_compleja block
    (115) if_statement -> . IF condicion_compleja block ELSE block
    (69) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (70) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (73) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (87) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (116) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (32) var_declaration -> . VAR IDENTIFIER DATATYPE

    IDENTIFIER      shift and go to state 19
    VAR             shift and go to state 20
    TYPE            shift and go to state 21
    FOR             shift and go to state 22
    PACKAGE         shift and go to state 23
    IMPORT          shift and go to state 24
    SWITCH          shift and go to state 25
    IF              shift and go to state 26
    FUNC            shift and go to state 27

    statement_list                 shift and go to state 197
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18

state 185

    (60) caseBlock -> DEFAULT COLON statement_list .
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (33) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (34) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (35) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (31) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (37) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (82) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (83) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (88) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (92) for_statement -> . FOR condicion block
    (93) for_statement -> . FOR block
    (21) package -> . PACKAGE MAIN
    (22) package -> . PACKAGE IDENTIFIER
    (23) import -> . IMPORT STRING
    (24) import -> . IMPORT LPAREN import_list RPAREN
    (56) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (61) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (62) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (114) if_statement -> . IF condicion_compleja block
    (115) if_statement -> . IF condicion_compleja block ELSE block
    (69) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (70) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (73) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (87) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (116) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (32) var_declaration -> . VAR IDENTIFIER DATATYPE

    CASE            reduce using rule 60 (caseBlock -> DEFAULT COLON statement_list .)
    DEFAULT         reduce using rule 60 (caseBlock -> DEFAULT COLON statement_list .)
    RBRACE          reduce using rule 60 (caseBlock -> DEFAULT COLON statement_list .)
    IDENTIFIER      shift and go to state 19
    VAR             shift and go to state 20
    TYPE            shift and go to state 21
    FOR             shift and go to state 22
    PACKAGE         shift and go to state 23
    IMPORT          shift and go to state 24
    SWITCH          shift and go to state 25
    IF              shift and go to state 26
    FUNC            shift and go to state 27

    statement                      shift and go to state 28
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18

state 186

    (69) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .

    IDENTIFIER      reduce using rule 69 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    VAR             reduce using rule 69 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    TYPE            reduce using rule 69 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    FOR             reduce using rule 69 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    PACKAGE         reduce using rule 69 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    IMPORT          reduce using rule 69 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    SWITCH          reduce using rule 69 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    IF              reduce using rule 69 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    FUNC            reduce using rule 69 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    $end            reduce using rule 69 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    RBRACE          reduce using rule 69 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    CASE            reduce using rule 69 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    DEFAULT         reduce using rule 69 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    RETURN          reduce using rule 69 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)


state 187

    (70) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type . LBRACE statement_list_opt RETURN return_values RBRACE

    LBRACE          shift and go to state 198


state 188

    (78) params -> param COMMA params .

    RPAREN          reduce using rule 78 (params -> param COMMA params .)


state 189

    (121) parameter -> IDENTIFIER FUNC LPAREN parameters . RPAREN DATATYPE
    (117) parameters -> parameters . COMMA parameter

    RPAREN          shift and go to state 199
    COMMA           shift and go to state 145


state 190

    (87) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER . LPAREN arguments RPAREN block

    LPAREN          shift and go to state 200


state 191

    (124) return_type -> LPAREN DATATYPE . COMMA return_type RPAREN

    COMMA           shift and go to state 201


state 192

    (116) function_literal -> FUNC LPAREN parameters RPAREN return_type block .

    IDENTIFIER      reduce using rule 116 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    VAR             reduce using rule 116 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    TYPE            reduce using rule 116 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    FOR             reduce using rule 116 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    PACKAGE         reduce using rule 116 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    IMPORT          reduce using rule 116 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    SWITCH          reduce using rule 116 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    IF              reduce using rule 116 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    FUNC            reduce using rule 116 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    $end            reduce using rule 116 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    RBRACE          reduce using rule 116 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    CASE            reduce using rule 116 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    DEFAULT         reduce using rule 116 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    RETURN          reduce using rule 116 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)


state 193

    (73) function -> FUNC MAIN LPAREN params_opt RPAREN block .

    IDENTIFIER      reduce using rule 73 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    VAR             reduce using rule 73 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    TYPE            reduce using rule 73 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    FOR             reduce using rule 73 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    PACKAGE         reduce using rule 73 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    IMPORT          reduce using rule 73 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    SWITCH          reduce using rule 73 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    IF              reduce using rule 73 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    FUNC            reduce using rule 73 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    $end            reduce using rule 73 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    RBRACE          reduce using rule 73 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    CASE            reduce using rule 73 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    DEFAULT         reduce using rule 73 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    RETURN          reduce using rule 73 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)


state 194

    (63) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE . LBRACE mapEntries RBRACE

    LBRACE          shift and go to state 202


state 195

    (31) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .

    IDENTIFIER      reduce using rule 31 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    VAR             reduce using rule 31 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    TYPE            reduce using rule 31 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    FOR             reduce using rule 31 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    PACKAGE         reduce using rule 31 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    IMPORT          reduce using rule 31 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    SWITCH          reduce using rule 31 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    IF              reduce using rule 31 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    FUNC            reduce using rule 31 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    $end            reduce using rule 31 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    RBRACE          reduce using rule 31 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    CASE            reduce using rule 31 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    DEFAULT         reduce using rule 31 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    RETURN          reduce using rule 31 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)


state 196

    (88) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .

    IDENTIFIER      reduce using rule 88 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    VAR             reduce using rule 88 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    TYPE            reduce using rule 88 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    FOR             reduce using rule 88 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    PACKAGE         reduce using rule 88 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    IMPORT          reduce using rule 88 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    SWITCH          reduce using rule 88 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    IF              reduce using rule 88 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    FUNC            reduce using rule 88 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    $end            reduce using rule 88 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    RBRACE          reduce using rule 88 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    CASE            reduce using rule 88 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    DEFAULT         reduce using rule 88 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    RETURN          reduce using rule 88 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)


state 197

    (59) caseBlock -> CASE expression COLON statement_list .
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (33) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (34) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (35) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (31) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (37) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (82) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (83) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (88) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (92) for_statement -> . FOR condicion block
    (93) for_statement -> . FOR block
    (21) package -> . PACKAGE MAIN
    (22) package -> . PACKAGE IDENTIFIER
    (23) import -> . IMPORT STRING
    (24) import -> . IMPORT LPAREN import_list RPAREN
    (56) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (61) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (62) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (114) if_statement -> . IF condicion_compleja block
    (115) if_statement -> . IF condicion_compleja block ELSE block
    (69) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (70) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (73) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (87) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (116) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (32) var_declaration -> . VAR IDENTIFIER DATATYPE

    CASE            reduce using rule 59 (caseBlock -> CASE expression COLON statement_list .)
    DEFAULT         reduce using rule 59 (caseBlock -> CASE expression COLON statement_list .)
    RBRACE          reduce using rule 59 (caseBlock -> CASE expression COLON statement_list .)
    IDENTIFIER      shift and go to state 19
    VAR             shift and go to state 20
    TYPE            shift and go to state 21
    FOR             shift and go to state 22
    PACKAGE         shift and go to state 23
    IMPORT          shift and go to state 24
    SWITCH          shift and go to state 25
    IF              shift and go to state 26
    FUNC            shift and go to state 27

    statement                      shift and go to state 28
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18

state 198

    (70) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE . statement_list_opt RETURN return_values RBRACE
    (2) statement_list_opt -> . statement_list
    (3) statement_list_opt -> .
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (33) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (34) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (35) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (31) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (37) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (82) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (83) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (88) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (92) for_statement -> . FOR condicion block
    (93) for_statement -> . FOR block
    (21) package -> . PACKAGE MAIN
    (22) package -> . PACKAGE IDENTIFIER
    (23) import -> . IMPORT STRING
    (24) import -> . IMPORT LPAREN import_list RPAREN
    (56) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (61) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (62) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (114) if_statement -> . IF condicion_compleja block
    (115) if_statement -> . IF condicion_compleja block ELSE block
    (69) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (70) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (73) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (87) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (116) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (32) var_declaration -> . VAR IDENTIFIER DATATYPE

    RETURN          reduce using rule 3 (statement_list_opt -> .)
    IDENTIFIER      shift and go to state 19
    VAR             shift and go to state 20
    TYPE            shift and go to state 21
    FOR             shift and go to state 22
    PACKAGE         shift and go to state 23
    IMPORT          shift and go to state 24
    SWITCH          shift and go to state 25
    IF              shift and go to state 26
    FUNC            shift and go to state 27

    statement_list_opt             shift and go to state 203
    statement_list                 shift and go to state 204
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18

state 199

    (121) parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN . DATATYPE

    DATATYPE        shift and go to state 205


state 200

    (87) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN . arguments RPAREN block
    (27) arguments -> . expression
    (28) arguments -> . arguments COMMA expression
    (29) arguments -> .
    (38) expression -> . expression comparador expression
    (39) expression -> . expression operadorLogico expression
    (97) expression -> . NUMBER
    (98) expression -> . IDENTIFIER
    (99) expression -> . RUNE
    (100) expression -> . STRING
    (101) expression -> . RAW_STRING
    (102) expression -> . TRUE
    (103) expression -> . FALSE
    (104) expression -> . NIL
    (105) expression -> . expression operator expression
    (106) expression -> . expression DOT IDENTIFIER
    (112) expression -> . MINUS expression
    (113) expression -> . LPAREN expression RPAREN

    RPAREN          reduce using rule 29 (arguments -> .)
    COMMA           reduce using rule 29 (arguments -> .)
    NUMBER          shift and go to state 42
    IDENTIFIER      shift and go to state 56
    RUNE            shift and go to state 43
    STRING          shift and go to state 44
    RAW_STRING      shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NIL             shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50

    arguments                      shift and go to state 206
    expression                     shift and go to state 207

state 201

    (124) return_type -> LPAREN DATATYPE COMMA . return_type RPAREN
    (122) return_type -> . DATATYPE
    (123) return_type -> . empty
    (124) return_type -> . LPAREN DATATYPE COMMA return_type RPAREN
    (55) empty -> .

    DATATYPE        shift and go to state 172
    LPAREN          shift and go to state 170
    RPAREN          reduce using rule 55 (empty -> .)

    return_type                    shift and go to state 208
    empty                          shift and go to state 173

state 202

    (63) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE . mapEntries RBRACE
    (64) mapEntries -> . mapEntry
    (65) mapEntries -> . mapEntry COMMA mapEntries
    (66) mapEntry -> . value_key COLON value_key
    (67) value_key -> . expression
    (68) value_key -> . STRING
    (38) expression -> . expression comparador expression
    (39) expression -> . expression operadorLogico expression
    (97) expression -> . NUMBER
    (98) expression -> . IDENTIFIER
    (99) expression -> . RUNE
    (100) expression -> . STRING
    (101) expression -> . RAW_STRING
    (102) expression -> . TRUE
    (103) expression -> . FALSE
    (104) expression -> . NIL
    (105) expression -> . expression operator expression
    (106) expression -> . expression DOT IDENTIFIER
    (112) expression -> . MINUS expression
    (113) expression -> . LPAREN expression RPAREN

    STRING          shift and go to state 213
    NUMBER          shift and go to state 42
    IDENTIFIER      shift and go to state 56
    RUNE            shift and go to state 43
    RAW_STRING      shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NIL             shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50

    mapEntries                     shift and go to state 209
    mapEntry                       shift and go to state 210
    value_key                      shift and go to state 211
    expression                     shift and go to state 212

state 203

    (70) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt . RETURN return_values RBRACE

    RETURN          shift and go to state 214


state 204

    (2) statement_list_opt -> statement_list .
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . print_statement
    (10) statement -> . struct_definition
    (11) statement -> . for_statement
    (12) statement -> . package
    (13) statement -> . import
    (14) statement -> . switch
    (15) statement -> . map
    (16) statement -> . if_statement
    (17) statement -> . function
    (18) statement -> . method_definition
    (19) statement -> . function_literal
    (20) statement -> . var_declaration
    (33) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (34) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (35) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (31) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (37) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (82) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (83) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (88) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (92) for_statement -> . FOR condicion block
    (93) for_statement -> . FOR block
    (21) package -> . PACKAGE MAIN
    (22) package -> . PACKAGE IDENTIFIER
    (23) import -> . IMPORT STRING
    (24) import -> . IMPORT LPAREN import_list RPAREN
    (56) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (61) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (62) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (114) if_statement -> . IF condicion_compleja block
    (115) if_statement -> . IF condicion_compleja block ELSE block
    (69) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (70) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (73) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (87) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (116) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (32) var_declaration -> . VAR IDENTIFIER DATATYPE

    RETURN          reduce using rule 2 (statement_list_opt -> statement_list .)
    IDENTIFIER      shift and go to state 19
    VAR             shift and go to state 20
    TYPE            shift and go to state 21
    FOR             shift and go to state 22
    PACKAGE         shift and go to state 23
    IMPORT          shift and go to state 24
    SWITCH          shift and go to state 25
    IF              shift and go to state 26
    FUNC            shift and go to state 27

    statement                      shift and go to state 28
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18

state 205

    (121) parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE .

    RPAREN          reduce using rule 121 (parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE .)
    COMMA           reduce using rule 121 (parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE .)


state 206

    (87) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments . RPAREN block
    (28) arguments -> arguments . COMMA expression

    RPAREN          shift and go to state 215
    COMMA           shift and go to state 216


state 207

    (27) arguments -> expression .
    (38) expression -> expression . comparador expression
    (39) expression -> expression . operadorLogico expression
    (105) expression -> expression . operator expression
    (106) expression -> expression . DOT IDENTIFIER
    (49) comparador -> . EQ
    (50) comparador -> . NEQ
    (51) comparador -> . GT
    (52) comparador -> . LT
    (53) comparador -> . GE
    (54) comparador -> . LE
    (47) operadorLogico -> . AND
    (48) operadorLogico -> . OR
    (107) operator -> . PLUS
    (108) operator -> . MINUS
    (109) operator -> . TIMES
    (110) operator -> . DIVIDE
    (111) operator -> . MOD

    RPAREN          reduce using rule 27 (arguments -> expression .)
    COMMA           reduce using rule 27 (arguments -> expression .)
    DOT             shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    GT              shift and go to state 81
    LT              shift and go to state 82
    GE              shift and go to state 83
    LE              shift and go to state 84
    AND             shift and go to state 85
    OR              shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    MOD             shift and go to state 91

    comparador                     shift and go to state 101
    operadorLogico                 shift and go to state 76
    operator                       shift and go to state 77

state 208

    (124) return_type -> LPAREN DATATYPE COMMA return_type . RPAREN

    RPAREN          shift and go to state 217


state 209

    (63) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries . RBRACE

    RBRACE          shift and go to state 218


state 210

    (64) mapEntries -> mapEntry .
    (65) mapEntries -> mapEntry . COMMA mapEntries

    RBRACE          reduce using rule 64 (mapEntries -> mapEntry .)
    COMMA           shift and go to state 219


state 211

    (66) mapEntry -> value_key . COLON value_key

    COLON           shift and go to state 220


state 212

    (67) value_key -> expression .
    (38) expression -> expression . comparador expression
    (39) expression -> expression . operadorLogico expression
    (105) expression -> expression . operator expression
    (106) expression -> expression . DOT IDENTIFIER
    (49) comparador -> . EQ
    (50) comparador -> . NEQ
    (51) comparador -> . GT
    (52) comparador -> . LT
    (53) comparador -> . GE
    (54) comparador -> . LE
    (47) operadorLogico -> . AND
    (48) operadorLogico -> . OR
    (107) operator -> . PLUS
    (108) operator -> . MINUS
    (109) operator -> . TIMES
    (110) operator -> . DIVIDE
    (111) operator -> . MOD

    COLON           reduce using rule 67 (value_key -> expression .)
    COMMA           reduce using rule 67 (value_key -> expression .)
    RBRACE          reduce using rule 67 (value_key -> expression .)
    DOT             shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    GT              shift and go to state 81
    LT              shift and go to state 82
    GE              shift and go to state 83
    LE              shift and go to state 84
    AND             shift and go to state 85
    OR              shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    MOD             shift and go to state 91

    comparador                     shift and go to state 101
    operadorLogico                 shift and go to state 76
    operator                       shift and go to state 77

state 213

    (68) value_key -> STRING .
    (100) expression -> STRING .

  ! reduce/reduce conflict for COLON resolved using rule 68 (value_key -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 68 (value_key -> STRING .)
  ! reduce/reduce conflict for RBRACE resolved using rule 68 (value_key -> STRING .)
    COLON           reduce using rule 68 (value_key -> STRING .)
    COMMA           reduce using rule 68 (value_key -> STRING .)
    RBRACE          reduce using rule 68 (value_key -> STRING .)
    DOT             reduce using rule 100 (expression -> STRING .)
    EQ              reduce using rule 100 (expression -> STRING .)
    NEQ             reduce using rule 100 (expression -> STRING .)
    GT              reduce using rule 100 (expression -> STRING .)
    LT              reduce using rule 100 (expression -> STRING .)
    GE              reduce using rule 100 (expression -> STRING .)
    LE              reduce using rule 100 (expression -> STRING .)
    AND             reduce using rule 100 (expression -> STRING .)
    OR              reduce using rule 100 (expression -> STRING .)
    PLUS            reduce using rule 100 (expression -> STRING .)
    MINUS           reduce using rule 100 (expression -> STRING .)
    TIMES           reduce using rule 100 (expression -> STRING .)
    DIVIDE          reduce using rule 100 (expression -> STRING .)
    MOD             reduce using rule 100 (expression -> STRING .)

  ! COLON           [ reduce using rule 100 (expression -> STRING .) ]
  ! COMMA           [ reduce using rule 100 (expression -> STRING .) ]
  ! RBRACE          [ reduce using rule 100 (expression -> STRING .) ]


state 214

    (70) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN . return_values RBRACE
    (71) return_values -> . expression
    (72) return_values -> . return_values COMMA expression
    (38) expression -> . expression comparador expression
    (39) expression -> . expression operadorLogico expression
    (97) expression -> . NUMBER
    (98) expression -> . IDENTIFIER
    (99) expression -> . RUNE
    (100) expression -> . STRING
    (101) expression -> . RAW_STRING
    (102) expression -> . TRUE
    (103) expression -> . FALSE
    (104) expression -> . NIL
    (105) expression -> . expression operator expression
    (106) expression -> . expression DOT IDENTIFIER
    (112) expression -> . MINUS expression
    (113) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 42
    IDENTIFIER      shift and go to state 56
    RUNE            shift and go to state 43
    STRING          shift and go to state 44
    RAW_STRING      shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NIL             shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50

    return_values                  shift and go to state 221
    expression                     shift and go to state 222

state 215

    (87) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN . block
    (95) block -> . LBRACE statement_list RBRACE
    (96) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 40

    block                          shift and go to state 223

state 216

    (28) arguments -> arguments COMMA . expression
    (38) expression -> . expression comparador expression
    (39) expression -> . expression operadorLogico expression
    (97) expression -> . NUMBER
    (98) expression -> . IDENTIFIER
    (99) expression -> . RUNE
    (100) expression -> . STRING
    (101) expression -> . RAW_STRING
    (102) expression -> . TRUE
    (103) expression -> . FALSE
    (104) expression -> . NIL
    (105) expression -> . expression operator expression
    (106) expression -> . expression DOT IDENTIFIER
    (112) expression -> . MINUS expression
    (113) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 42
    IDENTIFIER      shift and go to state 56
    RUNE            shift and go to state 43
    STRING          shift and go to state 44
    RAW_STRING      shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NIL             shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50

    expression                     shift and go to state 224

state 217

    (124) return_type -> LPAREN DATATYPE COMMA return_type RPAREN .

    LBRACE          reduce using rule 124 (return_type -> LPAREN DATATYPE COMMA return_type RPAREN .)
    RPAREN          reduce using rule 124 (return_type -> LPAREN DATATYPE COMMA return_type RPAREN .)


state 218

    (63) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .

    IDENTIFIER      reduce using rule 63 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    VAR             reduce using rule 63 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    TYPE            reduce using rule 63 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    FOR             reduce using rule 63 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    PACKAGE         reduce using rule 63 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    IMPORT          reduce using rule 63 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    SWITCH          reduce using rule 63 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    IF              reduce using rule 63 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    FUNC            reduce using rule 63 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    $end            reduce using rule 63 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    RBRACE          reduce using rule 63 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    CASE            reduce using rule 63 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    DEFAULT         reduce using rule 63 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    RETURN          reduce using rule 63 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)


state 219

    (65) mapEntries -> mapEntry COMMA . mapEntries
    (64) mapEntries -> . mapEntry
    (65) mapEntries -> . mapEntry COMMA mapEntries
    (66) mapEntry -> . value_key COLON value_key
    (67) value_key -> . expression
    (68) value_key -> . STRING
    (38) expression -> . expression comparador expression
    (39) expression -> . expression operadorLogico expression
    (97) expression -> . NUMBER
    (98) expression -> . IDENTIFIER
    (99) expression -> . RUNE
    (100) expression -> . STRING
    (101) expression -> . RAW_STRING
    (102) expression -> . TRUE
    (103) expression -> . FALSE
    (104) expression -> . NIL
    (105) expression -> . expression operator expression
    (106) expression -> . expression DOT IDENTIFIER
    (112) expression -> . MINUS expression
    (113) expression -> . LPAREN expression RPAREN

    STRING          shift and go to state 213
    NUMBER          shift and go to state 42
    IDENTIFIER      shift and go to state 56
    RUNE            shift and go to state 43
    RAW_STRING      shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NIL             shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50

    mapEntry                       shift and go to state 210
    mapEntries                     shift and go to state 225
    value_key                      shift and go to state 211
    expression                     shift and go to state 212

state 220

    (66) mapEntry -> value_key COLON . value_key
    (67) value_key -> . expression
    (68) value_key -> . STRING
    (38) expression -> . expression comparador expression
    (39) expression -> . expression operadorLogico expression
    (97) expression -> . NUMBER
    (98) expression -> . IDENTIFIER
    (99) expression -> . RUNE
    (100) expression -> . STRING
    (101) expression -> . RAW_STRING
    (102) expression -> . TRUE
    (103) expression -> . FALSE
    (104) expression -> . NIL
    (105) expression -> . expression operator expression
    (106) expression -> . expression DOT IDENTIFIER
    (112) expression -> . MINUS expression
    (113) expression -> . LPAREN expression RPAREN

    STRING          shift and go to state 213
    NUMBER          shift and go to state 42
    IDENTIFIER      shift and go to state 56
    RUNE            shift and go to state 43
    RAW_STRING      shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NIL             shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50

    value_key                      shift and go to state 226
    expression                     shift and go to state 212

state 221

    (70) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values . RBRACE
    (72) return_values -> return_values . COMMA expression

    RBRACE          shift and go to state 227
    COMMA           shift and go to state 228


state 222

    (71) return_values -> expression .
    (38) expression -> expression . comparador expression
    (39) expression -> expression . operadorLogico expression
    (105) expression -> expression . operator expression
    (106) expression -> expression . DOT IDENTIFIER
    (49) comparador -> . EQ
    (50) comparador -> . NEQ
    (51) comparador -> . GT
    (52) comparador -> . LT
    (53) comparador -> . GE
    (54) comparador -> . LE
    (47) operadorLogico -> . AND
    (48) operadorLogico -> . OR
    (107) operator -> . PLUS
    (108) operator -> . MINUS
    (109) operator -> . TIMES
    (110) operator -> . DIVIDE
    (111) operator -> . MOD

    RBRACE          reduce using rule 71 (return_values -> expression .)
    COMMA           reduce using rule 71 (return_values -> expression .)
    DOT             shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    GT              shift and go to state 81
    LT              shift and go to state 82
    GE              shift and go to state 83
    LE              shift and go to state 84
    AND             shift and go to state 85
    OR              shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    MOD             shift and go to state 91

    comparador                     shift and go to state 101
    operadorLogico                 shift and go to state 76
    operator                       shift and go to state 77

state 223

    (87) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .

    IDENTIFIER      reduce using rule 87 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    VAR             reduce using rule 87 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    TYPE            reduce using rule 87 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    FOR             reduce using rule 87 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    PACKAGE         reduce using rule 87 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    IMPORT          reduce using rule 87 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    SWITCH          reduce using rule 87 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    IF              reduce using rule 87 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    FUNC            reduce using rule 87 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    $end            reduce using rule 87 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    RBRACE          reduce using rule 87 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    CASE            reduce using rule 87 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    DEFAULT         reduce using rule 87 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    RETURN          reduce using rule 87 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)


state 224

    (28) arguments -> arguments COMMA expression .
    (38) expression -> expression . comparador expression
    (39) expression -> expression . operadorLogico expression
    (105) expression -> expression . operator expression
    (106) expression -> expression . DOT IDENTIFIER
    (49) comparador -> . EQ
    (50) comparador -> . NEQ
    (51) comparador -> . GT
    (52) comparador -> . LT
    (53) comparador -> . GE
    (54) comparador -> . LE
    (47) operadorLogico -> . AND
    (48) operadorLogico -> . OR
    (107) operator -> . PLUS
    (108) operator -> . MINUS
    (109) operator -> . TIMES
    (110) operator -> . DIVIDE
    (111) operator -> . MOD

    RPAREN          reduce using rule 28 (arguments -> arguments COMMA expression .)
    COMMA           reduce using rule 28 (arguments -> arguments COMMA expression .)
    DOT             shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    GT              shift and go to state 81
    LT              shift and go to state 82
    GE              shift and go to state 83
    LE              shift and go to state 84
    AND             shift and go to state 85
    OR              shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    MOD             shift and go to state 91

    comparador                     shift and go to state 101
    operadorLogico                 shift and go to state 76
    operator                       shift and go to state 77

state 225

    (65) mapEntries -> mapEntry COMMA mapEntries .

    RBRACE          reduce using rule 65 (mapEntries -> mapEntry COMMA mapEntries .)


state 226

    (66) mapEntry -> value_key COLON value_key .

    COMMA           reduce using rule 66 (mapEntry -> value_key COLON value_key .)
    RBRACE          reduce using rule 66 (mapEntry -> value_key COLON value_key .)


state 227

    (70) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .

    IDENTIFIER      reduce using rule 70 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    VAR             reduce using rule 70 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    TYPE            reduce using rule 70 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    FOR             reduce using rule 70 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    PACKAGE         reduce using rule 70 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    IMPORT          reduce using rule 70 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    SWITCH          reduce using rule 70 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    IF              reduce using rule 70 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    FUNC            reduce using rule 70 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    $end            reduce using rule 70 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    RBRACE          reduce using rule 70 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    CASE            reduce using rule 70 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    DEFAULT         reduce using rule 70 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    RETURN          reduce using rule 70 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)


state 228

    (72) return_values -> return_values COMMA . expression
    (38) expression -> . expression comparador expression
    (39) expression -> . expression operadorLogico expression
    (97) expression -> . NUMBER
    (98) expression -> . IDENTIFIER
    (99) expression -> . RUNE
    (100) expression -> . STRING
    (101) expression -> . RAW_STRING
    (102) expression -> . TRUE
    (103) expression -> . FALSE
    (104) expression -> . NIL
    (105) expression -> . expression operator expression
    (106) expression -> . expression DOT IDENTIFIER
    (112) expression -> . MINUS expression
    (113) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 42
    IDENTIFIER      shift and go to state 56
    RUNE            shift and go to state 43
    STRING          shift and go to state 44
    RAW_STRING      shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NIL             shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50

    expression                     shift and go to state 229

state 229

    (72) return_values -> return_values COMMA expression .
    (38) expression -> expression . comparador expression
    (39) expression -> expression . operadorLogico expression
    (105) expression -> expression . operator expression
    (106) expression -> expression . DOT IDENTIFIER
    (49) comparador -> . EQ
    (50) comparador -> . NEQ
    (51) comparador -> . GT
    (52) comparador -> . LT
    (53) comparador -> . GE
    (54) comparador -> . LE
    (47) operadorLogico -> . AND
    (48) operadorLogico -> . OR
    (107) operator -> . PLUS
    (108) operator -> . MINUS
    (109) operator -> . TIMES
    (110) operator -> . DIVIDE
    (111) operator -> . MOD

    RBRACE          reduce using rule 72 (return_values -> return_values COMMA expression .)
    COMMA           reduce using rule 72 (return_values -> return_values COMMA expression .)
    DOT             shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    GT              shift and go to state 81
    LT              shift and go to state 82
    GE              shift and go to state 83
    LE              shift and go to state 84
    AND             shift and go to state 85
    OR              shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    MOD             shift and go to state 91

    comparador                     shift and go to state 101
    operadorLogico                 shift and go to state 76
    operator                       shift and go to state 77
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOT in state 118 resolved as shift
WARNING: shift/reduce conflict for EQ in state 118 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 118 resolved as shift
WARNING: shift/reduce conflict for GT in state 118 resolved as shift
WARNING: shift/reduce conflict for LT in state 118 resolved as shift
WARNING: shift/reduce conflict for GE in state 118 resolved as shift
WARNING: shift/reduce conflict for LE in state 118 resolved as shift
WARNING: shift/reduce conflict for AND in state 118 resolved as shift
WARNING: shift/reduce conflict for OR in state 118 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 118 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 118 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 118 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 118 resolved as shift
WARNING: shift/reduce conflict for MOD in state 118 resolved as shift
WARNING: shift/reduce conflict for DOT in state 119 resolved as shift
WARNING: shift/reduce conflict for EQ in state 119 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 119 resolved as shift
WARNING: shift/reduce conflict for GT in state 119 resolved as shift
WARNING: shift/reduce conflict for LT in state 119 resolved as shift
WARNING: shift/reduce conflict for GE in state 119 resolved as shift
WARNING: shift/reduce conflict for LE in state 119 resolved as shift
WARNING: shift/reduce conflict for AND in state 119 resolved as shift
WARNING: shift/reduce conflict for OR in state 119 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 119 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 119 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 119 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 119 resolved as shift
WARNING: shift/reduce conflict for MOD in state 119 resolved as shift
WARNING: shift/reduce conflict for DOT in state 120 resolved as shift
WARNING: shift/reduce conflict for EQ in state 120 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 120 resolved as shift
WARNING: shift/reduce conflict for GT in state 120 resolved as shift
WARNING: shift/reduce conflict for LT in state 120 resolved as shift
WARNING: shift/reduce conflict for GE in state 120 resolved as shift
WARNING: shift/reduce conflict for LE in state 120 resolved as shift
WARNING: shift/reduce conflict for AND in state 120 resolved as shift
WARNING: shift/reduce conflict for OR in state 120 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 120 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 120 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 120 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 120 resolved as shift
WARNING: shift/reduce conflict for MOD in state 120 resolved as shift
WARNING: shift/reduce conflict for DOT in state 133 resolved as shift
WARNING: shift/reduce conflict for EQ in state 133 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 133 resolved as shift
WARNING: shift/reduce conflict for GT in state 133 resolved as shift
WARNING: shift/reduce conflict for LT in state 133 resolved as shift
WARNING: shift/reduce conflict for GE in state 133 resolved as shift
WARNING: shift/reduce conflict for LE in state 133 resolved as shift
WARNING: shift/reduce conflict for AND in state 133 resolved as shift
WARNING: shift/reduce conflict for OR in state 133 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 133 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 133 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 133 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 133 resolved as shift
WARNING: shift/reduce conflict for MOD in state 133 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 166 resolved as shift
WARNING: reduce/reduce conflict in state 118 resolved using rule (expression -> expression comparador expression)
WARNING: rejected rule (condicion -> expression comparador expression) in state 118
WARNING: reduce/reduce conflict in state 213 resolved using rule (value_key -> STRING)
WARNING: rejected rule (expression -> STRING) in state 213
