Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CONTINUE
    DEFER
    FALLTHROUGH
    GO
    INTERFACE
    SELECT
    STRING_UNCLOSED

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> assignment
Rule 5     statement -> input
Rule 6     statement -> llamarFuncion
Rule 7     statement -> print_statement
Rule 8     statement -> struct_definition
Rule 9     statement -> for_statement
Rule 10    statement -> package
Rule 11    statement -> import
Rule 12    statement -> switch
Rule 13    statement -> map
Rule 14    statement -> if_statement
Rule 15    statement -> function
Rule 16    statement -> method_definition
Rule 17    statement -> function_literal
Rule 18    package -> PACKAGE MAIN
Rule 19    package -> PACKAGE IDENTIFIER
Rule 20    import -> IMPORT STRING
Rule 21    import -> IMPORT LPAREN import_list RPAREN
Rule 22    import_list -> STRING
Rule 23    import_list -> import_list STRING
Rule 24    arguments -> expression
Rule 25    arguments -> arguments COMMA expression
Rule 26    arguments -> <empty>
Rule 27    const_declaration -> CONST IDENTIFIER ASSIGN expression
Rule 28    input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
Rule 29    var_declaration -> VAR IDENTIFIER DATATYPE
Rule 30    assignment -> IDENTIFIER DECLARE_ASSIGN expression
Rule 31    assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression
Rule 32    assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
Rule 33    assignment -> IDENTIFIER ASSIGN expression
Rule 34    llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN
Rule 35    expression -> expression comparador expression
Rule 36    expression -> expression operadorLogico expression
Rule 37    argument_list -> expression
Rule 38    argument_list -> argument_list COMMA expression
Rule 39    argument_list_opt -> argument_list
Rule 40    argument_list_opt -> <empty>
Rule 41    condicion -> expression comparador expression
Rule 42    condicion_compleja -> condicion operadorLogico condicion
Rule 43    condicion_compleja -> condicion operadorLogico condicion_compleja
Rule 44    operadorLogico -> AND
Rule 45    operadorLogico -> OR
Rule 46    comparador -> EQ
Rule 47    comparador -> NEQ
Rule 48    comparador -> GT
Rule 49    comparador -> LT
Rule 50    comparador -> GE
Rule 51    comparador -> LE
Rule 52    empty -> <empty>
Rule 53    switch -> SWITCH expression LBRACE caseBlocks RBRACE
Rule 54    caseBlocks -> caseBlock
Rule 55    caseBlocks -> caseBlock caseBlocks
Rule 56    caseBlock -> CASE expression COLON statement_list
Rule 57    caseBlock -> DEFAULT COLON statement_list
Rule 58    map -> IDENTIFIER DECLARE_ASSIGN mapLiteral
Rule 59    map -> VAR IDENTIFIER ASSIGN mapLiteral
Rule 60    mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE
Rule 61    mapEntries -> mapEntry
Rule 62    mapEntries -> mapEntry COMMA mapEntries
Rule 63    mapEntry -> value_key COLON value_key
Rule 64    value_key -> expression
Rule 65    value_key -> STRING
Rule 66    function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block
Rule 67    function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN expression RBRACE
Rule 68    function -> FUNC MAIN LPAREN params_opt RPAREN block
Rule 69    return_statement -> RETURN expression
Rule 70    params_opt -> params
Rule 71    params_opt -> empty
Rule 72    params -> param
Rule 73    params -> param COMMA params
Rule 74    param -> IDENTIFIER type_name
Rule 75    type_name -> DATATYPE
Rule 76    type_name -> IDENTIFIER
Rule 77    print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
Rule 78    struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
Rule 79    struct_field -> IDENTIFIER DATATYPE
Rule 80    struct_fields -> struct_field
Rule 81    struct_fields -> struct_fields struct_field
Rule 82    method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
Rule 83    for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
Rule 84    identifier_list -> IDENTIFIER
Rule 85    identifier_list -> IDENTIFIER COMMA identifier_list
Rule 86    shortAssignment -> identifier_list DECLARE_ASSIGN expression
Rule 87    for_statement -> FOR condicion block
Rule 88    for_statement -> FOR block
Rule 89    for_range_clause -> shortAssignment RANGE expression
Rule 90    block -> LBRACE statement_list RBRACE
Rule 91    block -> LBRACE RBRACE
Rule 92    expression -> NUMBER
Rule 93    expression -> IDENTIFIER
Rule 94    expression -> RUNE
Rule 95    expression -> STRING
Rule 96    expression -> RAW_STRING
Rule 97    expression -> TRUE
Rule 98    expression -> FALSE
Rule 99    expression -> NIL
Rule 100   expression -> expression operator expression
Rule 101   expression -> expression DOT IDENTIFIER
Rule 102   operator -> PLUS
Rule 103   operator -> MINUS
Rule 104   operator -> TIMES
Rule 105   operator -> DIVIDE
Rule 106   operator -> MOD
Rule 107   expression -> MINUS expression
Rule 108   expression -> LPAREN expression RPAREN
Rule 109   if_statement -> IF condicion_compleja block
Rule 110   if_statement -> IF condicion_compleja block ELSE block
Rule 111   function_literal -> FUNC LPAREN parameters RPAREN return_type block
Rule 112   parameters -> parameters COMMA parameter
Rule 113   parameters -> parameter
Rule 114   parameters -> empty
Rule 115   parameter -> IDENTIFIER DATATYPE
Rule 116   parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE
Rule 117   return_type -> DATATYPE
Rule 118   return_type -> empty
Rule 119   slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name
Rule 120   declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal
Rule 121   slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE
Rule 122   elements -> elements COMMA expression
Rule 123   elements -> expression

Terminals, with rules where they appear

AMPERSAND            : 28
AND                  : 44
ASSIGN               : 27 31 32 33 59
BREAK                : 
CASE                 : 56
COLON                : 56 57 63
COMMA                : 25 38 62 73 85 112 122
CONST                : 27
CONTINUE             : 
DATATYPE             : 29 31 32 60 60 75 79 115 116 117
DECLARE_ASSIGN       : 30 58 86 120
DEFAULT              : 57
DEFER                : 
DIVIDE               : 105
DOT                  : 28 77 101
ELSE                 : 110
EQ                   : 46
FALLTHROUGH          : 
FALSE                : 98
FOR                  : 83 87 88
FUNC                 : 66 67 68 82 111 116
GE                   : 50
GO                   : 
GT                   : 48
IDENTIFIER           : 19 27 28 28 28 29 30 31 32 33 34 58 59 66 67 74 76 77 77 78 79 82 82 82 84 85 93 101 115 116 119 120
IF                   : 109 110
IMPORT               : 20 21
INTERFACE            : 
LBRACE               : 53 60 67 78 90 91 121
LBRACKET             : 60 119 121
LE                   : 51
LPAREN               : 21 28 34 66 67 68 77 82 82 108 111 116
LT                   : 49
MAIN                 : 18 68
MAP                  : 60
MINUS                : 103 107
MOD                  : 106
NEQ                  : 47
NIL                  : 99
NUMBER               : 92
OR                   : 45
PACKAGE              : 18 19
PLUS                 : 102
RANGE                : 89
RAW_STRING           : 96
RBRACE               : 53 60 67 78 90 91 121
RBRACKET             : 60 119 121
RETURN               : 67 69
RPAREN               : 21 28 34 66 67 68 77 82 82 108 111 116
RUNE                 : 94
SELECT               : 
SEMICOLON            : 83 83
STRING               : 20 22 23 65 95
STRING_UNCLOSED      : 
STRUCT               : 78
SWITCH               : 53
TIMES                : 104
TRUE                 : 97
TYPE                 : 78
VAR                  : 29 31 32 59 119
error                : 

Nonterminals, with rules where they appear

argument_list        : 38 39
argument_list_opt    : 34 77
arguments            : 25 82
assignment           : 4
block                : 66 68 82 83 87 88 109 110 110 111
caseBlock            : 54 55
caseBlocks           : 53 55
comparador           : 35 41
condicion            : 42 42 43 83 87
condicion_compleja   : 43 109 110
const_declaration    : 
declare_assign       : 
elements             : 121 122
empty                : 71 114 118
expression           : 24 25 27 30 31 33 35 35 36 36 37 38 41 41 53 56 64 67 69 83 86 89 100 100 101 107 108 122 123
for_range_clause     : 
for_statement        : 9
function             : 15
function_literal     : 17
identifier_list      : 85 86
if_statement         : 14
import               : 11
import_list          : 21 23
input                : 5
llamarFuncion        : 6 32
map                  : 13
mapEntries           : 60 62
mapEntry             : 61 62
mapLiteral           : 58 59
method_definition    : 16
operadorLogico       : 36 42 43
operator             : 100
package              : 10
param                : 72 73
parameter            : 112 113
parameters           : 111 112 116
params               : 70 73
params_opt           : 66 67 68
print_statement      : 7
program              : 0
return_statement     : 
return_type          : 66 67 111
shortAssignment      : 83 89
slice_declaration    : 
slice_literal        : 120
statement            : 2 3
statement_list       : 1 3 56 57 67 90
struct_definition    : 8
struct_field         : 80 81
struct_fields        : 78 81
switch               : 12
type_name            : 74 119 121
value_key            : 63 63
var_declaration      : 

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . assignment
    (5) statement -> . input
    (6) statement -> . llamarFuncion
    (7) statement -> . print_statement
    (8) statement -> . struct_definition
    (9) statement -> . for_statement
    (10) statement -> . package
    (11) statement -> . import
    (12) statement -> . switch
    (13) statement -> . map
    (14) statement -> . if_statement
    (15) statement -> . function
    (16) statement -> . method_definition
    (17) statement -> . function_literal
    (30) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (31) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (32) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (33) assignment -> . IDENTIFIER ASSIGN expression
    (28) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (34) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (77) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (78) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (83) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (87) for_statement -> . FOR condicion block
    (88) for_statement -> . FOR block
    (18) package -> . PACKAGE MAIN
    (19) package -> . PACKAGE IDENTIFIER
    (20) import -> . IMPORT STRING
    (21) import -> . IMPORT LPAREN import_list RPAREN
    (53) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (58) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (59) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (109) if_statement -> . IF condicion_compleja block
    (110) if_statement -> . IF condicion_compleja block ELSE block
    (66) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block
    (67) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN expression RBRACE
    (68) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (82) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (111) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 18
    VAR             shift and go to state 19
    TYPE            shift and go to state 20
    FOR             shift and go to state 21
    PACKAGE         shift and go to state 22
    IMPORT          shift and go to state 23
    SWITCH          shift and go to state 24
    IF              shift and go to state 25
    FUNC            shift and go to state 26

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . assignment
    (5) statement -> . input
    (6) statement -> . llamarFuncion
    (7) statement -> . print_statement
    (8) statement -> . struct_definition
    (9) statement -> . for_statement
    (10) statement -> . package
    (11) statement -> . import
    (12) statement -> . switch
    (13) statement -> . map
    (14) statement -> . if_statement
    (15) statement -> . function
    (16) statement -> . method_definition
    (17) statement -> . function_literal
    (30) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (31) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (32) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (33) assignment -> . IDENTIFIER ASSIGN expression
    (28) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (34) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (77) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (78) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (83) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (87) for_statement -> . FOR condicion block
    (88) for_statement -> . FOR block
    (18) package -> . PACKAGE MAIN
    (19) package -> . PACKAGE IDENTIFIER
    (20) import -> . IMPORT STRING
    (21) import -> . IMPORT LPAREN import_list RPAREN
    (53) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (58) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (59) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (109) if_statement -> . IF condicion_compleja block
    (110) if_statement -> . IF condicion_compleja block ELSE block
    (66) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block
    (67) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN expression RBRACE
    (68) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (82) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (111) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    $end            reduce using rule 1 (program -> statement_list .)
    IDENTIFIER      shift and go to state 18
    VAR             shift and go to state 19
    TYPE            shift and go to state 20
    FOR             shift and go to state 21
    PACKAGE         shift and go to state 22
    IMPORT          shift and go to state 23
    SWITCH          shift and go to state 24
    IF              shift and go to state 25
    FUNC            shift and go to state 26

    statement                      shift and go to state 27
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17

state 3

    (2) statement_list -> statement .

    IDENTIFIER      reduce using rule 2 (statement_list -> statement .)
    VAR             reduce using rule 2 (statement_list -> statement .)
    TYPE            reduce using rule 2 (statement_list -> statement .)
    FOR             reduce using rule 2 (statement_list -> statement .)
    PACKAGE         reduce using rule 2 (statement_list -> statement .)
    IMPORT          reduce using rule 2 (statement_list -> statement .)
    SWITCH          reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    FUNC            reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)
    RBRACE          reduce using rule 2 (statement_list -> statement .)
    CASE            reduce using rule 2 (statement_list -> statement .)
    DEFAULT         reduce using rule 2 (statement_list -> statement .)
    RETURN          reduce using rule 2 (statement_list -> statement .)


state 4

    (4) statement -> assignment .

    IDENTIFIER      reduce using rule 4 (statement -> assignment .)
    VAR             reduce using rule 4 (statement -> assignment .)
    TYPE            reduce using rule 4 (statement -> assignment .)
    FOR             reduce using rule 4 (statement -> assignment .)
    PACKAGE         reduce using rule 4 (statement -> assignment .)
    IMPORT          reduce using rule 4 (statement -> assignment .)
    SWITCH          reduce using rule 4 (statement -> assignment .)
    IF              reduce using rule 4 (statement -> assignment .)
    FUNC            reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)
    RBRACE          reduce using rule 4 (statement -> assignment .)
    CASE            reduce using rule 4 (statement -> assignment .)
    DEFAULT         reduce using rule 4 (statement -> assignment .)
    RETURN          reduce using rule 4 (statement -> assignment .)


state 5

    (5) statement -> input .

    IDENTIFIER      reduce using rule 5 (statement -> input .)
    VAR             reduce using rule 5 (statement -> input .)
    TYPE            reduce using rule 5 (statement -> input .)
    FOR             reduce using rule 5 (statement -> input .)
    PACKAGE         reduce using rule 5 (statement -> input .)
    IMPORT          reduce using rule 5 (statement -> input .)
    SWITCH          reduce using rule 5 (statement -> input .)
    IF              reduce using rule 5 (statement -> input .)
    FUNC            reduce using rule 5 (statement -> input .)
    $end            reduce using rule 5 (statement -> input .)
    RBRACE          reduce using rule 5 (statement -> input .)
    CASE            reduce using rule 5 (statement -> input .)
    DEFAULT         reduce using rule 5 (statement -> input .)
    RETURN          reduce using rule 5 (statement -> input .)


state 6

    (6) statement -> llamarFuncion .

    IDENTIFIER      reduce using rule 6 (statement -> llamarFuncion .)
    VAR             reduce using rule 6 (statement -> llamarFuncion .)
    TYPE            reduce using rule 6 (statement -> llamarFuncion .)
    FOR             reduce using rule 6 (statement -> llamarFuncion .)
    PACKAGE         reduce using rule 6 (statement -> llamarFuncion .)
    IMPORT          reduce using rule 6 (statement -> llamarFuncion .)
    SWITCH          reduce using rule 6 (statement -> llamarFuncion .)
    IF              reduce using rule 6 (statement -> llamarFuncion .)
    FUNC            reduce using rule 6 (statement -> llamarFuncion .)
    $end            reduce using rule 6 (statement -> llamarFuncion .)
    RBRACE          reduce using rule 6 (statement -> llamarFuncion .)
    CASE            reduce using rule 6 (statement -> llamarFuncion .)
    DEFAULT         reduce using rule 6 (statement -> llamarFuncion .)
    RETURN          reduce using rule 6 (statement -> llamarFuncion .)


state 7

    (7) statement -> print_statement .

    IDENTIFIER      reduce using rule 7 (statement -> print_statement .)
    VAR             reduce using rule 7 (statement -> print_statement .)
    TYPE            reduce using rule 7 (statement -> print_statement .)
    FOR             reduce using rule 7 (statement -> print_statement .)
    PACKAGE         reduce using rule 7 (statement -> print_statement .)
    IMPORT          reduce using rule 7 (statement -> print_statement .)
    SWITCH          reduce using rule 7 (statement -> print_statement .)
    IF              reduce using rule 7 (statement -> print_statement .)
    FUNC            reduce using rule 7 (statement -> print_statement .)
    $end            reduce using rule 7 (statement -> print_statement .)
    RBRACE          reduce using rule 7 (statement -> print_statement .)
    CASE            reduce using rule 7 (statement -> print_statement .)
    DEFAULT         reduce using rule 7 (statement -> print_statement .)
    RETURN          reduce using rule 7 (statement -> print_statement .)


state 8

    (8) statement -> struct_definition .

    IDENTIFIER      reduce using rule 8 (statement -> struct_definition .)
    VAR             reduce using rule 8 (statement -> struct_definition .)
    TYPE            reduce using rule 8 (statement -> struct_definition .)
    FOR             reduce using rule 8 (statement -> struct_definition .)
    PACKAGE         reduce using rule 8 (statement -> struct_definition .)
    IMPORT          reduce using rule 8 (statement -> struct_definition .)
    SWITCH          reduce using rule 8 (statement -> struct_definition .)
    IF              reduce using rule 8 (statement -> struct_definition .)
    FUNC            reduce using rule 8 (statement -> struct_definition .)
    $end            reduce using rule 8 (statement -> struct_definition .)
    RBRACE          reduce using rule 8 (statement -> struct_definition .)
    CASE            reduce using rule 8 (statement -> struct_definition .)
    DEFAULT         reduce using rule 8 (statement -> struct_definition .)
    RETURN          reduce using rule 8 (statement -> struct_definition .)


state 9

    (9) statement -> for_statement .

    IDENTIFIER      reduce using rule 9 (statement -> for_statement .)
    VAR             reduce using rule 9 (statement -> for_statement .)
    TYPE            reduce using rule 9 (statement -> for_statement .)
    FOR             reduce using rule 9 (statement -> for_statement .)
    PACKAGE         reduce using rule 9 (statement -> for_statement .)
    IMPORT          reduce using rule 9 (statement -> for_statement .)
    SWITCH          reduce using rule 9 (statement -> for_statement .)
    IF              reduce using rule 9 (statement -> for_statement .)
    FUNC            reduce using rule 9 (statement -> for_statement .)
    $end            reduce using rule 9 (statement -> for_statement .)
    RBRACE          reduce using rule 9 (statement -> for_statement .)
    CASE            reduce using rule 9 (statement -> for_statement .)
    DEFAULT         reduce using rule 9 (statement -> for_statement .)
    RETURN          reduce using rule 9 (statement -> for_statement .)


state 10

    (10) statement -> package .

    IDENTIFIER      reduce using rule 10 (statement -> package .)
    VAR             reduce using rule 10 (statement -> package .)
    TYPE            reduce using rule 10 (statement -> package .)
    FOR             reduce using rule 10 (statement -> package .)
    PACKAGE         reduce using rule 10 (statement -> package .)
    IMPORT          reduce using rule 10 (statement -> package .)
    SWITCH          reduce using rule 10 (statement -> package .)
    IF              reduce using rule 10 (statement -> package .)
    FUNC            reduce using rule 10 (statement -> package .)
    $end            reduce using rule 10 (statement -> package .)
    RBRACE          reduce using rule 10 (statement -> package .)
    CASE            reduce using rule 10 (statement -> package .)
    DEFAULT         reduce using rule 10 (statement -> package .)
    RETURN          reduce using rule 10 (statement -> package .)


state 11

    (11) statement -> import .

    IDENTIFIER      reduce using rule 11 (statement -> import .)
    VAR             reduce using rule 11 (statement -> import .)
    TYPE            reduce using rule 11 (statement -> import .)
    FOR             reduce using rule 11 (statement -> import .)
    PACKAGE         reduce using rule 11 (statement -> import .)
    IMPORT          reduce using rule 11 (statement -> import .)
    SWITCH          reduce using rule 11 (statement -> import .)
    IF              reduce using rule 11 (statement -> import .)
    FUNC            reduce using rule 11 (statement -> import .)
    $end            reduce using rule 11 (statement -> import .)
    RBRACE          reduce using rule 11 (statement -> import .)
    CASE            reduce using rule 11 (statement -> import .)
    DEFAULT         reduce using rule 11 (statement -> import .)
    RETURN          reduce using rule 11 (statement -> import .)


state 12

    (12) statement -> switch .

    IDENTIFIER      reduce using rule 12 (statement -> switch .)
    VAR             reduce using rule 12 (statement -> switch .)
    TYPE            reduce using rule 12 (statement -> switch .)
    FOR             reduce using rule 12 (statement -> switch .)
    PACKAGE         reduce using rule 12 (statement -> switch .)
    IMPORT          reduce using rule 12 (statement -> switch .)
    SWITCH          reduce using rule 12 (statement -> switch .)
    IF              reduce using rule 12 (statement -> switch .)
    FUNC            reduce using rule 12 (statement -> switch .)
    $end            reduce using rule 12 (statement -> switch .)
    RBRACE          reduce using rule 12 (statement -> switch .)
    CASE            reduce using rule 12 (statement -> switch .)
    DEFAULT         reduce using rule 12 (statement -> switch .)
    RETURN          reduce using rule 12 (statement -> switch .)


state 13

    (13) statement -> map .

    IDENTIFIER      reduce using rule 13 (statement -> map .)
    VAR             reduce using rule 13 (statement -> map .)
    TYPE            reduce using rule 13 (statement -> map .)
    FOR             reduce using rule 13 (statement -> map .)
    PACKAGE         reduce using rule 13 (statement -> map .)
    IMPORT          reduce using rule 13 (statement -> map .)
    SWITCH          reduce using rule 13 (statement -> map .)
    IF              reduce using rule 13 (statement -> map .)
    FUNC            reduce using rule 13 (statement -> map .)
    $end            reduce using rule 13 (statement -> map .)
    RBRACE          reduce using rule 13 (statement -> map .)
    CASE            reduce using rule 13 (statement -> map .)
    DEFAULT         reduce using rule 13 (statement -> map .)
    RETURN          reduce using rule 13 (statement -> map .)


state 14

    (14) statement -> if_statement .

    IDENTIFIER      reduce using rule 14 (statement -> if_statement .)
    VAR             reduce using rule 14 (statement -> if_statement .)
    TYPE            reduce using rule 14 (statement -> if_statement .)
    FOR             reduce using rule 14 (statement -> if_statement .)
    PACKAGE         reduce using rule 14 (statement -> if_statement .)
    IMPORT          reduce using rule 14 (statement -> if_statement .)
    SWITCH          reduce using rule 14 (statement -> if_statement .)
    IF              reduce using rule 14 (statement -> if_statement .)
    FUNC            reduce using rule 14 (statement -> if_statement .)
    $end            reduce using rule 14 (statement -> if_statement .)
    RBRACE          reduce using rule 14 (statement -> if_statement .)
    CASE            reduce using rule 14 (statement -> if_statement .)
    DEFAULT         reduce using rule 14 (statement -> if_statement .)
    RETURN          reduce using rule 14 (statement -> if_statement .)


state 15

    (15) statement -> function .

    IDENTIFIER      reduce using rule 15 (statement -> function .)
    VAR             reduce using rule 15 (statement -> function .)
    TYPE            reduce using rule 15 (statement -> function .)
    FOR             reduce using rule 15 (statement -> function .)
    PACKAGE         reduce using rule 15 (statement -> function .)
    IMPORT          reduce using rule 15 (statement -> function .)
    SWITCH          reduce using rule 15 (statement -> function .)
    IF              reduce using rule 15 (statement -> function .)
    FUNC            reduce using rule 15 (statement -> function .)
    $end            reduce using rule 15 (statement -> function .)
    RBRACE          reduce using rule 15 (statement -> function .)
    CASE            reduce using rule 15 (statement -> function .)
    DEFAULT         reduce using rule 15 (statement -> function .)
    RETURN          reduce using rule 15 (statement -> function .)


state 16

    (16) statement -> method_definition .

    IDENTIFIER      reduce using rule 16 (statement -> method_definition .)
    VAR             reduce using rule 16 (statement -> method_definition .)
    TYPE            reduce using rule 16 (statement -> method_definition .)
    FOR             reduce using rule 16 (statement -> method_definition .)
    PACKAGE         reduce using rule 16 (statement -> method_definition .)
    IMPORT          reduce using rule 16 (statement -> method_definition .)
    SWITCH          reduce using rule 16 (statement -> method_definition .)
    IF              reduce using rule 16 (statement -> method_definition .)
    FUNC            reduce using rule 16 (statement -> method_definition .)
    $end            reduce using rule 16 (statement -> method_definition .)
    RBRACE          reduce using rule 16 (statement -> method_definition .)
    CASE            reduce using rule 16 (statement -> method_definition .)
    DEFAULT         reduce using rule 16 (statement -> method_definition .)
    RETURN          reduce using rule 16 (statement -> method_definition .)


state 17

    (17) statement -> function_literal .

    IDENTIFIER      reduce using rule 17 (statement -> function_literal .)
    VAR             reduce using rule 17 (statement -> function_literal .)
    TYPE            reduce using rule 17 (statement -> function_literal .)
    FOR             reduce using rule 17 (statement -> function_literal .)
    PACKAGE         reduce using rule 17 (statement -> function_literal .)
    IMPORT          reduce using rule 17 (statement -> function_literal .)
    SWITCH          reduce using rule 17 (statement -> function_literal .)
    IF              reduce using rule 17 (statement -> function_literal .)
    FUNC            reduce using rule 17 (statement -> function_literal .)
    $end            reduce using rule 17 (statement -> function_literal .)
    RBRACE          reduce using rule 17 (statement -> function_literal .)
    CASE            reduce using rule 17 (statement -> function_literal .)
    DEFAULT         reduce using rule 17 (statement -> function_literal .)
    RETURN          reduce using rule 17 (statement -> function_literal .)


state 18

    (30) assignment -> IDENTIFIER . DECLARE_ASSIGN expression
    (33) assignment -> IDENTIFIER . ASSIGN expression
    (28) input -> IDENTIFIER . DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (34) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN
    (77) print_statement -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (58) map -> IDENTIFIER . DECLARE_ASSIGN mapLiteral

    DECLARE_ASSIGN  shift and go to state 28
    ASSIGN          shift and go to state 29
    DOT             shift and go to state 30
    LPAREN          shift and go to state 31


state 19

    (31) assignment -> VAR . IDENTIFIER DATATYPE ASSIGN expression
    (32) assignment -> VAR . IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (59) map -> VAR . IDENTIFIER ASSIGN mapLiteral

    IDENTIFIER      shift and go to state 32


state 20

    (78) struct_definition -> TYPE . IDENTIFIER STRUCT LBRACE struct_fields RBRACE

    IDENTIFIER      shift and go to state 33


state 21

    (83) for_statement -> FOR . shortAssignment SEMICOLON condicion SEMICOLON expression block
    (87) for_statement -> FOR . condicion block
    (88) for_statement -> FOR . block
    (86) shortAssignment -> . identifier_list DECLARE_ASSIGN expression
    (41) condicion -> . expression comparador expression
    (90) block -> . LBRACE statement_list RBRACE
    (91) block -> . LBRACE RBRACE
    (84) identifier_list -> . IDENTIFIER
    (85) identifier_list -> . IDENTIFIER COMMA identifier_list
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (92) expression -> . NUMBER
    (93) expression -> . IDENTIFIER
    (94) expression -> . RUNE
    (95) expression -> . STRING
    (96) expression -> . RAW_STRING
    (97) expression -> . TRUE
    (98) expression -> . FALSE
    (99) expression -> . NIL
    (100) expression -> . expression operator expression
    (101) expression -> . expression DOT IDENTIFIER
    (107) expression -> . MINUS expression
    (108) expression -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 39
    IDENTIFIER      shift and go to state 40
    NUMBER          shift and go to state 41
    RUNE            shift and go to state 42
    STRING          shift and go to state 43
    RAW_STRING      shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NIL             shift and go to state 47
    MINUS           shift and go to state 48
    LPAREN          shift and go to state 49

    shortAssignment                shift and go to state 34
    condicion                      shift and go to state 35
    expression                     shift and go to state 36
    block                          shift and go to state 37
    identifier_list                shift and go to state 38

state 22

    (18) package -> PACKAGE . MAIN
    (19) package -> PACKAGE . IDENTIFIER

    MAIN            shift and go to state 50
    IDENTIFIER      shift and go to state 51


state 23

    (20) import -> IMPORT . STRING
    (21) import -> IMPORT . LPAREN import_list RPAREN

    STRING          shift and go to state 52
    LPAREN          shift and go to state 53


state 24

    (53) switch -> SWITCH . expression LBRACE caseBlocks RBRACE
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (92) expression -> . NUMBER
    (93) expression -> . IDENTIFIER
    (94) expression -> . RUNE
    (95) expression -> . STRING
    (96) expression -> . RAW_STRING
    (97) expression -> . TRUE
    (98) expression -> . FALSE
    (99) expression -> . NIL
    (100) expression -> . expression operator expression
    (101) expression -> . expression DOT IDENTIFIER
    (107) expression -> . MINUS expression
    (108) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 41
    IDENTIFIER      shift and go to state 55
    RUNE            shift and go to state 42
    STRING          shift and go to state 43
    RAW_STRING      shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NIL             shift and go to state 47
    MINUS           shift and go to state 48
    LPAREN          shift and go to state 49

    expression                     shift and go to state 54

state 25

    (109) if_statement -> IF . condicion_compleja block
    (110) if_statement -> IF . condicion_compleja block ELSE block
    (42) condicion_compleja -> . condicion operadorLogico condicion
    (43) condicion_compleja -> . condicion operadorLogico condicion_compleja
    (41) condicion -> . expression comparador expression
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (92) expression -> . NUMBER
    (93) expression -> . IDENTIFIER
    (94) expression -> . RUNE
    (95) expression -> . STRING
    (96) expression -> . RAW_STRING
    (97) expression -> . TRUE
    (98) expression -> . FALSE
    (99) expression -> . NIL
    (100) expression -> . expression operator expression
    (101) expression -> . expression DOT IDENTIFIER
    (107) expression -> . MINUS expression
    (108) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 41
    IDENTIFIER      shift and go to state 55
    RUNE            shift and go to state 42
    STRING          shift and go to state 43
    RAW_STRING      shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NIL             shift and go to state 47
    MINUS           shift and go to state 48
    LPAREN          shift and go to state 49

    condicion_compleja             shift and go to state 56
    condicion                      shift and go to state 57
    expression                     shift and go to state 36

state 26

    (66) function -> FUNC . IDENTIFIER LPAREN params_opt RPAREN return_type block
    (67) function -> FUNC . IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN expression RBRACE
    (68) function -> FUNC . MAIN LPAREN params_opt RPAREN block
    (82) method_definition -> FUNC . LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (111) function_literal -> FUNC . LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 58
    MAIN            shift and go to state 60
    LPAREN          shift and go to state 59


state 27

    (3) statement_list -> statement_list statement .

    IDENTIFIER      reduce using rule 3 (statement_list -> statement_list statement .)
    VAR             reduce using rule 3 (statement_list -> statement_list statement .)
    TYPE            reduce using rule 3 (statement_list -> statement_list statement .)
    FOR             reduce using rule 3 (statement_list -> statement_list statement .)
    PACKAGE         reduce using rule 3 (statement_list -> statement_list statement .)
    IMPORT          reduce using rule 3 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    FUNC            reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 3 (statement_list -> statement_list statement .)
    CASE            reduce using rule 3 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 3 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 3 (statement_list -> statement_list statement .)


state 28

    (30) assignment -> IDENTIFIER DECLARE_ASSIGN . expression
    (58) map -> IDENTIFIER DECLARE_ASSIGN . mapLiteral
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (92) expression -> . NUMBER
    (93) expression -> . IDENTIFIER
    (94) expression -> . RUNE
    (95) expression -> . STRING
    (96) expression -> . RAW_STRING
    (97) expression -> . TRUE
    (98) expression -> . FALSE
    (99) expression -> . NIL
    (100) expression -> . expression operator expression
    (101) expression -> . expression DOT IDENTIFIER
    (107) expression -> . MINUS expression
    (108) expression -> . LPAREN expression RPAREN
    (60) mapLiteral -> . MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE

    NUMBER          shift and go to state 41
    IDENTIFIER      shift and go to state 55
    RUNE            shift and go to state 42
    STRING          shift and go to state 43
    RAW_STRING      shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NIL             shift and go to state 47
    MINUS           shift and go to state 48
    LPAREN          shift and go to state 49
    MAP             shift and go to state 63

    expression                     shift and go to state 61
    mapLiteral                     shift and go to state 62

state 29

    (33) assignment -> IDENTIFIER ASSIGN . expression
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (92) expression -> . NUMBER
    (93) expression -> . IDENTIFIER
    (94) expression -> . RUNE
    (95) expression -> . STRING
    (96) expression -> . RAW_STRING
    (97) expression -> . TRUE
    (98) expression -> . FALSE
    (99) expression -> . NIL
    (100) expression -> . expression operator expression
    (101) expression -> . expression DOT IDENTIFIER
    (107) expression -> . MINUS expression
    (108) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 41
    IDENTIFIER      shift and go to state 55
    RUNE            shift and go to state 42
    STRING          shift and go to state 43
    RAW_STRING      shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NIL             shift and go to state 47
    MINUS           shift and go to state 48
    LPAREN          shift and go to state 49

    expression                     shift and go to state 64

state 30

    (28) input -> IDENTIFIER DOT . IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (77) print_statement -> IDENTIFIER DOT . IDENTIFIER LPAREN argument_list_opt RPAREN

    IDENTIFIER      shift and go to state 65


state 31

    (34) llamarFuncion -> IDENTIFIER LPAREN . argument_list_opt RPAREN
    (39) argument_list_opt -> . argument_list
    (40) argument_list_opt -> .
    (37) argument_list -> . expression
    (38) argument_list -> . argument_list COMMA expression
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (92) expression -> . NUMBER
    (93) expression -> . IDENTIFIER
    (94) expression -> . RUNE
    (95) expression -> . STRING
    (96) expression -> . RAW_STRING
    (97) expression -> . TRUE
    (98) expression -> . FALSE
    (99) expression -> . NIL
    (100) expression -> . expression operator expression
    (101) expression -> . expression DOT IDENTIFIER
    (107) expression -> . MINUS expression
    (108) expression -> . LPAREN expression RPAREN

    RPAREN          reduce using rule 40 (argument_list_opt -> .)
    NUMBER          shift and go to state 41
    IDENTIFIER      shift and go to state 55
    RUNE            shift and go to state 42
    STRING          shift and go to state 43
    RAW_STRING      shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NIL             shift and go to state 47
    MINUS           shift and go to state 48
    LPAREN          shift and go to state 49

    argument_list_opt              shift and go to state 66
    argument_list                  shift and go to state 67
    expression                     shift and go to state 68

state 32

    (31) assignment -> VAR IDENTIFIER . DATATYPE ASSIGN expression
    (32) assignment -> VAR IDENTIFIER . DATATYPE ASSIGN llamarFuncion
    (59) map -> VAR IDENTIFIER . ASSIGN mapLiteral

    DATATYPE        shift and go to state 69
    ASSIGN          shift and go to state 70


state 33

    (78) struct_definition -> TYPE IDENTIFIER . STRUCT LBRACE struct_fields RBRACE

    STRUCT          shift and go to state 71


state 34

    (83) for_statement -> FOR shortAssignment . SEMICOLON condicion SEMICOLON expression block

    SEMICOLON       shift and go to state 72


state 35

    (87) for_statement -> FOR condicion . block
    (90) block -> . LBRACE statement_list RBRACE
    (91) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    block                          shift and go to state 73

state 36

    (41) condicion -> expression . comparador expression
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (100) expression -> expression . operator expression
    (101) expression -> expression . DOT IDENTIFIER
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (102) operator -> . PLUS
    (103) operator -> . MINUS
    (104) operator -> . TIMES
    (105) operator -> . DIVIDE
    (106) operator -> . MOD

    DOT             shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    GT              shift and go to state 80
    LT              shift and go to state 81
    GE              shift and go to state 82
    LE              shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    MOD             shift and go to state 90

    comparador                     shift and go to state 74
    operadorLogico                 shift and go to state 75
    operator                       shift and go to state 76

state 37

    (88) for_statement -> FOR block .

    IDENTIFIER      reduce using rule 88 (for_statement -> FOR block .)
    VAR             reduce using rule 88 (for_statement -> FOR block .)
    TYPE            reduce using rule 88 (for_statement -> FOR block .)
    FOR             reduce using rule 88 (for_statement -> FOR block .)
    PACKAGE         reduce using rule 88 (for_statement -> FOR block .)
    IMPORT          reduce using rule 88 (for_statement -> FOR block .)
    SWITCH          reduce using rule 88 (for_statement -> FOR block .)
    IF              reduce using rule 88 (for_statement -> FOR block .)
    FUNC            reduce using rule 88 (for_statement -> FOR block .)
    $end            reduce using rule 88 (for_statement -> FOR block .)
    RBRACE          reduce using rule 88 (for_statement -> FOR block .)
    CASE            reduce using rule 88 (for_statement -> FOR block .)
    DEFAULT         reduce using rule 88 (for_statement -> FOR block .)
    RETURN          reduce using rule 88 (for_statement -> FOR block .)


state 38

    (86) shortAssignment -> identifier_list . DECLARE_ASSIGN expression

    DECLARE_ASSIGN  shift and go to state 91


state 39

    (90) block -> LBRACE . statement_list RBRACE
    (91) block -> LBRACE . RBRACE
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . assignment
    (5) statement -> . input
    (6) statement -> . llamarFuncion
    (7) statement -> . print_statement
    (8) statement -> . struct_definition
    (9) statement -> . for_statement
    (10) statement -> . package
    (11) statement -> . import
    (12) statement -> . switch
    (13) statement -> . map
    (14) statement -> . if_statement
    (15) statement -> . function
    (16) statement -> . method_definition
    (17) statement -> . function_literal
    (30) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (31) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (32) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (33) assignment -> . IDENTIFIER ASSIGN expression
    (28) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (34) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (77) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (78) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (83) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (87) for_statement -> . FOR condicion block
    (88) for_statement -> . FOR block
    (18) package -> . PACKAGE MAIN
    (19) package -> . PACKAGE IDENTIFIER
    (20) import -> . IMPORT STRING
    (21) import -> . IMPORT LPAREN import_list RPAREN
    (53) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (58) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (59) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (109) if_statement -> . IF condicion_compleja block
    (110) if_statement -> . IF condicion_compleja block ELSE block
    (66) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block
    (67) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN expression RBRACE
    (68) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (82) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (111) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    RBRACE          shift and go to state 93
    IDENTIFIER      shift and go to state 18
    VAR             shift and go to state 19
    TYPE            shift and go to state 20
    FOR             shift and go to state 21
    PACKAGE         shift and go to state 22
    IMPORT          shift and go to state 23
    SWITCH          shift and go to state 24
    IF              shift and go to state 25
    FUNC            shift and go to state 26

    statement_list                 shift and go to state 92
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17

state 40

    (84) identifier_list -> IDENTIFIER .
    (85) identifier_list -> IDENTIFIER . COMMA identifier_list
    (93) expression -> IDENTIFIER .

    DECLARE_ASSIGN  reduce using rule 84 (identifier_list -> IDENTIFIER .)
    COMMA           shift and go to state 94
    DOT             reduce using rule 93 (expression -> IDENTIFIER .)
    EQ              reduce using rule 93 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 93 (expression -> IDENTIFIER .)
    GT              reduce using rule 93 (expression -> IDENTIFIER .)
    LT              reduce using rule 93 (expression -> IDENTIFIER .)
    GE              reduce using rule 93 (expression -> IDENTIFIER .)
    LE              reduce using rule 93 (expression -> IDENTIFIER .)
    AND             reduce using rule 93 (expression -> IDENTIFIER .)
    OR              reduce using rule 93 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 93 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 93 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 93 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 93 (expression -> IDENTIFIER .)
    MOD             reduce using rule 93 (expression -> IDENTIFIER .)


state 41

    (92) expression -> NUMBER .

    DOT             reduce using rule 92 (expression -> NUMBER .)
    EQ              reduce using rule 92 (expression -> NUMBER .)
    NEQ             reduce using rule 92 (expression -> NUMBER .)
    GT              reduce using rule 92 (expression -> NUMBER .)
    LT              reduce using rule 92 (expression -> NUMBER .)
    GE              reduce using rule 92 (expression -> NUMBER .)
    LE              reduce using rule 92 (expression -> NUMBER .)
    AND             reduce using rule 92 (expression -> NUMBER .)
    OR              reduce using rule 92 (expression -> NUMBER .)
    PLUS            reduce using rule 92 (expression -> NUMBER .)
    MINUS           reduce using rule 92 (expression -> NUMBER .)
    TIMES           reduce using rule 92 (expression -> NUMBER .)
    DIVIDE          reduce using rule 92 (expression -> NUMBER .)
    MOD             reduce using rule 92 (expression -> NUMBER .)
    LBRACE          reduce using rule 92 (expression -> NUMBER .)
    IDENTIFIER      reduce using rule 92 (expression -> NUMBER .)
    VAR             reduce using rule 92 (expression -> NUMBER .)
    TYPE            reduce using rule 92 (expression -> NUMBER .)
    FOR             reduce using rule 92 (expression -> NUMBER .)
    PACKAGE         reduce using rule 92 (expression -> NUMBER .)
    IMPORT          reduce using rule 92 (expression -> NUMBER .)
    SWITCH          reduce using rule 92 (expression -> NUMBER .)
    IF              reduce using rule 92 (expression -> NUMBER .)
    FUNC            reduce using rule 92 (expression -> NUMBER .)
    $end            reduce using rule 92 (expression -> NUMBER .)
    RBRACE          reduce using rule 92 (expression -> NUMBER .)
    CASE            reduce using rule 92 (expression -> NUMBER .)
    DEFAULT         reduce using rule 92 (expression -> NUMBER .)
    RETURN          reduce using rule 92 (expression -> NUMBER .)
    COMMA           reduce using rule 92 (expression -> NUMBER .)
    RPAREN          reduce using rule 92 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 92 (expression -> NUMBER .)
    COLON           reduce using rule 92 (expression -> NUMBER .)


state 42

    (94) expression -> RUNE .

    DOT             reduce using rule 94 (expression -> RUNE .)
    EQ              reduce using rule 94 (expression -> RUNE .)
    NEQ             reduce using rule 94 (expression -> RUNE .)
    GT              reduce using rule 94 (expression -> RUNE .)
    LT              reduce using rule 94 (expression -> RUNE .)
    GE              reduce using rule 94 (expression -> RUNE .)
    LE              reduce using rule 94 (expression -> RUNE .)
    AND             reduce using rule 94 (expression -> RUNE .)
    OR              reduce using rule 94 (expression -> RUNE .)
    PLUS            reduce using rule 94 (expression -> RUNE .)
    MINUS           reduce using rule 94 (expression -> RUNE .)
    TIMES           reduce using rule 94 (expression -> RUNE .)
    DIVIDE          reduce using rule 94 (expression -> RUNE .)
    MOD             reduce using rule 94 (expression -> RUNE .)
    LBRACE          reduce using rule 94 (expression -> RUNE .)
    IDENTIFIER      reduce using rule 94 (expression -> RUNE .)
    VAR             reduce using rule 94 (expression -> RUNE .)
    TYPE            reduce using rule 94 (expression -> RUNE .)
    FOR             reduce using rule 94 (expression -> RUNE .)
    PACKAGE         reduce using rule 94 (expression -> RUNE .)
    IMPORT          reduce using rule 94 (expression -> RUNE .)
    SWITCH          reduce using rule 94 (expression -> RUNE .)
    IF              reduce using rule 94 (expression -> RUNE .)
    FUNC            reduce using rule 94 (expression -> RUNE .)
    $end            reduce using rule 94 (expression -> RUNE .)
    RBRACE          reduce using rule 94 (expression -> RUNE .)
    CASE            reduce using rule 94 (expression -> RUNE .)
    DEFAULT         reduce using rule 94 (expression -> RUNE .)
    RETURN          reduce using rule 94 (expression -> RUNE .)
    COMMA           reduce using rule 94 (expression -> RUNE .)
    RPAREN          reduce using rule 94 (expression -> RUNE .)
    SEMICOLON       reduce using rule 94 (expression -> RUNE .)
    COLON           reduce using rule 94 (expression -> RUNE .)


state 43

    (95) expression -> STRING .

    DOT             reduce using rule 95 (expression -> STRING .)
    EQ              reduce using rule 95 (expression -> STRING .)
    NEQ             reduce using rule 95 (expression -> STRING .)
    GT              reduce using rule 95 (expression -> STRING .)
    LT              reduce using rule 95 (expression -> STRING .)
    GE              reduce using rule 95 (expression -> STRING .)
    LE              reduce using rule 95 (expression -> STRING .)
    AND             reduce using rule 95 (expression -> STRING .)
    OR              reduce using rule 95 (expression -> STRING .)
    PLUS            reduce using rule 95 (expression -> STRING .)
    MINUS           reduce using rule 95 (expression -> STRING .)
    TIMES           reduce using rule 95 (expression -> STRING .)
    DIVIDE          reduce using rule 95 (expression -> STRING .)
    MOD             reduce using rule 95 (expression -> STRING .)
    LBRACE          reduce using rule 95 (expression -> STRING .)
    IDENTIFIER      reduce using rule 95 (expression -> STRING .)
    VAR             reduce using rule 95 (expression -> STRING .)
    TYPE            reduce using rule 95 (expression -> STRING .)
    FOR             reduce using rule 95 (expression -> STRING .)
    PACKAGE         reduce using rule 95 (expression -> STRING .)
    IMPORT          reduce using rule 95 (expression -> STRING .)
    SWITCH          reduce using rule 95 (expression -> STRING .)
    IF              reduce using rule 95 (expression -> STRING .)
    FUNC            reduce using rule 95 (expression -> STRING .)
    $end            reduce using rule 95 (expression -> STRING .)
    RBRACE          reduce using rule 95 (expression -> STRING .)
    CASE            reduce using rule 95 (expression -> STRING .)
    DEFAULT         reduce using rule 95 (expression -> STRING .)
    RETURN          reduce using rule 95 (expression -> STRING .)
    COMMA           reduce using rule 95 (expression -> STRING .)
    RPAREN          reduce using rule 95 (expression -> STRING .)
    SEMICOLON       reduce using rule 95 (expression -> STRING .)
    COLON           reduce using rule 95 (expression -> STRING .)


state 44

    (96) expression -> RAW_STRING .

    DOT             reduce using rule 96 (expression -> RAW_STRING .)
    EQ              reduce using rule 96 (expression -> RAW_STRING .)
    NEQ             reduce using rule 96 (expression -> RAW_STRING .)
    GT              reduce using rule 96 (expression -> RAW_STRING .)
    LT              reduce using rule 96 (expression -> RAW_STRING .)
    GE              reduce using rule 96 (expression -> RAW_STRING .)
    LE              reduce using rule 96 (expression -> RAW_STRING .)
    AND             reduce using rule 96 (expression -> RAW_STRING .)
    OR              reduce using rule 96 (expression -> RAW_STRING .)
    PLUS            reduce using rule 96 (expression -> RAW_STRING .)
    MINUS           reduce using rule 96 (expression -> RAW_STRING .)
    TIMES           reduce using rule 96 (expression -> RAW_STRING .)
    DIVIDE          reduce using rule 96 (expression -> RAW_STRING .)
    MOD             reduce using rule 96 (expression -> RAW_STRING .)
    LBRACE          reduce using rule 96 (expression -> RAW_STRING .)
    IDENTIFIER      reduce using rule 96 (expression -> RAW_STRING .)
    VAR             reduce using rule 96 (expression -> RAW_STRING .)
    TYPE            reduce using rule 96 (expression -> RAW_STRING .)
    FOR             reduce using rule 96 (expression -> RAW_STRING .)
    PACKAGE         reduce using rule 96 (expression -> RAW_STRING .)
    IMPORT          reduce using rule 96 (expression -> RAW_STRING .)
    SWITCH          reduce using rule 96 (expression -> RAW_STRING .)
    IF              reduce using rule 96 (expression -> RAW_STRING .)
    FUNC            reduce using rule 96 (expression -> RAW_STRING .)
    $end            reduce using rule 96 (expression -> RAW_STRING .)
    RBRACE          reduce using rule 96 (expression -> RAW_STRING .)
    CASE            reduce using rule 96 (expression -> RAW_STRING .)
    DEFAULT         reduce using rule 96 (expression -> RAW_STRING .)
    RETURN          reduce using rule 96 (expression -> RAW_STRING .)
    COMMA           reduce using rule 96 (expression -> RAW_STRING .)
    RPAREN          reduce using rule 96 (expression -> RAW_STRING .)
    SEMICOLON       reduce using rule 96 (expression -> RAW_STRING .)
    COLON           reduce using rule 96 (expression -> RAW_STRING .)


state 45

    (97) expression -> TRUE .

    DOT             reduce using rule 97 (expression -> TRUE .)
    EQ              reduce using rule 97 (expression -> TRUE .)
    NEQ             reduce using rule 97 (expression -> TRUE .)
    GT              reduce using rule 97 (expression -> TRUE .)
    LT              reduce using rule 97 (expression -> TRUE .)
    GE              reduce using rule 97 (expression -> TRUE .)
    LE              reduce using rule 97 (expression -> TRUE .)
    AND             reduce using rule 97 (expression -> TRUE .)
    OR              reduce using rule 97 (expression -> TRUE .)
    PLUS            reduce using rule 97 (expression -> TRUE .)
    MINUS           reduce using rule 97 (expression -> TRUE .)
    TIMES           reduce using rule 97 (expression -> TRUE .)
    DIVIDE          reduce using rule 97 (expression -> TRUE .)
    MOD             reduce using rule 97 (expression -> TRUE .)
    LBRACE          reduce using rule 97 (expression -> TRUE .)
    IDENTIFIER      reduce using rule 97 (expression -> TRUE .)
    VAR             reduce using rule 97 (expression -> TRUE .)
    TYPE            reduce using rule 97 (expression -> TRUE .)
    FOR             reduce using rule 97 (expression -> TRUE .)
    PACKAGE         reduce using rule 97 (expression -> TRUE .)
    IMPORT          reduce using rule 97 (expression -> TRUE .)
    SWITCH          reduce using rule 97 (expression -> TRUE .)
    IF              reduce using rule 97 (expression -> TRUE .)
    FUNC            reduce using rule 97 (expression -> TRUE .)
    $end            reduce using rule 97 (expression -> TRUE .)
    RBRACE          reduce using rule 97 (expression -> TRUE .)
    CASE            reduce using rule 97 (expression -> TRUE .)
    DEFAULT         reduce using rule 97 (expression -> TRUE .)
    RETURN          reduce using rule 97 (expression -> TRUE .)
    COMMA           reduce using rule 97 (expression -> TRUE .)
    RPAREN          reduce using rule 97 (expression -> TRUE .)
    SEMICOLON       reduce using rule 97 (expression -> TRUE .)
    COLON           reduce using rule 97 (expression -> TRUE .)


state 46

    (98) expression -> FALSE .

    DOT             reduce using rule 98 (expression -> FALSE .)
    EQ              reduce using rule 98 (expression -> FALSE .)
    NEQ             reduce using rule 98 (expression -> FALSE .)
    GT              reduce using rule 98 (expression -> FALSE .)
    LT              reduce using rule 98 (expression -> FALSE .)
    GE              reduce using rule 98 (expression -> FALSE .)
    LE              reduce using rule 98 (expression -> FALSE .)
    AND             reduce using rule 98 (expression -> FALSE .)
    OR              reduce using rule 98 (expression -> FALSE .)
    PLUS            reduce using rule 98 (expression -> FALSE .)
    MINUS           reduce using rule 98 (expression -> FALSE .)
    TIMES           reduce using rule 98 (expression -> FALSE .)
    DIVIDE          reduce using rule 98 (expression -> FALSE .)
    MOD             reduce using rule 98 (expression -> FALSE .)
    LBRACE          reduce using rule 98 (expression -> FALSE .)
    IDENTIFIER      reduce using rule 98 (expression -> FALSE .)
    VAR             reduce using rule 98 (expression -> FALSE .)
    TYPE            reduce using rule 98 (expression -> FALSE .)
    FOR             reduce using rule 98 (expression -> FALSE .)
    PACKAGE         reduce using rule 98 (expression -> FALSE .)
    IMPORT          reduce using rule 98 (expression -> FALSE .)
    SWITCH          reduce using rule 98 (expression -> FALSE .)
    IF              reduce using rule 98 (expression -> FALSE .)
    FUNC            reduce using rule 98 (expression -> FALSE .)
    $end            reduce using rule 98 (expression -> FALSE .)
    RBRACE          reduce using rule 98 (expression -> FALSE .)
    CASE            reduce using rule 98 (expression -> FALSE .)
    DEFAULT         reduce using rule 98 (expression -> FALSE .)
    RETURN          reduce using rule 98 (expression -> FALSE .)
    COMMA           reduce using rule 98 (expression -> FALSE .)
    RPAREN          reduce using rule 98 (expression -> FALSE .)
    SEMICOLON       reduce using rule 98 (expression -> FALSE .)
    COLON           reduce using rule 98 (expression -> FALSE .)


state 47

    (99) expression -> NIL .

    DOT             reduce using rule 99 (expression -> NIL .)
    EQ              reduce using rule 99 (expression -> NIL .)
    NEQ             reduce using rule 99 (expression -> NIL .)
    GT              reduce using rule 99 (expression -> NIL .)
    LT              reduce using rule 99 (expression -> NIL .)
    GE              reduce using rule 99 (expression -> NIL .)
    LE              reduce using rule 99 (expression -> NIL .)
    AND             reduce using rule 99 (expression -> NIL .)
    OR              reduce using rule 99 (expression -> NIL .)
    PLUS            reduce using rule 99 (expression -> NIL .)
    MINUS           reduce using rule 99 (expression -> NIL .)
    TIMES           reduce using rule 99 (expression -> NIL .)
    DIVIDE          reduce using rule 99 (expression -> NIL .)
    MOD             reduce using rule 99 (expression -> NIL .)
    LBRACE          reduce using rule 99 (expression -> NIL .)
    IDENTIFIER      reduce using rule 99 (expression -> NIL .)
    VAR             reduce using rule 99 (expression -> NIL .)
    TYPE            reduce using rule 99 (expression -> NIL .)
    FOR             reduce using rule 99 (expression -> NIL .)
    PACKAGE         reduce using rule 99 (expression -> NIL .)
    IMPORT          reduce using rule 99 (expression -> NIL .)
    SWITCH          reduce using rule 99 (expression -> NIL .)
    IF              reduce using rule 99 (expression -> NIL .)
    FUNC            reduce using rule 99 (expression -> NIL .)
    $end            reduce using rule 99 (expression -> NIL .)
    RBRACE          reduce using rule 99 (expression -> NIL .)
    CASE            reduce using rule 99 (expression -> NIL .)
    DEFAULT         reduce using rule 99 (expression -> NIL .)
    RETURN          reduce using rule 99 (expression -> NIL .)
    COMMA           reduce using rule 99 (expression -> NIL .)
    RPAREN          reduce using rule 99 (expression -> NIL .)
    SEMICOLON       reduce using rule 99 (expression -> NIL .)
    COLON           reduce using rule 99 (expression -> NIL .)


state 48

    (107) expression -> MINUS . expression
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (92) expression -> . NUMBER
    (93) expression -> . IDENTIFIER
    (94) expression -> . RUNE
    (95) expression -> . STRING
    (96) expression -> . RAW_STRING
    (97) expression -> . TRUE
    (98) expression -> . FALSE
    (99) expression -> . NIL
    (100) expression -> . expression operator expression
    (101) expression -> . expression DOT IDENTIFIER
    (107) expression -> . MINUS expression
    (108) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 41
    IDENTIFIER      shift and go to state 55
    RUNE            shift and go to state 42
    STRING          shift and go to state 43
    RAW_STRING      shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NIL             shift and go to state 47
    MINUS           shift and go to state 48
    LPAREN          shift and go to state 49

    expression                     shift and go to state 95

state 49

    (108) expression -> LPAREN . expression RPAREN
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (92) expression -> . NUMBER
    (93) expression -> . IDENTIFIER
    (94) expression -> . RUNE
    (95) expression -> . STRING
    (96) expression -> . RAW_STRING
    (97) expression -> . TRUE
    (98) expression -> . FALSE
    (99) expression -> . NIL
    (100) expression -> . expression operator expression
    (101) expression -> . expression DOT IDENTIFIER
    (107) expression -> . MINUS expression
    (108) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 41
    IDENTIFIER      shift and go to state 55
    RUNE            shift and go to state 42
    STRING          shift and go to state 43
    RAW_STRING      shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NIL             shift and go to state 47
    MINUS           shift and go to state 48
    LPAREN          shift and go to state 49

    expression                     shift and go to state 96

state 50

    (18) package -> PACKAGE MAIN .

    IDENTIFIER      reduce using rule 18 (package -> PACKAGE MAIN .)
    VAR             reduce using rule 18 (package -> PACKAGE MAIN .)
    TYPE            reduce using rule 18 (package -> PACKAGE MAIN .)
    FOR             reduce using rule 18 (package -> PACKAGE MAIN .)
    PACKAGE         reduce using rule 18 (package -> PACKAGE MAIN .)
    IMPORT          reduce using rule 18 (package -> PACKAGE MAIN .)
    SWITCH          reduce using rule 18 (package -> PACKAGE MAIN .)
    IF              reduce using rule 18 (package -> PACKAGE MAIN .)
    FUNC            reduce using rule 18 (package -> PACKAGE MAIN .)
    $end            reduce using rule 18 (package -> PACKAGE MAIN .)
    RBRACE          reduce using rule 18 (package -> PACKAGE MAIN .)
    CASE            reduce using rule 18 (package -> PACKAGE MAIN .)
    DEFAULT         reduce using rule 18 (package -> PACKAGE MAIN .)
    RETURN          reduce using rule 18 (package -> PACKAGE MAIN .)


state 51

    (19) package -> PACKAGE IDENTIFIER .

    IDENTIFIER      reduce using rule 19 (package -> PACKAGE IDENTIFIER .)
    VAR             reduce using rule 19 (package -> PACKAGE IDENTIFIER .)
    TYPE            reduce using rule 19 (package -> PACKAGE IDENTIFIER .)
    FOR             reduce using rule 19 (package -> PACKAGE IDENTIFIER .)
    PACKAGE         reduce using rule 19 (package -> PACKAGE IDENTIFIER .)
    IMPORT          reduce using rule 19 (package -> PACKAGE IDENTIFIER .)
    SWITCH          reduce using rule 19 (package -> PACKAGE IDENTIFIER .)
    IF              reduce using rule 19 (package -> PACKAGE IDENTIFIER .)
    FUNC            reduce using rule 19 (package -> PACKAGE IDENTIFIER .)
    $end            reduce using rule 19 (package -> PACKAGE IDENTIFIER .)
    RBRACE          reduce using rule 19 (package -> PACKAGE IDENTIFIER .)
    CASE            reduce using rule 19 (package -> PACKAGE IDENTIFIER .)
    DEFAULT         reduce using rule 19 (package -> PACKAGE IDENTIFIER .)
    RETURN          reduce using rule 19 (package -> PACKAGE IDENTIFIER .)


state 52

    (20) import -> IMPORT STRING .

    IDENTIFIER      reduce using rule 20 (import -> IMPORT STRING .)
    VAR             reduce using rule 20 (import -> IMPORT STRING .)
    TYPE            reduce using rule 20 (import -> IMPORT STRING .)
    FOR             reduce using rule 20 (import -> IMPORT STRING .)
    PACKAGE         reduce using rule 20 (import -> IMPORT STRING .)
    IMPORT          reduce using rule 20 (import -> IMPORT STRING .)
    SWITCH          reduce using rule 20 (import -> IMPORT STRING .)
    IF              reduce using rule 20 (import -> IMPORT STRING .)
    FUNC            reduce using rule 20 (import -> IMPORT STRING .)
    $end            reduce using rule 20 (import -> IMPORT STRING .)
    RBRACE          reduce using rule 20 (import -> IMPORT STRING .)
    CASE            reduce using rule 20 (import -> IMPORT STRING .)
    DEFAULT         reduce using rule 20 (import -> IMPORT STRING .)
    RETURN          reduce using rule 20 (import -> IMPORT STRING .)


state 53

    (21) import -> IMPORT LPAREN . import_list RPAREN
    (22) import_list -> . STRING
    (23) import_list -> . import_list STRING

    STRING          shift and go to state 98

    import_list                    shift and go to state 97

state 54

    (53) switch -> SWITCH expression . LBRACE caseBlocks RBRACE
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (100) expression -> expression . operator expression
    (101) expression -> expression . DOT IDENTIFIER
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (102) operator -> . PLUS
    (103) operator -> . MINUS
    (104) operator -> . TIMES
    (105) operator -> . DIVIDE
    (106) operator -> . MOD

    LBRACE          shift and go to state 99
    DOT             shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    GT              shift and go to state 80
    LT              shift and go to state 81
    GE              shift and go to state 82
    LE              shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    MOD             shift and go to state 90

    comparador                     shift and go to state 100
    operadorLogico                 shift and go to state 75
    operator                       shift and go to state 76

state 55

    (93) expression -> IDENTIFIER .

    LBRACE          reduce using rule 93 (expression -> IDENTIFIER .)
    DOT             reduce using rule 93 (expression -> IDENTIFIER .)
    EQ              reduce using rule 93 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 93 (expression -> IDENTIFIER .)
    GT              reduce using rule 93 (expression -> IDENTIFIER .)
    LT              reduce using rule 93 (expression -> IDENTIFIER .)
    GE              reduce using rule 93 (expression -> IDENTIFIER .)
    LE              reduce using rule 93 (expression -> IDENTIFIER .)
    AND             reduce using rule 93 (expression -> IDENTIFIER .)
    OR              reduce using rule 93 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 93 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 93 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 93 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 93 (expression -> IDENTIFIER .)
    MOD             reduce using rule 93 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 93 (expression -> IDENTIFIER .)
    VAR             reduce using rule 93 (expression -> IDENTIFIER .)
    TYPE            reduce using rule 93 (expression -> IDENTIFIER .)
    FOR             reduce using rule 93 (expression -> IDENTIFIER .)
    PACKAGE         reduce using rule 93 (expression -> IDENTIFIER .)
    IMPORT          reduce using rule 93 (expression -> IDENTIFIER .)
    SWITCH          reduce using rule 93 (expression -> IDENTIFIER .)
    IF              reduce using rule 93 (expression -> IDENTIFIER .)
    FUNC            reduce using rule 93 (expression -> IDENTIFIER .)
    $end            reduce using rule 93 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 93 (expression -> IDENTIFIER .)
    CASE            reduce using rule 93 (expression -> IDENTIFIER .)
    DEFAULT         reduce using rule 93 (expression -> IDENTIFIER .)
    RETURN          reduce using rule 93 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 93 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 93 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 93 (expression -> IDENTIFIER .)
    COLON           reduce using rule 93 (expression -> IDENTIFIER .)


state 56

    (109) if_statement -> IF condicion_compleja . block
    (110) if_statement -> IF condicion_compleja . block ELSE block
    (90) block -> . LBRACE statement_list RBRACE
    (91) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    block                          shift and go to state 101

state 57

    (42) condicion_compleja -> condicion . operadorLogico condicion
    (43) condicion_compleja -> condicion . operadorLogico condicion_compleja
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR

    AND             shift and go to state 84
    OR              shift and go to state 85

    operadorLogico                 shift and go to state 102

state 58

    (66) function -> FUNC IDENTIFIER . LPAREN params_opt RPAREN return_type block
    (67) function -> FUNC IDENTIFIER . LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN expression RBRACE

    LPAREN          shift and go to state 103


state 59

    (82) method_definition -> FUNC LPAREN . IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (111) function_literal -> FUNC LPAREN . parameters RPAREN return_type block
    (112) parameters -> . parameters COMMA parameter
    (113) parameters -> . parameter
    (114) parameters -> . empty
    (115) parameter -> . IDENTIFIER DATATYPE
    (116) parameter -> . IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE
    (52) empty -> .

    IDENTIFIER      shift and go to state 104
    RPAREN          reduce using rule 52 (empty -> .)
    COMMA           reduce using rule 52 (empty -> .)

    parameters                     shift and go to state 105
    parameter                      shift and go to state 106
    empty                          shift and go to state 107

state 60

    (68) function -> FUNC MAIN . LPAREN params_opt RPAREN block

    LPAREN          shift and go to state 108


state 61

    (30) assignment -> IDENTIFIER DECLARE_ASSIGN expression .
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (100) expression -> expression . operator expression
    (101) expression -> expression . DOT IDENTIFIER
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (102) operator -> . PLUS
    (103) operator -> . MINUS
    (104) operator -> . TIMES
    (105) operator -> . DIVIDE
    (106) operator -> . MOD

    IDENTIFIER      reduce using rule 30 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    VAR             reduce using rule 30 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    TYPE            reduce using rule 30 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    FOR             reduce using rule 30 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    PACKAGE         reduce using rule 30 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    IMPORT          reduce using rule 30 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    SWITCH          reduce using rule 30 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    IF              reduce using rule 30 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    FUNC            reduce using rule 30 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    $end            reduce using rule 30 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    RBRACE          reduce using rule 30 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    CASE            reduce using rule 30 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    DEFAULT         reduce using rule 30 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    RETURN          reduce using rule 30 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    DOT             shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    GT              shift and go to state 80
    LT              shift and go to state 81
    GE              shift and go to state 82
    LE              shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    MOD             shift and go to state 90

    comparador                     shift and go to state 100
    operadorLogico                 shift and go to state 75
    operator                       shift and go to state 76

state 62

    (58) map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .

    IDENTIFIER      reduce using rule 58 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    VAR             reduce using rule 58 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    TYPE            reduce using rule 58 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    FOR             reduce using rule 58 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    PACKAGE         reduce using rule 58 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    IMPORT          reduce using rule 58 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    SWITCH          reduce using rule 58 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    IF              reduce using rule 58 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    FUNC            reduce using rule 58 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    $end            reduce using rule 58 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    RBRACE          reduce using rule 58 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    CASE            reduce using rule 58 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    DEFAULT         reduce using rule 58 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    RETURN          reduce using rule 58 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)


state 63

    (60) mapLiteral -> MAP . LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE

    LBRACKET        shift and go to state 109


state 64

    (33) assignment -> IDENTIFIER ASSIGN expression .
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (100) expression -> expression . operator expression
    (101) expression -> expression . DOT IDENTIFIER
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (102) operator -> . PLUS
    (103) operator -> . MINUS
    (104) operator -> . TIMES
    (105) operator -> . DIVIDE
    (106) operator -> . MOD

    IDENTIFIER      reduce using rule 33 (assignment -> IDENTIFIER ASSIGN expression .)
    VAR             reduce using rule 33 (assignment -> IDENTIFIER ASSIGN expression .)
    TYPE            reduce using rule 33 (assignment -> IDENTIFIER ASSIGN expression .)
    FOR             reduce using rule 33 (assignment -> IDENTIFIER ASSIGN expression .)
    PACKAGE         reduce using rule 33 (assignment -> IDENTIFIER ASSIGN expression .)
    IMPORT          reduce using rule 33 (assignment -> IDENTIFIER ASSIGN expression .)
    SWITCH          reduce using rule 33 (assignment -> IDENTIFIER ASSIGN expression .)
    IF              reduce using rule 33 (assignment -> IDENTIFIER ASSIGN expression .)
    FUNC            reduce using rule 33 (assignment -> IDENTIFIER ASSIGN expression .)
    $end            reduce using rule 33 (assignment -> IDENTIFIER ASSIGN expression .)
    RBRACE          reduce using rule 33 (assignment -> IDENTIFIER ASSIGN expression .)
    CASE            reduce using rule 33 (assignment -> IDENTIFIER ASSIGN expression .)
    DEFAULT         reduce using rule 33 (assignment -> IDENTIFIER ASSIGN expression .)
    RETURN          reduce using rule 33 (assignment -> IDENTIFIER ASSIGN expression .)
    DOT             shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    GT              shift and go to state 80
    LT              shift and go to state 81
    GE              shift and go to state 82
    LE              shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    MOD             shift and go to state 90

    comparador                     shift and go to state 100
    operadorLogico                 shift and go to state 75
    operator                       shift and go to state 76

state 65

    (28) input -> IDENTIFIER DOT IDENTIFIER . LPAREN AMPERSAND IDENTIFIER RPAREN
    (77) print_statement -> IDENTIFIER DOT IDENTIFIER . LPAREN argument_list_opt RPAREN

    LPAREN          shift and go to state 110


state 66

    (34) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 111


state 67

    (39) argument_list_opt -> argument_list .
    (38) argument_list -> argument_list . COMMA expression

    RPAREN          reduce using rule 39 (argument_list_opt -> argument_list .)
    COMMA           shift and go to state 112


state 68

    (37) argument_list -> expression .
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (100) expression -> expression . operator expression
    (101) expression -> expression . DOT IDENTIFIER
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (102) operator -> . PLUS
    (103) operator -> . MINUS
    (104) operator -> . TIMES
    (105) operator -> . DIVIDE
    (106) operator -> . MOD

    COMMA           reduce using rule 37 (argument_list -> expression .)
    RPAREN          reduce using rule 37 (argument_list -> expression .)
    DOT             shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    GT              shift and go to state 80
    LT              shift and go to state 81
    GE              shift and go to state 82
    LE              shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    MOD             shift and go to state 90

    comparador                     shift and go to state 100
    operadorLogico                 shift and go to state 75
    operator                       shift and go to state 76

state 69

    (31) assignment -> VAR IDENTIFIER DATATYPE . ASSIGN expression
    (32) assignment -> VAR IDENTIFIER DATATYPE . ASSIGN llamarFuncion

    ASSIGN          shift and go to state 113


state 70

    (59) map -> VAR IDENTIFIER ASSIGN . mapLiteral
    (60) mapLiteral -> . MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE

    MAP             shift and go to state 63

    mapLiteral                     shift and go to state 114

state 71

    (78) struct_definition -> TYPE IDENTIFIER STRUCT . LBRACE struct_fields RBRACE

    LBRACE          shift and go to state 115


state 72

    (83) for_statement -> FOR shortAssignment SEMICOLON . condicion SEMICOLON expression block
    (41) condicion -> . expression comparador expression
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (92) expression -> . NUMBER
    (93) expression -> . IDENTIFIER
    (94) expression -> . RUNE
    (95) expression -> . STRING
    (96) expression -> . RAW_STRING
    (97) expression -> . TRUE
    (98) expression -> . FALSE
    (99) expression -> . NIL
    (100) expression -> . expression operator expression
    (101) expression -> . expression DOT IDENTIFIER
    (107) expression -> . MINUS expression
    (108) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 41
    IDENTIFIER      shift and go to state 55
    RUNE            shift and go to state 42
    STRING          shift and go to state 43
    RAW_STRING      shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NIL             shift and go to state 47
    MINUS           shift and go to state 48
    LPAREN          shift and go to state 49

    condicion                      shift and go to state 116
    expression                     shift and go to state 36

state 73

    (87) for_statement -> FOR condicion block .

    IDENTIFIER      reduce using rule 87 (for_statement -> FOR condicion block .)
    VAR             reduce using rule 87 (for_statement -> FOR condicion block .)
    TYPE            reduce using rule 87 (for_statement -> FOR condicion block .)
    FOR             reduce using rule 87 (for_statement -> FOR condicion block .)
    PACKAGE         reduce using rule 87 (for_statement -> FOR condicion block .)
    IMPORT          reduce using rule 87 (for_statement -> FOR condicion block .)
    SWITCH          reduce using rule 87 (for_statement -> FOR condicion block .)
    IF              reduce using rule 87 (for_statement -> FOR condicion block .)
    FUNC            reduce using rule 87 (for_statement -> FOR condicion block .)
    $end            reduce using rule 87 (for_statement -> FOR condicion block .)
    RBRACE          reduce using rule 87 (for_statement -> FOR condicion block .)
    CASE            reduce using rule 87 (for_statement -> FOR condicion block .)
    DEFAULT         reduce using rule 87 (for_statement -> FOR condicion block .)
    RETURN          reduce using rule 87 (for_statement -> FOR condicion block .)


state 74

    (41) condicion -> expression comparador . expression
    (35) expression -> expression comparador . expression
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (92) expression -> . NUMBER
    (93) expression -> . IDENTIFIER
    (94) expression -> . RUNE
    (95) expression -> . STRING
    (96) expression -> . RAW_STRING
    (97) expression -> . TRUE
    (98) expression -> . FALSE
    (99) expression -> . NIL
    (100) expression -> . expression operator expression
    (101) expression -> . expression DOT IDENTIFIER
    (107) expression -> . MINUS expression
    (108) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 41
    IDENTIFIER      shift and go to state 55
    RUNE            shift and go to state 42
    STRING          shift and go to state 43
    RAW_STRING      shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NIL             shift and go to state 47
    MINUS           shift and go to state 48
    LPAREN          shift and go to state 49

    expression                     shift and go to state 117

state 75

    (36) expression -> expression operadorLogico . expression
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (92) expression -> . NUMBER
    (93) expression -> . IDENTIFIER
    (94) expression -> . RUNE
    (95) expression -> . STRING
    (96) expression -> . RAW_STRING
    (97) expression -> . TRUE
    (98) expression -> . FALSE
    (99) expression -> . NIL
    (100) expression -> . expression operator expression
    (101) expression -> . expression DOT IDENTIFIER
    (107) expression -> . MINUS expression
    (108) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 41
    IDENTIFIER      shift and go to state 55
    RUNE            shift and go to state 42
    STRING          shift and go to state 43
    RAW_STRING      shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NIL             shift and go to state 47
    MINUS           shift and go to state 48
    LPAREN          shift and go to state 49

    expression                     shift and go to state 118

state 76

    (100) expression -> expression operator . expression
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (92) expression -> . NUMBER
    (93) expression -> . IDENTIFIER
    (94) expression -> . RUNE
    (95) expression -> . STRING
    (96) expression -> . RAW_STRING
    (97) expression -> . TRUE
    (98) expression -> . FALSE
    (99) expression -> . NIL
    (100) expression -> . expression operator expression
    (101) expression -> . expression DOT IDENTIFIER
    (107) expression -> . MINUS expression
    (108) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 41
    IDENTIFIER      shift and go to state 55
    RUNE            shift and go to state 42
    STRING          shift and go to state 43
    RAW_STRING      shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NIL             shift and go to state 47
    MINUS           shift and go to state 48
    LPAREN          shift and go to state 49

    expression                     shift and go to state 119

state 77

    (101) expression -> expression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 120


state 78

    (46) comparador -> EQ .

    NUMBER          reduce using rule 46 (comparador -> EQ .)
    IDENTIFIER      reduce using rule 46 (comparador -> EQ .)
    RUNE            reduce using rule 46 (comparador -> EQ .)
    STRING          reduce using rule 46 (comparador -> EQ .)
    RAW_STRING      reduce using rule 46 (comparador -> EQ .)
    TRUE            reduce using rule 46 (comparador -> EQ .)
    FALSE           reduce using rule 46 (comparador -> EQ .)
    NIL             reduce using rule 46 (comparador -> EQ .)
    MINUS           reduce using rule 46 (comparador -> EQ .)
    LPAREN          reduce using rule 46 (comparador -> EQ .)


state 79

    (47) comparador -> NEQ .

    NUMBER          reduce using rule 47 (comparador -> NEQ .)
    IDENTIFIER      reduce using rule 47 (comparador -> NEQ .)
    RUNE            reduce using rule 47 (comparador -> NEQ .)
    STRING          reduce using rule 47 (comparador -> NEQ .)
    RAW_STRING      reduce using rule 47 (comparador -> NEQ .)
    TRUE            reduce using rule 47 (comparador -> NEQ .)
    FALSE           reduce using rule 47 (comparador -> NEQ .)
    NIL             reduce using rule 47 (comparador -> NEQ .)
    MINUS           reduce using rule 47 (comparador -> NEQ .)
    LPAREN          reduce using rule 47 (comparador -> NEQ .)


state 80

    (48) comparador -> GT .

    NUMBER          reduce using rule 48 (comparador -> GT .)
    IDENTIFIER      reduce using rule 48 (comparador -> GT .)
    RUNE            reduce using rule 48 (comparador -> GT .)
    STRING          reduce using rule 48 (comparador -> GT .)
    RAW_STRING      reduce using rule 48 (comparador -> GT .)
    TRUE            reduce using rule 48 (comparador -> GT .)
    FALSE           reduce using rule 48 (comparador -> GT .)
    NIL             reduce using rule 48 (comparador -> GT .)
    MINUS           reduce using rule 48 (comparador -> GT .)
    LPAREN          reduce using rule 48 (comparador -> GT .)


state 81

    (49) comparador -> LT .

    NUMBER          reduce using rule 49 (comparador -> LT .)
    IDENTIFIER      reduce using rule 49 (comparador -> LT .)
    RUNE            reduce using rule 49 (comparador -> LT .)
    STRING          reduce using rule 49 (comparador -> LT .)
    RAW_STRING      reduce using rule 49 (comparador -> LT .)
    TRUE            reduce using rule 49 (comparador -> LT .)
    FALSE           reduce using rule 49 (comparador -> LT .)
    NIL             reduce using rule 49 (comparador -> LT .)
    MINUS           reduce using rule 49 (comparador -> LT .)
    LPAREN          reduce using rule 49 (comparador -> LT .)


state 82

    (50) comparador -> GE .

    NUMBER          reduce using rule 50 (comparador -> GE .)
    IDENTIFIER      reduce using rule 50 (comparador -> GE .)
    RUNE            reduce using rule 50 (comparador -> GE .)
    STRING          reduce using rule 50 (comparador -> GE .)
    RAW_STRING      reduce using rule 50 (comparador -> GE .)
    TRUE            reduce using rule 50 (comparador -> GE .)
    FALSE           reduce using rule 50 (comparador -> GE .)
    NIL             reduce using rule 50 (comparador -> GE .)
    MINUS           reduce using rule 50 (comparador -> GE .)
    LPAREN          reduce using rule 50 (comparador -> GE .)


state 83

    (51) comparador -> LE .

    NUMBER          reduce using rule 51 (comparador -> LE .)
    IDENTIFIER      reduce using rule 51 (comparador -> LE .)
    RUNE            reduce using rule 51 (comparador -> LE .)
    STRING          reduce using rule 51 (comparador -> LE .)
    RAW_STRING      reduce using rule 51 (comparador -> LE .)
    TRUE            reduce using rule 51 (comparador -> LE .)
    FALSE           reduce using rule 51 (comparador -> LE .)
    NIL             reduce using rule 51 (comparador -> LE .)
    MINUS           reduce using rule 51 (comparador -> LE .)
    LPAREN          reduce using rule 51 (comparador -> LE .)


state 84

    (44) operadorLogico -> AND .

    NUMBER          reduce using rule 44 (operadorLogico -> AND .)
    IDENTIFIER      reduce using rule 44 (operadorLogico -> AND .)
    RUNE            reduce using rule 44 (operadorLogico -> AND .)
    STRING          reduce using rule 44 (operadorLogico -> AND .)
    RAW_STRING      reduce using rule 44 (operadorLogico -> AND .)
    TRUE            reduce using rule 44 (operadorLogico -> AND .)
    FALSE           reduce using rule 44 (operadorLogico -> AND .)
    NIL             reduce using rule 44 (operadorLogico -> AND .)
    MINUS           reduce using rule 44 (operadorLogico -> AND .)
    LPAREN          reduce using rule 44 (operadorLogico -> AND .)


state 85

    (45) operadorLogico -> OR .

    NUMBER          reduce using rule 45 (operadorLogico -> OR .)
    IDENTIFIER      reduce using rule 45 (operadorLogico -> OR .)
    RUNE            reduce using rule 45 (operadorLogico -> OR .)
    STRING          reduce using rule 45 (operadorLogico -> OR .)
    RAW_STRING      reduce using rule 45 (operadorLogico -> OR .)
    TRUE            reduce using rule 45 (operadorLogico -> OR .)
    FALSE           reduce using rule 45 (operadorLogico -> OR .)
    NIL             reduce using rule 45 (operadorLogico -> OR .)
    MINUS           reduce using rule 45 (operadorLogico -> OR .)
    LPAREN          reduce using rule 45 (operadorLogico -> OR .)


state 86

    (102) operator -> PLUS .

    NUMBER          reduce using rule 102 (operator -> PLUS .)
    IDENTIFIER      reduce using rule 102 (operator -> PLUS .)
    RUNE            reduce using rule 102 (operator -> PLUS .)
    STRING          reduce using rule 102 (operator -> PLUS .)
    RAW_STRING      reduce using rule 102 (operator -> PLUS .)
    TRUE            reduce using rule 102 (operator -> PLUS .)
    FALSE           reduce using rule 102 (operator -> PLUS .)
    NIL             reduce using rule 102 (operator -> PLUS .)
    MINUS           reduce using rule 102 (operator -> PLUS .)
    LPAREN          reduce using rule 102 (operator -> PLUS .)


state 87

    (103) operator -> MINUS .

    NUMBER          reduce using rule 103 (operator -> MINUS .)
    IDENTIFIER      reduce using rule 103 (operator -> MINUS .)
    RUNE            reduce using rule 103 (operator -> MINUS .)
    STRING          reduce using rule 103 (operator -> MINUS .)
    RAW_STRING      reduce using rule 103 (operator -> MINUS .)
    TRUE            reduce using rule 103 (operator -> MINUS .)
    FALSE           reduce using rule 103 (operator -> MINUS .)
    NIL             reduce using rule 103 (operator -> MINUS .)
    MINUS           reduce using rule 103 (operator -> MINUS .)
    LPAREN          reduce using rule 103 (operator -> MINUS .)


state 88

    (104) operator -> TIMES .

    NUMBER          reduce using rule 104 (operator -> TIMES .)
    IDENTIFIER      reduce using rule 104 (operator -> TIMES .)
    RUNE            reduce using rule 104 (operator -> TIMES .)
    STRING          reduce using rule 104 (operator -> TIMES .)
    RAW_STRING      reduce using rule 104 (operator -> TIMES .)
    TRUE            reduce using rule 104 (operator -> TIMES .)
    FALSE           reduce using rule 104 (operator -> TIMES .)
    NIL             reduce using rule 104 (operator -> TIMES .)
    MINUS           reduce using rule 104 (operator -> TIMES .)
    LPAREN          reduce using rule 104 (operator -> TIMES .)


state 89

    (105) operator -> DIVIDE .

    NUMBER          reduce using rule 105 (operator -> DIVIDE .)
    IDENTIFIER      reduce using rule 105 (operator -> DIVIDE .)
    RUNE            reduce using rule 105 (operator -> DIVIDE .)
    STRING          reduce using rule 105 (operator -> DIVIDE .)
    RAW_STRING      reduce using rule 105 (operator -> DIVIDE .)
    TRUE            reduce using rule 105 (operator -> DIVIDE .)
    FALSE           reduce using rule 105 (operator -> DIVIDE .)
    NIL             reduce using rule 105 (operator -> DIVIDE .)
    MINUS           reduce using rule 105 (operator -> DIVIDE .)
    LPAREN          reduce using rule 105 (operator -> DIVIDE .)


state 90

    (106) operator -> MOD .

    NUMBER          reduce using rule 106 (operator -> MOD .)
    IDENTIFIER      reduce using rule 106 (operator -> MOD .)
    RUNE            reduce using rule 106 (operator -> MOD .)
    STRING          reduce using rule 106 (operator -> MOD .)
    RAW_STRING      reduce using rule 106 (operator -> MOD .)
    TRUE            reduce using rule 106 (operator -> MOD .)
    FALSE           reduce using rule 106 (operator -> MOD .)
    NIL             reduce using rule 106 (operator -> MOD .)
    MINUS           reduce using rule 106 (operator -> MOD .)
    LPAREN          reduce using rule 106 (operator -> MOD .)


state 91

    (86) shortAssignment -> identifier_list DECLARE_ASSIGN . expression
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (92) expression -> . NUMBER
    (93) expression -> . IDENTIFIER
    (94) expression -> . RUNE
    (95) expression -> . STRING
    (96) expression -> . RAW_STRING
    (97) expression -> . TRUE
    (98) expression -> . FALSE
    (99) expression -> . NIL
    (100) expression -> . expression operator expression
    (101) expression -> . expression DOT IDENTIFIER
    (107) expression -> . MINUS expression
    (108) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 41
    IDENTIFIER      shift and go to state 55
    RUNE            shift and go to state 42
    STRING          shift and go to state 43
    RAW_STRING      shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NIL             shift and go to state 47
    MINUS           shift and go to state 48
    LPAREN          shift and go to state 49

    expression                     shift and go to state 121

state 92

    (90) block -> LBRACE statement_list . RBRACE
    (3) statement_list -> statement_list . statement
    (4) statement -> . assignment
    (5) statement -> . input
    (6) statement -> . llamarFuncion
    (7) statement -> . print_statement
    (8) statement -> . struct_definition
    (9) statement -> . for_statement
    (10) statement -> . package
    (11) statement -> . import
    (12) statement -> . switch
    (13) statement -> . map
    (14) statement -> . if_statement
    (15) statement -> . function
    (16) statement -> . method_definition
    (17) statement -> . function_literal
    (30) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (31) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (32) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (33) assignment -> . IDENTIFIER ASSIGN expression
    (28) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (34) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (77) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (78) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (83) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (87) for_statement -> . FOR condicion block
    (88) for_statement -> . FOR block
    (18) package -> . PACKAGE MAIN
    (19) package -> . PACKAGE IDENTIFIER
    (20) import -> . IMPORT STRING
    (21) import -> . IMPORT LPAREN import_list RPAREN
    (53) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (58) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (59) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (109) if_statement -> . IF condicion_compleja block
    (110) if_statement -> . IF condicion_compleja block ELSE block
    (66) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block
    (67) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN expression RBRACE
    (68) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (82) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (111) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    RBRACE          shift and go to state 122
    IDENTIFIER      shift and go to state 18
    VAR             shift and go to state 19
    TYPE            shift and go to state 20
    FOR             shift and go to state 21
    PACKAGE         shift and go to state 22
    IMPORT          shift and go to state 23
    SWITCH          shift and go to state 24
    IF              shift and go to state 25
    FUNC            shift and go to state 26

    statement                      shift and go to state 27
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17

state 93

    (91) block -> LBRACE RBRACE .

    IDENTIFIER      reduce using rule 91 (block -> LBRACE RBRACE .)
    VAR             reduce using rule 91 (block -> LBRACE RBRACE .)
    TYPE            reduce using rule 91 (block -> LBRACE RBRACE .)
    FOR             reduce using rule 91 (block -> LBRACE RBRACE .)
    PACKAGE         reduce using rule 91 (block -> LBRACE RBRACE .)
    IMPORT          reduce using rule 91 (block -> LBRACE RBRACE .)
    SWITCH          reduce using rule 91 (block -> LBRACE RBRACE .)
    IF              reduce using rule 91 (block -> LBRACE RBRACE .)
    FUNC            reduce using rule 91 (block -> LBRACE RBRACE .)
    $end            reduce using rule 91 (block -> LBRACE RBRACE .)
    RBRACE          reduce using rule 91 (block -> LBRACE RBRACE .)
    CASE            reduce using rule 91 (block -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 91 (block -> LBRACE RBRACE .)
    RETURN          reduce using rule 91 (block -> LBRACE RBRACE .)
    ELSE            reduce using rule 91 (block -> LBRACE RBRACE .)


state 94

    (85) identifier_list -> IDENTIFIER COMMA . identifier_list
    (84) identifier_list -> . IDENTIFIER
    (85) identifier_list -> . IDENTIFIER COMMA identifier_list

    IDENTIFIER      shift and go to state 123

    identifier_list                shift and go to state 124

state 95

    (107) expression -> MINUS expression .
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (100) expression -> expression . operator expression
    (101) expression -> expression . DOT IDENTIFIER
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (102) operator -> . PLUS
    (103) operator -> . MINUS
    (104) operator -> . TIMES
    (105) operator -> . DIVIDE
    (106) operator -> . MOD

    DOT             reduce using rule 107 (expression -> MINUS expression .)
    EQ              reduce using rule 107 (expression -> MINUS expression .)
    NEQ             reduce using rule 107 (expression -> MINUS expression .)
    GT              reduce using rule 107 (expression -> MINUS expression .)
    LT              reduce using rule 107 (expression -> MINUS expression .)
    GE              reduce using rule 107 (expression -> MINUS expression .)
    LE              reduce using rule 107 (expression -> MINUS expression .)
    AND             reduce using rule 107 (expression -> MINUS expression .)
    OR              reduce using rule 107 (expression -> MINUS expression .)
    PLUS            reduce using rule 107 (expression -> MINUS expression .)
    MINUS           reduce using rule 107 (expression -> MINUS expression .)
    TIMES           reduce using rule 107 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 107 (expression -> MINUS expression .)
    MOD             reduce using rule 107 (expression -> MINUS expression .)
    LBRACE          reduce using rule 107 (expression -> MINUS expression .)
    IDENTIFIER      reduce using rule 107 (expression -> MINUS expression .)
    VAR             reduce using rule 107 (expression -> MINUS expression .)
    TYPE            reduce using rule 107 (expression -> MINUS expression .)
    FOR             reduce using rule 107 (expression -> MINUS expression .)
    PACKAGE         reduce using rule 107 (expression -> MINUS expression .)
    IMPORT          reduce using rule 107 (expression -> MINUS expression .)
    SWITCH          reduce using rule 107 (expression -> MINUS expression .)
    IF              reduce using rule 107 (expression -> MINUS expression .)
    FUNC            reduce using rule 107 (expression -> MINUS expression .)
    $end            reduce using rule 107 (expression -> MINUS expression .)
    RBRACE          reduce using rule 107 (expression -> MINUS expression .)
    CASE            reduce using rule 107 (expression -> MINUS expression .)
    DEFAULT         reduce using rule 107 (expression -> MINUS expression .)
    RETURN          reduce using rule 107 (expression -> MINUS expression .)
    COMMA           reduce using rule 107 (expression -> MINUS expression .)
    RPAREN          reduce using rule 107 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 107 (expression -> MINUS expression .)
    COLON           reduce using rule 107 (expression -> MINUS expression .)

  ! DOT             [ shift and go to state 77 ]
  ! EQ              [ shift and go to state 78 ]
  ! NEQ             [ shift and go to state 79 ]
  ! GT              [ shift and go to state 80 ]
  ! LT              [ shift and go to state 81 ]
  ! GE              [ shift and go to state 82 ]
  ! LE              [ shift and go to state 83 ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! PLUS            [ shift and go to state 86 ]
  ! MINUS           [ shift and go to state 87 ]
  ! TIMES           [ shift and go to state 88 ]
  ! DIVIDE          [ shift and go to state 89 ]
  ! MOD             [ shift and go to state 90 ]

    comparador                     shift and go to state 100
    operadorLogico                 shift and go to state 75
    operator                       shift and go to state 76

state 96

    (108) expression -> LPAREN expression . RPAREN
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (100) expression -> expression . operator expression
    (101) expression -> expression . DOT IDENTIFIER
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (102) operator -> . PLUS
    (103) operator -> . MINUS
    (104) operator -> . TIMES
    (105) operator -> . DIVIDE
    (106) operator -> . MOD

    RPAREN          shift and go to state 125
    DOT             shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    GT              shift and go to state 80
    LT              shift and go to state 81
    GE              shift and go to state 82
    LE              shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    MOD             shift and go to state 90

    comparador                     shift and go to state 100
    operadorLogico                 shift and go to state 75
    operator                       shift and go to state 76

state 97

    (21) import -> IMPORT LPAREN import_list . RPAREN
    (23) import_list -> import_list . STRING

    RPAREN          shift and go to state 126
    STRING          shift and go to state 127


state 98

    (22) import_list -> STRING .

    RPAREN          reduce using rule 22 (import_list -> STRING .)
    STRING          reduce using rule 22 (import_list -> STRING .)


state 99

    (53) switch -> SWITCH expression LBRACE . caseBlocks RBRACE
    (54) caseBlocks -> . caseBlock
    (55) caseBlocks -> . caseBlock caseBlocks
    (56) caseBlock -> . CASE expression COLON statement_list
    (57) caseBlock -> . DEFAULT COLON statement_list

    CASE            shift and go to state 130
    DEFAULT         shift and go to state 131

    caseBlocks                     shift and go to state 128
    caseBlock                      shift and go to state 129

state 100

    (35) expression -> expression comparador . expression
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (92) expression -> . NUMBER
    (93) expression -> . IDENTIFIER
    (94) expression -> . RUNE
    (95) expression -> . STRING
    (96) expression -> . RAW_STRING
    (97) expression -> . TRUE
    (98) expression -> . FALSE
    (99) expression -> . NIL
    (100) expression -> . expression operator expression
    (101) expression -> . expression DOT IDENTIFIER
    (107) expression -> . MINUS expression
    (108) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 41
    IDENTIFIER      shift and go to state 55
    RUNE            shift and go to state 42
    STRING          shift and go to state 43
    RAW_STRING      shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NIL             shift and go to state 47
    MINUS           shift and go to state 48
    LPAREN          shift and go to state 49

    expression                     shift and go to state 132

state 101

    (109) if_statement -> IF condicion_compleja block .
    (110) if_statement -> IF condicion_compleja block . ELSE block

    IDENTIFIER      reduce using rule 109 (if_statement -> IF condicion_compleja block .)
    VAR             reduce using rule 109 (if_statement -> IF condicion_compleja block .)
    TYPE            reduce using rule 109 (if_statement -> IF condicion_compleja block .)
    FOR             reduce using rule 109 (if_statement -> IF condicion_compleja block .)
    PACKAGE         reduce using rule 109 (if_statement -> IF condicion_compleja block .)
    IMPORT          reduce using rule 109 (if_statement -> IF condicion_compleja block .)
    SWITCH          reduce using rule 109 (if_statement -> IF condicion_compleja block .)
    IF              reduce using rule 109 (if_statement -> IF condicion_compleja block .)
    FUNC            reduce using rule 109 (if_statement -> IF condicion_compleja block .)
    $end            reduce using rule 109 (if_statement -> IF condicion_compleja block .)
    RBRACE          reduce using rule 109 (if_statement -> IF condicion_compleja block .)
    CASE            reduce using rule 109 (if_statement -> IF condicion_compleja block .)
    DEFAULT         reduce using rule 109 (if_statement -> IF condicion_compleja block .)
    RETURN          reduce using rule 109 (if_statement -> IF condicion_compleja block .)
    ELSE            shift and go to state 133


state 102

    (42) condicion_compleja -> condicion operadorLogico . condicion
    (43) condicion_compleja -> condicion operadorLogico . condicion_compleja
    (41) condicion -> . expression comparador expression
    (42) condicion_compleja -> . condicion operadorLogico condicion
    (43) condicion_compleja -> . condicion operadorLogico condicion_compleja
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (92) expression -> . NUMBER
    (93) expression -> . IDENTIFIER
    (94) expression -> . RUNE
    (95) expression -> . STRING
    (96) expression -> . RAW_STRING
    (97) expression -> . TRUE
    (98) expression -> . FALSE
    (99) expression -> . NIL
    (100) expression -> . expression operator expression
    (101) expression -> . expression DOT IDENTIFIER
    (107) expression -> . MINUS expression
    (108) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 41
    IDENTIFIER      shift and go to state 55
    RUNE            shift and go to state 42
    STRING          shift and go to state 43
    RAW_STRING      shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NIL             shift and go to state 47
    MINUS           shift and go to state 48
    LPAREN          shift and go to state 49

    condicion                      shift and go to state 134
    condicion_compleja             shift and go to state 135
    expression                     shift and go to state 36

state 103

    (66) function -> FUNC IDENTIFIER LPAREN . params_opt RPAREN return_type block
    (67) function -> FUNC IDENTIFIER LPAREN . params_opt RPAREN return_type LBRACE statement_list RETURN expression RBRACE
    (70) params_opt -> . params
    (71) params_opt -> . empty
    (72) params -> . param
    (73) params -> . param COMMA params
    (52) empty -> .
    (74) param -> . IDENTIFIER type_name

    RPAREN          reduce using rule 52 (empty -> .)
    IDENTIFIER      shift and go to state 136

    params_opt                     shift and go to state 137
    params                         shift and go to state 138
    empty                          shift and go to state 139
    param                          shift and go to state 140

state 104

    (82) method_definition -> FUNC LPAREN IDENTIFIER . IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (115) parameter -> IDENTIFIER . DATATYPE
    (116) parameter -> IDENTIFIER . FUNC LPAREN parameters RPAREN DATATYPE

    IDENTIFIER      shift and go to state 142
    DATATYPE        shift and go to state 143
    FUNC            shift and go to state 141


state 105

    (111) function_literal -> FUNC LPAREN parameters . RPAREN return_type block
    (112) parameters -> parameters . COMMA parameter

    RPAREN          shift and go to state 144
    COMMA           shift and go to state 145


state 106

    (113) parameters -> parameter .

    RPAREN          reduce using rule 113 (parameters -> parameter .)
    COMMA           reduce using rule 113 (parameters -> parameter .)


state 107

    (114) parameters -> empty .

    RPAREN          reduce using rule 114 (parameters -> empty .)
    COMMA           reduce using rule 114 (parameters -> empty .)


state 108

    (68) function -> FUNC MAIN LPAREN . params_opt RPAREN block
    (70) params_opt -> . params
    (71) params_opt -> . empty
    (72) params -> . param
    (73) params -> . param COMMA params
    (52) empty -> .
    (74) param -> . IDENTIFIER type_name

    RPAREN          reduce using rule 52 (empty -> .)
    IDENTIFIER      shift and go to state 136

    params_opt                     shift and go to state 146
    params                         shift and go to state 138
    empty                          shift and go to state 139
    param                          shift and go to state 140

state 109

    (60) mapLiteral -> MAP LBRACKET . DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE

    DATATYPE        shift and go to state 147


state 110

    (28) input -> IDENTIFIER DOT IDENTIFIER LPAREN . AMPERSAND IDENTIFIER RPAREN
    (77) print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN . argument_list_opt RPAREN
    (39) argument_list_opt -> . argument_list
    (40) argument_list_opt -> .
    (37) argument_list -> . expression
    (38) argument_list -> . argument_list COMMA expression
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (92) expression -> . NUMBER
    (93) expression -> . IDENTIFIER
    (94) expression -> . RUNE
    (95) expression -> . STRING
    (96) expression -> . RAW_STRING
    (97) expression -> . TRUE
    (98) expression -> . FALSE
    (99) expression -> . NIL
    (100) expression -> . expression operator expression
    (101) expression -> . expression DOT IDENTIFIER
    (107) expression -> . MINUS expression
    (108) expression -> . LPAREN expression RPAREN

    AMPERSAND       shift and go to state 148
    RPAREN          reduce using rule 40 (argument_list_opt -> .)
    NUMBER          shift and go to state 41
    IDENTIFIER      shift and go to state 55
    RUNE            shift and go to state 42
    STRING          shift and go to state 43
    RAW_STRING      shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NIL             shift and go to state 47
    MINUS           shift and go to state 48
    LPAREN          shift and go to state 49

    argument_list_opt              shift and go to state 149
    argument_list                  shift and go to state 67
    expression                     shift and go to state 68

state 111

    (34) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .

    IDENTIFIER      reduce using rule 34 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    VAR             reduce using rule 34 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TYPE            reduce using rule 34 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FOR             reduce using rule 34 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PACKAGE         reduce using rule 34 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IMPORT          reduce using rule 34 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SWITCH          reduce using rule 34 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IF              reduce using rule 34 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FUNC            reduce using rule 34 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    $end            reduce using rule 34 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 34 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    CASE            reduce using rule 34 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DEFAULT         reduce using rule 34 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RETURN          reduce using rule 34 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)


state 112

    (38) argument_list -> argument_list COMMA . expression
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (92) expression -> . NUMBER
    (93) expression -> . IDENTIFIER
    (94) expression -> . RUNE
    (95) expression -> . STRING
    (96) expression -> . RAW_STRING
    (97) expression -> . TRUE
    (98) expression -> . FALSE
    (99) expression -> . NIL
    (100) expression -> . expression operator expression
    (101) expression -> . expression DOT IDENTIFIER
    (107) expression -> . MINUS expression
    (108) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 41
    IDENTIFIER      shift and go to state 55
    RUNE            shift and go to state 42
    STRING          shift and go to state 43
    RAW_STRING      shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NIL             shift and go to state 47
    MINUS           shift and go to state 48
    LPAREN          shift and go to state 49

    expression                     shift and go to state 150

state 113

    (31) assignment -> VAR IDENTIFIER DATATYPE ASSIGN . expression
    (32) assignment -> VAR IDENTIFIER DATATYPE ASSIGN . llamarFuncion
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (92) expression -> . NUMBER
    (93) expression -> . IDENTIFIER
    (94) expression -> . RUNE
    (95) expression -> . STRING
    (96) expression -> . RAW_STRING
    (97) expression -> . TRUE
    (98) expression -> . FALSE
    (99) expression -> . NIL
    (100) expression -> . expression operator expression
    (101) expression -> . expression DOT IDENTIFIER
    (107) expression -> . MINUS expression
    (108) expression -> . LPAREN expression RPAREN
    (34) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 41
    IDENTIFIER      shift and go to state 151
    RUNE            shift and go to state 42
    STRING          shift and go to state 43
    RAW_STRING      shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NIL             shift and go to state 47
    MINUS           shift and go to state 48
    LPAREN          shift and go to state 49

    expression                     shift and go to state 152
    llamarFuncion                  shift and go to state 153

state 114

    (59) map -> VAR IDENTIFIER ASSIGN mapLiteral .

    IDENTIFIER      reduce using rule 59 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    VAR             reduce using rule 59 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    TYPE            reduce using rule 59 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    FOR             reduce using rule 59 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    PACKAGE         reduce using rule 59 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    IMPORT          reduce using rule 59 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    SWITCH          reduce using rule 59 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    IF              reduce using rule 59 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    FUNC            reduce using rule 59 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    $end            reduce using rule 59 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    RBRACE          reduce using rule 59 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    CASE            reduce using rule 59 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    DEFAULT         reduce using rule 59 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    RETURN          reduce using rule 59 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)


state 115

    (78) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE . struct_fields RBRACE
    (80) struct_fields -> . struct_field
    (81) struct_fields -> . struct_fields struct_field
    (79) struct_field -> . IDENTIFIER DATATYPE

    IDENTIFIER      shift and go to state 154

    struct_fields                  shift and go to state 155
    struct_field                   shift and go to state 156

state 116

    (83) for_statement -> FOR shortAssignment SEMICOLON condicion . SEMICOLON expression block

    SEMICOLON       shift and go to state 157


state 117

    (41) condicion -> expression comparador expression .
    (35) expression -> expression comparador expression .
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (100) expression -> expression . operator expression
    (101) expression -> expression . DOT IDENTIFIER
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (102) operator -> . PLUS
    (103) operator -> . MINUS
    (104) operator -> . TIMES
    (105) operator -> . DIVIDE
    (106) operator -> . MOD

  ! reduce/reduce conflict for AND resolved using rule 35 (expression -> expression comparador expression .)
  ! reduce/reduce conflict for OR resolved using rule 35 (expression -> expression comparador expression .)
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 41 (condicion -> expression comparador expression .)
    SEMICOLON       reduce using rule 41 (condicion -> expression comparador expression .)
    DOT             shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    GT              shift and go to state 80
    LT              shift and go to state 81
    GE              shift and go to state 82
    LE              shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    MOD             shift and go to state 90

  ! AND             [ reduce using rule 41 (condicion -> expression comparador expression .) ]
  ! OR              [ reduce using rule 41 (condicion -> expression comparador expression .) ]
  ! DOT             [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! EQ              [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! NEQ             [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! GT              [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! LT              [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! GE              [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! LE              [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! AND             [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! OR              [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! PLUS            [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! MINUS           [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! TIMES           [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! DIVIDE          [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! MOD             [ reduce using rule 35 (expression -> expression comparador expression .) ]

    comparador                     shift and go to state 100
    operadorLogico                 shift and go to state 75
    operator                       shift and go to state 76

state 118

    (36) expression -> expression operadorLogico expression .
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (100) expression -> expression . operator expression
    (101) expression -> expression . DOT IDENTIFIER
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (102) operator -> . PLUS
    (103) operator -> . MINUS
    (104) operator -> . TIMES
    (105) operator -> . DIVIDE
    (106) operator -> . MOD

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 36 (expression -> expression operadorLogico expression .)
    IDENTIFIER      reduce using rule 36 (expression -> expression operadorLogico expression .)
    VAR             reduce using rule 36 (expression -> expression operadorLogico expression .)
    TYPE            reduce using rule 36 (expression -> expression operadorLogico expression .)
    FOR             reduce using rule 36 (expression -> expression operadorLogico expression .)
    PACKAGE         reduce using rule 36 (expression -> expression operadorLogico expression .)
    IMPORT          reduce using rule 36 (expression -> expression operadorLogico expression .)
    SWITCH          reduce using rule 36 (expression -> expression operadorLogico expression .)
    IF              reduce using rule 36 (expression -> expression operadorLogico expression .)
    FUNC            reduce using rule 36 (expression -> expression operadorLogico expression .)
    $end            reduce using rule 36 (expression -> expression operadorLogico expression .)
    RBRACE          reduce using rule 36 (expression -> expression operadorLogico expression .)
    CASE            reduce using rule 36 (expression -> expression operadorLogico expression .)
    DEFAULT         reduce using rule 36 (expression -> expression operadorLogico expression .)
    RETURN          reduce using rule 36 (expression -> expression operadorLogico expression .)
    COMMA           reduce using rule 36 (expression -> expression operadorLogico expression .)
    RPAREN          reduce using rule 36 (expression -> expression operadorLogico expression .)
    SEMICOLON       reduce using rule 36 (expression -> expression operadorLogico expression .)
    COLON           reduce using rule 36 (expression -> expression operadorLogico expression .)
    DOT             shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    GT              shift and go to state 80
    LT              shift and go to state 81
    GE              shift and go to state 82
    LE              shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    MOD             shift and go to state 90

  ! DOT             [ reduce using rule 36 (expression -> expression operadorLogico expression .) ]
  ! EQ              [ reduce using rule 36 (expression -> expression operadorLogico expression .) ]
  ! NEQ             [ reduce using rule 36 (expression -> expression operadorLogico expression .) ]
  ! GT              [ reduce using rule 36 (expression -> expression operadorLogico expression .) ]
  ! LT              [ reduce using rule 36 (expression -> expression operadorLogico expression .) ]
  ! GE              [ reduce using rule 36 (expression -> expression operadorLogico expression .) ]
  ! LE              [ reduce using rule 36 (expression -> expression operadorLogico expression .) ]
  ! AND             [ reduce using rule 36 (expression -> expression operadorLogico expression .) ]
  ! OR              [ reduce using rule 36 (expression -> expression operadorLogico expression .) ]
  ! PLUS            [ reduce using rule 36 (expression -> expression operadorLogico expression .) ]
  ! MINUS           [ reduce using rule 36 (expression -> expression operadorLogico expression .) ]
  ! TIMES           [ reduce using rule 36 (expression -> expression operadorLogico expression .) ]
  ! DIVIDE          [ reduce using rule 36 (expression -> expression operadorLogico expression .) ]
  ! MOD             [ reduce using rule 36 (expression -> expression operadorLogico expression .) ]

    operadorLogico                 shift and go to state 75
    comparador                     shift and go to state 100
    operator                       shift and go to state 76

state 119

    (100) expression -> expression operator expression .
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (100) expression -> expression . operator expression
    (101) expression -> expression . DOT IDENTIFIER
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (102) operator -> . PLUS
    (103) operator -> . MINUS
    (104) operator -> . TIMES
    (105) operator -> . DIVIDE
    (106) operator -> . MOD

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 100 (expression -> expression operator expression .)
    IDENTIFIER      reduce using rule 100 (expression -> expression operator expression .)
    VAR             reduce using rule 100 (expression -> expression operator expression .)
    TYPE            reduce using rule 100 (expression -> expression operator expression .)
    FOR             reduce using rule 100 (expression -> expression operator expression .)
    PACKAGE         reduce using rule 100 (expression -> expression operator expression .)
    IMPORT          reduce using rule 100 (expression -> expression operator expression .)
    SWITCH          reduce using rule 100 (expression -> expression operator expression .)
    IF              reduce using rule 100 (expression -> expression operator expression .)
    FUNC            reduce using rule 100 (expression -> expression operator expression .)
    $end            reduce using rule 100 (expression -> expression operator expression .)
    RBRACE          reduce using rule 100 (expression -> expression operator expression .)
    CASE            reduce using rule 100 (expression -> expression operator expression .)
    DEFAULT         reduce using rule 100 (expression -> expression operator expression .)
    RETURN          reduce using rule 100 (expression -> expression operator expression .)
    COMMA           reduce using rule 100 (expression -> expression operator expression .)
    RPAREN          reduce using rule 100 (expression -> expression operator expression .)
    SEMICOLON       reduce using rule 100 (expression -> expression operator expression .)
    COLON           reduce using rule 100 (expression -> expression operator expression .)
    DOT             shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    GT              shift and go to state 80
    LT              shift and go to state 81
    GE              shift and go to state 82
    LE              shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    MOD             shift and go to state 90

  ! DOT             [ reduce using rule 100 (expression -> expression operator expression .) ]
  ! EQ              [ reduce using rule 100 (expression -> expression operator expression .) ]
  ! NEQ             [ reduce using rule 100 (expression -> expression operator expression .) ]
  ! GT              [ reduce using rule 100 (expression -> expression operator expression .) ]
  ! LT              [ reduce using rule 100 (expression -> expression operator expression .) ]
  ! GE              [ reduce using rule 100 (expression -> expression operator expression .) ]
  ! LE              [ reduce using rule 100 (expression -> expression operator expression .) ]
  ! AND             [ reduce using rule 100 (expression -> expression operator expression .) ]
  ! OR              [ reduce using rule 100 (expression -> expression operator expression .) ]
  ! PLUS            [ reduce using rule 100 (expression -> expression operator expression .) ]
  ! MINUS           [ reduce using rule 100 (expression -> expression operator expression .) ]
  ! TIMES           [ reduce using rule 100 (expression -> expression operator expression .) ]
  ! DIVIDE          [ reduce using rule 100 (expression -> expression operator expression .) ]
  ! MOD             [ reduce using rule 100 (expression -> expression operator expression .) ]

    operator                       shift and go to state 76
    comparador                     shift and go to state 100
    operadorLogico                 shift and go to state 75

state 120

    (101) expression -> expression DOT IDENTIFIER .

    DOT             reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    EQ              reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    NEQ             reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    GT              reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    LT              reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    GE              reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    LE              reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    AND             reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    OR              reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    PLUS            reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    MINUS           reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    TIMES           reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    DIVIDE          reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    MOD             reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    LBRACE          reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    VAR             reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    TYPE            reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    FOR             reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    PACKAGE         reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    IMPORT          reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    SWITCH          reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    IF              reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    FUNC            reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    $end            reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    RBRACE          reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    CASE            reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    DEFAULT         reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    RETURN          reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    COMMA           reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    RPAREN          reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 101 (expression -> expression DOT IDENTIFIER .)
    COLON           reduce using rule 101 (expression -> expression DOT IDENTIFIER .)


state 121

    (86) shortAssignment -> identifier_list DECLARE_ASSIGN expression .
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (100) expression -> expression . operator expression
    (101) expression -> expression . DOT IDENTIFIER
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (102) operator -> . PLUS
    (103) operator -> . MINUS
    (104) operator -> . TIMES
    (105) operator -> . DIVIDE
    (106) operator -> . MOD

    SEMICOLON       reduce using rule 86 (shortAssignment -> identifier_list DECLARE_ASSIGN expression .)
    DOT             shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    GT              shift and go to state 80
    LT              shift and go to state 81
    GE              shift and go to state 82
    LE              shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    MOD             shift and go to state 90

    comparador                     shift and go to state 100
    operadorLogico                 shift and go to state 75
    operator                       shift and go to state 76

state 122

    (90) block -> LBRACE statement_list RBRACE .

    IDENTIFIER      reduce using rule 90 (block -> LBRACE statement_list RBRACE .)
    VAR             reduce using rule 90 (block -> LBRACE statement_list RBRACE .)
    TYPE            reduce using rule 90 (block -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 90 (block -> LBRACE statement_list RBRACE .)
    PACKAGE         reduce using rule 90 (block -> LBRACE statement_list RBRACE .)
    IMPORT          reduce using rule 90 (block -> LBRACE statement_list RBRACE .)
    SWITCH          reduce using rule 90 (block -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 90 (block -> LBRACE statement_list RBRACE .)
    FUNC            reduce using rule 90 (block -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 90 (block -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 90 (block -> LBRACE statement_list RBRACE .)
    CASE            reduce using rule 90 (block -> LBRACE statement_list RBRACE .)
    DEFAULT         reduce using rule 90 (block -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 90 (block -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 90 (block -> LBRACE statement_list RBRACE .)


state 123

    (84) identifier_list -> IDENTIFIER .
    (85) identifier_list -> IDENTIFIER . COMMA identifier_list

    DECLARE_ASSIGN  reduce using rule 84 (identifier_list -> IDENTIFIER .)
    COMMA           shift and go to state 94


state 124

    (85) identifier_list -> IDENTIFIER COMMA identifier_list .

    DECLARE_ASSIGN  reduce using rule 85 (identifier_list -> IDENTIFIER COMMA identifier_list .)


state 125

    (108) expression -> LPAREN expression RPAREN .

    DOT             reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    TYPE            reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    PACKAGE         reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    IMPORT          reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    FUNC            reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    CASE            reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 108 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 108 (expression -> LPAREN expression RPAREN .)


state 126

    (21) import -> IMPORT LPAREN import_list RPAREN .

    IDENTIFIER      reduce using rule 21 (import -> IMPORT LPAREN import_list RPAREN .)
    VAR             reduce using rule 21 (import -> IMPORT LPAREN import_list RPAREN .)
    TYPE            reduce using rule 21 (import -> IMPORT LPAREN import_list RPAREN .)
    FOR             reduce using rule 21 (import -> IMPORT LPAREN import_list RPAREN .)
    PACKAGE         reduce using rule 21 (import -> IMPORT LPAREN import_list RPAREN .)
    IMPORT          reduce using rule 21 (import -> IMPORT LPAREN import_list RPAREN .)
    SWITCH          reduce using rule 21 (import -> IMPORT LPAREN import_list RPAREN .)
    IF              reduce using rule 21 (import -> IMPORT LPAREN import_list RPAREN .)
    FUNC            reduce using rule 21 (import -> IMPORT LPAREN import_list RPAREN .)
    $end            reduce using rule 21 (import -> IMPORT LPAREN import_list RPAREN .)
    RBRACE          reduce using rule 21 (import -> IMPORT LPAREN import_list RPAREN .)
    CASE            reduce using rule 21 (import -> IMPORT LPAREN import_list RPAREN .)
    DEFAULT         reduce using rule 21 (import -> IMPORT LPAREN import_list RPAREN .)
    RETURN          reduce using rule 21 (import -> IMPORT LPAREN import_list RPAREN .)


state 127

    (23) import_list -> import_list STRING .

    RPAREN          reduce using rule 23 (import_list -> import_list STRING .)
    STRING          reduce using rule 23 (import_list -> import_list STRING .)


state 128

    (53) switch -> SWITCH expression LBRACE caseBlocks . RBRACE

    RBRACE          shift and go to state 158


state 129

    (54) caseBlocks -> caseBlock .
    (55) caseBlocks -> caseBlock . caseBlocks
    (54) caseBlocks -> . caseBlock
    (55) caseBlocks -> . caseBlock caseBlocks
    (56) caseBlock -> . CASE expression COLON statement_list
    (57) caseBlock -> . DEFAULT COLON statement_list

    RBRACE          reduce using rule 54 (caseBlocks -> caseBlock .)
    CASE            shift and go to state 130
    DEFAULT         shift and go to state 131

    caseBlock                      shift and go to state 129
    caseBlocks                     shift and go to state 159

state 130

    (56) caseBlock -> CASE . expression COLON statement_list
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (92) expression -> . NUMBER
    (93) expression -> . IDENTIFIER
    (94) expression -> . RUNE
    (95) expression -> . STRING
    (96) expression -> . RAW_STRING
    (97) expression -> . TRUE
    (98) expression -> . FALSE
    (99) expression -> . NIL
    (100) expression -> . expression operator expression
    (101) expression -> . expression DOT IDENTIFIER
    (107) expression -> . MINUS expression
    (108) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 41
    IDENTIFIER      shift and go to state 55
    RUNE            shift and go to state 42
    STRING          shift and go to state 43
    RAW_STRING      shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NIL             shift and go to state 47
    MINUS           shift and go to state 48
    LPAREN          shift and go to state 49

    expression                     shift and go to state 160

state 131

    (57) caseBlock -> DEFAULT . COLON statement_list

    COLON           shift and go to state 161


state 132

    (35) expression -> expression comparador expression .
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (100) expression -> expression . operator expression
    (101) expression -> expression . DOT IDENTIFIER
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (102) operator -> . PLUS
    (103) operator -> . MINUS
    (104) operator -> . TIMES
    (105) operator -> . DIVIDE
    (106) operator -> . MOD

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 35 (expression -> expression comparador expression .)
    IDENTIFIER      reduce using rule 35 (expression -> expression comparador expression .)
    VAR             reduce using rule 35 (expression -> expression comparador expression .)
    TYPE            reduce using rule 35 (expression -> expression comparador expression .)
    FOR             reduce using rule 35 (expression -> expression comparador expression .)
    PACKAGE         reduce using rule 35 (expression -> expression comparador expression .)
    IMPORT          reduce using rule 35 (expression -> expression comparador expression .)
    SWITCH          reduce using rule 35 (expression -> expression comparador expression .)
    IF              reduce using rule 35 (expression -> expression comparador expression .)
    FUNC            reduce using rule 35 (expression -> expression comparador expression .)
    $end            reduce using rule 35 (expression -> expression comparador expression .)
    RBRACE          reduce using rule 35 (expression -> expression comparador expression .)
    CASE            reduce using rule 35 (expression -> expression comparador expression .)
    DEFAULT         reduce using rule 35 (expression -> expression comparador expression .)
    RETURN          reduce using rule 35 (expression -> expression comparador expression .)
    COMMA           reduce using rule 35 (expression -> expression comparador expression .)
    RPAREN          reduce using rule 35 (expression -> expression comparador expression .)
    SEMICOLON       reduce using rule 35 (expression -> expression comparador expression .)
    COLON           reduce using rule 35 (expression -> expression comparador expression .)
    DOT             shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    GT              shift and go to state 80
    LT              shift and go to state 81
    GE              shift and go to state 82
    LE              shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    MOD             shift and go to state 90

  ! DOT             [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! EQ              [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! NEQ             [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! GT              [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! LT              [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! GE              [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! LE              [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! AND             [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! OR              [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! PLUS            [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! MINUS           [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! TIMES           [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! DIVIDE          [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! MOD             [ reduce using rule 35 (expression -> expression comparador expression .) ]

    comparador                     shift and go to state 100
    operadorLogico                 shift and go to state 75
    operator                       shift and go to state 76

state 133

    (110) if_statement -> IF condicion_compleja block ELSE . block
    (90) block -> . LBRACE statement_list RBRACE
    (91) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    block                          shift and go to state 162

state 134

    (42) condicion_compleja -> condicion operadorLogico condicion .
    (42) condicion_compleja -> condicion . operadorLogico condicion
    (43) condicion_compleja -> condicion . operadorLogico condicion_compleja
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR

    LBRACE          reduce using rule 42 (condicion_compleja -> condicion operadorLogico condicion .)
    AND             shift and go to state 84
    OR              shift and go to state 85

    operadorLogico                 shift and go to state 102

state 135

    (43) condicion_compleja -> condicion operadorLogico condicion_compleja .

    LBRACE          reduce using rule 43 (condicion_compleja -> condicion operadorLogico condicion_compleja .)


state 136

    (74) param -> IDENTIFIER . type_name
    (75) type_name -> . DATATYPE
    (76) type_name -> . IDENTIFIER

    DATATYPE        shift and go to state 165
    IDENTIFIER      shift and go to state 163

    type_name                      shift and go to state 164

state 137

    (66) function -> FUNC IDENTIFIER LPAREN params_opt . RPAREN return_type block
    (67) function -> FUNC IDENTIFIER LPAREN params_opt . RPAREN return_type LBRACE statement_list RETURN expression RBRACE

    RPAREN          shift and go to state 166


state 138

    (70) params_opt -> params .

    RPAREN          reduce using rule 70 (params_opt -> params .)


state 139

    (71) params_opt -> empty .

    RPAREN          reduce using rule 71 (params_opt -> empty .)


state 140

    (72) params -> param .
    (73) params -> param . COMMA params

    RPAREN          reduce using rule 72 (params -> param .)
    COMMA           shift and go to state 167


state 141

    (116) parameter -> IDENTIFIER FUNC . LPAREN parameters RPAREN DATATYPE

    LPAREN          shift and go to state 168


state 142

    (82) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER . RPAREN IDENTIFIER LPAREN arguments RPAREN block

    RPAREN          shift and go to state 169


state 143

    (115) parameter -> IDENTIFIER DATATYPE .

    RPAREN          reduce using rule 115 (parameter -> IDENTIFIER DATATYPE .)
    COMMA           reduce using rule 115 (parameter -> IDENTIFIER DATATYPE .)


state 144

    (111) function_literal -> FUNC LPAREN parameters RPAREN . return_type block
    (117) return_type -> . DATATYPE
    (118) return_type -> . empty
    (52) empty -> .

    DATATYPE        shift and go to state 171
    LBRACE          reduce using rule 52 (empty -> .)

    return_type                    shift and go to state 170
    empty                          shift and go to state 172

state 145

    (112) parameters -> parameters COMMA . parameter
    (115) parameter -> . IDENTIFIER DATATYPE
    (116) parameter -> . IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE

    IDENTIFIER      shift and go to state 174

    parameter                      shift and go to state 173

state 146

    (68) function -> FUNC MAIN LPAREN params_opt . RPAREN block

    RPAREN          shift and go to state 175


state 147

    (60) mapLiteral -> MAP LBRACKET DATATYPE . RBRACKET DATATYPE LBRACE mapEntries RBRACE

    RBRACKET        shift and go to state 176


state 148

    (28) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND . IDENTIFIER RPAREN

    IDENTIFIER      shift and go to state 177


state 149

    (77) print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 178


state 150

    (38) argument_list -> argument_list COMMA expression .
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (100) expression -> expression . operator expression
    (101) expression -> expression . DOT IDENTIFIER
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (102) operator -> . PLUS
    (103) operator -> . MINUS
    (104) operator -> . TIMES
    (105) operator -> . DIVIDE
    (106) operator -> . MOD

    COMMA           reduce using rule 38 (argument_list -> argument_list COMMA expression .)
    RPAREN          reduce using rule 38 (argument_list -> argument_list COMMA expression .)
    DOT             shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    GT              shift and go to state 80
    LT              shift and go to state 81
    GE              shift and go to state 82
    LE              shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    MOD             shift and go to state 90

    comparador                     shift and go to state 100
    operadorLogico                 shift and go to state 75
    operator                       shift and go to state 76

state 151

    (93) expression -> IDENTIFIER .
    (34) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN

    DOT             reduce using rule 93 (expression -> IDENTIFIER .)
    EQ              reduce using rule 93 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 93 (expression -> IDENTIFIER .)
    GT              reduce using rule 93 (expression -> IDENTIFIER .)
    LT              reduce using rule 93 (expression -> IDENTIFIER .)
    GE              reduce using rule 93 (expression -> IDENTIFIER .)
    LE              reduce using rule 93 (expression -> IDENTIFIER .)
    AND             reduce using rule 93 (expression -> IDENTIFIER .)
    OR              reduce using rule 93 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 93 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 93 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 93 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 93 (expression -> IDENTIFIER .)
    MOD             reduce using rule 93 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 93 (expression -> IDENTIFIER .)
    VAR             reduce using rule 93 (expression -> IDENTIFIER .)
    TYPE            reduce using rule 93 (expression -> IDENTIFIER .)
    FOR             reduce using rule 93 (expression -> IDENTIFIER .)
    PACKAGE         reduce using rule 93 (expression -> IDENTIFIER .)
    IMPORT          reduce using rule 93 (expression -> IDENTIFIER .)
    SWITCH          reduce using rule 93 (expression -> IDENTIFIER .)
    IF              reduce using rule 93 (expression -> IDENTIFIER .)
    FUNC            reduce using rule 93 (expression -> IDENTIFIER .)
    $end            reduce using rule 93 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 93 (expression -> IDENTIFIER .)
    CASE            reduce using rule 93 (expression -> IDENTIFIER .)
    DEFAULT         reduce using rule 93 (expression -> IDENTIFIER .)
    RETURN          reduce using rule 93 (expression -> IDENTIFIER .)
    LPAREN          shift and go to state 31


state 152

    (31) assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (100) expression -> expression . operator expression
    (101) expression -> expression . DOT IDENTIFIER
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (102) operator -> . PLUS
    (103) operator -> . MINUS
    (104) operator -> . TIMES
    (105) operator -> . DIVIDE
    (106) operator -> . MOD

    IDENTIFIER      reduce using rule 31 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    VAR             reduce using rule 31 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    TYPE            reduce using rule 31 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    FOR             reduce using rule 31 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    PACKAGE         reduce using rule 31 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    IMPORT          reduce using rule 31 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    SWITCH          reduce using rule 31 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    IF              reduce using rule 31 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    FUNC            reduce using rule 31 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    $end            reduce using rule 31 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    RBRACE          reduce using rule 31 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    CASE            reduce using rule 31 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    DEFAULT         reduce using rule 31 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    RETURN          reduce using rule 31 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    DOT             shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    GT              shift and go to state 80
    LT              shift and go to state 81
    GE              shift and go to state 82
    LE              shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    MOD             shift and go to state 90

    comparador                     shift and go to state 100
    operadorLogico                 shift and go to state 75
    operator                       shift and go to state 76

state 153

    (32) assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .

    IDENTIFIER      reduce using rule 32 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    VAR             reduce using rule 32 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    TYPE            reduce using rule 32 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    FOR             reduce using rule 32 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    PACKAGE         reduce using rule 32 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    IMPORT          reduce using rule 32 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    SWITCH          reduce using rule 32 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    IF              reduce using rule 32 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    FUNC            reduce using rule 32 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    $end            reduce using rule 32 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    RBRACE          reduce using rule 32 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    CASE            reduce using rule 32 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    DEFAULT         reduce using rule 32 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    RETURN          reduce using rule 32 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)


state 154

    (79) struct_field -> IDENTIFIER . DATATYPE

    DATATYPE        shift and go to state 179


state 155

    (78) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields . RBRACE
    (81) struct_fields -> struct_fields . struct_field
    (79) struct_field -> . IDENTIFIER DATATYPE

    RBRACE          shift and go to state 180
    IDENTIFIER      shift and go to state 154

    struct_field                   shift and go to state 181

state 156

    (80) struct_fields -> struct_field .

    RBRACE          reduce using rule 80 (struct_fields -> struct_field .)
    IDENTIFIER      reduce using rule 80 (struct_fields -> struct_field .)


state 157

    (83) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON . expression block
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (92) expression -> . NUMBER
    (93) expression -> . IDENTIFIER
    (94) expression -> . RUNE
    (95) expression -> . STRING
    (96) expression -> . RAW_STRING
    (97) expression -> . TRUE
    (98) expression -> . FALSE
    (99) expression -> . NIL
    (100) expression -> . expression operator expression
    (101) expression -> . expression DOT IDENTIFIER
    (107) expression -> . MINUS expression
    (108) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 41
    IDENTIFIER      shift and go to state 55
    RUNE            shift and go to state 42
    STRING          shift and go to state 43
    RAW_STRING      shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NIL             shift and go to state 47
    MINUS           shift and go to state 48
    LPAREN          shift and go to state 49

    expression                     shift and go to state 182

state 158

    (53) switch -> SWITCH expression LBRACE caseBlocks RBRACE .

    IDENTIFIER      reduce using rule 53 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    VAR             reduce using rule 53 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    TYPE            reduce using rule 53 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    FOR             reduce using rule 53 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    PACKAGE         reduce using rule 53 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    IMPORT          reduce using rule 53 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    SWITCH          reduce using rule 53 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    IF              reduce using rule 53 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    FUNC            reduce using rule 53 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    $end            reduce using rule 53 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    RBRACE          reduce using rule 53 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    CASE            reduce using rule 53 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    DEFAULT         reduce using rule 53 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    RETURN          reduce using rule 53 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)


state 159

    (55) caseBlocks -> caseBlock caseBlocks .

    RBRACE          reduce using rule 55 (caseBlocks -> caseBlock caseBlocks .)


state 160

    (56) caseBlock -> CASE expression . COLON statement_list
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (100) expression -> expression . operator expression
    (101) expression -> expression . DOT IDENTIFIER
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (102) operator -> . PLUS
    (103) operator -> . MINUS
    (104) operator -> . TIMES
    (105) operator -> . DIVIDE
    (106) operator -> . MOD

    COLON           shift and go to state 183
    DOT             shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    GT              shift and go to state 80
    LT              shift and go to state 81
    GE              shift and go to state 82
    LE              shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    MOD             shift and go to state 90

    comparador                     shift and go to state 100
    operadorLogico                 shift and go to state 75
    operator                       shift and go to state 76

state 161

    (57) caseBlock -> DEFAULT COLON . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . assignment
    (5) statement -> . input
    (6) statement -> . llamarFuncion
    (7) statement -> . print_statement
    (8) statement -> . struct_definition
    (9) statement -> . for_statement
    (10) statement -> . package
    (11) statement -> . import
    (12) statement -> . switch
    (13) statement -> . map
    (14) statement -> . if_statement
    (15) statement -> . function
    (16) statement -> . method_definition
    (17) statement -> . function_literal
    (30) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (31) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (32) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (33) assignment -> . IDENTIFIER ASSIGN expression
    (28) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (34) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (77) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (78) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (83) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (87) for_statement -> . FOR condicion block
    (88) for_statement -> . FOR block
    (18) package -> . PACKAGE MAIN
    (19) package -> . PACKAGE IDENTIFIER
    (20) import -> . IMPORT STRING
    (21) import -> . IMPORT LPAREN import_list RPAREN
    (53) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (58) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (59) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (109) if_statement -> . IF condicion_compleja block
    (110) if_statement -> . IF condicion_compleja block ELSE block
    (66) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block
    (67) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN expression RBRACE
    (68) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (82) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (111) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 18
    VAR             shift and go to state 19
    TYPE            shift and go to state 20
    FOR             shift and go to state 21
    PACKAGE         shift and go to state 22
    IMPORT          shift and go to state 23
    SWITCH          shift and go to state 24
    IF              shift and go to state 25
    FUNC            shift and go to state 26

    statement_list                 shift and go to state 184
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17

state 162

    (110) if_statement -> IF condicion_compleja block ELSE block .

    IDENTIFIER      reduce using rule 110 (if_statement -> IF condicion_compleja block ELSE block .)
    VAR             reduce using rule 110 (if_statement -> IF condicion_compleja block ELSE block .)
    TYPE            reduce using rule 110 (if_statement -> IF condicion_compleja block ELSE block .)
    FOR             reduce using rule 110 (if_statement -> IF condicion_compleja block ELSE block .)
    PACKAGE         reduce using rule 110 (if_statement -> IF condicion_compleja block ELSE block .)
    IMPORT          reduce using rule 110 (if_statement -> IF condicion_compleja block ELSE block .)
    SWITCH          reduce using rule 110 (if_statement -> IF condicion_compleja block ELSE block .)
    IF              reduce using rule 110 (if_statement -> IF condicion_compleja block ELSE block .)
    FUNC            reduce using rule 110 (if_statement -> IF condicion_compleja block ELSE block .)
    $end            reduce using rule 110 (if_statement -> IF condicion_compleja block ELSE block .)
    RBRACE          reduce using rule 110 (if_statement -> IF condicion_compleja block ELSE block .)
    CASE            reduce using rule 110 (if_statement -> IF condicion_compleja block ELSE block .)
    DEFAULT         reduce using rule 110 (if_statement -> IF condicion_compleja block ELSE block .)
    RETURN          reduce using rule 110 (if_statement -> IF condicion_compleja block ELSE block .)


state 163

    (76) type_name -> IDENTIFIER .

    COMMA           reduce using rule 76 (type_name -> IDENTIFIER .)
    RPAREN          reduce using rule 76 (type_name -> IDENTIFIER .)


state 164

    (74) param -> IDENTIFIER type_name .

    COMMA           reduce using rule 74 (param -> IDENTIFIER type_name .)
    RPAREN          reduce using rule 74 (param -> IDENTIFIER type_name .)


state 165

    (75) type_name -> DATATYPE .

    COMMA           reduce using rule 75 (type_name -> DATATYPE .)
    RPAREN          reduce using rule 75 (type_name -> DATATYPE .)


state 166

    (66) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN . return_type block
    (67) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN . return_type LBRACE statement_list RETURN expression RBRACE
    (117) return_type -> . DATATYPE
    (118) return_type -> . empty
    (52) empty -> .

    DATATYPE        shift and go to state 171
    LBRACE          reduce using rule 52 (empty -> .)

    return_type                    shift and go to state 185
    empty                          shift and go to state 172

state 167

    (73) params -> param COMMA . params
    (72) params -> . param
    (73) params -> . param COMMA params
    (74) param -> . IDENTIFIER type_name

    IDENTIFIER      shift and go to state 136

    param                          shift and go to state 140
    params                         shift and go to state 186

state 168

    (116) parameter -> IDENTIFIER FUNC LPAREN . parameters RPAREN DATATYPE
    (112) parameters -> . parameters COMMA parameter
    (113) parameters -> . parameter
    (114) parameters -> . empty
    (115) parameter -> . IDENTIFIER DATATYPE
    (116) parameter -> . IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE
    (52) empty -> .

    IDENTIFIER      shift and go to state 174
    RPAREN          reduce using rule 52 (empty -> .)
    COMMA           reduce using rule 52 (empty -> .)

    parameters                     shift and go to state 187
    parameter                      shift and go to state 106
    empty                          shift and go to state 107

state 169

    (82) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN . IDENTIFIER LPAREN arguments RPAREN block

    IDENTIFIER      shift and go to state 188


state 170

    (111) function_literal -> FUNC LPAREN parameters RPAREN return_type . block
    (90) block -> . LBRACE statement_list RBRACE
    (91) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    block                          shift and go to state 189

state 171

    (117) return_type -> DATATYPE .

    LBRACE          reduce using rule 117 (return_type -> DATATYPE .)


state 172

    (118) return_type -> empty .

    LBRACE          reduce using rule 118 (return_type -> empty .)


state 173

    (112) parameters -> parameters COMMA parameter .

    RPAREN          reduce using rule 112 (parameters -> parameters COMMA parameter .)
    COMMA           reduce using rule 112 (parameters -> parameters COMMA parameter .)


state 174

    (115) parameter -> IDENTIFIER . DATATYPE
    (116) parameter -> IDENTIFIER . FUNC LPAREN parameters RPAREN DATATYPE

    DATATYPE        shift and go to state 143
    FUNC            shift and go to state 141


state 175

    (68) function -> FUNC MAIN LPAREN params_opt RPAREN . block
    (90) block -> . LBRACE statement_list RBRACE
    (91) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    block                          shift and go to state 190

state 176

    (60) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET . DATATYPE LBRACE mapEntries RBRACE

    DATATYPE        shift and go to state 191


state 177

    (28) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER . RPAREN

    RPAREN          shift and go to state 192


state 178

    (77) print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .

    IDENTIFIER      reduce using rule 77 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    VAR             reduce using rule 77 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TYPE            reduce using rule 77 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FOR             reduce using rule 77 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PACKAGE         reduce using rule 77 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IMPORT          reduce using rule 77 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SWITCH          reduce using rule 77 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IF              reduce using rule 77 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FUNC            reduce using rule 77 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    $end            reduce using rule 77 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 77 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    CASE            reduce using rule 77 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DEFAULT         reduce using rule 77 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RETURN          reduce using rule 77 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)


state 179

    (79) struct_field -> IDENTIFIER DATATYPE .

    RBRACE          reduce using rule 79 (struct_field -> IDENTIFIER DATATYPE .)
    IDENTIFIER      reduce using rule 79 (struct_field -> IDENTIFIER DATATYPE .)


state 180

    (78) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .

    IDENTIFIER      reduce using rule 78 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    VAR             reduce using rule 78 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    TYPE            reduce using rule 78 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    FOR             reduce using rule 78 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    PACKAGE         reduce using rule 78 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    IMPORT          reduce using rule 78 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    SWITCH          reduce using rule 78 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    IF              reduce using rule 78 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    FUNC            reduce using rule 78 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    $end            reduce using rule 78 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    RBRACE          reduce using rule 78 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    CASE            reduce using rule 78 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    DEFAULT         reduce using rule 78 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    RETURN          reduce using rule 78 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)


state 181

    (81) struct_fields -> struct_fields struct_field .

    RBRACE          reduce using rule 81 (struct_fields -> struct_fields struct_field .)
    IDENTIFIER      reduce using rule 81 (struct_fields -> struct_fields struct_field .)


state 182

    (83) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression . block
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (100) expression -> expression . operator expression
    (101) expression -> expression . DOT IDENTIFIER
    (90) block -> . LBRACE statement_list RBRACE
    (91) block -> . LBRACE RBRACE
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (102) operator -> . PLUS
    (103) operator -> . MINUS
    (104) operator -> . TIMES
    (105) operator -> . DIVIDE
    (106) operator -> . MOD

    DOT             shift and go to state 77
    LBRACE          shift and go to state 39
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    GT              shift and go to state 80
    LT              shift and go to state 81
    GE              shift and go to state 82
    LE              shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    MOD             shift and go to state 90

    block                          shift and go to state 193
    comparador                     shift and go to state 100
    operadorLogico                 shift and go to state 75
    operator                       shift and go to state 76

state 183

    (56) caseBlock -> CASE expression COLON . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . assignment
    (5) statement -> . input
    (6) statement -> . llamarFuncion
    (7) statement -> . print_statement
    (8) statement -> . struct_definition
    (9) statement -> . for_statement
    (10) statement -> . package
    (11) statement -> . import
    (12) statement -> . switch
    (13) statement -> . map
    (14) statement -> . if_statement
    (15) statement -> . function
    (16) statement -> . method_definition
    (17) statement -> . function_literal
    (30) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (31) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (32) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (33) assignment -> . IDENTIFIER ASSIGN expression
    (28) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (34) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (77) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (78) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (83) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (87) for_statement -> . FOR condicion block
    (88) for_statement -> . FOR block
    (18) package -> . PACKAGE MAIN
    (19) package -> . PACKAGE IDENTIFIER
    (20) import -> . IMPORT STRING
    (21) import -> . IMPORT LPAREN import_list RPAREN
    (53) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (58) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (59) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (109) if_statement -> . IF condicion_compleja block
    (110) if_statement -> . IF condicion_compleja block ELSE block
    (66) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block
    (67) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN expression RBRACE
    (68) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (82) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (111) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 18
    VAR             shift and go to state 19
    TYPE            shift and go to state 20
    FOR             shift and go to state 21
    PACKAGE         shift and go to state 22
    IMPORT          shift and go to state 23
    SWITCH          shift and go to state 24
    IF              shift and go to state 25
    FUNC            shift and go to state 26

    statement_list                 shift and go to state 194
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17

state 184

    (57) caseBlock -> DEFAULT COLON statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . assignment
    (5) statement -> . input
    (6) statement -> . llamarFuncion
    (7) statement -> . print_statement
    (8) statement -> . struct_definition
    (9) statement -> . for_statement
    (10) statement -> . package
    (11) statement -> . import
    (12) statement -> . switch
    (13) statement -> . map
    (14) statement -> . if_statement
    (15) statement -> . function
    (16) statement -> . method_definition
    (17) statement -> . function_literal
    (30) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (31) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (32) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (33) assignment -> . IDENTIFIER ASSIGN expression
    (28) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (34) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (77) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (78) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (83) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (87) for_statement -> . FOR condicion block
    (88) for_statement -> . FOR block
    (18) package -> . PACKAGE MAIN
    (19) package -> . PACKAGE IDENTIFIER
    (20) import -> . IMPORT STRING
    (21) import -> . IMPORT LPAREN import_list RPAREN
    (53) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (58) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (59) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (109) if_statement -> . IF condicion_compleja block
    (110) if_statement -> . IF condicion_compleja block ELSE block
    (66) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block
    (67) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN expression RBRACE
    (68) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (82) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (111) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    CASE            reduce using rule 57 (caseBlock -> DEFAULT COLON statement_list .)
    DEFAULT         reduce using rule 57 (caseBlock -> DEFAULT COLON statement_list .)
    RBRACE          reduce using rule 57 (caseBlock -> DEFAULT COLON statement_list .)
    IDENTIFIER      shift and go to state 18
    VAR             shift and go to state 19
    TYPE            shift and go to state 20
    FOR             shift and go to state 21
    PACKAGE         shift and go to state 22
    IMPORT          shift and go to state 23
    SWITCH          shift and go to state 24
    IF              shift and go to state 25
    FUNC            shift and go to state 26

    statement                      shift and go to state 27
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17

state 185

    (66) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type . block
    (67) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type . LBRACE statement_list RETURN expression RBRACE
    (90) block -> . LBRACE statement_list RBRACE
    (91) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 196

    block                          shift and go to state 195

state 186

    (73) params -> param COMMA params .

    RPAREN          reduce using rule 73 (params -> param COMMA params .)


state 187

    (116) parameter -> IDENTIFIER FUNC LPAREN parameters . RPAREN DATATYPE
    (112) parameters -> parameters . COMMA parameter

    RPAREN          shift and go to state 197
    COMMA           shift and go to state 145


state 188

    (82) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER . LPAREN arguments RPAREN block

    LPAREN          shift and go to state 198


state 189

    (111) function_literal -> FUNC LPAREN parameters RPAREN return_type block .

    IDENTIFIER      reduce using rule 111 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    VAR             reduce using rule 111 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    TYPE            reduce using rule 111 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    FOR             reduce using rule 111 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    PACKAGE         reduce using rule 111 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    IMPORT          reduce using rule 111 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    SWITCH          reduce using rule 111 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    IF              reduce using rule 111 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    FUNC            reduce using rule 111 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    $end            reduce using rule 111 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    RBRACE          reduce using rule 111 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    CASE            reduce using rule 111 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    DEFAULT         reduce using rule 111 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    RETURN          reduce using rule 111 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)


state 190

    (68) function -> FUNC MAIN LPAREN params_opt RPAREN block .

    IDENTIFIER      reduce using rule 68 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    VAR             reduce using rule 68 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    TYPE            reduce using rule 68 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    FOR             reduce using rule 68 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    PACKAGE         reduce using rule 68 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    IMPORT          reduce using rule 68 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    SWITCH          reduce using rule 68 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    IF              reduce using rule 68 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    FUNC            reduce using rule 68 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    $end            reduce using rule 68 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    RBRACE          reduce using rule 68 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    CASE            reduce using rule 68 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    DEFAULT         reduce using rule 68 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    RETURN          reduce using rule 68 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)


state 191

    (60) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE . LBRACE mapEntries RBRACE

    LBRACE          shift and go to state 199


state 192

    (28) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .

    IDENTIFIER      reduce using rule 28 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    VAR             reduce using rule 28 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    TYPE            reduce using rule 28 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    FOR             reduce using rule 28 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    PACKAGE         reduce using rule 28 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    IMPORT          reduce using rule 28 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    SWITCH          reduce using rule 28 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    IF              reduce using rule 28 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    FUNC            reduce using rule 28 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    $end            reduce using rule 28 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    RBRACE          reduce using rule 28 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    CASE            reduce using rule 28 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    DEFAULT         reduce using rule 28 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    RETURN          reduce using rule 28 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)


state 193

    (83) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .

    IDENTIFIER      reduce using rule 83 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    VAR             reduce using rule 83 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    TYPE            reduce using rule 83 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    FOR             reduce using rule 83 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    PACKAGE         reduce using rule 83 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    IMPORT          reduce using rule 83 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    SWITCH          reduce using rule 83 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    IF              reduce using rule 83 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    FUNC            reduce using rule 83 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    $end            reduce using rule 83 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    RBRACE          reduce using rule 83 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    CASE            reduce using rule 83 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    DEFAULT         reduce using rule 83 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    RETURN          reduce using rule 83 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)


state 194

    (56) caseBlock -> CASE expression COLON statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . assignment
    (5) statement -> . input
    (6) statement -> . llamarFuncion
    (7) statement -> . print_statement
    (8) statement -> . struct_definition
    (9) statement -> . for_statement
    (10) statement -> . package
    (11) statement -> . import
    (12) statement -> . switch
    (13) statement -> . map
    (14) statement -> . if_statement
    (15) statement -> . function
    (16) statement -> . method_definition
    (17) statement -> . function_literal
    (30) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (31) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (32) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (33) assignment -> . IDENTIFIER ASSIGN expression
    (28) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (34) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (77) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (78) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (83) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (87) for_statement -> . FOR condicion block
    (88) for_statement -> . FOR block
    (18) package -> . PACKAGE MAIN
    (19) package -> . PACKAGE IDENTIFIER
    (20) import -> . IMPORT STRING
    (21) import -> . IMPORT LPAREN import_list RPAREN
    (53) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (58) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (59) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (109) if_statement -> . IF condicion_compleja block
    (110) if_statement -> . IF condicion_compleja block ELSE block
    (66) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block
    (67) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN expression RBRACE
    (68) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (82) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (111) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    CASE            reduce using rule 56 (caseBlock -> CASE expression COLON statement_list .)
    DEFAULT         reduce using rule 56 (caseBlock -> CASE expression COLON statement_list .)
    RBRACE          reduce using rule 56 (caseBlock -> CASE expression COLON statement_list .)
    IDENTIFIER      shift and go to state 18
    VAR             shift and go to state 19
    TYPE            shift and go to state 20
    FOR             shift and go to state 21
    PACKAGE         shift and go to state 22
    IMPORT          shift and go to state 23
    SWITCH          shift and go to state 24
    IF              shift and go to state 25
    FUNC            shift and go to state 26

    statement                      shift and go to state 27
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17

state 195

    (66) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block .

    IDENTIFIER      reduce using rule 66 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block .)
    VAR             reduce using rule 66 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block .)
    TYPE            reduce using rule 66 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block .)
    FOR             reduce using rule 66 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block .)
    PACKAGE         reduce using rule 66 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block .)
    IMPORT          reduce using rule 66 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block .)
    SWITCH          reduce using rule 66 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block .)
    IF              reduce using rule 66 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block .)
    FUNC            reduce using rule 66 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block .)
    $end            reduce using rule 66 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block .)
    RBRACE          reduce using rule 66 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block .)
    CASE            reduce using rule 66 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block .)
    DEFAULT         reduce using rule 66 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block .)
    RETURN          reduce using rule 66 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block .)


state 196

    (67) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE . statement_list RETURN expression RBRACE
    (90) block -> LBRACE . statement_list RBRACE
    (91) block -> LBRACE . RBRACE
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . assignment
    (5) statement -> . input
    (6) statement -> . llamarFuncion
    (7) statement -> . print_statement
    (8) statement -> . struct_definition
    (9) statement -> . for_statement
    (10) statement -> . package
    (11) statement -> . import
    (12) statement -> . switch
    (13) statement -> . map
    (14) statement -> . if_statement
    (15) statement -> . function
    (16) statement -> . method_definition
    (17) statement -> . function_literal
    (30) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (31) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (32) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (33) assignment -> . IDENTIFIER ASSIGN expression
    (28) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (34) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (77) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (78) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (83) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (87) for_statement -> . FOR condicion block
    (88) for_statement -> . FOR block
    (18) package -> . PACKAGE MAIN
    (19) package -> . PACKAGE IDENTIFIER
    (20) import -> . IMPORT STRING
    (21) import -> . IMPORT LPAREN import_list RPAREN
    (53) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (58) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (59) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (109) if_statement -> . IF condicion_compleja block
    (110) if_statement -> . IF condicion_compleja block ELSE block
    (66) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block
    (67) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN expression RBRACE
    (68) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (82) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (111) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    RBRACE          shift and go to state 93
    IDENTIFIER      shift and go to state 18
    VAR             shift and go to state 19
    TYPE            shift and go to state 20
    FOR             shift and go to state 21
    PACKAGE         shift and go to state 22
    IMPORT          shift and go to state 23
    SWITCH          shift and go to state 24
    IF              shift and go to state 25
    FUNC            shift and go to state 26

    statement_list                 shift and go to state 200
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17

state 197

    (116) parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN . DATATYPE

    DATATYPE        shift and go to state 201


state 198

    (82) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN . arguments RPAREN block
    (24) arguments -> . expression
    (25) arguments -> . arguments COMMA expression
    (26) arguments -> .
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (92) expression -> . NUMBER
    (93) expression -> . IDENTIFIER
    (94) expression -> . RUNE
    (95) expression -> . STRING
    (96) expression -> . RAW_STRING
    (97) expression -> . TRUE
    (98) expression -> . FALSE
    (99) expression -> . NIL
    (100) expression -> . expression operator expression
    (101) expression -> . expression DOT IDENTIFIER
    (107) expression -> . MINUS expression
    (108) expression -> . LPAREN expression RPAREN

    RPAREN          reduce using rule 26 (arguments -> .)
    COMMA           reduce using rule 26 (arguments -> .)
    NUMBER          shift and go to state 41
    IDENTIFIER      shift and go to state 55
    RUNE            shift and go to state 42
    STRING          shift and go to state 43
    RAW_STRING      shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NIL             shift and go to state 47
    MINUS           shift and go to state 48
    LPAREN          shift and go to state 49

    arguments                      shift and go to state 202
    expression                     shift and go to state 203

state 199

    (60) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE . mapEntries RBRACE
    (61) mapEntries -> . mapEntry
    (62) mapEntries -> . mapEntry COMMA mapEntries
    (63) mapEntry -> . value_key COLON value_key
    (64) value_key -> . expression
    (65) value_key -> . STRING
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (92) expression -> . NUMBER
    (93) expression -> . IDENTIFIER
    (94) expression -> . RUNE
    (95) expression -> . STRING
    (96) expression -> . RAW_STRING
    (97) expression -> . TRUE
    (98) expression -> . FALSE
    (99) expression -> . NIL
    (100) expression -> . expression operator expression
    (101) expression -> . expression DOT IDENTIFIER
    (107) expression -> . MINUS expression
    (108) expression -> . LPAREN expression RPAREN

    STRING          shift and go to state 208
    NUMBER          shift and go to state 41
    IDENTIFIER      shift and go to state 55
    RUNE            shift and go to state 42
    RAW_STRING      shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NIL             shift and go to state 47
    MINUS           shift and go to state 48
    LPAREN          shift and go to state 49

    mapEntries                     shift and go to state 204
    mapEntry                       shift and go to state 205
    value_key                      shift and go to state 206
    expression                     shift and go to state 207

state 200

    (67) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list . RETURN expression RBRACE
    (90) block -> LBRACE statement_list . RBRACE
    (3) statement_list -> statement_list . statement
    (4) statement -> . assignment
    (5) statement -> . input
    (6) statement -> . llamarFuncion
    (7) statement -> . print_statement
    (8) statement -> . struct_definition
    (9) statement -> . for_statement
    (10) statement -> . package
    (11) statement -> . import
    (12) statement -> . switch
    (13) statement -> . map
    (14) statement -> . if_statement
    (15) statement -> . function
    (16) statement -> . method_definition
    (17) statement -> . function_literal
    (30) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (31) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (32) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (33) assignment -> . IDENTIFIER ASSIGN expression
    (28) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (34) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (77) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (78) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (83) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (87) for_statement -> . FOR condicion block
    (88) for_statement -> . FOR block
    (18) package -> . PACKAGE MAIN
    (19) package -> . PACKAGE IDENTIFIER
    (20) import -> . IMPORT STRING
    (21) import -> . IMPORT LPAREN import_list RPAREN
    (53) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (58) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (59) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (109) if_statement -> . IF condicion_compleja block
    (110) if_statement -> . IF condicion_compleja block ELSE block
    (66) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block
    (67) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN expression RBRACE
    (68) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (82) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (111) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    RETURN          shift and go to state 209
    RBRACE          shift and go to state 122
    IDENTIFIER      shift and go to state 18
    VAR             shift and go to state 19
    TYPE            shift and go to state 20
    FOR             shift and go to state 21
    PACKAGE         shift and go to state 22
    IMPORT          shift and go to state 23
    SWITCH          shift and go to state 24
    IF              shift and go to state 25
    FUNC            shift and go to state 26

    statement                      shift and go to state 27
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17

state 201

    (116) parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE .

    RPAREN          reduce using rule 116 (parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE .)
    COMMA           reduce using rule 116 (parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE .)


state 202

    (82) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments . RPAREN block
    (25) arguments -> arguments . COMMA expression

    RPAREN          shift and go to state 210
    COMMA           shift and go to state 211


state 203

    (24) arguments -> expression .
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (100) expression -> expression . operator expression
    (101) expression -> expression . DOT IDENTIFIER
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (102) operator -> . PLUS
    (103) operator -> . MINUS
    (104) operator -> . TIMES
    (105) operator -> . DIVIDE
    (106) operator -> . MOD

    RPAREN          reduce using rule 24 (arguments -> expression .)
    COMMA           reduce using rule 24 (arguments -> expression .)
    DOT             shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    GT              shift and go to state 80
    LT              shift and go to state 81
    GE              shift and go to state 82
    LE              shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    MOD             shift and go to state 90

    comparador                     shift and go to state 100
    operadorLogico                 shift and go to state 75
    operator                       shift and go to state 76

state 204

    (60) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries . RBRACE

    RBRACE          shift and go to state 212


state 205

    (61) mapEntries -> mapEntry .
    (62) mapEntries -> mapEntry . COMMA mapEntries

    RBRACE          reduce using rule 61 (mapEntries -> mapEntry .)
    COMMA           shift and go to state 213


state 206

    (63) mapEntry -> value_key . COLON value_key

    COLON           shift and go to state 214


state 207

    (64) value_key -> expression .
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (100) expression -> expression . operator expression
    (101) expression -> expression . DOT IDENTIFIER
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (102) operator -> . PLUS
    (103) operator -> . MINUS
    (104) operator -> . TIMES
    (105) operator -> . DIVIDE
    (106) operator -> . MOD

    COLON           reduce using rule 64 (value_key -> expression .)
    COMMA           reduce using rule 64 (value_key -> expression .)
    RBRACE          reduce using rule 64 (value_key -> expression .)
    DOT             shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    GT              shift and go to state 80
    LT              shift and go to state 81
    GE              shift and go to state 82
    LE              shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    MOD             shift and go to state 90

    comparador                     shift and go to state 100
    operadorLogico                 shift and go to state 75
    operator                       shift and go to state 76

state 208

    (65) value_key -> STRING .
    (95) expression -> STRING .

  ! reduce/reduce conflict for COLON resolved using rule 65 (value_key -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 65 (value_key -> STRING .)
  ! reduce/reduce conflict for RBRACE resolved using rule 65 (value_key -> STRING .)
    COLON           reduce using rule 65 (value_key -> STRING .)
    COMMA           reduce using rule 65 (value_key -> STRING .)
    RBRACE          reduce using rule 65 (value_key -> STRING .)
    DOT             reduce using rule 95 (expression -> STRING .)
    EQ              reduce using rule 95 (expression -> STRING .)
    NEQ             reduce using rule 95 (expression -> STRING .)
    GT              reduce using rule 95 (expression -> STRING .)
    LT              reduce using rule 95 (expression -> STRING .)
    GE              reduce using rule 95 (expression -> STRING .)
    LE              reduce using rule 95 (expression -> STRING .)
    AND             reduce using rule 95 (expression -> STRING .)
    OR              reduce using rule 95 (expression -> STRING .)
    PLUS            reduce using rule 95 (expression -> STRING .)
    MINUS           reduce using rule 95 (expression -> STRING .)
    TIMES           reduce using rule 95 (expression -> STRING .)
    DIVIDE          reduce using rule 95 (expression -> STRING .)
    MOD             reduce using rule 95 (expression -> STRING .)

  ! COLON           [ reduce using rule 95 (expression -> STRING .) ]
  ! COMMA           [ reduce using rule 95 (expression -> STRING .) ]
  ! RBRACE          [ reduce using rule 95 (expression -> STRING .) ]


state 209

    (67) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN . expression RBRACE
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (92) expression -> . NUMBER
    (93) expression -> . IDENTIFIER
    (94) expression -> . RUNE
    (95) expression -> . STRING
    (96) expression -> . RAW_STRING
    (97) expression -> . TRUE
    (98) expression -> . FALSE
    (99) expression -> . NIL
    (100) expression -> . expression operator expression
    (101) expression -> . expression DOT IDENTIFIER
    (107) expression -> . MINUS expression
    (108) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 41
    IDENTIFIER      shift and go to state 55
    RUNE            shift and go to state 42
    STRING          shift and go to state 43
    RAW_STRING      shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NIL             shift and go to state 47
    MINUS           shift and go to state 48
    LPAREN          shift and go to state 49

    expression                     shift and go to state 215

state 210

    (82) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN . block
    (90) block -> . LBRACE statement_list RBRACE
    (91) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    block                          shift and go to state 216

state 211

    (25) arguments -> arguments COMMA . expression
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (92) expression -> . NUMBER
    (93) expression -> . IDENTIFIER
    (94) expression -> . RUNE
    (95) expression -> . STRING
    (96) expression -> . RAW_STRING
    (97) expression -> . TRUE
    (98) expression -> . FALSE
    (99) expression -> . NIL
    (100) expression -> . expression operator expression
    (101) expression -> . expression DOT IDENTIFIER
    (107) expression -> . MINUS expression
    (108) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 41
    IDENTIFIER      shift and go to state 55
    RUNE            shift and go to state 42
    STRING          shift and go to state 43
    RAW_STRING      shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NIL             shift and go to state 47
    MINUS           shift and go to state 48
    LPAREN          shift and go to state 49

    expression                     shift and go to state 217

state 212

    (60) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .

    IDENTIFIER      reduce using rule 60 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    VAR             reduce using rule 60 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    TYPE            reduce using rule 60 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    FOR             reduce using rule 60 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    PACKAGE         reduce using rule 60 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    IMPORT          reduce using rule 60 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    SWITCH          reduce using rule 60 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    IF              reduce using rule 60 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    FUNC            reduce using rule 60 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    $end            reduce using rule 60 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    RBRACE          reduce using rule 60 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    CASE            reduce using rule 60 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    DEFAULT         reduce using rule 60 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    RETURN          reduce using rule 60 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)


state 213

    (62) mapEntries -> mapEntry COMMA . mapEntries
    (61) mapEntries -> . mapEntry
    (62) mapEntries -> . mapEntry COMMA mapEntries
    (63) mapEntry -> . value_key COLON value_key
    (64) value_key -> . expression
    (65) value_key -> . STRING
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (92) expression -> . NUMBER
    (93) expression -> . IDENTIFIER
    (94) expression -> . RUNE
    (95) expression -> . STRING
    (96) expression -> . RAW_STRING
    (97) expression -> . TRUE
    (98) expression -> . FALSE
    (99) expression -> . NIL
    (100) expression -> . expression operator expression
    (101) expression -> . expression DOT IDENTIFIER
    (107) expression -> . MINUS expression
    (108) expression -> . LPAREN expression RPAREN

    STRING          shift and go to state 208
    NUMBER          shift and go to state 41
    IDENTIFIER      shift and go to state 55
    RUNE            shift and go to state 42
    RAW_STRING      shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NIL             shift and go to state 47
    MINUS           shift and go to state 48
    LPAREN          shift and go to state 49

    mapEntry                       shift and go to state 205
    mapEntries                     shift and go to state 218
    value_key                      shift and go to state 206
    expression                     shift and go to state 207

state 214

    (63) mapEntry -> value_key COLON . value_key
    (64) value_key -> . expression
    (65) value_key -> . STRING
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (92) expression -> . NUMBER
    (93) expression -> . IDENTIFIER
    (94) expression -> . RUNE
    (95) expression -> . STRING
    (96) expression -> . RAW_STRING
    (97) expression -> . TRUE
    (98) expression -> . FALSE
    (99) expression -> . NIL
    (100) expression -> . expression operator expression
    (101) expression -> . expression DOT IDENTIFIER
    (107) expression -> . MINUS expression
    (108) expression -> . LPAREN expression RPAREN

    STRING          shift and go to state 208
    NUMBER          shift and go to state 41
    IDENTIFIER      shift and go to state 55
    RUNE            shift and go to state 42
    RAW_STRING      shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NIL             shift and go to state 47
    MINUS           shift and go to state 48
    LPAREN          shift and go to state 49

    value_key                      shift and go to state 219
    expression                     shift and go to state 207

state 215

    (67) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN expression . RBRACE
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (100) expression -> expression . operator expression
    (101) expression -> expression . DOT IDENTIFIER
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (102) operator -> . PLUS
    (103) operator -> . MINUS
    (104) operator -> . TIMES
    (105) operator -> . DIVIDE
    (106) operator -> . MOD

    RBRACE          shift and go to state 220
    DOT             shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    GT              shift and go to state 80
    LT              shift and go to state 81
    GE              shift and go to state 82
    LE              shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    MOD             shift and go to state 90

    comparador                     shift and go to state 100
    operadorLogico                 shift and go to state 75
    operator                       shift and go to state 76

state 216

    (82) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .

    IDENTIFIER      reduce using rule 82 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    VAR             reduce using rule 82 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    TYPE            reduce using rule 82 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    FOR             reduce using rule 82 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    PACKAGE         reduce using rule 82 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    IMPORT          reduce using rule 82 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    SWITCH          reduce using rule 82 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    IF              reduce using rule 82 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    FUNC            reduce using rule 82 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    $end            reduce using rule 82 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    RBRACE          reduce using rule 82 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    CASE            reduce using rule 82 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    DEFAULT         reduce using rule 82 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    RETURN          reduce using rule 82 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)


state 217

    (25) arguments -> arguments COMMA expression .
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (100) expression -> expression . operator expression
    (101) expression -> expression . DOT IDENTIFIER
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (102) operator -> . PLUS
    (103) operator -> . MINUS
    (104) operator -> . TIMES
    (105) operator -> . DIVIDE
    (106) operator -> . MOD

    RPAREN          reduce using rule 25 (arguments -> arguments COMMA expression .)
    COMMA           reduce using rule 25 (arguments -> arguments COMMA expression .)
    DOT             shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    GT              shift and go to state 80
    LT              shift and go to state 81
    GE              shift and go to state 82
    LE              shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    MOD             shift and go to state 90

    comparador                     shift and go to state 100
    operadorLogico                 shift and go to state 75
    operator                       shift and go to state 76

state 218

    (62) mapEntries -> mapEntry COMMA mapEntries .

    RBRACE          reduce using rule 62 (mapEntries -> mapEntry COMMA mapEntries .)


state 219

    (63) mapEntry -> value_key COLON value_key .

    COMMA           reduce using rule 63 (mapEntry -> value_key COLON value_key .)
    RBRACE          reduce using rule 63 (mapEntry -> value_key COLON value_key .)


state 220

    (67) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN expression RBRACE .

    IDENTIFIER      reduce using rule 67 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN expression RBRACE .)
    VAR             reduce using rule 67 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN expression RBRACE .)
    TYPE            reduce using rule 67 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN expression RBRACE .)
    FOR             reduce using rule 67 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN expression RBRACE .)
    PACKAGE         reduce using rule 67 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN expression RBRACE .)
    IMPORT          reduce using rule 67 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN expression RBRACE .)
    SWITCH          reduce using rule 67 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN expression RBRACE .)
    IF              reduce using rule 67 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN expression RBRACE .)
    FUNC            reduce using rule 67 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN expression RBRACE .)
    $end            reduce using rule 67 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN expression RBRACE .)
    RBRACE          reduce using rule 67 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN expression RBRACE .)
    CASE            reduce using rule 67 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN expression RBRACE .)
    DEFAULT         reduce using rule 67 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN expression RBRACE .)
    RETURN          reduce using rule 67 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RETURN expression RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOT in state 117 resolved as shift
WARNING: shift/reduce conflict for EQ in state 117 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 117 resolved as shift
WARNING: shift/reduce conflict for GT in state 117 resolved as shift
WARNING: shift/reduce conflict for LT in state 117 resolved as shift
WARNING: shift/reduce conflict for GE in state 117 resolved as shift
WARNING: shift/reduce conflict for LE in state 117 resolved as shift
WARNING: shift/reduce conflict for AND in state 117 resolved as shift
WARNING: shift/reduce conflict for OR in state 117 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 117 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 117 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 117 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 117 resolved as shift
WARNING: shift/reduce conflict for MOD in state 117 resolved as shift
WARNING: shift/reduce conflict for DOT in state 118 resolved as shift
WARNING: shift/reduce conflict for EQ in state 118 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 118 resolved as shift
WARNING: shift/reduce conflict for GT in state 118 resolved as shift
WARNING: shift/reduce conflict for LT in state 118 resolved as shift
WARNING: shift/reduce conflict for GE in state 118 resolved as shift
WARNING: shift/reduce conflict for LE in state 118 resolved as shift
WARNING: shift/reduce conflict for AND in state 118 resolved as shift
WARNING: shift/reduce conflict for OR in state 118 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 118 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 118 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 118 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 118 resolved as shift
WARNING: shift/reduce conflict for MOD in state 118 resolved as shift
WARNING: shift/reduce conflict for DOT in state 119 resolved as shift
WARNING: shift/reduce conflict for EQ in state 119 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 119 resolved as shift
WARNING: shift/reduce conflict for GT in state 119 resolved as shift
WARNING: shift/reduce conflict for LT in state 119 resolved as shift
WARNING: shift/reduce conflict for GE in state 119 resolved as shift
WARNING: shift/reduce conflict for LE in state 119 resolved as shift
WARNING: shift/reduce conflict for AND in state 119 resolved as shift
WARNING: shift/reduce conflict for OR in state 119 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 119 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 119 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 119 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 119 resolved as shift
WARNING: shift/reduce conflict for MOD in state 119 resolved as shift
WARNING: shift/reduce conflict for DOT in state 132 resolved as shift
WARNING: shift/reduce conflict for EQ in state 132 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 132 resolved as shift
WARNING: shift/reduce conflict for GT in state 132 resolved as shift
WARNING: shift/reduce conflict for LT in state 132 resolved as shift
WARNING: shift/reduce conflict for GE in state 132 resolved as shift
WARNING: shift/reduce conflict for LE in state 132 resolved as shift
WARNING: shift/reduce conflict for AND in state 132 resolved as shift
WARNING: shift/reduce conflict for OR in state 132 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 132 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 132 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 132 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 132 resolved as shift
WARNING: shift/reduce conflict for MOD in state 132 resolved as shift
WARNING: reduce/reduce conflict in state 117 resolved using rule (expression -> expression comparador expression)
WARNING: rejected rule (condicion -> expression comparador expression) in state 117
WARNING: reduce/reduce conflict in state 208 resolved using rule (value_key -> STRING)
WARNING: rejected rule (expression -> STRING) in state 208
