Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CONTINUE
    DEFER
    FALLTHROUGH
    GO
    INTERFACE
    RANGE
    SELECT
    STRING_UNCLOSE

Grammar

Rule 0     S' -> program
Rule 1     program -> declaration_list
Rule 2     arguments -> expression
Rule 3     arguments -> expression COMMA arguments
Rule 4     declaration_list -> declaration
Rule 5     declaration_list -> declaration_list declaration
Rule 6     declaration -> struct_definition
Rule 7     declaration -> print_statement
Rule 8     declaration -> for_statement
Rule 9     declaration -> const_declaration
Rule 10    declaration -> function
Rule 11    declaration -> method_definition
Rule 12    declaration -> function_literal
Rule 13    const_declaration -> CONST IDENTIFIER ASSIGN expression
Rule 14    sentencias -> sentencia
Rule 15    sentencias -> sentencia sentencias
Rule 16    sentencia -> assignment
Rule 17    sentencia -> input
Rule 18    sentencia -> llamarFuncion
Rule 19    sentencia -> print_statement
Rule 20    sentencia -> struct_definition
Rule 21    sentencia -> for_statement
Rule 22    sentencia -> package
Rule 23    sentencia -> import
Rule 24    sentencia -> switch
Rule 25    sentencia -> map
Rule 26    sentencia -> if_statement
Rule 27    input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
Rule 28    varDeclaration -> VAR IDENTIFIER DATATYPE
Rule 29    assignment -> IDENTIFIER DECLARE_ASSIGN expression
Rule 30    assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression
Rule 31    assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
Rule 32    llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN
Rule 33    argumentos -> expression
Rule 34    argumentos -> expression COMMA argumentos
Rule 35    expression -> expression comparador expression
Rule 36    expression -> expression operadorLogico expression
Rule 37    argument_list -> expression
Rule 38    argument_list -> argument_list COMMA expression
Rule 39    argument_list_opt -> argument_list
Rule 40    argument_list_opt -> <empty>
Rule 41    condicion -> expression comparador expression
Rule 42    condicion_compleja -> condicion operadorLogico condicion
Rule 43    condicion_compleja -> condicion operadorLogico condicion_compleja
Rule 44    operadorLogico -> AND
Rule 45    operadorLogico -> OR
Rule 46    comparador -> EQ
Rule 47    comparador -> NEQ
Rule 48    comparador -> GT
Rule 49    comparador -> LT
Rule 50    comparador -> GE
Rule 51    comparador -> LE
Rule 52    empty -> <empty>
Rule 53    switch -> SWITCH expression LBRACE caseBlocks RBRACE
Rule 54    caseBlocks -> caseBlock
Rule 55    caseBlocks -> caseBlock caseBlocks
Rule 56    caseBlock -> CASE expression COLON sentencias
Rule 57    caseBlock -> DEFAULT COLON sentencias
Rule 58    map -> IDENTIFIER DECLARE_ASSIGN mapLiteral
Rule 59    map -> VAR IDENTIFIER ASSIGN mapLiteral
Rule 60    mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE
Rule 61    mapEntries -> mapEntry
Rule 62    mapEntries -> mapEntry COMMA mapEntries
Rule 63    mapEntry -> value_key COLON value_key
Rule 64    value_key -> expression
Rule 65    value_key -> STRING
Rule 66    function -> FUNC IDENTIFIER LPAREN params_opt RPAREN DATATYPE LBRACE sentencias RETURN expression RBRACE
Rule 67    params_opt -> params
Rule 68    params_opt -> empty
Rule 69    params -> param
Rule 70    params -> param COMMA params
Rule 71    param -> IDENTIFIER DATATYPE
Rule 72    package -> PACKAGE MAIN
Rule 73    import -> IMPORT STRING
Rule 74    print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
Rule 75    struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
Rule 76    struct_field -> IDENTIFIER DATATYPE
Rule 77    struct_fields -> struct_field
Rule 78    struct_fields -> struct_fields struct_field
Rule 79    method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
Rule 80    for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
Rule 81    shortAssignment -> IDENTIFIER DECLARE_ASSIGN expression
Rule 82    for_statement -> FOR condicion block
Rule 83    for_statement -> FOR block
Rule 84    block -> LBRACE sentencias RBRACE
Rule 85    block -> LBRACE RBRACE
Rule 86    expression -> NUMBER
Rule 87    expression -> IDENTIFIER
Rule 88    expression -> RUNE
Rule 89    expression -> STRING
Rule 90    expression -> RAW_STRING
Rule 91    expression -> TRUE
Rule 92    expression -> FALSE
Rule 93    expression -> NIL
Rule 94    expression -> expression operator expression
Rule 95    operator -> PLUS
Rule 96    operator -> MINUS
Rule 97    operator -> TIMES
Rule 98    operator -> DIVIDE
Rule 99    operator -> MOD
Rule 100   expression -> MINUS expression
Rule 101   expression -> LPAREN expression RPAREN
Rule 102   if_statement -> IF condicion_compleja block
Rule 103   if_statement -> IF condicion_compleja block ELSE block
Rule 104   function_literal -> FUNC LPAREN parameters RPAREN return_type block
Rule 105   parameters -> parameters COMMA parameter
Rule 106   parameters -> parameter
Rule 107   parameters -> empty
Rule 108   parameter -> IDENTIFIER DATATYPE
Rule 109   parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE
Rule 110   return_type -> DATATYPE
Rule 111   return_type -> empty
Rule 112   slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET DATATYPE
Rule 113   declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal
Rule 114   slice_literal -> LBRACKET RBRACKET DATATYPE LBRACE elements RBRACE
Rule 115   elements -> elements COMMA expression
Rule 116   elements -> expression

Terminals, with rules where they appear

AMPERSAND            : 27
AND                  : 44
ASSIGN               : 13 30 31 59
BREAK                : 
CASE                 : 56
COLON                : 56 57 63
COMMA                : 3 34 38 62 70 105 115
CONST                : 13
CONTINUE             : 
DATATYPE             : 28 30 31 60 60 66 71 76 108 109 110 112 114
DECLARE_ASSIGN       : 29 58 81 113
DEFAULT              : 57
DEFER                : 
DIVIDE               : 98
DOT                  : 27 74
ELSE                 : 103
EQ                   : 46
FALLTHROUGH          : 
FALSE                : 92
FOR                  : 80 82 83
FUNC                 : 66 79 104 109
GE                   : 50
GO                   : 
GT                   : 48
IDENTIFIER           : 13 27 27 27 28 29 30 31 32 58 59 66 71 74 74 75 76 79 79 79 81 87 108 109 112 113
IF                   : 102 103
IMPORT               : 73
INTERFACE            : 
LBRACE               : 53 60 66 75 84 85 114
LBRACKET             : 60 112 114
LE                   : 51
LPAREN               : 27 32 66 74 79 79 101 104 109
LT                   : 49
MAIN                 : 72
MAP                  : 60
MINUS                : 96 100
MOD                  : 99
NEQ                  : 47
NIL                  : 93
NUMBER               : 86
OR                   : 45
PACKAGE              : 72
PLUS                 : 95
RANGE                : 
RAW_STRING           : 90
RBRACE               : 53 60 66 75 84 85 114
RBRACKET             : 60 112 114
RETURN               : 66
RPAREN               : 27 32 66 74 79 79 101 104 109
RUNE                 : 88
SELECT               : 
SEMICOLON            : 80 80
STRING               : 65 73 89
STRING_UNCLOSE       : 
STRUCT               : 75
SWITCH               : 53
TIMES                : 97
TRUE                 : 91
TYPE                 : 75
VAR                  : 28 30 31 59 112
error                : 

Nonterminals, with rules where they appear

argument_list        : 38 39
argument_list_opt    : 32 74
argumentos           : 34
arguments            : 3 79
assignment           : 16
block                : 79 80 82 83 102 103 103 104
caseBlock            : 54 55
caseBlocks           : 53 55
comparador           : 35 41
condicion            : 42 42 43 80 82
condicion_compleja   : 43 102 103
const_declaration    : 9
declaration          : 4 5
declaration_list     : 1 5
declare_assign       : 
elements             : 114 115
empty                : 68 107 111
expression           : 2 3 13 29 30 33 34 35 35 36 36 37 38 41 41 53 56 64 66 80 81 94 94 100 101 115 116
for_statement        : 8 21
function             : 10
function_literal     : 12
if_statement         : 26
import               : 23
input                : 17
llamarFuncion        : 18 31
map                  : 25
mapEntries           : 60 62
mapEntry             : 61 62
mapLiteral           : 58 59
method_definition    : 11
operadorLogico       : 36 42 43
operator             : 94
package              : 22
param                : 69 70
parameter            : 105 106
parameters           : 104 105 109
params               : 67 70
params_opt           : 66
print_statement      : 7 19
program              : 0
return_type          : 104
sentencia            : 14 15
sentencias           : 15 56 57 66 84
shortAssignment      : 80
slice_declaration    : 
slice_literal        : 113
struct_definition    : 6 20
struct_field         : 77 78
struct_fields        : 75 78
switch               : 24
value_key            : 63 63
varDeclaration       : 

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declaration_list
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . struct_definition
    (7) declaration -> . print_statement
    (8) declaration -> . for_statement
    (9) declaration -> . const_declaration
    (10) declaration -> . function
    (11) declaration -> . method_definition
    (12) declaration -> . function_literal
    (75) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (74) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (80) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (82) for_statement -> . FOR condicion block
    (83) for_statement -> . FOR block
    (13) const_declaration -> . CONST IDENTIFIER ASSIGN expression
    (66) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN DATATYPE LBRACE sentencias RETURN expression RBRACE
    (79) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (104) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    TYPE            shift and go to state 11
    IDENTIFIER      shift and go to state 12
    FOR             shift and go to state 13
    CONST           shift and go to state 14
    FUNC            shift and go to state 15

    program                        shift and go to state 1
    declaration_list               shift and go to state 2
    declaration                    shift and go to state 3
    struct_definition              shift and go to state 4
    print_statement                shift and go to state 5
    for_statement                  shift and go to state 6
    const_declaration              shift and go to state 7
    function                       shift and go to state 8
    method_definition              shift and go to state 9
    function_literal               shift and go to state 10

state 1

    (0) S' -> program .



state 2

    (1) program -> declaration_list .
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . struct_definition
    (7) declaration -> . print_statement
    (8) declaration -> . for_statement
    (9) declaration -> . const_declaration
    (10) declaration -> . function
    (11) declaration -> . method_definition
    (12) declaration -> . function_literal
    (75) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (74) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (80) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (82) for_statement -> . FOR condicion block
    (83) for_statement -> . FOR block
    (13) const_declaration -> . CONST IDENTIFIER ASSIGN expression
    (66) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN DATATYPE LBRACE sentencias RETURN expression RBRACE
    (79) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (104) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    $end            reduce using rule 1 (program -> declaration_list .)
    TYPE            shift and go to state 11
    IDENTIFIER      shift and go to state 12
    FOR             shift and go to state 13
    CONST           shift and go to state 14
    FUNC            shift and go to state 15

    declaration                    shift and go to state 16
    struct_definition              shift and go to state 4
    print_statement                shift and go to state 5
    for_statement                  shift and go to state 6
    const_declaration              shift and go to state 7
    function                       shift and go to state 8
    method_definition              shift and go to state 9
    function_literal               shift and go to state 10

state 3

    (4) declaration_list -> declaration .

    TYPE            reduce using rule 4 (declaration_list -> declaration .)
    IDENTIFIER      reduce using rule 4 (declaration_list -> declaration .)
    FOR             reduce using rule 4 (declaration_list -> declaration .)
    CONST           reduce using rule 4 (declaration_list -> declaration .)
    FUNC            reduce using rule 4 (declaration_list -> declaration .)
    $end            reduce using rule 4 (declaration_list -> declaration .)


state 4

    (6) declaration -> struct_definition .

    TYPE            reduce using rule 6 (declaration -> struct_definition .)
    IDENTIFIER      reduce using rule 6 (declaration -> struct_definition .)
    FOR             reduce using rule 6 (declaration -> struct_definition .)
    CONST           reduce using rule 6 (declaration -> struct_definition .)
    FUNC            reduce using rule 6 (declaration -> struct_definition .)
    $end            reduce using rule 6 (declaration -> struct_definition .)


state 5

    (7) declaration -> print_statement .

    TYPE            reduce using rule 7 (declaration -> print_statement .)
    IDENTIFIER      reduce using rule 7 (declaration -> print_statement .)
    FOR             reduce using rule 7 (declaration -> print_statement .)
    CONST           reduce using rule 7 (declaration -> print_statement .)
    FUNC            reduce using rule 7 (declaration -> print_statement .)
    $end            reduce using rule 7 (declaration -> print_statement .)


state 6

    (8) declaration -> for_statement .

    TYPE            reduce using rule 8 (declaration -> for_statement .)
    IDENTIFIER      reduce using rule 8 (declaration -> for_statement .)
    FOR             reduce using rule 8 (declaration -> for_statement .)
    CONST           reduce using rule 8 (declaration -> for_statement .)
    FUNC            reduce using rule 8 (declaration -> for_statement .)
    $end            reduce using rule 8 (declaration -> for_statement .)


state 7

    (9) declaration -> const_declaration .

    TYPE            reduce using rule 9 (declaration -> const_declaration .)
    IDENTIFIER      reduce using rule 9 (declaration -> const_declaration .)
    FOR             reduce using rule 9 (declaration -> const_declaration .)
    CONST           reduce using rule 9 (declaration -> const_declaration .)
    FUNC            reduce using rule 9 (declaration -> const_declaration .)
    $end            reduce using rule 9 (declaration -> const_declaration .)


state 8

    (10) declaration -> function .

    TYPE            reduce using rule 10 (declaration -> function .)
    IDENTIFIER      reduce using rule 10 (declaration -> function .)
    FOR             reduce using rule 10 (declaration -> function .)
    CONST           reduce using rule 10 (declaration -> function .)
    FUNC            reduce using rule 10 (declaration -> function .)
    $end            reduce using rule 10 (declaration -> function .)


state 9

    (11) declaration -> method_definition .

    TYPE            reduce using rule 11 (declaration -> method_definition .)
    IDENTIFIER      reduce using rule 11 (declaration -> method_definition .)
    FOR             reduce using rule 11 (declaration -> method_definition .)
    CONST           reduce using rule 11 (declaration -> method_definition .)
    FUNC            reduce using rule 11 (declaration -> method_definition .)
    $end            reduce using rule 11 (declaration -> method_definition .)


state 10

    (12) declaration -> function_literal .

    TYPE            reduce using rule 12 (declaration -> function_literal .)
    IDENTIFIER      reduce using rule 12 (declaration -> function_literal .)
    FOR             reduce using rule 12 (declaration -> function_literal .)
    CONST           reduce using rule 12 (declaration -> function_literal .)
    FUNC            reduce using rule 12 (declaration -> function_literal .)
    $end            reduce using rule 12 (declaration -> function_literal .)


state 11

    (75) struct_definition -> TYPE . IDENTIFIER STRUCT LBRACE struct_fields RBRACE

    IDENTIFIER      shift and go to state 17


state 12

    (74) print_statement -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    DOT             shift and go to state 18


state 13

    (80) for_statement -> FOR . shortAssignment SEMICOLON condicion SEMICOLON expression block
    (82) for_statement -> FOR . condicion block
    (83) for_statement -> FOR . block
    (81) shortAssignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (41) condicion -> . expression comparador expression
    (84) block -> . LBRACE sentencias RBRACE
    (85) block -> . LBRACE RBRACE
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (86) expression -> . NUMBER
    (87) expression -> . IDENTIFIER
    (88) expression -> . RUNE
    (89) expression -> . STRING
    (90) expression -> . RAW_STRING
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . NIL
    (94) expression -> . expression operator expression
    (100) expression -> . MINUS expression
    (101) expression -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 23
    LBRACE          shift and go to state 24
    NUMBER          shift and go to state 25
    RUNE            shift and go to state 26
    STRING          shift and go to state 27
    RAW_STRING      shift and go to state 28
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    NIL             shift and go to state 31
    MINUS           shift and go to state 32
    LPAREN          shift and go to state 33

    shortAssignment                shift and go to state 19
    condicion                      shift and go to state 20
    expression                     shift and go to state 21
    block                          shift and go to state 22

state 14

    (13) const_declaration -> CONST . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 34


state 15

    (66) function -> FUNC . IDENTIFIER LPAREN params_opt RPAREN DATATYPE LBRACE sentencias RETURN expression RBRACE
    (79) method_definition -> FUNC . LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (104) function_literal -> FUNC . LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 35
    LPAREN          shift and go to state 36


state 16

    (5) declaration_list -> declaration_list declaration .

    TYPE            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    IDENTIFIER      reduce using rule 5 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    FUNC            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    $end            reduce using rule 5 (declaration_list -> declaration_list declaration .)


state 17

    (75) struct_definition -> TYPE IDENTIFIER . STRUCT LBRACE struct_fields RBRACE

    STRUCT          shift and go to state 37


state 18

    (74) print_statement -> IDENTIFIER DOT . IDENTIFIER LPAREN argument_list_opt RPAREN

    IDENTIFIER      shift and go to state 38


state 19

    (80) for_statement -> FOR shortAssignment . SEMICOLON condicion SEMICOLON expression block

    SEMICOLON       shift and go to state 39


state 20

    (82) for_statement -> FOR condicion . block
    (84) block -> . LBRACE sentencias RBRACE
    (85) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 24

    block                          shift and go to state 40

state 21

    (41) condicion -> expression . comparador expression
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (94) expression -> expression . operator expression
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (95) operator -> . PLUS
    (96) operator -> . MINUS
    (97) operator -> . TIMES
    (98) operator -> . DIVIDE
    (99) operator -> . MOD

    EQ              shift and go to state 44
    NEQ             shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    GE              shift and go to state 48
    LE              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MOD             shift and go to state 56

    comparador                     shift and go to state 41
    operadorLogico                 shift and go to state 42
    operator                       shift and go to state 43

state 22

    (83) for_statement -> FOR block .

    TYPE            reduce using rule 83 (for_statement -> FOR block .)
    IDENTIFIER      reduce using rule 83 (for_statement -> FOR block .)
    FOR             reduce using rule 83 (for_statement -> FOR block .)
    CONST           reduce using rule 83 (for_statement -> FOR block .)
    FUNC            reduce using rule 83 (for_statement -> FOR block .)
    $end            reduce using rule 83 (for_statement -> FOR block .)
    VAR             reduce using rule 83 (for_statement -> FOR block .)
    PACKAGE         reduce using rule 83 (for_statement -> FOR block .)
    IMPORT          reduce using rule 83 (for_statement -> FOR block .)
    SWITCH          reduce using rule 83 (for_statement -> FOR block .)
    IF              reduce using rule 83 (for_statement -> FOR block .)
    RBRACE          reduce using rule 83 (for_statement -> FOR block .)
    CASE            reduce using rule 83 (for_statement -> FOR block .)
    DEFAULT         reduce using rule 83 (for_statement -> FOR block .)
    RETURN          reduce using rule 83 (for_statement -> FOR block .)


state 23

    (81) shortAssignment -> IDENTIFIER . DECLARE_ASSIGN expression
    (87) expression -> IDENTIFIER .

    DECLARE_ASSIGN  shift and go to state 57
    EQ              reduce using rule 87 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 87 (expression -> IDENTIFIER .)
    GT              reduce using rule 87 (expression -> IDENTIFIER .)
    LT              reduce using rule 87 (expression -> IDENTIFIER .)
    GE              reduce using rule 87 (expression -> IDENTIFIER .)
    LE              reduce using rule 87 (expression -> IDENTIFIER .)
    AND             reduce using rule 87 (expression -> IDENTIFIER .)
    OR              reduce using rule 87 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 87 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 87 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 87 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 87 (expression -> IDENTIFIER .)
    MOD             reduce using rule 87 (expression -> IDENTIFIER .)


state 24

    (84) block -> LBRACE . sentencias RBRACE
    (85) block -> LBRACE . RBRACE
    (14) sentencias -> . sentencia
    (15) sentencias -> . sentencia sentencias
    (16) sentencia -> . assignment
    (17) sentencia -> . input
    (18) sentencia -> . llamarFuncion
    (19) sentencia -> . print_statement
    (20) sentencia -> . struct_definition
    (21) sentencia -> . for_statement
    (22) sentencia -> . package
    (23) sentencia -> . import
    (24) sentencia -> . switch
    (25) sentencia -> . map
    (26) sentencia -> . if_statement
    (29) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (30) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (31) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (27) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (32) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (74) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (75) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (80) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (82) for_statement -> . FOR condicion block
    (83) for_statement -> . FOR block
    (72) package -> . PACKAGE MAIN
    (73) import -> . IMPORT STRING
    (53) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (58) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (59) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (102) if_statement -> . IF condicion_compleja block
    (103) if_statement -> . IF condicion_compleja block ELSE block

    RBRACE          shift and go to state 59
    IDENTIFIER      shift and go to state 72
    VAR             shift and go to state 73
    TYPE            shift and go to state 11
    FOR             shift and go to state 13
    PACKAGE         shift and go to state 74
    IMPORT          shift and go to state 75
    SWITCH          shift and go to state 76
    IF              shift and go to state 77

    sentencias                     shift and go to state 58
    sentencia                      shift and go to state 60
    assignment                     shift and go to state 61
    input                          shift and go to state 62
    llamarFuncion                  shift and go to state 63
    print_statement                shift and go to state 64
    struct_definition              shift and go to state 65
    for_statement                  shift and go to state 66
    package                        shift and go to state 67
    import                         shift and go to state 68
    switch                         shift and go to state 69
    map                            shift and go to state 70
    if_statement                   shift and go to state 71

state 25

    (86) expression -> NUMBER .

    EQ              reduce using rule 86 (expression -> NUMBER .)
    NEQ             reduce using rule 86 (expression -> NUMBER .)
    GT              reduce using rule 86 (expression -> NUMBER .)
    LT              reduce using rule 86 (expression -> NUMBER .)
    GE              reduce using rule 86 (expression -> NUMBER .)
    LE              reduce using rule 86 (expression -> NUMBER .)
    AND             reduce using rule 86 (expression -> NUMBER .)
    OR              reduce using rule 86 (expression -> NUMBER .)
    PLUS            reduce using rule 86 (expression -> NUMBER .)
    MINUS           reduce using rule 86 (expression -> NUMBER .)
    TIMES           reduce using rule 86 (expression -> NUMBER .)
    DIVIDE          reduce using rule 86 (expression -> NUMBER .)
    MOD             reduce using rule 86 (expression -> NUMBER .)
    RPAREN          reduce using rule 86 (expression -> NUMBER .)
    LBRACE          reduce using rule 86 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 86 (expression -> NUMBER .)
    TYPE            reduce using rule 86 (expression -> NUMBER .)
    IDENTIFIER      reduce using rule 86 (expression -> NUMBER .)
    FOR             reduce using rule 86 (expression -> NUMBER .)
    CONST           reduce using rule 86 (expression -> NUMBER .)
    FUNC            reduce using rule 86 (expression -> NUMBER .)
    $end            reduce using rule 86 (expression -> NUMBER .)
    COMMA           reduce using rule 86 (expression -> NUMBER .)
    VAR             reduce using rule 86 (expression -> NUMBER .)
    PACKAGE         reduce using rule 86 (expression -> NUMBER .)
    IMPORT          reduce using rule 86 (expression -> NUMBER .)
    SWITCH          reduce using rule 86 (expression -> NUMBER .)
    IF              reduce using rule 86 (expression -> NUMBER .)
    RBRACE          reduce using rule 86 (expression -> NUMBER .)
    CASE            reduce using rule 86 (expression -> NUMBER .)
    DEFAULT         reduce using rule 86 (expression -> NUMBER .)
    RETURN          reduce using rule 86 (expression -> NUMBER .)
    COLON           reduce using rule 86 (expression -> NUMBER .)


state 26

    (88) expression -> RUNE .

    EQ              reduce using rule 88 (expression -> RUNE .)
    NEQ             reduce using rule 88 (expression -> RUNE .)
    GT              reduce using rule 88 (expression -> RUNE .)
    LT              reduce using rule 88 (expression -> RUNE .)
    GE              reduce using rule 88 (expression -> RUNE .)
    LE              reduce using rule 88 (expression -> RUNE .)
    AND             reduce using rule 88 (expression -> RUNE .)
    OR              reduce using rule 88 (expression -> RUNE .)
    PLUS            reduce using rule 88 (expression -> RUNE .)
    MINUS           reduce using rule 88 (expression -> RUNE .)
    TIMES           reduce using rule 88 (expression -> RUNE .)
    DIVIDE          reduce using rule 88 (expression -> RUNE .)
    MOD             reduce using rule 88 (expression -> RUNE .)
    RPAREN          reduce using rule 88 (expression -> RUNE .)
    LBRACE          reduce using rule 88 (expression -> RUNE .)
    SEMICOLON       reduce using rule 88 (expression -> RUNE .)
    TYPE            reduce using rule 88 (expression -> RUNE .)
    IDENTIFIER      reduce using rule 88 (expression -> RUNE .)
    FOR             reduce using rule 88 (expression -> RUNE .)
    CONST           reduce using rule 88 (expression -> RUNE .)
    FUNC            reduce using rule 88 (expression -> RUNE .)
    $end            reduce using rule 88 (expression -> RUNE .)
    COMMA           reduce using rule 88 (expression -> RUNE .)
    VAR             reduce using rule 88 (expression -> RUNE .)
    PACKAGE         reduce using rule 88 (expression -> RUNE .)
    IMPORT          reduce using rule 88 (expression -> RUNE .)
    SWITCH          reduce using rule 88 (expression -> RUNE .)
    IF              reduce using rule 88 (expression -> RUNE .)
    RBRACE          reduce using rule 88 (expression -> RUNE .)
    CASE            reduce using rule 88 (expression -> RUNE .)
    DEFAULT         reduce using rule 88 (expression -> RUNE .)
    RETURN          reduce using rule 88 (expression -> RUNE .)
    COLON           reduce using rule 88 (expression -> RUNE .)


state 27

    (89) expression -> STRING .

    EQ              reduce using rule 89 (expression -> STRING .)
    NEQ             reduce using rule 89 (expression -> STRING .)
    GT              reduce using rule 89 (expression -> STRING .)
    LT              reduce using rule 89 (expression -> STRING .)
    GE              reduce using rule 89 (expression -> STRING .)
    LE              reduce using rule 89 (expression -> STRING .)
    AND             reduce using rule 89 (expression -> STRING .)
    OR              reduce using rule 89 (expression -> STRING .)
    PLUS            reduce using rule 89 (expression -> STRING .)
    MINUS           reduce using rule 89 (expression -> STRING .)
    TIMES           reduce using rule 89 (expression -> STRING .)
    DIVIDE          reduce using rule 89 (expression -> STRING .)
    MOD             reduce using rule 89 (expression -> STRING .)
    RPAREN          reduce using rule 89 (expression -> STRING .)
    LBRACE          reduce using rule 89 (expression -> STRING .)
    SEMICOLON       reduce using rule 89 (expression -> STRING .)
    TYPE            reduce using rule 89 (expression -> STRING .)
    IDENTIFIER      reduce using rule 89 (expression -> STRING .)
    FOR             reduce using rule 89 (expression -> STRING .)
    CONST           reduce using rule 89 (expression -> STRING .)
    FUNC            reduce using rule 89 (expression -> STRING .)
    $end            reduce using rule 89 (expression -> STRING .)
    COMMA           reduce using rule 89 (expression -> STRING .)
    VAR             reduce using rule 89 (expression -> STRING .)
    PACKAGE         reduce using rule 89 (expression -> STRING .)
    IMPORT          reduce using rule 89 (expression -> STRING .)
    SWITCH          reduce using rule 89 (expression -> STRING .)
    IF              reduce using rule 89 (expression -> STRING .)
    RBRACE          reduce using rule 89 (expression -> STRING .)
    CASE            reduce using rule 89 (expression -> STRING .)
    DEFAULT         reduce using rule 89 (expression -> STRING .)
    RETURN          reduce using rule 89 (expression -> STRING .)
    COLON           reduce using rule 89 (expression -> STRING .)


state 28

    (90) expression -> RAW_STRING .

    EQ              reduce using rule 90 (expression -> RAW_STRING .)
    NEQ             reduce using rule 90 (expression -> RAW_STRING .)
    GT              reduce using rule 90 (expression -> RAW_STRING .)
    LT              reduce using rule 90 (expression -> RAW_STRING .)
    GE              reduce using rule 90 (expression -> RAW_STRING .)
    LE              reduce using rule 90 (expression -> RAW_STRING .)
    AND             reduce using rule 90 (expression -> RAW_STRING .)
    OR              reduce using rule 90 (expression -> RAW_STRING .)
    PLUS            reduce using rule 90 (expression -> RAW_STRING .)
    MINUS           reduce using rule 90 (expression -> RAW_STRING .)
    TIMES           reduce using rule 90 (expression -> RAW_STRING .)
    DIVIDE          reduce using rule 90 (expression -> RAW_STRING .)
    MOD             reduce using rule 90 (expression -> RAW_STRING .)
    RPAREN          reduce using rule 90 (expression -> RAW_STRING .)
    LBRACE          reduce using rule 90 (expression -> RAW_STRING .)
    SEMICOLON       reduce using rule 90 (expression -> RAW_STRING .)
    TYPE            reduce using rule 90 (expression -> RAW_STRING .)
    IDENTIFIER      reduce using rule 90 (expression -> RAW_STRING .)
    FOR             reduce using rule 90 (expression -> RAW_STRING .)
    CONST           reduce using rule 90 (expression -> RAW_STRING .)
    FUNC            reduce using rule 90 (expression -> RAW_STRING .)
    $end            reduce using rule 90 (expression -> RAW_STRING .)
    COMMA           reduce using rule 90 (expression -> RAW_STRING .)
    VAR             reduce using rule 90 (expression -> RAW_STRING .)
    PACKAGE         reduce using rule 90 (expression -> RAW_STRING .)
    IMPORT          reduce using rule 90 (expression -> RAW_STRING .)
    SWITCH          reduce using rule 90 (expression -> RAW_STRING .)
    IF              reduce using rule 90 (expression -> RAW_STRING .)
    RBRACE          reduce using rule 90 (expression -> RAW_STRING .)
    CASE            reduce using rule 90 (expression -> RAW_STRING .)
    DEFAULT         reduce using rule 90 (expression -> RAW_STRING .)
    RETURN          reduce using rule 90 (expression -> RAW_STRING .)
    COLON           reduce using rule 90 (expression -> RAW_STRING .)


state 29

    (91) expression -> TRUE .

    EQ              reduce using rule 91 (expression -> TRUE .)
    NEQ             reduce using rule 91 (expression -> TRUE .)
    GT              reduce using rule 91 (expression -> TRUE .)
    LT              reduce using rule 91 (expression -> TRUE .)
    GE              reduce using rule 91 (expression -> TRUE .)
    LE              reduce using rule 91 (expression -> TRUE .)
    AND             reduce using rule 91 (expression -> TRUE .)
    OR              reduce using rule 91 (expression -> TRUE .)
    PLUS            reduce using rule 91 (expression -> TRUE .)
    MINUS           reduce using rule 91 (expression -> TRUE .)
    TIMES           reduce using rule 91 (expression -> TRUE .)
    DIVIDE          reduce using rule 91 (expression -> TRUE .)
    MOD             reduce using rule 91 (expression -> TRUE .)
    RPAREN          reduce using rule 91 (expression -> TRUE .)
    LBRACE          reduce using rule 91 (expression -> TRUE .)
    SEMICOLON       reduce using rule 91 (expression -> TRUE .)
    TYPE            reduce using rule 91 (expression -> TRUE .)
    IDENTIFIER      reduce using rule 91 (expression -> TRUE .)
    FOR             reduce using rule 91 (expression -> TRUE .)
    CONST           reduce using rule 91 (expression -> TRUE .)
    FUNC            reduce using rule 91 (expression -> TRUE .)
    $end            reduce using rule 91 (expression -> TRUE .)
    COMMA           reduce using rule 91 (expression -> TRUE .)
    VAR             reduce using rule 91 (expression -> TRUE .)
    PACKAGE         reduce using rule 91 (expression -> TRUE .)
    IMPORT          reduce using rule 91 (expression -> TRUE .)
    SWITCH          reduce using rule 91 (expression -> TRUE .)
    IF              reduce using rule 91 (expression -> TRUE .)
    RBRACE          reduce using rule 91 (expression -> TRUE .)
    CASE            reduce using rule 91 (expression -> TRUE .)
    DEFAULT         reduce using rule 91 (expression -> TRUE .)
    RETURN          reduce using rule 91 (expression -> TRUE .)
    COLON           reduce using rule 91 (expression -> TRUE .)


state 30

    (92) expression -> FALSE .

    EQ              reduce using rule 92 (expression -> FALSE .)
    NEQ             reduce using rule 92 (expression -> FALSE .)
    GT              reduce using rule 92 (expression -> FALSE .)
    LT              reduce using rule 92 (expression -> FALSE .)
    GE              reduce using rule 92 (expression -> FALSE .)
    LE              reduce using rule 92 (expression -> FALSE .)
    AND             reduce using rule 92 (expression -> FALSE .)
    OR              reduce using rule 92 (expression -> FALSE .)
    PLUS            reduce using rule 92 (expression -> FALSE .)
    MINUS           reduce using rule 92 (expression -> FALSE .)
    TIMES           reduce using rule 92 (expression -> FALSE .)
    DIVIDE          reduce using rule 92 (expression -> FALSE .)
    MOD             reduce using rule 92 (expression -> FALSE .)
    RPAREN          reduce using rule 92 (expression -> FALSE .)
    LBRACE          reduce using rule 92 (expression -> FALSE .)
    SEMICOLON       reduce using rule 92 (expression -> FALSE .)
    TYPE            reduce using rule 92 (expression -> FALSE .)
    IDENTIFIER      reduce using rule 92 (expression -> FALSE .)
    FOR             reduce using rule 92 (expression -> FALSE .)
    CONST           reduce using rule 92 (expression -> FALSE .)
    FUNC            reduce using rule 92 (expression -> FALSE .)
    $end            reduce using rule 92 (expression -> FALSE .)
    COMMA           reduce using rule 92 (expression -> FALSE .)
    VAR             reduce using rule 92 (expression -> FALSE .)
    PACKAGE         reduce using rule 92 (expression -> FALSE .)
    IMPORT          reduce using rule 92 (expression -> FALSE .)
    SWITCH          reduce using rule 92 (expression -> FALSE .)
    IF              reduce using rule 92 (expression -> FALSE .)
    RBRACE          reduce using rule 92 (expression -> FALSE .)
    CASE            reduce using rule 92 (expression -> FALSE .)
    DEFAULT         reduce using rule 92 (expression -> FALSE .)
    RETURN          reduce using rule 92 (expression -> FALSE .)
    COLON           reduce using rule 92 (expression -> FALSE .)


state 31

    (93) expression -> NIL .

    EQ              reduce using rule 93 (expression -> NIL .)
    NEQ             reduce using rule 93 (expression -> NIL .)
    GT              reduce using rule 93 (expression -> NIL .)
    LT              reduce using rule 93 (expression -> NIL .)
    GE              reduce using rule 93 (expression -> NIL .)
    LE              reduce using rule 93 (expression -> NIL .)
    AND             reduce using rule 93 (expression -> NIL .)
    OR              reduce using rule 93 (expression -> NIL .)
    PLUS            reduce using rule 93 (expression -> NIL .)
    MINUS           reduce using rule 93 (expression -> NIL .)
    TIMES           reduce using rule 93 (expression -> NIL .)
    DIVIDE          reduce using rule 93 (expression -> NIL .)
    MOD             reduce using rule 93 (expression -> NIL .)
    RPAREN          reduce using rule 93 (expression -> NIL .)
    LBRACE          reduce using rule 93 (expression -> NIL .)
    SEMICOLON       reduce using rule 93 (expression -> NIL .)
    TYPE            reduce using rule 93 (expression -> NIL .)
    IDENTIFIER      reduce using rule 93 (expression -> NIL .)
    FOR             reduce using rule 93 (expression -> NIL .)
    CONST           reduce using rule 93 (expression -> NIL .)
    FUNC            reduce using rule 93 (expression -> NIL .)
    $end            reduce using rule 93 (expression -> NIL .)
    COMMA           reduce using rule 93 (expression -> NIL .)
    VAR             reduce using rule 93 (expression -> NIL .)
    PACKAGE         reduce using rule 93 (expression -> NIL .)
    IMPORT          reduce using rule 93 (expression -> NIL .)
    SWITCH          reduce using rule 93 (expression -> NIL .)
    IF              reduce using rule 93 (expression -> NIL .)
    RBRACE          reduce using rule 93 (expression -> NIL .)
    CASE            reduce using rule 93 (expression -> NIL .)
    DEFAULT         reduce using rule 93 (expression -> NIL .)
    RETURN          reduce using rule 93 (expression -> NIL .)
    COLON           reduce using rule 93 (expression -> NIL .)


state 32

    (100) expression -> MINUS . expression
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (86) expression -> . NUMBER
    (87) expression -> . IDENTIFIER
    (88) expression -> . RUNE
    (89) expression -> . STRING
    (90) expression -> . RAW_STRING
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . NIL
    (94) expression -> . expression operator expression
    (100) expression -> . MINUS expression
    (101) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 25
    IDENTIFIER      shift and go to state 79
    RUNE            shift and go to state 26
    STRING          shift and go to state 27
    RAW_STRING      shift and go to state 28
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    NIL             shift and go to state 31
    MINUS           shift and go to state 32
    LPAREN          shift and go to state 33

    expression                     shift and go to state 78

state 33

    (101) expression -> LPAREN . expression RPAREN
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (86) expression -> . NUMBER
    (87) expression -> . IDENTIFIER
    (88) expression -> . RUNE
    (89) expression -> . STRING
    (90) expression -> . RAW_STRING
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . NIL
    (94) expression -> . expression operator expression
    (100) expression -> . MINUS expression
    (101) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 25
    IDENTIFIER      shift and go to state 79
    RUNE            shift and go to state 26
    STRING          shift and go to state 27
    RAW_STRING      shift and go to state 28
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    NIL             shift and go to state 31
    MINUS           shift and go to state 32
    LPAREN          shift and go to state 33

    expression                     shift and go to state 80

state 34

    (13) const_declaration -> CONST IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 81


state 35

    (66) function -> FUNC IDENTIFIER . LPAREN params_opt RPAREN DATATYPE LBRACE sentencias RETURN expression RBRACE

    LPAREN          shift and go to state 82


state 36

    (79) method_definition -> FUNC LPAREN . IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (104) function_literal -> FUNC LPAREN . parameters RPAREN return_type block
    (105) parameters -> . parameters COMMA parameter
    (106) parameters -> . parameter
    (107) parameters -> . empty
    (108) parameter -> . IDENTIFIER DATATYPE
    (109) parameter -> . IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE
    (52) empty -> .

    IDENTIFIER      shift and go to state 83
    RPAREN          reduce using rule 52 (empty -> .)
    COMMA           reduce using rule 52 (empty -> .)

    parameters                     shift and go to state 84
    parameter                      shift and go to state 85
    empty                          shift and go to state 86

state 37

    (75) struct_definition -> TYPE IDENTIFIER STRUCT . LBRACE struct_fields RBRACE

    LBRACE          shift and go to state 87


state 38

    (74) print_statement -> IDENTIFIER DOT IDENTIFIER . LPAREN argument_list_opt RPAREN

    LPAREN          shift and go to state 88


state 39

    (80) for_statement -> FOR shortAssignment SEMICOLON . condicion SEMICOLON expression block
    (41) condicion -> . expression comparador expression
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (86) expression -> . NUMBER
    (87) expression -> . IDENTIFIER
    (88) expression -> . RUNE
    (89) expression -> . STRING
    (90) expression -> . RAW_STRING
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . NIL
    (94) expression -> . expression operator expression
    (100) expression -> . MINUS expression
    (101) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 25
    IDENTIFIER      shift and go to state 79
    RUNE            shift and go to state 26
    STRING          shift and go to state 27
    RAW_STRING      shift and go to state 28
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    NIL             shift and go to state 31
    MINUS           shift and go to state 32
    LPAREN          shift and go to state 33

    condicion                      shift and go to state 89
    expression                     shift and go to state 21

state 40

    (82) for_statement -> FOR condicion block .

    TYPE            reduce using rule 82 (for_statement -> FOR condicion block .)
    IDENTIFIER      reduce using rule 82 (for_statement -> FOR condicion block .)
    FOR             reduce using rule 82 (for_statement -> FOR condicion block .)
    CONST           reduce using rule 82 (for_statement -> FOR condicion block .)
    FUNC            reduce using rule 82 (for_statement -> FOR condicion block .)
    $end            reduce using rule 82 (for_statement -> FOR condicion block .)
    VAR             reduce using rule 82 (for_statement -> FOR condicion block .)
    PACKAGE         reduce using rule 82 (for_statement -> FOR condicion block .)
    IMPORT          reduce using rule 82 (for_statement -> FOR condicion block .)
    SWITCH          reduce using rule 82 (for_statement -> FOR condicion block .)
    IF              reduce using rule 82 (for_statement -> FOR condicion block .)
    RBRACE          reduce using rule 82 (for_statement -> FOR condicion block .)
    CASE            reduce using rule 82 (for_statement -> FOR condicion block .)
    DEFAULT         reduce using rule 82 (for_statement -> FOR condicion block .)
    RETURN          reduce using rule 82 (for_statement -> FOR condicion block .)


state 41

    (41) condicion -> expression comparador . expression
    (35) expression -> expression comparador . expression
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (86) expression -> . NUMBER
    (87) expression -> . IDENTIFIER
    (88) expression -> . RUNE
    (89) expression -> . STRING
    (90) expression -> . RAW_STRING
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . NIL
    (94) expression -> . expression operator expression
    (100) expression -> . MINUS expression
    (101) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 25
    IDENTIFIER      shift and go to state 79
    RUNE            shift and go to state 26
    STRING          shift and go to state 27
    RAW_STRING      shift and go to state 28
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    NIL             shift and go to state 31
    MINUS           shift and go to state 32
    LPAREN          shift and go to state 33

    expression                     shift and go to state 90

state 42

    (36) expression -> expression operadorLogico . expression
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (86) expression -> . NUMBER
    (87) expression -> . IDENTIFIER
    (88) expression -> . RUNE
    (89) expression -> . STRING
    (90) expression -> . RAW_STRING
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . NIL
    (94) expression -> . expression operator expression
    (100) expression -> . MINUS expression
    (101) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 25
    IDENTIFIER      shift and go to state 79
    RUNE            shift and go to state 26
    STRING          shift and go to state 27
    RAW_STRING      shift and go to state 28
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    NIL             shift and go to state 31
    MINUS           shift and go to state 32
    LPAREN          shift and go to state 33

    expression                     shift and go to state 91

state 43

    (94) expression -> expression operator . expression
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (86) expression -> . NUMBER
    (87) expression -> . IDENTIFIER
    (88) expression -> . RUNE
    (89) expression -> . STRING
    (90) expression -> . RAW_STRING
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . NIL
    (94) expression -> . expression operator expression
    (100) expression -> . MINUS expression
    (101) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 25
    IDENTIFIER      shift and go to state 79
    RUNE            shift and go to state 26
    STRING          shift and go to state 27
    RAW_STRING      shift and go to state 28
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    NIL             shift and go to state 31
    MINUS           shift and go to state 32
    LPAREN          shift and go to state 33

    expression                     shift and go to state 92

state 44

    (46) comparador -> EQ .

    NUMBER          reduce using rule 46 (comparador -> EQ .)
    IDENTIFIER      reduce using rule 46 (comparador -> EQ .)
    RUNE            reduce using rule 46 (comparador -> EQ .)
    STRING          reduce using rule 46 (comparador -> EQ .)
    RAW_STRING      reduce using rule 46 (comparador -> EQ .)
    TRUE            reduce using rule 46 (comparador -> EQ .)
    FALSE           reduce using rule 46 (comparador -> EQ .)
    NIL             reduce using rule 46 (comparador -> EQ .)
    MINUS           reduce using rule 46 (comparador -> EQ .)
    LPAREN          reduce using rule 46 (comparador -> EQ .)


state 45

    (47) comparador -> NEQ .

    NUMBER          reduce using rule 47 (comparador -> NEQ .)
    IDENTIFIER      reduce using rule 47 (comparador -> NEQ .)
    RUNE            reduce using rule 47 (comparador -> NEQ .)
    STRING          reduce using rule 47 (comparador -> NEQ .)
    RAW_STRING      reduce using rule 47 (comparador -> NEQ .)
    TRUE            reduce using rule 47 (comparador -> NEQ .)
    FALSE           reduce using rule 47 (comparador -> NEQ .)
    NIL             reduce using rule 47 (comparador -> NEQ .)
    MINUS           reduce using rule 47 (comparador -> NEQ .)
    LPAREN          reduce using rule 47 (comparador -> NEQ .)


state 46

    (48) comparador -> GT .

    NUMBER          reduce using rule 48 (comparador -> GT .)
    IDENTIFIER      reduce using rule 48 (comparador -> GT .)
    RUNE            reduce using rule 48 (comparador -> GT .)
    STRING          reduce using rule 48 (comparador -> GT .)
    RAW_STRING      reduce using rule 48 (comparador -> GT .)
    TRUE            reduce using rule 48 (comparador -> GT .)
    FALSE           reduce using rule 48 (comparador -> GT .)
    NIL             reduce using rule 48 (comparador -> GT .)
    MINUS           reduce using rule 48 (comparador -> GT .)
    LPAREN          reduce using rule 48 (comparador -> GT .)


state 47

    (49) comparador -> LT .

    NUMBER          reduce using rule 49 (comparador -> LT .)
    IDENTIFIER      reduce using rule 49 (comparador -> LT .)
    RUNE            reduce using rule 49 (comparador -> LT .)
    STRING          reduce using rule 49 (comparador -> LT .)
    RAW_STRING      reduce using rule 49 (comparador -> LT .)
    TRUE            reduce using rule 49 (comparador -> LT .)
    FALSE           reduce using rule 49 (comparador -> LT .)
    NIL             reduce using rule 49 (comparador -> LT .)
    MINUS           reduce using rule 49 (comparador -> LT .)
    LPAREN          reduce using rule 49 (comparador -> LT .)


state 48

    (50) comparador -> GE .

    NUMBER          reduce using rule 50 (comparador -> GE .)
    IDENTIFIER      reduce using rule 50 (comparador -> GE .)
    RUNE            reduce using rule 50 (comparador -> GE .)
    STRING          reduce using rule 50 (comparador -> GE .)
    RAW_STRING      reduce using rule 50 (comparador -> GE .)
    TRUE            reduce using rule 50 (comparador -> GE .)
    FALSE           reduce using rule 50 (comparador -> GE .)
    NIL             reduce using rule 50 (comparador -> GE .)
    MINUS           reduce using rule 50 (comparador -> GE .)
    LPAREN          reduce using rule 50 (comparador -> GE .)


state 49

    (51) comparador -> LE .

    NUMBER          reduce using rule 51 (comparador -> LE .)
    IDENTIFIER      reduce using rule 51 (comparador -> LE .)
    RUNE            reduce using rule 51 (comparador -> LE .)
    STRING          reduce using rule 51 (comparador -> LE .)
    RAW_STRING      reduce using rule 51 (comparador -> LE .)
    TRUE            reduce using rule 51 (comparador -> LE .)
    FALSE           reduce using rule 51 (comparador -> LE .)
    NIL             reduce using rule 51 (comparador -> LE .)
    MINUS           reduce using rule 51 (comparador -> LE .)
    LPAREN          reduce using rule 51 (comparador -> LE .)


state 50

    (44) operadorLogico -> AND .

    NUMBER          reduce using rule 44 (operadorLogico -> AND .)
    IDENTIFIER      reduce using rule 44 (operadorLogico -> AND .)
    RUNE            reduce using rule 44 (operadorLogico -> AND .)
    STRING          reduce using rule 44 (operadorLogico -> AND .)
    RAW_STRING      reduce using rule 44 (operadorLogico -> AND .)
    TRUE            reduce using rule 44 (operadorLogico -> AND .)
    FALSE           reduce using rule 44 (operadorLogico -> AND .)
    NIL             reduce using rule 44 (operadorLogico -> AND .)
    MINUS           reduce using rule 44 (operadorLogico -> AND .)
    LPAREN          reduce using rule 44 (operadorLogico -> AND .)


state 51

    (45) operadorLogico -> OR .

    NUMBER          reduce using rule 45 (operadorLogico -> OR .)
    IDENTIFIER      reduce using rule 45 (operadorLogico -> OR .)
    RUNE            reduce using rule 45 (operadorLogico -> OR .)
    STRING          reduce using rule 45 (operadorLogico -> OR .)
    RAW_STRING      reduce using rule 45 (operadorLogico -> OR .)
    TRUE            reduce using rule 45 (operadorLogico -> OR .)
    FALSE           reduce using rule 45 (operadorLogico -> OR .)
    NIL             reduce using rule 45 (operadorLogico -> OR .)
    MINUS           reduce using rule 45 (operadorLogico -> OR .)
    LPAREN          reduce using rule 45 (operadorLogico -> OR .)


state 52

    (95) operator -> PLUS .

    NUMBER          reduce using rule 95 (operator -> PLUS .)
    IDENTIFIER      reduce using rule 95 (operator -> PLUS .)
    RUNE            reduce using rule 95 (operator -> PLUS .)
    STRING          reduce using rule 95 (operator -> PLUS .)
    RAW_STRING      reduce using rule 95 (operator -> PLUS .)
    TRUE            reduce using rule 95 (operator -> PLUS .)
    FALSE           reduce using rule 95 (operator -> PLUS .)
    NIL             reduce using rule 95 (operator -> PLUS .)
    MINUS           reduce using rule 95 (operator -> PLUS .)
    LPAREN          reduce using rule 95 (operator -> PLUS .)


state 53

    (96) operator -> MINUS .

    NUMBER          reduce using rule 96 (operator -> MINUS .)
    IDENTIFIER      reduce using rule 96 (operator -> MINUS .)
    RUNE            reduce using rule 96 (operator -> MINUS .)
    STRING          reduce using rule 96 (operator -> MINUS .)
    RAW_STRING      reduce using rule 96 (operator -> MINUS .)
    TRUE            reduce using rule 96 (operator -> MINUS .)
    FALSE           reduce using rule 96 (operator -> MINUS .)
    NIL             reduce using rule 96 (operator -> MINUS .)
    MINUS           reduce using rule 96 (operator -> MINUS .)
    LPAREN          reduce using rule 96 (operator -> MINUS .)


state 54

    (97) operator -> TIMES .

    NUMBER          reduce using rule 97 (operator -> TIMES .)
    IDENTIFIER      reduce using rule 97 (operator -> TIMES .)
    RUNE            reduce using rule 97 (operator -> TIMES .)
    STRING          reduce using rule 97 (operator -> TIMES .)
    RAW_STRING      reduce using rule 97 (operator -> TIMES .)
    TRUE            reduce using rule 97 (operator -> TIMES .)
    FALSE           reduce using rule 97 (operator -> TIMES .)
    NIL             reduce using rule 97 (operator -> TIMES .)
    MINUS           reduce using rule 97 (operator -> TIMES .)
    LPAREN          reduce using rule 97 (operator -> TIMES .)


state 55

    (98) operator -> DIVIDE .

    NUMBER          reduce using rule 98 (operator -> DIVIDE .)
    IDENTIFIER      reduce using rule 98 (operator -> DIVIDE .)
    RUNE            reduce using rule 98 (operator -> DIVIDE .)
    STRING          reduce using rule 98 (operator -> DIVIDE .)
    RAW_STRING      reduce using rule 98 (operator -> DIVIDE .)
    TRUE            reduce using rule 98 (operator -> DIVIDE .)
    FALSE           reduce using rule 98 (operator -> DIVIDE .)
    NIL             reduce using rule 98 (operator -> DIVIDE .)
    MINUS           reduce using rule 98 (operator -> DIVIDE .)
    LPAREN          reduce using rule 98 (operator -> DIVIDE .)


state 56

    (99) operator -> MOD .

    NUMBER          reduce using rule 99 (operator -> MOD .)
    IDENTIFIER      reduce using rule 99 (operator -> MOD .)
    RUNE            reduce using rule 99 (operator -> MOD .)
    STRING          reduce using rule 99 (operator -> MOD .)
    RAW_STRING      reduce using rule 99 (operator -> MOD .)
    TRUE            reduce using rule 99 (operator -> MOD .)
    FALSE           reduce using rule 99 (operator -> MOD .)
    NIL             reduce using rule 99 (operator -> MOD .)
    MINUS           reduce using rule 99 (operator -> MOD .)
    LPAREN          reduce using rule 99 (operator -> MOD .)


state 57

    (81) shortAssignment -> IDENTIFIER DECLARE_ASSIGN . expression
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (86) expression -> . NUMBER
    (87) expression -> . IDENTIFIER
    (88) expression -> . RUNE
    (89) expression -> . STRING
    (90) expression -> . RAW_STRING
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . NIL
    (94) expression -> . expression operator expression
    (100) expression -> . MINUS expression
    (101) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 25
    IDENTIFIER      shift and go to state 79
    RUNE            shift and go to state 26
    STRING          shift and go to state 27
    RAW_STRING      shift and go to state 28
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    NIL             shift and go to state 31
    MINUS           shift and go to state 32
    LPAREN          shift and go to state 33

    expression                     shift and go to state 93

state 58

    (84) block -> LBRACE sentencias . RBRACE

    RBRACE          shift and go to state 94


state 59

    (85) block -> LBRACE RBRACE .

    TYPE            reduce using rule 85 (block -> LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 85 (block -> LBRACE RBRACE .)
    FOR             reduce using rule 85 (block -> LBRACE RBRACE .)
    CONST           reduce using rule 85 (block -> LBRACE RBRACE .)
    FUNC            reduce using rule 85 (block -> LBRACE RBRACE .)
    $end            reduce using rule 85 (block -> LBRACE RBRACE .)
    VAR             reduce using rule 85 (block -> LBRACE RBRACE .)
    PACKAGE         reduce using rule 85 (block -> LBRACE RBRACE .)
    IMPORT          reduce using rule 85 (block -> LBRACE RBRACE .)
    SWITCH          reduce using rule 85 (block -> LBRACE RBRACE .)
    IF              reduce using rule 85 (block -> LBRACE RBRACE .)
    RBRACE          reduce using rule 85 (block -> LBRACE RBRACE .)
    CASE            reduce using rule 85 (block -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 85 (block -> LBRACE RBRACE .)
    RETURN          reduce using rule 85 (block -> LBRACE RBRACE .)
    ELSE            reduce using rule 85 (block -> LBRACE RBRACE .)


state 60

    (14) sentencias -> sentencia .
    (15) sentencias -> sentencia . sentencias
    (14) sentencias -> . sentencia
    (15) sentencias -> . sentencia sentencias
    (16) sentencia -> . assignment
    (17) sentencia -> . input
    (18) sentencia -> . llamarFuncion
    (19) sentencia -> . print_statement
    (20) sentencia -> . struct_definition
    (21) sentencia -> . for_statement
    (22) sentencia -> . package
    (23) sentencia -> . import
    (24) sentencia -> . switch
    (25) sentencia -> . map
    (26) sentencia -> . if_statement
    (29) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (30) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (31) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (27) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (32) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (74) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (75) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (80) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (82) for_statement -> . FOR condicion block
    (83) for_statement -> . FOR block
    (72) package -> . PACKAGE MAIN
    (73) import -> . IMPORT STRING
    (53) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (58) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (59) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (102) if_statement -> . IF condicion_compleja block
    (103) if_statement -> . IF condicion_compleja block ELSE block

    RBRACE          reduce using rule 14 (sentencias -> sentencia .)
    CASE            reduce using rule 14 (sentencias -> sentencia .)
    DEFAULT         reduce using rule 14 (sentencias -> sentencia .)
    RETURN          reduce using rule 14 (sentencias -> sentencia .)
    IDENTIFIER      shift and go to state 72
    VAR             shift and go to state 73
    TYPE            shift and go to state 11
    FOR             shift and go to state 13
    PACKAGE         shift and go to state 74
    IMPORT          shift and go to state 75
    SWITCH          shift and go to state 76
    IF              shift and go to state 77

    sentencia                      shift and go to state 60
    sentencias                     shift and go to state 95
    assignment                     shift and go to state 61
    input                          shift and go to state 62
    llamarFuncion                  shift and go to state 63
    print_statement                shift and go to state 64
    struct_definition              shift and go to state 65
    for_statement                  shift and go to state 66
    package                        shift and go to state 67
    import                         shift and go to state 68
    switch                         shift and go to state 69
    map                            shift and go to state 70
    if_statement                   shift and go to state 71

state 61

    (16) sentencia -> assignment .

    IDENTIFIER      reduce using rule 16 (sentencia -> assignment .)
    VAR             reduce using rule 16 (sentencia -> assignment .)
    TYPE            reduce using rule 16 (sentencia -> assignment .)
    FOR             reduce using rule 16 (sentencia -> assignment .)
    PACKAGE         reduce using rule 16 (sentencia -> assignment .)
    IMPORT          reduce using rule 16 (sentencia -> assignment .)
    SWITCH          reduce using rule 16 (sentencia -> assignment .)
    IF              reduce using rule 16 (sentencia -> assignment .)
    RBRACE          reduce using rule 16 (sentencia -> assignment .)
    CASE            reduce using rule 16 (sentencia -> assignment .)
    DEFAULT         reduce using rule 16 (sentencia -> assignment .)
    RETURN          reduce using rule 16 (sentencia -> assignment .)


state 62

    (17) sentencia -> input .

    IDENTIFIER      reduce using rule 17 (sentencia -> input .)
    VAR             reduce using rule 17 (sentencia -> input .)
    TYPE            reduce using rule 17 (sentencia -> input .)
    FOR             reduce using rule 17 (sentencia -> input .)
    PACKAGE         reduce using rule 17 (sentencia -> input .)
    IMPORT          reduce using rule 17 (sentencia -> input .)
    SWITCH          reduce using rule 17 (sentencia -> input .)
    IF              reduce using rule 17 (sentencia -> input .)
    RBRACE          reduce using rule 17 (sentencia -> input .)
    CASE            reduce using rule 17 (sentencia -> input .)
    DEFAULT         reduce using rule 17 (sentencia -> input .)
    RETURN          reduce using rule 17 (sentencia -> input .)


state 63

    (18) sentencia -> llamarFuncion .

    IDENTIFIER      reduce using rule 18 (sentencia -> llamarFuncion .)
    VAR             reduce using rule 18 (sentencia -> llamarFuncion .)
    TYPE            reduce using rule 18 (sentencia -> llamarFuncion .)
    FOR             reduce using rule 18 (sentencia -> llamarFuncion .)
    PACKAGE         reduce using rule 18 (sentencia -> llamarFuncion .)
    IMPORT          reduce using rule 18 (sentencia -> llamarFuncion .)
    SWITCH          reduce using rule 18 (sentencia -> llamarFuncion .)
    IF              reduce using rule 18 (sentencia -> llamarFuncion .)
    RBRACE          reduce using rule 18 (sentencia -> llamarFuncion .)
    CASE            reduce using rule 18 (sentencia -> llamarFuncion .)
    DEFAULT         reduce using rule 18 (sentencia -> llamarFuncion .)
    RETURN          reduce using rule 18 (sentencia -> llamarFuncion .)


state 64

    (19) sentencia -> print_statement .

    IDENTIFIER      reduce using rule 19 (sentencia -> print_statement .)
    VAR             reduce using rule 19 (sentencia -> print_statement .)
    TYPE            reduce using rule 19 (sentencia -> print_statement .)
    FOR             reduce using rule 19 (sentencia -> print_statement .)
    PACKAGE         reduce using rule 19 (sentencia -> print_statement .)
    IMPORT          reduce using rule 19 (sentencia -> print_statement .)
    SWITCH          reduce using rule 19 (sentencia -> print_statement .)
    IF              reduce using rule 19 (sentencia -> print_statement .)
    RBRACE          reduce using rule 19 (sentencia -> print_statement .)
    CASE            reduce using rule 19 (sentencia -> print_statement .)
    DEFAULT         reduce using rule 19 (sentencia -> print_statement .)
    RETURN          reduce using rule 19 (sentencia -> print_statement .)


state 65

    (20) sentencia -> struct_definition .

    IDENTIFIER      reduce using rule 20 (sentencia -> struct_definition .)
    VAR             reduce using rule 20 (sentencia -> struct_definition .)
    TYPE            reduce using rule 20 (sentencia -> struct_definition .)
    FOR             reduce using rule 20 (sentencia -> struct_definition .)
    PACKAGE         reduce using rule 20 (sentencia -> struct_definition .)
    IMPORT          reduce using rule 20 (sentencia -> struct_definition .)
    SWITCH          reduce using rule 20 (sentencia -> struct_definition .)
    IF              reduce using rule 20 (sentencia -> struct_definition .)
    RBRACE          reduce using rule 20 (sentencia -> struct_definition .)
    CASE            reduce using rule 20 (sentencia -> struct_definition .)
    DEFAULT         reduce using rule 20 (sentencia -> struct_definition .)
    RETURN          reduce using rule 20 (sentencia -> struct_definition .)


state 66

    (21) sentencia -> for_statement .

    IDENTIFIER      reduce using rule 21 (sentencia -> for_statement .)
    VAR             reduce using rule 21 (sentencia -> for_statement .)
    TYPE            reduce using rule 21 (sentencia -> for_statement .)
    FOR             reduce using rule 21 (sentencia -> for_statement .)
    PACKAGE         reduce using rule 21 (sentencia -> for_statement .)
    IMPORT          reduce using rule 21 (sentencia -> for_statement .)
    SWITCH          reduce using rule 21 (sentencia -> for_statement .)
    IF              reduce using rule 21 (sentencia -> for_statement .)
    RBRACE          reduce using rule 21 (sentencia -> for_statement .)
    CASE            reduce using rule 21 (sentencia -> for_statement .)
    DEFAULT         reduce using rule 21 (sentencia -> for_statement .)
    RETURN          reduce using rule 21 (sentencia -> for_statement .)


state 67

    (22) sentencia -> package .

    IDENTIFIER      reduce using rule 22 (sentencia -> package .)
    VAR             reduce using rule 22 (sentencia -> package .)
    TYPE            reduce using rule 22 (sentencia -> package .)
    FOR             reduce using rule 22 (sentencia -> package .)
    PACKAGE         reduce using rule 22 (sentencia -> package .)
    IMPORT          reduce using rule 22 (sentencia -> package .)
    SWITCH          reduce using rule 22 (sentencia -> package .)
    IF              reduce using rule 22 (sentencia -> package .)
    RBRACE          reduce using rule 22 (sentencia -> package .)
    CASE            reduce using rule 22 (sentencia -> package .)
    DEFAULT         reduce using rule 22 (sentencia -> package .)
    RETURN          reduce using rule 22 (sentencia -> package .)


state 68

    (23) sentencia -> import .

    IDENTIFIER      reduce using rule 23 (sentencia -> import .)
    VAR             reduce using rule 23 (sentencia -> import .)
    TYPE            reduce using rule 23 (sentencia -> import .)
    FOR             reduce using rule 23 (sentencia -> import .)
    PACKAGE         reduce using rule 23 (sentencia -> import .)
    IMPORT          reduce using rule 23 (sentencia -> import .)
    SWITCH          reduce using rule 23 (sentencia -> import .)
    IF              reduce using rule 23 (sentencia -> import .)
    RBRACE          reduce using rule 23 (sentencia -> import .)
    CASE            reduce using rule 23 (sentencia -> import .)
    DEFAULT         reduce using rule 23 (sentencia -> import .)
    RETURN          reduce using rule 23 (sentencia -> import .)


state 69

    (24) sentencia -> switch .

    IDENTIFIER      reduce using rule 24 (sentencia -> switch .)
    VAR             reduce using rule 24 (sentencia -> switch .)
    TYPE            reduce using rule 24 (sentencia -> switch .)
    FOR             reduce using rule 24 (sentencia -> switch .)
    PACKAGE         reduce using rule 24 (sentencia -> switch .)
    IMPORT          reduce using rule 24 (sentencia -> switch .)
    SWITCH          reduce using rule 24 (sentencia -> switch .)
    IF              reduce using rule 24 (sentencia -> switch .)
    RBRACE          reduce using rule 24 (sentencia -> switch .)
    CASE            reduce using rule 24 (sentencia -> switch .)
    DEFAULT         reduce using rule 24 (sentencia -> switch .)
    RETURN          reduce using rule 24 (sentencia -> switch .)


state 70

    (25) sentencia -> map .

    IDENTIFIER      reduce using rule 25 (sentencia -> map .)
    VAR             reduce using rule 25 (sentencia -> map .)
    TYPE            reduce using rule 25 (sentencia -> map .)
    FOR             reduce using rule 25 (sentencia -> map .)
    PACKAGE         reduce using rule 25 (sentencia -> map .)
    IMPORT          reduce using rule 25 (sentencia -> map .)
    SWITCH          reduce using rule 25 (sentencia -> map .)
    IF              reduce using rule 25 (sentencia -> map .)
    RBRACE          reduce using rule 25 (sentencia -> map .)
    CASE            reduce using rule 25 (sentencia -> map .)
    DEFAULT         reduce using rule 25 (sentencia -> map .)
    RETURN          reduce using rule 25 (sentencia -> map .)


state 71

    (26) sentencia -> if_statement .

    IDENTIFIER      reduce using rule 26 (sentencia -> if_statement .)
    VAR             reduce using rule 26 (sentencia -> if_statement .)
    TYPE            reduce using rule 26 (sentencia -> if_statement .)
    FOR             reduce using rule 26 (sentencia -> if_statement .)
    PACKAGE         reduce using rule 26 (sentencia -> if_statement .)
    IMPORT          reduce using rule 26 (sentencia -> if_statement .)
    SWITCH          reduce using rule 26 (sentencia -> if_statement .)
    IF              reduce using rule 26 (sentencia -> if_statement .)
    RBRACE          reduce using rule 26 (sentencia -> if_statement .)
    CASE            reduce using rule 26 (sentencia -> if_statement .)
    DEFAULT         reduce using rule 26 (sentencia -> if_statement .)
    RETURN          reduce using rule 26 (sentencia -> if_statement .)


state 72

    (29) assignment -> IDENTIFIER . DECLARE_ASSIGN expression
    (27) input -> IDENTIFIER . DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (32) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN
    (74) print_statement -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (58) map -> IDENTIFIER . DECLARE_ASSIGN mapLiteral

    DECLARE_ASSIGN  shift and go to state 96
    DOT             shift and go to state 97
    LPAREN          shift and go to state 98


state 73

    (30) assignment -> VAR . IDENTIFIER DATATYPE ASSIGN expression
    (31) assignment -> VAR . IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (59) map -> VAR . IDENTIFIER ASSIGN mapLiteral

    IDENTIFIER      shift and go to state 99


state 74

    (72) package -> PACKAGE . MAIN

    MAIN            shift and go to state 100


state 75

    (73) import -> IMPORT . STRING

    STRING          shift and go to state 101


state 76

    (53) switch -> SWITCH . expression LBRACE caseBlocks RBRACE
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (86) expression -> . NUMBER
    (87) expression -> . IDENTIFIER
    (88) expression -> . RUNE
    (89) expression -> . STRING
    (90) expression -> . RAW_STRING
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . NIL
    (94) expression -> . expression operator expression
    (100) expression -> . MINUS expression
    (101) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 25
    IDENTIFIER      shift and go to state 79
    RUNE            shift and go to state 26
    STRING          shift and go to state 27
    RAW_STRING      shift and go to state 28
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    NIL             shift and go to state 31
    MINUS           shift and go to state 32
    LPAREN          shift and go to state 33

    expression                     shift and go to state 102

state 77

    (102) if_statement -> IF . condicion_compleja block
    (103) if_statement -> IF . condicion_compleja block ELSE block
    (42) condicion_compleja -> . condicion operadorLogico condicion
    (43) condicion_compleja -> . condicion operadorLogico condicion_compleja
    (41) condicion -> . expression comparador expression
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (86) expression -> . NUMBER
    (87) expression -> . IDENTIFIER
    (88) expression -> . RUNE
    (89) expression -> . STRING
    (90) expression -> . RAW_STRING
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . NIL
    (94) expression -> . expression operator expression
    (100) expression -> . MINUS expression
    (101) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 25
    IDENTIFIER      shift and go to state 79
    RUNE            shift and go to state 26
    STRING          shift and go to state 27
    RAW_STRING      shift and go to state 28
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    NIL             shift and go to state 31
    MINUS           shift and go to state 32
    LPAREN          shift and go to state 33

    condicion_compleja             shift and go to state 103
    condicion                      shift and go to state 104
    expression                     shift and go to state 21

state 78

    (100) expression -> MINUS expression .
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (94) expression -> expression . operator expression
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (95) operator -> . PLUS
    (96) operator -> . MINUS
    (97) operator -> . TIMES
    (98) operator -> . DIVIDE
    (99) operator -> . MOD

    EQ              reduce using rule 100 (expression -> MINUS expression .)
    NEQ             reduce using rule 100 (expression -> MINUS expression .)
    GT              reduce using rule 100 (expression -> MINUS expression .)
    LT              reduce using rule 100 (expression -> MINUS expression .)
    GE              reduce using rule 100 (expression -> MINUS expression .)
    LE              reduce using rule 100 (expression -> MINUS expression .)
    AND             reduce using rule 100 (expression -> MINUS expression .)
    OR              reduce using rule 100 (expression -> MINUS expression .)
    PLUS            reduce using rule 100 (expression -> MINUS expression .)
    MINUS           reduce using rule 100 (expression -> MINUS expression .)
    TIMES           reduce using rule 100 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 100 (expression -> MINUS expression .)
    MOD             reduce using rule 100 (expression -> MINUS expression .)
    RPAREN          reduce using rule 100 (expression -> MINUS expression .)
    LBRACE          reduce using rule 100 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 100 (expression -> MINUS expression .)
    TYPE            reduce using rule 100 (expression -> MINUS expression .)
    IDENTIFIER      reduce using rule 100 (expression -> MINUS expression .)
    FOR             reduce using rule 100 (expression -> MINUS expression .)
    CONST           reduce using rule 100 (expression -> MINUS expression .)
    FUNC            reduce using rule 100 (expression -> MINUS expression .)
    $end            reduce using rule 100 (expression -> MINUS expression .)
    COMMA           reduce using rule 100 (expression -> MINUS expression .)
    VAR             reduce using rule 100 (expression -> MINUS expression .)
    PACKAGE         reduce using rule 100 (expression -> MINUS expression .)
    IMPORT          reduce using rule 100 (expression -> MINUS expression .)
    SWITCH          reduce using rule 100 (expression -> MINUS expression .)
    IF              reduce using rule 100 (expression -> MINUS expression .)
    RBRACE          reduce using rule 100 (expression -> MINUS expression .)
    CASE            reduce using rule 100 (expression -> MINUS expression .)
    DEFAULT         reduce using rule 100 (expression -> MINUS expression .)
    RETURN          reduce using rule 100 (expression -> MINUS expression .)
    COLON           reduce using rule 100 (expression -> MINUS expression .)

  ! EQ              [ shift and go to state 44 ]
  ! NEQ             [ shift and go to state 45 ]
  ! GT              [ shift and go to state 46 ]
  ! LT              [ shift and go to state 47 ]
  ! GE              [ shift and go to state 48 ]
  ! LE              [ shift and go to state 49 ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 51 ]
  ! PLUS            [ shift and go to state 52 ]
  ! MINUS           [ shift and go to state 53 ]
  ! TIMES           [ shift and go to state 54 ]
  ! DIVIDE          [ shift and go to state 55 ]
  ! MOD             [ shift and go to state 56 ]

    comparador                     shift and go to state 105
    operadorLogico                 shift and go to state 42
    operator                       shift and go to state 43

state 79

    (87) expression -> IDENTIFIER .

    EQ              reduce using rule 87 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 87 (expression -> IDENTIFIER .)
    GT              reduce using rule 87 (expression -> IDENTIFIER .)
    LT              reduce using rule 87 (expression -> IDENTIFIER .)
    GE              reduce using rule 87 (expression -> IDENTIFIER .)
    LE              reduce using rule 87 (expression -> IDENTIFIER .)
    AND             reduce using rule 87 (expression -> IDENTIFIER .)
    OR              reduce using rule 87 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 87 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 87 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 87 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 87 (expression -> IDENTIFIER .)
    MOD             reduce using rule 87 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 87 (expression -> IDENTIFIER .)
    LBRACE          reduce using rule 87 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 87 (expression -> IDENTIFIER .)
    TYPE            reduce using rule 87 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 87 (expression -> IDENTIFIER .)
    FOR             reduce using rule 87 (expression -> IDENTIFIER .)
    CONST           reduce using rule 87 (expression -> IDENTIFIER .)
    FUNC            reduce using rule 87 (expression -> IDENTIFIER .)
    $end            reduce using rule 87 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 87 (expression -> IDENTIFIER .)
    VAR             reduce using rule 87 (expression -> IDENTIFIER .)
    PACKAGE         reduce using rule 87 (expression -> IDENTIFIER .)
    IMPORT          reduce using rule 87 (expression -> IDENTIFIER .)
    SWITCH          reduce using rule 87 (expression -> IDENTIFIER .)
    IF              reduce using rule 87 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 87 (expression -> IDENTIFIER .)
    CASE            reduce using rule 87 (expression -> IDENTIFIER .)
    DEFAULT         reduce using rule 87 (expression -> IDENTIFIER .)
    RETURN          reduce using rule 87 (expression -> IDENTIFIER .)
    COLON           reduce using rule 87 (expression -> IDENTIFIER .)


state 80

    (101) expression -> LPAREN expression . RPAREN
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (94) expression -> expression . operator expression
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (95) operator -> . PLUS
    (96) operator -> . MINUS
    (97) operator -> . TIMES
    (98) operator -> . DIVIDE
    (99) operator -> . MOD

    RPAREN          shift and go to state 106
    EQ              shift and go to state 44
    NEQ             shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    GE              shift and go to state 48
    LE              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MOD             shift and go to state 56

    comparador                     shift and go to state 105
    operadorLogico                 shift and go to state 42
    operator                       shift and go to state 43

state 81

    (13) const_declaration -> CONST IDENTIFIER ASSIGN . expression
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (86) expression -> . NUMBER
    (87) expression -> . IDENTIFIER
    (88) expression -> . RUNE
    (89) expression -> . STRING
    (90) expression -> . RAW_STRING
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . NIL
    (94) expression -> . expression operator expression
    (100) expression -> . MINUS expression
    (101) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 25
    IDENTIFIER      shift and go to state 79
    RUNE            shift and go to state 26
    STRING          shift and go to state 27
    RAW_STRING      shift and go to state 28
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    NIL             shift and go to state 31
    MINUS           shift and go to state 32
    LPAREN          shift and go to state 33

    expression                     shift and go to state 107

state 82

    (66) function -> FUNC IDENTIFIER LPAREN . params_opt RPAREN DATATYPE LBRACE sentencias RETURN expression RBRACE
    (67) params_opt -> . params
    (68) params_opt -> . empty
    (69) params -> . param
    (70) params -> . param COMMA params
    (52) empty -> .
    (71) param -> . IDENTIFIER DATATYPE

    RPAREN          reduce using rule 52 (empty -> .)
    IDENTIFIER      shift and go to state 108

    params_opt                     shift and go to state 109
    params                         shift and go to state 110
    empty                          shift and go to state 111
    param                          shift and go to state 112

state 83

    (79) method_definition -> FUNC LPAREN IDENTIFIER . IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (108) parameter -> IDENTIFIER . DATATYPE
    (109) parameter -> IDENTIFIER . FUNC LPAREN parameters RPAREN DATATYPE

    IDENTIFIER      shift and go to state 114
    DATATYPE        shift and go to state 115
    FUNC            shift and go to state 113


state 84

    (104) function_literal -> FUNC LPAREN parameters . RPAREN return_type block
    (105) parameters -> parameters . COMMA parameter

    RPAREN          shift and go to state 116
    COMMA           shift and go to state 117


state 85

    (106) parameters -> parameter .

    RPAREN          reduce using rule 106 (parameters -> parameter .)
    COMMA           reduce using rule 106 (parameters -> parameter .)


state 86

    (107) parameters -> empty .

    RPAREN          reduce using rule 107 (parameters -> empty .)
    COMMA           reduce using rule 107 (parameters -> empty .)


state 87

    (75) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE . struct_fields RBRACE
    (77) struct_fields -> . struct_field
    (78) struct_fields -> . struct_fields struct_field
    (76) struct_field -> . IDENTIFIER DATATYPE

    IDENTIFIER      shift and go to state 118

    struct_fields                  shift and go to state 119
    struct_field                   shift and go to state 120

state 88

    (74) print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN . argument_list_opt RPAREN
    (39) argument_list_opt -> . argument_list
    (40) argument_list_opt -> .
    (37) argument_list -> . expression
    (38) argument_list -> . argument_list COMMA expression
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (86) expression -> . NUMBER
    (87) expression -> . IDENTIFIER
    (88) expression -> . RUNE
    (89) expression -> . STRING
    (90) expression -> . RAW_STRING
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . NIL
    (94) expression -> . expression operator expression
    (100) expression -> . MINUS expression
    (101) expression -> . LPAREN expression RPAREN

    RPAREN          reduce using rule 40 (argument_list_opt -> .)
    NUMBER          shift and go to state 25
    IDENTIFIER      shift and go to state 79
    RUNE            shift and go to state 26
    STRING          shift and go to state 27
    RAW_STRING      shift and go to state 28
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    NIL             shift and go to state 31
    MINUS           shift and go to state 32
    LPAREN          shift and go to state 33

    argument_list_opt              shift and go to state 121
    argument_list                  shift and go to state 122
    expression                     shift and go to state 123

state 89

    (80) for_statement -> FOR shortAssignment SEMICOLON condicion . SEMICOLON expression block

    SEMICOLON       shift and go to state 124


state 90

    (41) condicion -> expression comparador expression .
    (35) expression -> expression comparador expression .
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (94) expression -> expression . operator expression
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (95) operator -> . PLUS
    (96) operator -> . MINUS
    (97) operator -> . TIMES
    (98) operator -> . DIVIDE
    (99) operator -> . MOD

  ! reduce/reduce conflict for AND resolved using rule 35 (expression -> expression comparador expression .)
  ! reduce/reduce conflict for OR resolved using rule 35 (expression -> expression comparador expression .)
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 41 (condicion -> expression comparador expression .)
    SEMICOLON       reduce using rule 41 (condicion -> expression comparador expression .)
    EQ              shift and go to state 44
    NEQ             shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    GE              shift and go to state 48
    LE              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MOD             shift and go to state 56

  ! AND             [ reduce using rule 41 (condicion -> expression comparador expression .) ]
  ! OR              [ reduce using rule 41 (condicion -> expression comparador expression .) ]
  ! EQ              [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! NEQ             [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! GT              [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! LT              [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! GE              [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! LE              [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! AND             [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! OR              [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! PLUS            [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! MINUS           [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! TIMES           [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! DIVIDE          [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! MOD             [ reduce using rule 35 (expression -> expression comparador expression .) ]

    comparador                     shift and go to state 105
    operadorLogico                 shift and go to state 42
    operator                       shift and go to state 43

state 91

    (36) expression -> expression operadorLogico expression .
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (94) expression -> expression . operator expression
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (95) operator -> . PLUS
    (96) operator -> . MINUS
    (97) operator -> . TIMES
    (98) operator -> . DIVIDE
    (99) operator -> . MOD

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    RPAREN          reduce using rule 36 (expression -> expression operadorLogico expression .)
    LBRACE          reduce using rule 36 (expression -> expression operadorLogico expression .)
    SEMICOLON       reduce using rule 36 (expression -> expression operadorLogico expression .)
    TYPE            reduce using rule 36 (expression -> expression operadorLogico expression .)
    IDENTIFIER      reduce using rule 36 (expression -> expression operadorLogico expression .)
    FOR             reduce using rule 36 (expression -> expression operadorLogico expression .)
    CONST           reduce using rule 36 (expression -> expression operadorLogico expression .)
    FUNC            reduce using rule 36 (expression -> expression operadorLogico expression .)
    $end            reduce using rule 36 (expression -> expression operadorLogico expression .)
    COMMA           reduce using rule 36 (expression -> expression operadorLogico expression .)
    VAR             reduce using rule 36 (expression -> expression operadorLogico expression .)
    PACKAGE         reduce using rule 36 (expression -> expression operadorLogico expression .)
    IMPORT          reduce using rule 36 (expression -> expression operadorLogico expression .)
    SWITCH          reduce using rule 36 (expression -> expression operadorLogico expression .)
    IF              reduce using rule 36 (expression -> expression operadorLogico expression .)
    RBRACE          reduce using rule 36 (expression -> expression operadorLogico expression .)
    CASE            reduce using rule 36 (expression -> expression operadorLogico expression .)
    DEFAULT         reduce using rule 36 (expression -> expression operadorLogico expression .)
    RETURN          reduce using rule 36 (expression -> expression operadorLogico expression .)
    COLON           reduce using rule 36 (expression -> expression operadorLogico expression .)
    EQ              shift and go to state 44
    NEQ             shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    GE              shift and go to state 48
    LE              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MOD             shift and go to state 56

  ! EQ              [ reduce using rule 36 (expression -> expression operadorLogico expression .) ]
  ! NEQ             [ reduce using rule 36 (expression -> expression operadorLogico expression .) ]
  ! GT              [ reduce using rule 36 (expression -> expression operadorLogico expression .) ]
  ! LT              [ reduce using rule 36 (expression -> expression operadorLogico expression .) ]
  ! GE              [ reduce using rule 36 (expression -> expression operadorLogico expression .) ]
  ! LE              [ reduce using rule 36 (expression -> expression operadorLogico expression .) ]
  ! AND             [ reduce using rule 36 (expression -> expression operadorLogico expression .) ]
  ! OR              [ reduce using rule 36 (expression -> expression operadorLogico expression .) ]
  ! PLUS            [ reduce using rule 36 (expression -> expression operadorLogico expression .) ]
  ! MINUS           [ reduce using rule 36 (expression -> expression operadorLogico expression .) ]
  ! TIMES           [ reduce using rule 36 (expression -> expression operadorLogico expression .) ]
  ! DIVIDE          [ reduce using rule 36 (expression -> expression operadorLogico expression .) ]
  ! MOD             [ reduce using rule 36 (expression -> expression operadorLogico expression .) ]

    operadorLogico                 shift and go to state 42
    comparador                     shift and go to state 105
    operator                       shift and go to state 43

state 92

    (94) expression -> expression operator expression .
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (94) expression -> expression . operator expression
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (95) operator -> . PLUS
    (96) operator -> . MINUS
    (97) operator -> . TIMES
    (98) operator -> . DIVIDE
    (99) operator -> . MOD

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    RPAREN          reduce using rule 94 (expression -> expression operator expression .)
    LBRACE          reduce using rule 94 (expression -> expression operator expression .)
    SEMICOLON       reduce using rule 94 (expression -> expression operator expression .)
    TYPE            reduce using rule 94 (expression -> expression operator expression .)
    IDENTIFIER      reduce using rule 94 (expression -> expression operator expression .)
    FOR             reduce using rule 94 (expression -> expression operator expression .)
    CONST           reduce using rule 94 (expression -> expression operator expression .)
    FUNC            reduce using rule 94 (expression -> expression operator expression .)
    $end            reduce using rule 94 (expression -> expression operator expression .)
    COMMA           reduce using rule 94 (expression -> expression operator expression .)
    VAR             reduce using rule 94 (expression -> expression operator expression .)
    PACKAGE         reduce using rule 94 (expression -> expression operator expression .)
    IMPORT          reduce using rule 94 (expression -> expression operator expression .)
    SWITCH          reduce using rule 94 (expression -> expression operator expression .)
    IF              reduce using rule 94 (expression -> expression operator expression .)
    RBRACE          reduce using rule 94 (expression -> expression operator expression .)
    CASE            reduce using rule 94 (expression -> expression operator expression .)
    DEFAULT         reduce using rule 94 (expression -> expression operator expression .)
    RETURN          reduce using rule 94 (expression -> expression operator expression .)
    COLON           reduce using rule 94 (expression -> expression operator expression .)
    EQ              shift and go to state 44
    NEQ             shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    GE              shift and go to state 48
    LE              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MOD             shift and go to state 56

  ! EQ              [ reduce using rule 94 (expression -> expression operator expression .) ]
  ! NEQ             [ reduce using rule 94 (expression -> expression operator expression .) ]
  ! GT              [ reduce using rule 94 (expression -> expression operator expression .) ]
  ! LT              [ reduce using rule 94 (expression -> expression operator expression .) ]
  ! GE              [ reduce using rule 94 (expression -> expression operator expression .) ]
  ! LE              [ reduce using rule 94 (expression -> expression operator expression .) ]
  ! AND             [ reduce using rule 94 (expression -> expression operator expression .) ]
  ! OR              [ reduce using rule 94 (expression -> expression operator expression .) ]
  ! PLUS            [ reduce using rule 94 (expression -> expression operator expression .) ]
  ! MINUS           [ reduce using rule 94 (expression -> expression operator expression .) ]
  ! TIMES           [ reduce using rule 94 (expression -> expression operator expression .) ]
  ! DIVIDE          [ reduce using rule 94 (expression -> expression operator expression .) ]
  ! MOD             [ reduce using rule 94 (expression -> expression operator expression .) ]

    operator                       shift and go to state 43
    comparador                     shift and go to state 105
    operadorLogico                 shift and go to state 42

state 93

    (81) shortAssignment -> IDENTIFIER DECLARE_ASSIGN expression .
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (94) expression -> expression . operator expression
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (95) operator -> . PLUS
    (96) operator -> . MINUS
    (97) operator -> . TIMES
    (98) operator -> . DIVIDE
    (99) operator -> . MOD

    SEMICOLON       reduce using rule 81 (shortAssignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    EQ              shift and go to state 44
    NEQ             shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    GE              shift and go to state 48
    LE              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MOD             shift and go to state 56

    comparador                     shift and go to state 105
    operadorLogico                 shift and go to state 42
    operator                       shift and go to state 43

state 94

    (84) block -> LBRACE sentencias RBRACE .

    TYPE            reduce using rule 84 (block -> LBRACE sentencias RBRACE .)
    IDENTIFIER      reduce using rule 84 (block -> LBRACE sentencias RBRACE .)
    FOR             reduce using rule 84 (block -> LBRACE sentencias RBRACE .)
    CONST           reduce using rule 84 (block -> LBRACE sentencias RBRACE .)
    FUNC            reduce using rule 84 (block -> LBRACE sentencias RBRACE .)
    $end            reduce using rule 84 (block -> LBRACE sentencias RBRACE .)
    VAR             reduce using rule 84 (block -> LBRACE sentencias RBRACE .)
    PACKAGE         reduce using rule 84 (block -> LBRACE sentencias RBRACE .)
    IMPORT          reduce using rule 84 (block -> LBRACE sentencias RBRACE .)
    SWITCH          reduce using rule 84 (block -> LBRACE sentencias RBRACE .)
    IF              reduce using rule 84 (block -> LBRACE sentencias RBRACE .)
    RBRACE          reduce using rule 84 (block -> LBRACE sentencias RBRACE .)
    CASE            reduce using rule 84 (block -> LBRACE sentencias RBRACE .)
    DEFAULT         reduce using rule 84 (block -> LBRACE sentencias RBRACE .)
    RETURN          reduce using rule 84 (block -> LBRACE sentencias RBRACE .)
    ELSE            reduce using rule 84 (block -> LBRACE sentencias RBRACE .)


state 95

    (15) sentencias -> sentencia sentencias .

    RBRACE          reduce using rule 15 (sentencias -> sentencia sentencias .)
    CASE            reduce using rule 15 (sentencias -> sentencia sentencias .)
    DEFAULT         reduce using rule 15 (sentencias -> sentencia sentencias .)
    RETURN          reduce using rule 15 (sentencias -> sentencia sentencias .)


state 96

    (29) assignment -> IDENTIFIER DECLARE_ASSIGN . expression
    (58) map -> IDENTIFIER DECLARE_ASSIGN . mapLiteral
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (86) expression -> . NUMBER
    (87) expression -> . IDENTIFIER
    (88) expression -> . RUNE
    (89) expression -> . STRING
    (90) expression -> . RAW_STRING
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . NIL
    (94) expression -> . expression operator expression
    (100) expression -> . MINUS expression
    (101) expression -> . LPAREN expression RPAREN
    (60) mapLiteral -> . MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE

    NUMBER          shift and go to state 25
    IDENTIFIER      shift and go to state 79
    RUNE            shift and go to state 26
    STRING          shift and go to state 27
    RAW_STRING      shift and go to state 28
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    NIL             shift and go to state 31
    MINUS           shift and go to state 32
    LPAREN          shift and go to state 33
    MAP             shift and go to state 127

    expression                     shift and go to state 125
    mapLiteral                     shift and go to state 126

state 97

    (27) input -> IDENTIFIER DOT . IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (74) print_statement -> IDENTIFIER DOT . IDENTIFIER LPAREN argument_list_opt RPAREN

    IDENTIFIER      shift and go to state 128


state 98

    (32) llamarFuncion -> IDENTIFIER LPAREN . argument_list_opt RPAREN
    (39) argument_list_opt -> . argument_list
    (40) argument_list_opt -> .
    (37) argument_list -> . expression
    (38) argument_list -> . argument_list COMMA expression
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (86) expression -> . NUMBER
    (87) expression -> . IDENTIFIER
    (88) expression -> . RUNE
    (89) expression -> . STRING
    (90) expression -> . RAW_STRING
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . NIL
    (94) expression -> . expression operator expression
    (100) expression -> . MINUS expression
    (101) expression -> . LPAREN expression RPAREN

    RPAREN          reduce using rule 40 (argument_list_opt -> .)
    NUMBER          shift and go to state 25
    IDENTIFIER      shift and go to state 79
    RUNE            shift and go to state 26
    STRING          shift and go to state 27
    RAW_STRING      shift and go to state 28
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    NIL             shift and go to state 31
    MINUS           shift and go to state 32
    LPAREN          shift and go to state 33

    argument_list_opt              shift and go to state 129
    argument_list                  shift and go to state 122
    expression                     shift and go to state 123

state 99

    (30) assignment -> VAR IDENTIFIER . DATATYPE ASSIGN expression
    (31) assignment -> VAR IDENTIFIER . DATATYPE ASSIGN llamarFuncion
    (59) map -> VAR IDENTIFIER . ASSIGN mapLiteral

    DATATYPE        shift and go to state 130
    ASSIGN          shift and go to state 131


state 100

    (72) package -> PACKAGE MAIN .

    IDENTIFIER      reduce using rule 72 (package -> PACKAGE MAIN .)
    VAR             reduce using rule 72 (package -> PACKAGE MAIN .)
    TYPE            reduce using rule 72 (package -> PACKAGE MAIN .)
    FOR             reduce using rule 72 (package -> PACKAGE MAIN .)
    PACKAGE         reduce using rule 72 (package -> PACKAGE MAIN .)
    IMPORT          reduce using rule 72 (package -> PACKAGE MAIN .)
    SWITCH          reduce using rule 72 (package -> PACKAGE MAIN .)
    IF              reduce using rule 72 (package -> PACKAGE MAIN .)
    RBRACE          reduce using rule 72 (package -> PACKAGE MAIN .)
    CASE            reduce using rule 72 (package -> PACKAGE MAIN .)
    DEFAULT         reduce using rule 72 (package -> PACKAGE MAIN .)
    RETURN          reduce using rule 72 (package -> PACKAGE MAIN .)


state 101

    (73) import -> IMPORT STRING .

    IDENTIFIER      reduce using rule 73 (import -> IMPORT STRING .)
    VAR             reduce using rule 73 (import -> IMPORT STRING .)
    TYPE            reduce using rule 73 (import -> IMPORT STRING .)
    FOR             reduce using rule 73 (import -> IMPORT STRING .)
    PACKAGE         reduce using rule 73 (import -> IMPORT STRING .)
    IMPORT          reduce using rule 73 (import -> IMPORT STRING .)
    SWITCH          reduce using rule 73 (import -> IMPORT STRING .)
    IF              reduce using rule 73 (import -> IMPORT STRING .)
    RBRACE          reduce using rule 73 (import -> IMPORT STRING .)
    CASE            reduce using rule 73 (import -> IMPORT STRING .)
    DEFAULT         reduce using rule 73 (import -> IMPORT STRING .)
    RETURN          reduce using rule 73 (import -> IMPORT STRING .)


state 102

    (53) switch -> SWITCH expression . LBRACE caseBlocks RBRACE
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (94) expression -> expression . operator expression
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (95) operator -> . PLUS
    (96) operator -> . MINUS
    (97) operator -> . TIMES
    (98) operator -> . DIVIDE
    (99) operator -> . MOD

    LBRACE          shift and go to state 132
    EQ              shift and go to state 44
    NEQ             shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    GE              shift and go to state 48
    LE              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MOD             shift and go to state 56

    comparador                     shift and go to state 105
    operadorLogico                 shift and go to state 42
    operator                       shift and go to state 43

state 103

    (102) if_statement -> IF condicion_compleja . block
    (103) if_statement -> IF condicion_compleja . block ELSE block
    (84) block -> . LBRACE sentencias RBRACE
    (85) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 24

    block                          shift and go to state 133

state 104

    (42) condicion_compleja -> condicion . operadorLogico condicion
    (43) condicion_compleja -> condicion . operadorLogico condicion_compleja
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR

    AND             shift and go to state 50
    OR              shift and go to state 51

    operadorLogico                 shift and go to state 134

state 105

    (35) expression -> expression comparador . expression
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (86) expression -> . NUMBER
    (87) expression -> . IDENTIFIER
    (88) expression -> . RUNE
    (89) expression -> . STRING
    (90) expression -> . RAW_STRING
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . NIL
    (94) expression -> . expression operator expression
    (100) expression -> . MINUS expression
    (101) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 25
    IDENTIFIER      shift and go to state 79
    RUNE            shift and go to state 26
    STRING          shift and go to state 27
    RAW_STRING      shift and go to state 28
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    NIL             shift and go to state 31
    MINUS           shift and go to state 32
    LPAREN          shift and go to state 33

    expression                     shift and go to state 135

state 106

    (101) expression -> LPAREN expression RPAREN .

    EQ              reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    TYPE            reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    CONST           reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    FUNC            reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    PACKAGE         reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    IMPORT          reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    CASE            reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 101 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 101 (expression -> LPAREN expression RPAREN .)


state 107

    (13) const_declaration -> CONST IDENTIFIER ASSIGN expression .
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (94) expression -> expression . operator expression
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (95) operator -> . PLUS
    (96) operator -> . MINUS
    (97) operator -> . TIMES
    (98) operator -> . DIVIDE
    (99) operator -> . MOD

    TYPE            reduce using rule 13 (const_declaration -> CONST IDENTIFIER ASSIGN expression .)
    IDENTIFIER      reduce using rule 13 (const_declaration -> CONST IDENTIFIER ASSIGN expression .)
    FOR             reduce using rule 13 (const_declaration -> CONST IDENTIFIER ASSIGN expression .)
    CONST           reduce using rule 13 (const_declaration -> CONST IDENTIFIER ASSIGN expression .)
    FUNC            reduce using rule 13 (const_declaration -> CONST IDENTIFIER ASSIGN expression .)
    $end            reduce using rule 13 (const_declaration -> CONST IDENTIFIER ASSIGN expression .)
    EQ              shift and go to state 44
    NEQ             shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    GE              shift and go to state 48
    LE              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MOD             shift and go to state 56

    comparador                     shift and go to state 105
    operadorLogico                 shift and go to state 42
    operator                       shift and go to state 43

state 108

    (71) param -> IDENTIFIER . DATATYPE

    DATATYPE        shift and go to state 136


state 109

    (66) function -> FUNC IDENTIFIER LPAREN params_opt . RPAREN DATATYPE LBRACE sentencias RETURN expression RBRACE

    RPAREN          shift and go to state 137


state 110

    (67) params_opt -> params .

    RPAREN          reduce using rule 67 (params_opt -> params .)


state 111

    (68) params_opt -> empty .

    RPAREN          reduce using rule 68 (params_opt -> empty .)


state 112

    (69) params -> param .
    (70) params -> param . COMMA params

    RPAREN          reduce using rule 69 (params -> param .)
    COMMA           shift and go to state 138


state 113

    (109) parameter -> IDENTIFIER FUNC . LPAREN parameters RPAREN DATATYPE

    LPAREN          shift and go to state 139


state 114

    (79) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER . RPAREN IDENTIFIER LPAREN arguments RPAREN block

    RPAREN          shift and go to state 140


state 115

    (108) parameter -> IDENTIFIER DATATYPE .

    RPAREN          reduce using rule 108 (parameter -> IDENTIFIER DATATYPE .)
    COMMA           reduce using rule 108 (parameter -> IDENTIFIER DATATYPE .)


state 116

    (104) function_literal -> FUNC LPAREN parameters RPAREN . return_type block
    (110) return_type -> . DATATYPE
    (111) return_type -> . empty
    (52) empty -> .

    DATATYPE        shift and go to state 142
    LBRACE          reduce using rule 52 (empty -> .)

    return_type                    shift and go to state 141
    empty                          shift and go to state 143

state 117

    (105) parameters -> parameters COMMA . parameter
    (108) parameter -> . IDENTIFIER DATATYPE
    (109) parameter -> . IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE

    IDENTIFIER      shift and go to state 145

    parameter                      shift and go to state 144

state 118

    (76) struct_field -> IDENTIFIER . DATATYPE

    DATATYPE        shift and go to state 146


state 119

    (75) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields . RBRACE
    (78) struct_fields -> struct_fields . struct_field
    (76) struct_field -> . IDENTIFIER DATATYPE

    RBRACE          shift and go to state 147
    IDENTIFIER      shift and go to state 118

    struct_field                   shift and go to state 148

state 120

    (77) struct_fields -> struct_field .

    RBRACE          reduce using rule 77 (struct_fields -> struct_field .)
    IDENTIFIER      reduce using rule 77 (struct_fields -> struct_field .)


state 121

    (74) print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 149


state 122

    (39) argument_list_opt -> argument_list .
    (38) argument_list -> argument_list . COMMA expression

    RPAREN          reduce using rule 39 (argument_list_opt -> argument_list .)
    COMMA           shift and go to state 150


state 123

    (37) argument_list -> expression .
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (94) expression -> expression . operator expression
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (95) operator -> . PLUS
    (96) operator -> . MINUS
    (97) operator -> . TIMES
    (98) operator -> . DIVIDE
    (99) operator -> . MOD

    COMMA           reduce using rule 37 (argument_list -> expression .)
    RPAREN          reduce using rule 37 (argument_list -> expression .)
    EQ              shift and go to state 44
    NEQ             shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    GE              shift and go to state 48
    LE              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MOD             shift and go to state 56

    comparador                     shift and go to state 105
    operadorLogico                 shift and go to state 42
    operator                       shift and go to state 43

state 124

    (80) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON . expression block
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (86) expression -> . NUMBER
    (87) expression -> . IDENTIFIER
    (88) expression -> . RUNE
    (89) expression -> . STRING
    (90) expression -> . RAW_STRING
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . NIL
    (94) expression -> . expression operator expression
    (100) expression -> . MINUS expression
    (101) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 25
    IDENTIFIER      shift and go to state 79
    RUNE            shift and go to state 26
    STRING          shift and go to state 27
    RAW_STRING      shift and go to state 28
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    NIL             shift and go to state 31
    MINUS           shift and go to state 32
    LPAREN          shift and go to state 33

    expression                     shift and go to state 151

state 125

    (29) assignment -> IDENTIFIER DECLARE_ASSIGN expression .
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (94) expression -> expression . operator expression
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (95) operator -> . PLUS
    (96) operator -> . MINUS
    (97) operator -> . TIMES
    (98) operator -> . DIVIDE
    (99) operator -> . MOD

    IDENTIFIER      reduce using rule 29 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    VAR             reduce using rule 29 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    TYPE            reduce using rule 29 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    FOR             reduce using rule 29 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    PACKAGE         reduce using rule 29 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    IMPORT          reduce using rule 29 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    SWITCH          reduce using rule 29 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    IF              reduce using rule 29 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    RBRACE          reduce using rule 29 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    CASE            reduce using rule 29 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    DEFAULT         reduce using rule 29 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    RETURN          reduce using rule 29 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    EQ              shift and go to state 44
    NEQ             shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    GE              shift and go to state 48
    LE              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MOD             shift and go to state 56

    comparador                     shift and go to state 105
    operadorLogico                 shift and go to state 42
    operator                       shift and go to state 43

state 126

    (58) map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .

    IDENTIFIER      reduce using rule 58 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    VAR             reduce using rule 58 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    TYPE            reduce using rule 58 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    FOR             reduce using rule 58 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    PACKAGE         reduce using rule 58 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    IMPORT          reduce using rule 58 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    SWITCH          reduce using rule 58 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    IF              reduce using rule 58 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    RBRACE          reduce using rule 58 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    CASE            reduce using rule 58 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    DEFAULT         reduce using rule 58 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    RETURN          reduce using rule 58 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)


state 127

    (60) mapLiteral -> MAP . LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE

    LBRACKET        shift and go to state 152


state 128

    (27) input -> IDENTIFIER DOT IDENTIFIER . LPAREN AMPERSAND IDENTIFIER RPAREN
    (74) print_statement -> IDENTIFIER DOT IDENTIFIER . LPAREN argument_list_opt RPAREN

    LPAREN          shift and go to state 153


state 129

    (32) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 154


state 130

    (30) assignment -> VAR IDENTIFIER DATATYPE . ASSIGN expression
    (31) assignment -> VAR IDENTIFIER DATATYPE . ASSIGN llamarFuncion

    ASSIGN          shift and go to state 155


state 131

    (59) map -> VAR IDENTIFIER ASSIGN . mapLiteral
    (60) mapLiteral -> . MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE

    MAP             shift and go to state 127

    mapLiteral                     shift and go to state 156

state 132

    (53) switch -> SWITCH expression LBRACE . caseBlocks RBRACE
    (54) caseBlocks -> . caseBlock
    (55) caseBlocks -> . caseBlock caseBlocks
    (56) caseBlock -> . CASE expression COLON sentencias
    (57) caseBlock -> . DEFAULT COLON sentencias

    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160

    caseBlocks                     shift and go to state 157
    caseBlock                      shift and go to state 158

state 133

    (102) if_statement -> IF condicion_compleja block .
    (103) if_statement -> IF condicion_compleja block . ELSE block

    IDENTIFIER      reduce using rule 102 (if_statement -> IF condicion_compleja block .)
    VAR             reduce using rule 102 (if_statement -> IF condicion_compleja block .)
    TYPE            reduce using rule 102 (if_statement -> IF condicion_compleja block .)
    FOR             reduce using rule 102 (if_statement -> IF condicion_compleja block .)
    PACKAGE         reduce using rule 102 (if_statement -> IF condicion_compleja block .)
    IMPORT          reduce using rule 102 (if_statement -> IF condicion_compleja block .)
    SWITCH          reduce using rule 102 (if_statement -> IF condicion_compleja block .)
    IF              reduce using rule 102 (if_statement -> IF condicion_compleja block .)
    RBRACE          reduce using rule 102 (if_statement -> IF condicion_compleja block .)
    CASE            reduce using rule 102 (if_statement -> IF condicion_compleja block .)
    DEFAULT         reduce using rule 102 (if_statement -> IF condicion_compleja block .)
    RETURN          reduce using rule 102 (if_statement -> IF condicion_compleja block .)
    ELSE            shift and go to state 161


state 134

    (42) condicion_compleja -> condicion operadorLogico . condicion
    (43) condicion_compleja -> condicion operadorLogico . condicion_compleja
    (41) condicion -> . expression comparador expression
    (42) condicion_compleja -> . condicion operadorLogico condicion
    (43) condicion_compleja -> . condicion operadorLogico condicion_compleja
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (86) expression -> . NUMBER
    (87) expression -> . IDENTIFIER
    (88) expression -> . RUNE
    (89) expression -> . STRING
    (90) expression -> . RAW_STRING
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . NIL
    (94) expression -> . expression operator expression
    (100) expression -> . MINUS expression
    (101) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 25
    IDENTIFIER      shift and go to state 79
    RUNE            shift and go to state 26
    STRING          shift and go to state 27
    RAW_STRING      shift and go to state 28
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    NIL             shift and go to state 31
    MINUS           shift and go to state 32
    LPAREN          shift and go to state 33

    condicion                      shift and go to state 162
    condicion_compleja             shift and go to state 163
    expression                     shift and go to state 21

state 135

    (35) expression -> expression comparador expression .
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (94) expression -> expression . operator expression
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (95) operator -> . PLUS
    (96) operator -> . MINUS
    (97) operator -> . TIMES
    (98) operator -> . DIVIDE
    (99) operator -> . MOD

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    RPAREN          reduce using rule 35 (expression -> expression comparador expression .)
    LBRACE          reduce using rule 35 (expression -> expression comparador expression .)
    SEMICOLON       reduce using rule 35 (expression -> expression comparador expression .)
    TYPE            reduce using rule 35 (expression -> expression comparador expression .)
    IDENTIFIER      reduce using rule 35 (expression -> expression comparador expression .)
    FOR             reduce using rule 35 (expression -> expression comparador expression .)
    CONST           reduce using rule 35 (expression -> expression comparador expression .)
    FUNC            reduce using rule 35 (expression -> expression comparador expression .)
    $end            reduce using rule 35 (expression -> expression comparador expression .)
    COMMA           reduce using rule 35 (expression -> expression comparador expression .)
    VAR             reduce using rule 35 (expression -> expression comparador expression .)
    PACKAGE         reduce using rule 35 (expression -> expression comparador expression .)
    IMPORT          reduce using rule 35 (expression -> expression comparador expression .)
    SWITCH          reduce using rule 35 (expression -> expression comparador expression .)
    IF              reduce using rule 35 (expression -> expression comparador expression .)
    RBRACE          reduce using rule 35 (expression -> expression comparador expression .)
    CASE            reduce using rule 35 (expression -> expression comparador expression .)
    DEFAULT         reduce using rule 35 (expression -> expression comparador expression .)
    RETURN          reduce using rule 35 (expression -> expression comparador expression .)
    COLON           reduce using rule 35 (expression -> expression comparador expression .)
    EQ              shift and go to state 44
    NEQ             shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    GE              shift and go to state 48
    LE              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MOD             shift and go to state 56

  ! EQ              [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! NEQ             [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! GT              [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! LT              [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! GE              [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! LE              [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! AND             [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! OR              [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! PLUS            [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! MINUS           [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! TIMES           [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! DIVIDE          [ reduce using rule 35 (expression -> expression comparador expression .) ]
  ! MOD             [ reduce using rule 35 (expression -> expression comparador expression .) ]

    comparador                     shift and go to state 105
    operadorLogico                 shift and go to state 42
    operator                       shift and go to state 43

state 136

    (71) param -> IDENTIFIER DATATYPE .

    COMMA           reduce using rule 71 (param -> IDENTIFIER DATATYPE .)
    RPAREN          reduce using rule 71 (param -> IDENTIFIER DATATYPE .)


state 137

    (66) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN . DATATYPE LBRACE sentencias RETURN expression RBRACE

    DATATYPE        shift and go to state 164


state 138

    (70) params -> param COMMA . params
    (69) params -> . param
    (70) params -> . param COMMA params
    (71) param -> . IDENTIFIER DATATYPE

    IDENTIFIER      shift and go to state 108

    param                          shift and go to state 112
    params                         shift and go to state 165

state 139

    (109) parameter -> IDENTIFIER FUNC LPAREN . parameters RPAREN DATATYPE
    (105) parameters -> . parameters COMMA parameter
    (106) parameters -> . parameter
    (107) parameters -> . empty
    (108) parameter -> . IDENTIFIER DATATYPE
    (109) parameter -> . IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE
    (52) empty -> .

    IDENTIFIER      shift and go to state 145
    RPAREN          reduce using rule 52 (empty -> .)
    COMMA           reduce using rule 52 (empty -> .)

    parameters                     shift and go to state 166
    parameter                      shift and go to state 85
    empty                          shift and go to state 86

state 140

    (79) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN . IDENTIFIER LPAREN arguments RPAREN block

    IDENTIFIER      shift and go to state 167


state 141

    (104) function_literal -> FUNC LPAREN parameters RPAREN return_type . block
    (84) block -> . LBRACE sentencias RBRACE
    (85) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 24

    block                          shift and go to state 168

state 142

    (110) return_type -> DATATYPE .

    LBRACE          reduce using rule 110 (return_type -> DATATYPE .)


state 143

    (111) return_type -> empty .

    LBRACE          reduce using rule 111 (return_type -> empty .)


state 144

    (105) parameters -> parameters COMMA parameter .

    RPAREN          reduce using rule 105 (parameters -> parameters COMMA parameter .)
    COMMA           reduce using rule 105 (parameters -> parameters COMMA parameter .)


state 145

    (108) parameter -> IDENTIFIER . DATATYPE
    (109) parameter -> IDENTIFIER . FUNC LPAREN parameters RPAREN DATATYPE

    DATATYPE        shift and go to state 115
    FUNC            shift and go to state 113


state 146

    (76) struct_field -> IDENTIFIER DATATYPE .

    RBRACE          reduce using rule 76 (struct_field -> IDENTIFIER DATATYPE .)
    IDENTIFIER      reduce using rule 76 (struct_field -> IDENTIFIER DATATYPE .)


state 147

    (75) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .

    TYPE            reduce using rule 75 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    IDENTIFIER      reduce using rule 75 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    FOR             reduce using rule 75 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    CONST           reduce using rule 75 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    FUNC            reduce using rule 75 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    $end            reduce using rule 75 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    VAR             reduce using rule 75 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    PACKAGE         reduce using rule 75 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    IMPORT          reduce using rule 75 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    SWITCH          reduce using rule 75 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    IF              reduce using rule 75 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    RBRACE          reduce using rule 75 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    CASE            reduce using rule 75 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    DEFAULT         reduce using rule 75 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    RETURN          reduce using rule 75 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)


state 148

    (78) struct_fields -> struct_fields struct_field .

    RBRACE          reduce using rule 78 (struct_fields -> struct_fields struct_field .)
    IDENTIFIER      reduce using rule 78 (struct_fields -> struct_fields struct_field .)


state 149

    (74) print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .

    TYPE            reduce using rule 74 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IDENTIFIER      reduce using rule 74 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FOR             reduce using rule 74 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    CONST           reduce using rule 74 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FUNC            reduce using rule 74 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    $end            reduce using rule 74 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    VAR             reduce using rule 74 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PACKAGE         reduce using rule 74 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IMPORT          reduce using rule 74 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SWITCH          reduce using rule 74 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IF              reduce using rule 74 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 74 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    CASE            reduce using rule 74 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DEFAULT         reduce using rule 74 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RETURN          reduce using rule 74 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)


state 150

    (38) argument_list -> argument_list COMMA . expression
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (86) expression -> . NUMBER
    (87) expression -> . IDENTIFIER
    (88) expression -> . RUNE
    (89) expression -> . STRING
    (90) expression -> . RAW_STRING
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . NIL
    (94) expression -> . expression operator expression
    (100) expression -> . MINUS expression
    (101) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 25
    IDENTIFIER      shift and go to state 79
    RUNE            shift and go to state 26
    STRING          shift and go to state 27
    RAW_STRING      shift and go to state 28
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    NIL             shift and go to state 31
    MINUS           shift and go to state 32
    LPAREN          shift and go to state 33

    expression                     shift and go to state 169

state 151

    (80) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression . block
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (94) expression -> expression . operator expression
    (84) block -> . LBRACE sentencias RBRACE
    (85) block -> . LBRACE RBRACE
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (95) operator -> . PLUS
    (96) operator -> . MINUS
    (97) operator -> . TIMES
    (98) operator -> . DIVIDE
    (99) operator -> . MOD

    LBRACE          shift and go to state 24
    EQ              shift and go to state 44
    NEQ             shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    GE              shift and go to state 48
    LE              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MOD             shift and go to state 56

    block                          shift and go to state 170
    comparador                     shift and go to state 105
    operadorLogico                 shift and go to state 42
    operator                       shift and go to state 43

state 152

    (60) mapLiteral -> MAP LBRACKET . DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE

    DATATYPE        shift and go to state 171


state 153

    (27) input -> IDENTIFIER DOT IDENTIFIER LPAREN . AMPERSAND IDENTIFIER RPAREN
    (74) print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN . argument_list_opt RPAREN
    (39) argument_list_opt -> . argument_list
    (40) argument_list_opt -> .
    (37) argument_list -> . expression
    (38) argument_list -> . argument_list COMMA expression
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (86) expression -> . NUMBER
    (87) expression -> . IDENTIFIER
    (88) expression -> . RUNE
    (89) expression -> . STRING
    (90) expression -> . RAW_STRING
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . NIL
    (94) expression -> . expression operator expression
    (100) expression -> . MINUS expression
    (101) expression -> . LPAREN expression RPAREN

    AMPERSAND       shift and go to state 172
    RPAREN          reduce using rule 40 (argument_list_opt -> .)
    NUMBER          shift and go to state 25
    IDENTIFIER      shift and go to state 79
    RUNE            shift and go to state 26
    STRING          shift and go to state 27
    RAW_STRING      shift and go to state 28
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    NIL             shift and go to state 31
    MINUS           shift and go to state 32
    LPAREN          shift and go to state 33

    argument_list_opt              shift and go to state 121
    argument_list                  shift and go to state 122
    expression                     shift and go to state 123

state 154

    (32) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .

    IDENTIFIER      reduce using rule 32 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    VAR             reduce using rule 32 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TYPE            reduce using rule 32 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FOR             reduce using rule 32 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PACKAGE         reduce using rule 32 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IMPORT          reduce using rule 32 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SWITCH          reduce using rule 32 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IF              reduce using rule 32 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 32 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    CASE            reduce using rule 32 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DEFAULT         reduce using rule 32 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RETURN          reduce using rule 32 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)


state 155

    (30) assignment -> VAR IDENTIFIER DATATYPE ASSIGN . expression
    (31) assignment -> VAR IDENTIFIER DATATYPE ASSIGN . llamarFuncion
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (86) expression -> . NUMBER
    (87) expression -> . IDENTIFIER
    (88) expression -> . RUNE
    (89) expression -> . STRING
    (90) expression -> . RAW_STRING
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . NIL
    (94) expression -> . expression operator expression
    (100) expression -> . MINUS expression
    (101) expression -> . LPAREN expression RPAREN
    (32) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 25
    IDENTIFIER      shift and go to state 173
    RUNE            shift and go to state 26
    STRING          shift and go to state 27
    RAW_STRING      shift and go to state 28
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    NIL             shift and go to state 31
    MINUS           shift and go to state 32
    LPAREN          shift and go to state 33

    expression                     shift and go to state 174
    llamarFuncion                  shift and go to state 175

state 156

    (59) map -> VAR IDENTIFIER ASSIGN mapLiteral .

    IDENTIFIER      reduce using rule 59 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    VAR             reduce using rule 59 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    TYPE            reduce using rule 59 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    FOR             reduce using rule 59 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    PACKAGE         reduce using rule 59 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    IMPORT          reduce using rule 59 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    SWITCH          reduce using rule 59 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    IF              reduce using rule 59 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    RBRACE          reduce using rule 59 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    CASE            reduce using rule 59 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    DEFAULT         reduce using rule 59 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    RETURN          reduce using rule 59 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)


state 157

    (53) switch -> SWITCH expression LBRACE caseBlocks . RBRACE

    RBRACE          shift and go to state 176


state 158

    (54) caseBlocks -> caseBlock .
    (55) caseBlocks -> caseBlock . caseBlocks
    (54) caseBlocks -> . caseBlock
    (55) caseBlocks -> . caseBlock caseBlocks
    (56) caseBlock -> . CASE expression COLON sentencias
    (57) caseBlock -> . DEFAULT COLON sentencias

    RBRACE          reduce using rule 54 (caseBlocks -> caseBlock .)
    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160

    caseBlock                      shift and go to state 158
    caseBlocks                     shift and go to state 177

state 159

    (56) caseBlock -> CASE . expression COLON sentencias
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (86) expression -> . NUMBER
    (87) expression -> . IDENTIFIER
    (88) expression -> . RUNE
    (89) expression -> . STRING
    (90) expression -> . RAW_STRING
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . NIL
    (94) expression -> . expression operator expression
    (100) expression -> . MINUS expression
    (101) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 25
    IDENTIFIER      shift and go to state 79
    RUNE            shift and go to state 26
    STRING          shift and go to state 27
    RAW_STRING      shift and go to state 28
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    NIL             shift and go to state 31
    MINUS           shift and go to state 32
    LPAREN          shift and go to state 33

    expression                     shift and go to state 178

state 160

    (57) caseBlock -> DEFAULT . COLON sentencias

    COLON           shift and go to state 179


state 161

    (103) if_statement -> IF condicion_compleja block ELSE . block
    (84) block -> . LBRACE sentencias RBRACE
    (85) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 24

    block                          shift and go to state 180

state 162

    (42) condicion_compleja -> condicion operadorLogico condicion .
    (42) condicion_compleja -> condicion . operadorLogico condicion
    (43) condicion_compleja -> condicion . operadorLogico condicion_compleja
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR

    LBRACE          reduce using rule 42 (condicion_compleja -> condicion operadorLogico condicion .)
    AND             shift and go to state 50
    OR              shift and go to state 51

    operadorLogico                 shift and go to state 134

state 163

    (43) condicion_compleja -> condicion operadorLogico condicion_compleja .

    LBRACE          reduce using rule 43 (condicion_compleja -> condicion operadorLogico condicion_compleja .)


state 164

    (66) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN DATATYPE . LBRACE sentencias RETURN expression RBRACE

    LBRACE          shift and go to state 181


state 165

    (70) params -> param COMMA params .

    RPAREN          reduce using rule 70 (params -> param COMMA params .)


state 166

    (109) parameter -> IDENTIFIER FUNC LPAREN parameters . RPAREN DATATYPE
    (105) parameters -> parameters . COMMA parameter

    RPAREN          shift and go to state 182
    COMMA           shift and go to state 117


state 167

    (79) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER . LPAREN arguments RPAREN block

    LPAREN          shift and go to state 183


state 168

    (104) function_literal -> FUNC LPAREN parameters RPAREN return_type block .

    TYPE            reduce using rule 104 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    IDENTIFIER      reduce using rule 104 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    FOR             reduce using rule 104 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    CONST           reduce using rule 104 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    FUNC            reduce using rule 104 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    $end            reduce using rule 104 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)


state 169

    (38) argument_list -> argument_list COMMA expression .
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (94) expression -> expression . operator expression
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (95) operator -> . PLUS
    (96) operator -> . MINUS
    (97) operator -> . TIMES
    (98) operator -> . DIVIDE
    (99) operator -> . MOD

    COMMA           reduce using rule 38 (argument_list -> argument_list COMMA expression .)
    RPAREN          reduce using rule 38 (argument_list -> argument_list COMMA expression .)
    EQ              shift and go to state 44
    NEQ             shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    GE              shift and go to state 48
    LE              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MOD             shift and go to state 56

    comparador                     shift and go to state 105
    operadorLogico                 shift and go to state 42
    operator                       shift and go to state 43

state 170

    (80) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .

    TYPE            reduce using rule 80 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    IDENTIFIER      reduce using rule 80 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    FOR             reduce using rule 80 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    CONST           reduce using rule 80 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    FUNC            reduce using rule 80 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    $end            reduce using rule 80 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    VAR             reduce using rule 80 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    PACKAGE         reduce using rule 80 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    IMPORT          reduce using rule 80 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    SWITCH          reduce using rule 80 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    IF              reduce using rule 80 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    RBRACE          reduce using rule 80 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    CASE            reduce using rule 80 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    DEFAULT         reduce using rule 80 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    RETURN          reduce using rule 80 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)


state 171

    (60) mapLiteral -> MAP LBRACKET DATATYPE . RBRACKET DATATYPE LBRACE mapEntries RBRACE

    RBRACKET        shift and go to state 184


state 172

    (27) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND . IDENTIFIER RPAREN

    IDENTIFIER      shift and go to state 185


state 173

    (87) expression -> IDENTIFIER .
    (32) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN

    EQ              reduce using rule 87 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 87 (expression -> IDENTIFIER .)
    GT              reduce using rule 87 (expression -> IDENTIFIER .)
    LT              reduce using rule 87 (expression -> IDENTIFIER .)
    GE              reduce using rule 87 (expression -> IDENTIFIER .)
    LE              reduce using rule 87 (expression -> IDENTIFIER .)
    AND             reduce using rule 87 (expression -> IDENTIFIER .)
    OR              reduce using rule 87 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 87 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 87 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 87 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 87 (expression -> IDENTIFIER .)
    MOD             reduce using rule 87 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 87 (expression -> IDENTIFIER .)
    VAR             reduce using rule 87 (expression -> IDENTIFIER .)
    TYPE            reduce using rule 87 (expression -> IDENTIFIER .)
    FOR             reduce using rule 87 (expression -> IDENTIFIER .)
    PACKAGE         reduce using rule 87 (expression -> IDENTIFIER .)
    IMPORT          reduce using rule 87 (expression -> IDENTIFIER .)
    SWITCH          reduce using rule 87 (expression -> IDENTIFIER .)
    IF              reduce using rule 87 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 87 (expression -> IDENTIFIER .)
    CASE            reduce using rule 87 (expression -> IDENTIFIER .)
    DEFAULT         reduce using rule 87 (expression -> IDENTIFIER .)
    RETURN          reduce using rule 87 (expression -> IDENTIFIER .)
    LPAREN          shift and go to state 98


state 174

    (30) assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (94) expression -> expression . operator expression
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (95) operator -> . PLUS
    (96) operator -> . MINUS
    (97) operator -> . TIMES
    (98) operator -> . DIVIDE
    (99) operator -> . MOD

    IDENTIFIER      reduce using rule 30 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    VAR             reduce using rule 30 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    TYPE            reduce using rule 30 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    FOR             reduce using rule 30 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    PACKAGE         reduce using rule 30 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    IMPORT          reduce using rule 30 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    SWITCH          reduce using rule 30 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    IF              reduce using rule 30 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    RBRACE          reduce using rule 30 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    CASE            reduce using rule 30 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    DEFAULT         reduce using rule 30 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    RETURN          reduce using rule 30 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    EQ              shift and go to state 44
    NEQ             shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    GE              shift and go to state 48
    LE              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MOD             shift and go to state 56

    comparador                     shift and go to state 105
    operadorLogico                 shift and go to state 42
    operator                       shift and go to state 43

state 175

    (31) assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .

    IDENTIFIER      reduce using rule 31 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    VAR             reduce using rule 31 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    TYPE            reduce using rule 31 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    FOR             reduce using rule 31 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    PACKAGE         reduce using rule 31 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    IMPORT          reduce using rule 31 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    SWITCH          reduce using rule 31 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    IF              reduce using rule 31 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    RBRACE          reduce using rule 31 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    CASE            reduce using rule 31 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    DEFAULT         reduce using rule 31 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    RETURN          reduce using rule 31 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)


state 176

    (53) switch -> SWITCH expression LBRACE caseBlocks RBRACE .

    IDENTIFIER      reduce using rule 53 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    VAR             reduce using rule 53 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    TYPE            reduce using rule 53 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    FOR             reduce using rule 53 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    PACKAGE         reduce using rule 53 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    IMPORT          reduce using rule 53 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    SWITCH          reduce using rule 53 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    IF              reduce using rule 53 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    RBRACE          reduce using rule 53 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    CASE            reduce using rule 53 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    DEFAULT         reduce using rule 53 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    RETURN          reduce using rule 53 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)


state 177

    (55) caseBlocks -> caseBlock caseBlocks .

    RBRACE          reduce using rule 55 (caseBlocks -> caseBlock caseBlocks .)


state 178

    (56) caseBlock -> CASE expression . COLON sentencias
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (94) expression -> expression . operator expression
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (95) operator -> . PLUS
    (96) operator -> . MINUS
    (97) operator -> . TIMES
    (98) operator -> . DIVIDE
    (99) operator -> . MOD

    COLON           shift and go to state 186
    EQ              shift and go to state 44
    NEQ             shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    GE              shift and go to state 48
    LE              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MOD             shift and go to state 56

    comparador                     shift and go to state 105
    operadorLogico                 shift and go to state 42
    operator                       shift and go to state 43

state 179

    (57) caseBlock -> DEFAULT COLON . sentencias
    (14) sentencias -> . sentencia
    (15) sentencias -> . sentencia sentencias
    (16) sentencia -> . assignment
    (17) sentencia -> . input
    (18) sentencia -> . llamarFuncion
    (19) sentencia -> . print_statement
    (20) sentencia -> . struct_definition
    (21) sentencia -> . for_statement
    (22) sentencia -> . package
    (23) sentencia -> . import
    (24) sentencia -> . switch
    (25) sentencia -> . map
    (26) sentencia -> . if_statement
    (29) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (30) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (31) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (27) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (32) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (74) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (75) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (80) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (82) for_statement -> . FOR condicion block
    (83) for_statement -> . FOR block
    (72) package -> . PACKAGE MAIN
    (73) import -> . IMPORT STRING
    (53) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (58) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (59) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (102) if_statement -> . IF condicion_compleja block
    (103) if_statement -> . IF condicion_compleja block ELSE block

    IDENTIFIER      shift and go to state 72
    VAR             shift and go to state 73
    TYPE            shift and go to state 11
    FOR             shift and go to state 13
    PACKAGE         shift and go to state 74
    IMPORT          shift and go to state 75
    SWITCH          shift and go to state 76
    IF              shift and go to state 77

    sentencias                     shift and go to state 187
    sentencia                      shift and go to state 60
    assignment                     shift and go to state 61
    input                          shift and go to state 62
    llamarFuncion                  shift and go to state 63
    print_statement                shift and go to state 64
    struct_definition              shift and go to state 65
    for_statement                  shift and go to state 66
    package                        shift and go to state 67
    import                         shift and go to state 68
    switch                         shift and go to state 69
    map                            shift and go to state 70
    if_statement                   shift and go to state 71

state 180

    (103) if_statement -> IF condicion_compleja block ELSE block .

    IDENTIFIER      reduce using rule 103 (if_statement -> IF condicion_compleja block ELSE block .)
    VAR             reduce using rule 103 (if_statement -> IF condicion_compleja block ELSE block .)
    TYPE            reduce using rule 103 (if_statement -> IF condicion_compleja block ELSE block .)
    FOR             reduce using rule 103 (if_statement -> IF condicion_compleja block ELSE block .)
    PACKAGE         reduce using rule 103 (if_statement -> IF condicion_compleja block ELSE block .)
    IMPORT          reduce using rule 103 (if_statement -> IF condicion_compleja block ELSE block .)
    SWITCH          reduce using rule 103 (if_statement -> IF condicion_compleja block ELSE block .)
    IF              reduce using rule 103 (if_statement -> IF condicion_compleja block ELSE block .)
    RBRACE          reduce using rule 103 (if_statement -> IF condicion_compleja block ELSE block .)
    CASE            reduce using rule 103 (if_statement -> IF condicion_compleja block ELSE block .)
    DEFAULT         reduce using rule 103 (if_statement -> IF condicion_compleja block ELSE block .)
    RETURN          reduce using rule 103 (if_statement -> IF condicion_compleja block ELSE block .)


state 181

    (66) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN DATATYPE LBRACE . sentencias RETURN expression RBRACE
    (14) sentencias -> . sentencia
    (15) sentencias -> . sentencia sentencias
    (16) sentencia -> . assignment
    (17) sentencia -> . input
    (18) sentencia -> . llamarFuncion
    (19) sentencia -> . print_statement
    (20) sentencia -> . struct_definition
    (21) sentencia -> . for_statement
    (22) sentencia -> . package
    (23) sentencia -> . import
    (24) sentencia -> . switch
    (25) sentencia -> . map
    (26) sentencia -> . if_statement
    (29) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (30) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (31) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (27) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (32) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (74) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (75) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (80) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (82) for_statement -> . FOR condicion block
    (83) for_statement -> . FOR block
    (72) package -> . PACKAGE MAIN
    (73) import -> . IMPORT STRING
    (53) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (58) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (59) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (102) if_statement -> . IF condicion_compleja block
    (103) if_statement -> . IF condicion_compleja block ELSE block

    IDENTIFIER      shift and go to state 72
    VAR             shift and go to state 73
    TYPE            shift and go to state 11
    FOR             shift and go to state 13
    PACKAGE         shift and go to state 74
    IMPORT          shift and go to state 75
    SWITCH          shift and go to state 76
    IF              shift and go to state 77

    sentencias                     shift and go to state 188
    sentencia                      shift and go to state 60
    assignment                     shift and go to state 61
    input                          shift and go to state 62
    llamarFuncion                  shift and go to state 63
    print_statement                shift and go to state 64
    struct_definition              shift and go to state 65
    for_statement                  shift and go to state 66
    package                        shift and go to state 67
    import                         shift and go to state 68
    switch                         shift and go to state 69
    map                            shift and go to state 70
    if_statement                   shift and go to state 71

state 182

    (109) parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN . DATATYPE

    DATATYPE        shift and go to state 189


state 183

    (79) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN . arguments RPAREN block
    (2) arguments -> . expression
    (3) arguments -> . expression COMMA arguments
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (86) expression -> . NUMBER
    (87) expression -> . IDENTIFIER
    (88) expression -> . RUNE
    (89) expression -> . STRING
    (90) expression -> . RAW_STRING
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . NIL
    (94) expression -> . expression operator expression
    (100) expression -> . MINUS expression
    (101) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 25
    IDENTIFIER      shift and go to state 79
    RUNE            shift and go to state 26
    STRING          shift and go to state 27
    RAW_STRING      shift and go to state 28
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    NIL             shift and go to state 31
    MINUS           shift and go to state 32
    LPAREN          shift and go to state 33

    arguments                      shift and go to state 190
    expression                     shift and go to state 191

state 184

    (60) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET . DATATYPE LBRACE mapEntries RBRACE

    DATATYPE        shift and go to state 192


state 185

    (27) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER . RPAREN

    RPAREN          shift and go to state 193


state 186

    (56) caseBlock -> CASE expression COLON . sentencias
    (14) sentencias -> . sentencia
    (15) sentencias -> . sentencia sentencias
    (16) sentencia -> . assignment
    (17) sentencia -> . input
    (18) sentencia -> . llamarFuncion
    (19) sentencia -> . print_statement
    (20) sentencia -> . struct_definition
    (21) sentencia -> . for_statement
    (22) sentencia -> . package
    (23) sentencia -> . import
    (24) sentencia -> . switch
    (25) sentencia -> . map
    (26) sentencia -> . if_statement
    (29) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (30) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (31) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (27) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (32) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (74) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (75) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (80) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (82) for_statement -> . FOR condicion block
    (83) for_statement -> . FOR block
    (72) package -> . PACKAGE MAIN
    (73) import -> . IMPORT STRING
    (53) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (58) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (59) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (102) if_statement -> . IF condicion_compleja block
    (103) if_statement -> . IF condicion_compleja block ELSE block

    IDENTIFIER      shift and go to state 72
    VAR             shift and go to state 73
    TYPE            shift and go to state 11
    FOR             shift and go to state 13
    PACKAGE         shift and go to state 74
    IMPORT          shift and go to state 75
    SWITCH          shift and go to state 76
    IF              shift and go to state 77

    sentencias                     shift and go to state 194
    sentencia                      shift and go to state 60
    assignment                     shift and go to state 61
    input                          shift and go to state 62
    llamarFuncion                  shift and go to state 63
    print_statement                shift and go to state 64
    struct_definition              shift and go to state 65
    for_statement                  shift and go to state 66
    package                        shift and go to state 67
    import                         shift and go to state 68
    switch                         shift and go to state 69
    map                            shift and go to state 70
    if_statement                   shift and go to state 71

state 187

    (57) caseBlock -> DEFAULT COLON sentencias .

    CASE            reduce using rule 57 (caseBlock -> DEFAULT COLON sentencias .)
    DEFAULT         reduce using rule 57 (caseBlock -> DEFAULT COLON sentencias .)
    RBRACE          reduce using rule 57 (caseBlock -> DEFAULT COLON sentencias .)


state 188

    (66) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN DATATYPE LBRACE sentencias . RETURN expression RBRACE

    RETURN          shift and go to state 195


state 189

    (109) parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE .

    RPAREN          reduce using rule 109 (parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE .)
    COMMA           reduce using rule 109 (parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE .)


state 190

    (79) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments . RPAREN block

    RPAREN          shift and go to state 196


state 191

    (2) arguments -> expression .
    (3) arguments -> expression . COMMA arguments
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (94) expression -> expression . operator expression
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (95) operator -> . PLUS
    (96) operator -> . MINUS
    (97) operator -> . TIMES
    (98) operator -> . DIVIDE
    (99) operator -> . MOD

    RPAREN          reduce using rule 2 (arguments -> expression .)
    COMMA           shift and go to state 197
    EQ              shift and go to state 44
    NEQ             shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    GE              shift and go to state 48
    LE              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MOD             shift and go to state 56

    comparador                     shift and go to state 105
    operadorLogico                 shift and go to state 42
    operator                       shift and go to state 43

state 192

    (60) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE . LBRACE mapEntries RBRACE

    LBRACE          shift and go to state 198


state 193

    (27) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .

    IDENTIFIER      reduce using rule 27 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    VAR             reduce using rule 27 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    TYPE            reduce using rule 27 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    FOR             reduce using rule 27 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    PACKAGE         reduce using rule 27 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    IMPORT          reduce using rule 27 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    SWITCH          reduce using rule 27 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    IF              reduce using rule 27 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    RBRACE          reduce using rule 27 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    CASE            reduce using rule 27 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    DEFAULT         reduce using rule 27 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    RETURN          reduce using rule 27 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)


state 194

    (56) caseBlock -> CASE expression COLON sentencias .

    CASE            reduce using rule 56 (caseBlock -> CASE expression COLON sentencias .)
    DEFAULT         reduce using rule 56 (caseBlock -> CASE expression COLON sentencias .)
    RBRACE          reduce using rule 56 (caseBlock -> CASE expression COLON sentencias .)


state 195

    (66) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN DATATYPE LBRACE sentencias RETURN . expression RBRACE
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (86) expression -> . NUMBER
    (87) expression -> . IDENTIFIER
    (88) expression -> . RUNE
    (89) expression -> . STRING
    (90) expression -> . RAW_STRING
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . NIL
    (94) expression -> . expression operator expression
    (100) expression -> . MINUS expression
    (101) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 25
    IDENTIFIER      shift and go to state 79
    RUNE            shift and go to state 26
    STRING          shift and go to state 27
    RAW_STRING      shift and go to state 28
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    NIL             shift and go to state 31
    MINUS           shift and go to state 32
    LPAREN          shift and go to state 33

    expression                     shift and go to state 199

state 196

    (79) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN . block
    (84) block -> . LBRACE sentencias RBRACE
    (85) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 24

    block                          shift and go to state 200

state 197

    (3) arguments -> expression COMMA . arguments
    (2) arguments -> . expression
    (3) arguments -> . expression COMMA arguments
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (86) expression -> . NUMBER
    (87) expression -> . IDENTIFIER
    (88) expression -> . RUNE
    (89) expression -> . STRING
    (90) expression -> . RAW_STRING
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . NIL
    (94) expression -> . expression operator expression
    (100) expression -> . MINUS expression
    (101) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 25
    IDENTIFIER      shift and go to state 79
    RUNE            shift and go to state 26
    STRING          shift and go to state 27
    RAW_STRING      shift and go to state 28
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    NIL             shift and go to state 31
    MINUS           shift and go to state 32
    LPAREN          shift and go to state 33

    expression                     shift and go to state 191
    arguments                      shift and go to state 201

state 198

    (60) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE . mapEntries RBRACE
    (61) mapEntries -> . mapEntry
    (62) mapEntries -> . mapEntry COMMA mapEntries
    (63) mapEntry -> . value_key COLON value_key
    (64) value_key -> . expression
    (65) value_key -> . STRING
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (86) expression -> . NUMBER
    (87) expression -> . IDENTIFIER
    (88) expression -> . RUNE
    (89) expression -> . STRING
    (90) expression -> . RAW_STRING
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . NIL
    (94) expression -> . expression operator expression
    (100) expression -> . MINUS expression
    (101) expression -> . LPAREN expression RPAREN

    STRING          shift and go to state 206
    NUMBER          shift and go to state 25
    IDENTIFIER      shift and go to state 79
    RUNE            shift and go to state 26
    RAW_STRING      shift and go to state 28
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    NIL             shift and go to state 31
    MINUS           shift and go to state 32
    LPAREN          shift and go to state 33

    mapEntries                     shift and go to state 202
    mapEntry                       shift and go to state 203
    value_key                      shift and go to state 204
    expression                     shift and go to state 205

state 199

    (66) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN DATATYPE LBRACE sentencias RETURN expression . RBRACE
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (94) expression -> expression . operator expression
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (95) operator -> . PLUS
    (96) operator -> . MINUS
    (97) operator -> . TIMES
    (98) operator -> . DIVIDE
    (99) operator -> . MOD

    RBRACE          shift and go to state 207
    EQ              shift and go to state 44
    NEQ             shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    GE              shift and go to state 48
    LE              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MOD             shift and go to state 56

    comparador                     shift and go to state 105
    operadorLogico                 shift and go to state 42
    operator                       shift and go to state 43

state 200

    (79) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .

    TYPE            reduce using rule 79 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    IDENTIFIER      reduce using rule 79 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    FOR             reduce using rule 79 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    CONST           reduce using rule 79 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    FUNC            reduce using rule 79 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    $end            reduce using rule 79 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)


state 201

    (3) arguments -> expression COMMA arguments .

    RPAREN          reduce using rule 3 (arguments -> expression COMMA arguments .)


state 202

    (60) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries . RBRACE

    RBRACE          shift and go to state 208


state 203

    (61) mapEntries -> mapEntry .
    (62) mapEntries -> mapEntry . COMMA mapEntries

    RBRACE          reduce using rule 61 (mapEntries -> mapEntry .)
    COMMA           shift and go to state 209


state 204

    (63) mapEntry -> value_key . COLON value_key

    COLON           shift and go to state 210


state 205

    (64) value_key -> expression .
    (35) expression -> expression . comparador expression
    (36) expression -> expression . operadorLogico expression
    (94) expression -> expression . operator expression
    (46) comparador -> . EQ
    (47) comparador -> . NEQ
    (48) comparador -> . GT
    (49) comparador -> . LT
    (50) comparador -> . GE
    (51) comparador -> . LE
    (44) operadorLogico -> . AND
    (45) operadorLogico -> . OR
    (95) operator -> . PLUS
    (96) operator -> . MINUS
    (97) operator -> . TIMES
    (98) operator -> . DIVIDE
    (99) operator -> . MOD

    COLON           reduce using rule 64 (value_key -> expression .)
    COMMA           reduce using rule 64 (value_key -> expression .)
    RBRACE          reduce using rule 64 (value_key -> expression .)
    EQ              shift and go to state 44
    NEQ             shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    GE              shift and go to state 48
    LE              shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MOD             shift and go to state 56

    comparador                     shift and go to state 105
    operadorLogico                 shift and go to state 42
    operator                       shift and go to state 43

state 206

    (65) value_key -> STRING .
    (89) expression -> STRING .

  ! reduce/reduce conflict for COLON resolved using rule 65 (value_key -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 65 (value_key -> STRING .)
  ! reduce/reduce conflict for RBRACE resolved using rule 65 (value_key -> STRING .)
    COLON           reduce using rule 65 (value_key -> STRING .)
    COMMA           reduce using rule 65 (value_key -> STRING .)
    RBRACE          reduce using rule 65 (value_key -> STRING .)
    EQ              reduce using rule 89 (expression -> STRING .)
    NEQ             reduce using rule 89 (expression -> STRING .)
    GT              reduce using rule 89 (expression -> STRING .)
    LT              reduce using rule 89 (expression -> STRING .)
    GE              reduce using rule 89 (expression -> STRING .)
    LE              reduce using rule 89 (expression -> STRING .)
    AND             reduce using rule 89 (expression -> STRING .)
    OR              reduce using rule 89 (expression -> STRING .)
    PLUS            reduce using rule 89 (expression -> STRING .)
    MINUS           reduce using rule 89 (expression -> STRING .)
    TIMES           reduce using rule 89 (expression -> STRING .)
    DIVIDE          reduce using rule 89 (expression -> STRING .)
    MOD             reduce using rule 89 (expression -> STRING .)

  ! COLON           [ reduce using rule 89 (expression -> STRING .) ]
  ! COMMA           [ reduce using rule 89 (expression -> STRING .) ]
  ! RBRACE          [ reduce using rule 89 (expression -> STRING .) ]


state 207

    (66) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN DATATYPE LBRACE sentencias RETURN expression RBRACE .

    TYPE            reduce using rule 66 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN DATATYPE LBRACE sentencias RETURN expression RBRACE .)
    IDENTIFIER      reduce using rule 66 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN DATATYPE LBRACE sentencias RETURN expression RBRACE .)
    FOR             reduce using rule 66 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN DATATYPE LBRACE sentencias RETURN expression RBRACE .)
    CONST           reduce using rule 66 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN DATATYPE LBRACE sentencias RETURN expression RBRACE .)
    FUNC            reduce using rule 66 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN DATATYPE LBRACE sentencias RETURN expression RBRACE .)
    $end            reduce using rule 66 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN DATATYPE LBRACE sentencias RETURN expression RBRACE .)


state 208

    (60) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .

    IDENTIFIER      reduce using rule 60 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    VAR             reduce using rule 60 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    TYPE            reduce using rule 60 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    FOR             reduce using rule 60 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    PACKAGE         reduce using rule 60 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    IMPORT          reduce using rule 60 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    SWITCH          reduce using rule 60 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    IF              reduce using rule 60 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    RBRACE          reduce using rule 60 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    CASE            reduce using rule 60 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    DEFAULT         reduce using rule 60 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    RETURN          reduce using rule 60 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)


state 209

    (62) mapEntries -> mapEntry COMMA . mapEntries
    (61) mapEntries -> . mapEntry
    (62) mapEntries -> . mapEntry COMMA mapEntries
    (63) mapEntry -> . value_key COLON value_key
    (64) value_key -> . expression
    (65) value_key -> . STRING
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (86) expression -> . NUMBER
    (87) expression -> . IDENTIFIER
    (88) expression -> . RUNE
    (89) expression -> . STRING
    (90) expression -> . RAW_STRING
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . NIL
    (94) expression -> . expression operator expression
    (100) expression -> . MINUS expression
    (101) expression -> . LPAREN expression RPAREN

    STRING          shift and go to state 206
    NUMBER          shift and go to state 25
    IDENTIFIER      shift and go to state 79
    RUNE            shift and go to state 26
    RAW_STRING      shift and go to state 28
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    NIL             shift and go to state 31
    MINUS           shift and go to state 32
    LPAREN          shift and go to state 33

    mapEntry                       shift and go to state 203
    mapEntries                     shift and go to state 211
    value_key                      shift and go to state 204
    expression                     shift and go to state 205

state 210

    (63) mapEntry -> value_key COLON . value_key
    (64) value_key -> . expression
    (65) value_key -> . STRING
    (35) expression -> . expression comparador expression
    (36) expression -> . expression operadorLogico expression
    (86) expression -> . NUMBER
    (87) expression -> . IDENTIFIER
    (88) expression -> . RUNE
    (89) expression -> . STRING
    (90) expression -> . RAW_STRING
    (91) expression -> . TRUE
    (92) expression -> . FALSE
    (93) expression -> . NIL
    (94) expression -> . expression operator expression
    (100) expression -> . MINUS expression
    (101) expression -> . LPAREN expression RPAREN

    STRING          shift and go to state 206
    NUMBER          shift and go to state 25
    IDENTIFIER      shift and go to state 79
    RUNE            shift and go to state 26
    RAW_STRING      shift and go to state 28
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    NIL             shift and go to state 31
    MINUS           shift and go to state 32
    LPAREN          shift and go to state 33

    value_key                      shift and go to state 212
    expression                     shift and go to state 205

state 211

    (62) mapEntries -> mapEntry COMMA mapEntries .

    RBRACE          reduce using rule 62 (mapEntries -> mapEntry COMMA mapEntries .)


state 212

    (63) mapEntry -> value_key COLON value_key .

    COMMA           reduce using rule 63 (mapEntry -> value_key COLON value_key .)
    RBRACE          reduce using rule 63 (mapEntry -> value_key COLON value_key .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQ in state 90 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 90 resolved as shift
WARNING: shift/reduce conflict for GT in state 90 resolved as shift
WARNING: shift/reduce conflict for LT in state 90 resolved as shift
WARNING: shift/reduce conflict for GE in state 90 resolved as shift
WARNING: shift/reduce conflict for LE in state 90 resolved as shift
WARNING: shift/reduce conflict for AND in state 90 resolved as shift
WARNING: shift/reduce conflict for OR in state 90 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 90 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 90 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 90 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 90 resolved as shift
WARNING: shift/reduce conflict for MOD in state 90 resolved as shift
WARNING: shift/reduce conflict for EQ in state 91 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 91 resolved as shift
WARNING: shift/reduce conflict for GT in state 91 resolved as shift
WARNING: shift/reduce conflict for LT in state 91 resolved as shift
WARNING: shift/reduce conflict for GE in state 91 resolved as shift
WARNING: shift/reduce conflict for LE in state 91 resolved as shift
WARNING: shift/reduce conflict for AND in state 91 resolved as shift
WARNING: shift/reduce conflict for OR in state 91 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 91 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 91 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 91 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 91 resolved as shift
WARNING: shift/reduce conflict for MOD in state 91 resolved as shift
WARNING: shift/reduce conflict for EQ in state 92 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 92 resolved as shift
WARNING: shift/reduce conflict for GT in state 92 resolved as shift
WARNING: shift/reduce conflict for LT in state 92 resolved as shift
WARNING: shift/reduce conflict for GE in state 92 resolved as shift
WARNING: shift/reduce conflict for LE in state 92 resolved as shift
WARNING: shift/reduce conflict for AND in state 92 resolved as shift
WARNING: shift/reduce conflict for OR in state 92 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 92 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 92 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 92 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 92 resolved as shift
WARNING: shift/reduce conflict for MOD in state 92 resolved as shift
WARNING: shift/reduce conflict for EQ in state 135 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 135 resolved as shift
WARNING: shift/reduce conflict for GT in state 135 resolved as shift
WARNING: shift/reduce conflict for LT in state 135 resolved as shift
WARNING: shift/reduce conflict for GE in state 135 resolved as shift
WARNING: shift/reduce conflict for LE in state 135 resolved as shift
WARNING: shift/reduce conflict for AND in state 135 resolved as shift
WARNING: shift/reduce conflict for OR in state 135 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 135 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 135 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 135 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 135 resolved as shift
WARNING: shift/reduce conflict for MOD in state 135 resolved as shift
WARNING: reduce/reduce conflict in state 90 resolved using rule (expression -> expression comparador expression)
WARNING: rejected rule (condicion -> expression comparador expression) in state 90
WARNING: reduce/reduce conflict in state 206 resolved using rule (value_key -> STRING)
WARNING: rejected rule (expression -> STRING) in state 206
