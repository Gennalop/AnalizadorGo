Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CONTINUE
    DEFER
    FALLTHROUGH
    GO
    INTERFACE
    SELECT
    STRING_UNCLOSED

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list_opt -> statement_list
Rule 3     statement_list_opt -> <empty>
Rule 4     statement_list -> statement
Rule 5     statement_list -> statement_list statement
Rule 6     statement -> assignment
Rule 7     statement -> input
Rule 8     statement -> llamarFuncion
Rule 9     statement -> struct_definition
Rule 10    statement -> for_statement
Rule 11    statement -> package
Rule 12    statement -> import
Rule 13    statement -> switch
Rule 14    statement -> map
Rule 15    statement -> if_statement
Rule 16    statement -> function
Rule 17    statement -> method_definition
Rule 18    statement -> function_literal
Rule 19    statement -> var_declaration
Rule 20    statement -> slice_declaration
Rule 21    statement -> declare_assign
Rule 22    package -> PACKAGE MAIN
Rule 23    package -> PACKAGE IDENTIFIER
Rule 24    import -> IMPORT STRING
Rule 25    import -> IMPORT LPAREN import_list RPAREN
Rule 26    import_list -> STRING
Rule 27    import_list -> import_list STRING
Rule 28    arguments -> expression
Rule 29    arguments -> arguments COMMA expression
Rule 30    arguments -> <empty>
Rule 31    const_declaration -> CONST IDENTIFIER ASSIGN expression
Rule 32    input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
Rule 33    var_declaration -> VAR IDENTIFIER type_name
Rule 34    assignment -> IDENTIFIER DECLARE_ASSIGN expression
Rule 35    assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal
Rule 36    assignment -> VAR IDENTIFIER type_name ASSIGN expression
Rule 37    assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion
Rule 38    assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal
Rule 39    assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal
Rule 40    assignment -> IDENTIFIER ASSIGN expression
Rule 41    llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN
Rule 42    llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
Rule 43    llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
Rule 44    argument_list -> expression
Rule 45    argument_list -> argument_list COMMA expression
Rule 46    argument_list_opt -> argument_list
Rule 47    argument_list_opt -> <empty>
Rule 48    condicion -> expression comparador expression
Rule 49    condicion_compleja -> condicion operadorLogico condicion
Rule 50    condicion_compleja -> condicion operadorLogico condicion_compleja
Rule 51    operadorLogico -> AND
Rule 52    operadorLogico -> OR
Rule 53    comparador -> EQ
Rule 54    comparador -> NEQ
Rule 55    comparador -> GT
Rule 56    comparador -> LT
Rule 57    comparador -> GE
Rule 58    comparador -> LE
Rule 59    empty -> <empty>
Rule 60    switch -> SWITCH expression LBRACE caseBlocks RBRACE
Rule 61    caseBlocks -> caseBlock
Rule 62    caseBlocks -> caseBlock caseBlocks
Rule 63    caseBlock -> CASE expression COLON statement_list
Rule 64    caseBlock -> DEFAULT COLON statement_list
Rule 65    map -> IDENTIFIER DECLARE_ASSIGN mapLiteral
Rule 66    map -> VAR IDENTIFIER ASSIGN mapLiteral
Rule 67    mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE
Rule 68    mapEntries -> mapEntry
Rule 69    mapEntries -> mapEntry COMMA mapEntries
Rule 70    mapEntry -> value_key COLON value_key
Rule 71    value_key -> expression
Rule 72    value_key -> STRING
Rule 73    function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block
Rule 74    function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
Rule 75    return_values -> expression
Rule 76    return_values -> return_values COMMA expression
Rule 77    function -> FUNC MAIN LPAREN params_opt RPAREN block
Rule 78    return_statement -> RETURN expression
Rule 79    params_opt -> params
Rule 80    params_opt -> <empty>
Rule 81    params -> param
Rule 82    params -> param COMMA params
Rule 83    param -> IDENTIFIER type_name
Rule 84    param -> identifier_list type_name
Rule 85    struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
Rule 86    struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE
Rule 87    struct_field_assignments -> struct_field_assignment
Rule 88    struct_field_assignments -> struct_field_assignments COMMA struct_field_assignment
Rule 89    struct_field_assignment -> IDENTIFIER COLON expression
Rule 90    struct_field -> IDENTIFIER type_name
Rule 91    struct_fields -> struct_field
Rule 92    struct_fields -> struct_fields struct_field
Rule 93    method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
Rule 94    for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
Rule 95    shortAssignment -> identifier_list DECLARE_ASSIGN expression
Rule 96    for_statement -> FOR condicion block
Rule 97    for_statement -> FOR block
Rule 98    for_range_clause -> shortAssignment RANGE expression
Rule 99    block -> LBRACE statement_list RBRACE
Rule 100   block -> LBRACE RBRACE
Rule 101   expression -> IDENTIFIER
Rule 102   expression -> NUMBER
Rule 103   expression -> RUNE
Rule 104   expression -> STRING
Rule 105   expression -> RAW_STRING
Rule 106   expression -> TRUE
Rule 107   expression -> FALSE
Rule 108   expression -> NIL
Rule 109   expression -> slice_literal
Rule 110   expression -> IDENTIFIER DOT IDENTIFIER
Rule 111   expression -> llamarFuncion
Rule 112   expression -> expression operadorLogico expression
Rule 113   expression -> expression comparador expression
Rule 114   expression -> expression operator expression
Rule 115   operator -> PLUS
Rule 116   operator -> MINUS
Rule 117   operator -> TIMES
Rule 118   operator -> DIVIDE
Rule 119   operator -> MOD
Rule 120   expression -> MINUS expression
Rule 121   expression -> LPAREN expression RPAREN
Rule 122   if_statement -> IF condicion block
Rule 123   if_statement -> IF condicion block ELSE block
Rule 124   if_statement -> IF condicion_compleja block
Rule 125   if_statement -> IF condicion_compleja block ELSE block
Rule 126   function_literal -> FUNC LPAREN parameters RPAREN return_type block
Rule 127   parameters -> parameters COMMA parameter
Rule 128   parameters -> parameter
Rule 129   parameters -> empty
Rule 130   parameter -> IDENTIFIER type_name
Rule 131   parameter -> identifier_list type_name
Rule 132   identifier_list -> IDENTIFIER
Rule 133   identifier_list -> IDENTIFIER COMMA identifier_list
Rule 134   type_name -> DATATYPE
Rule 135   type_name -> IDENTIFIER
Rule 136   type_name -> LBRACKET RBRACKET type_name
Rule 137   type_name -> FUNC LPAREN parameters RPAREN return_type
Rule 138   return_type -> type_name
Rule 139   return_type -> empty
Rule 140   return_type -> LPAREN type_name COMMA return_type RPAREN
Rule 141   expression -> function_literal
Rule 142   slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name
Rule 143   declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal
Rule 144   slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE
Rule 145   elements -> elements COMMA expression
Rule 146   elements -> expression
Rule 147   expression -> expression LBRACKET expression RBRACKET
Rule 148   expression -> expression LBRACKET expression COLON expression RBRACKET
Rule 149   expression -> expression LBRACKET COLON expression RBRACKET
Rule 150   expression -> expression LBRACKET expression COLON RBRACKET

Terminals, with rules where they appear

AMPERSAND            : 32
AND                  : 51
ASSIGN               : 31 36 37 39 40 66
BREAK                : 
CASE                 : 63
COLON                : 63 64 70 89 148 149 150
COMMA                : 29 42 45 69 76 82 88 127 133 140 145
CONST                : 31
CONTINUE             : 
DATATYPE             : 134
DECLARE_ASSIGN       : 34 35 38 65 95 143
DEFAULT              : 64
DEFER                : 
DIVIDE               : 118
DOT                  : 32 43 110
ELSE                 : 123 125
EQ                   : 53
FALLTHROUGH          : 
FALSE                : 107
FOR                  : 94 96 97
FUNC                 : 73 74 77 93 126 137
GE                   : 57
GO                   : 
GT                   : 55
IDENTIFIER           : 23 31 32 32 32 33 34 35 36 37 38 39 40 41 42 43 43 65 66 73 74 83 85 86 89 90 93 93 93 101 110 110 130 132 133 135 142 143
IF                   : 122 123 124 125
IMPORT               : 24 25
INTERFACE            : 
LBRACE               : 60 67 74 85 86 99 100 144
LBRACKET             : 67 136 142 144 147 148 149 150
LE                   : 58
LPAREN               : 25 32 41 42 43 73 74 77 93 93 121 126 137 140
LT                   : 56
MAIN                 : 22 77
MAP                  : 67
MINUS                : 116 120
MOD                  : 119
NEQ                  : 54
NIL                  : 108
NUMBER               : 102
OR                   : 52
PACKAGE              : 22 23
PLUS                 : 115
RANGE                : 98
RAW_STRING           : 105
RBRACE               : 60 67 74 85 86 99 100 144
RBRACKET             : 67 136 142 144 147 148 149 150
RETURN               : 74 78
RPAREN               : 25 32 41 42 43 73 74 77 93 93 121 126 137 140
RUNE                 : 103
SELECT               : 
SEMICOLON            : 94 94
STRING               : 24 26 27 72 104
STRING_UNCLOSED      : 
STRUCT               : 85
SWITCH               : 60
TIMES                : 117
TRUE                 : 106
TYPE                 : 85
VAR                  : 33 36 37 39 66 142
error                : 

Nonterminals, with rules where they appear

argument_list        : 45 46
argument_list_opt    : 41 42 43
arguments            : 29 93
assignment           : 6
block                : 73 77 93 94 96 97 122 123 123 124 125 125 126
caseBlock            : 61 62
caseBlocks           : 60 62
comparador           : 48 113
condicion            : 49 49 50 94 96 122 123
condicion_compleja   : 50 124 125
const_declaration    : 
declare_assign       : 21
elements             : 144 145
empty                : 129 139
expression           : 28 29 31 34 36 40 42 44 45 48 48 60 63 71 75 76 78 89 94 95 98 112 112 113 113 114 114 120 121 145 146 147 147 148 148 148 149 149 150 150
for_range_clause     : 
for_statement        : 10
function             : 16
function_literal     : 18 141
identifier_list      : 84 95 131 133
if_statement         : 15
import               : 12
import_list          : 25 27
input                : 7
llamarFuncion        : 8 37 111
map                  : 14
mapEntries           : 67 69
mapEntry             : 68 69
mapLiteral           : 65 66
method_definition    : 17
operadorLogico       : 49 50 112
operator             : 114
package              : 11
param                : 81 82
parameter            : 127 128
parameters           : 126 127 137
params               : 79 82
params_opt           : 73 74 77
program              : 0
return_statement     : 
return_type          : 74 126 137 140
return_values        : 74 76
shortAssignment      : 94 98
slice_declaration    : 20
slice_literal        : 38 39 109 143
statement            : 4 5
statement_list       : 1 2 5 63 64 99
statement_list_opt   : 74
struct_definition    : 9
struct_field         : 91 92
struct_field_assignment : 87 88
struct_field_assignments : 86 88
struct_fields        : 85 92
struct_literal       : 35
switch               : 13
type_name            : 33 36 37 39 67 67 83 84 90 130 131 136 138 140 142 144
value_key            : 70 70
var_declaration      : 19

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . struct_definition
    (10) statement -> . for_statement
    (11) statement -> . package
    (12) statement -> . import
    (13) statement -> . switch
    (14) statement -> . map
    (15) statement -> . if_statement
    (16) statement -> . function
    (17) statement -> . method_definition
    (18) statement -> . function_literal
    (19) statement -> . var_declaration
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (34) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (36) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (38) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (39) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (40) assignment -> . IDENTIFIER ASSIGN expression
    (32) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (85) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (94) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (96) for_statement -> . FOR condicion block
    (97) for_statement -> . FOR block
    (22) package -> . PACKAGE MAIN
    (23) package -> . PACKAGE IDENTIFIER
    (24) import -> . IMPORT STRING
    (25) import -> . IMPORT LPAREN import_list RPAREN
    (60) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (65) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (66) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (122) if_statement -> . IF condicion block
    (123) if_statement -> . IF condicion block ELSE block
    (124) if_statement -> . IF condicion_compleja block
    (125) if_statement -> . IF condicion_compleja block ELSE block
    (73) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (77) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (93) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (33) var_declaration -> . VAR IDENTIFIER type_name
    (142) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (143) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    IDENTIFIER      shift and go to state 20
    VAR             shift and go to state 21
    TYPE            shift and go to state 22
    FOR             shift and go to state 23
    PACKAGE         shift and go to state 24
    IMPORT          shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27
    FUNC            shift and go to state 28

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    struct_definition              shift and go to state 7
    for_statement                  shift and go to state 8
    package                        shift and go to state 9
    import                         shift and go to state 10
    switch                         shift and go to state 11
    map                            shift and go to state 12
    if_statement                   shift and go to state 13
    function                       shift and go to state 14
    method_definition              shift and go to state 15
    function_literal               shift and go to state 16
    var_declaration                shift and go to state 17
    slice_declaration              shift and go to state 18
    declare_assign                 shift and go to state 19

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . struct_definition
    (10) statement -> . for_statement
    (11) statement -> . package
    (12) statement -> . import
    (13) statement -> . switch
    (14) statement -> . map
    (15) statement -> . if_statement
    (16) statement -> . function
    (17) statement -> . method_definition
    (18) statement -> . function_literal
    (19) statement -> . var_declaration
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (34) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (36) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (38) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (39) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (40) assignment -> . IDENTIFIER ASSIGN expression
    (32) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (85) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (94) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (96) for_statement -> . FOR condicion block
    (97) for_statement -> . FOR block
    (22) package -> . PACKAGE MAIN
    (23) package -> . PACKAGE IDENTIFIER
    (24) import -> . IMPORT STRING
    (25) import -> . IMPORT LPAREN import_list RPAREN
    (60) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (65) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (66) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (122) if_statement -> . IF condicion block
    (123) if_statement -> . IF condicion block ELSE block
    (124) if_statement -> . IF condicion_compleja block
    (125) if_statement -> . IF condicion_compleja block ELSE block
    (73) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (77) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (93) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (33) var_declaration -> . VAR IDENTIFIER type_name
    (142) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (143) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    $end            reduce using rule 1 (program -> statement_list .)
    IDENTIFIER      shift and go to state 20
    VAR             shift and go to state 21
    TYPE            shift and go to state 22
    FOR             shift and go to state 23
    PACKAGE         shift and go to state 24
    IMPORT          shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27
    FUNC            shift and go to state 28

    statement                      shift and go to state 29
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    struct_definition              shift and go to state 7
    for_statement                  shift and go to state 8
    package                        shift and go to state 9
    import                         shift and go to state 10
    switch                         shift and go to state 11
    map                            shift and go to state 12
    if_statement                   shift and go to state 13
    function                       shift and go to state 14
    method_definition              shift and go to state 15
    function_literal               shift and go to state 16
    var_declaration                shift and go to state 17
    slice_declaration              shift and go to state 18
    declare_assign                 shift and go to state 19

state 3

    (4) statement_list -> statement .

    IDENTIFIER      reduce using rule 4 (statement_list -> statement .)
    VAR             reduce using rule 4 (statement_list -> statement .)
    TYPE            reduce using rule 4 (statement_list -> statement .)
    FOR             reduce using rule 4 (statement_list -> statement .)
    PACKAGE         reduce using rule 4 (statement_list -> statement .)
    IMPORT          reduce using rule 4 (statement_list -> statement .)
    SWITCH          reduce using rule 4 (statement_list -> statement .)
    IF              reduce using rule 4 (statement_list -> statement .)
    FUNC            reduce using rule 4 (statement_list -> statement .)
    $end            reduce using rule 4 (statement_list -> statement .)
    RBRACE          reduce using rule 4 (statement_list -> statement .)
    CASE            reduce using rule 4 (statement_list -> statement .)
    DEFAULT         reduce using rule 4 (statement_list -> statement .)
    RETURN          reduce using rule 4 (statement_list -> statement .)


state 4

    (6) statement -> assignment .

    IDENTIFIER      reduce using rule 6 (statement -> assignment .)
    VAR             reduce using rule 6 (statement -> assignment .)
    TYPE            reduce using rule 6 (statement -> assignment .)
    FOR             reduce using rule 6 (statement -> assignment .)
    PACKAGE         reduce using rule 6 (statement -> assignment .)
    IMPORT          reduce using rule 6 (statement -> assignment .)
    SWITCH          reduce using rule 6 (statement -> assignment .)
    IF              reduce using rule 6 (statement -> assignment .)
    FUNC            reduce using rule 6 (statement -> assignment .)
    $end            reduce using rule 6 (statement -> assignment .)
    RBRACE          reduce using rule 6 (statement -> assignment .)
    CASE            reduce using rule 6 (statement -> assignment .)
    DEFAULT         reduce using rule 6 (statement -> assignment .)
    RETURN          reduce using rule 6 (statement -> assignment .)


state 5

    (7) statement -> input .

    IDENTIFIER      reduce using rule 7 (statement -> input .)
    VAR             reduce using rule 7 (statement -> input .)
    TYPE            reduce using rule 7 (statement -> input .)
    FOR             reduce using rule 7 (statement -> input .)
    PACKAGE         reduce using rule 7 (statement -> input .)
    IMPORT          reduce using rule 7 (statement -> input .)
    SWITCH          reduce using rule 7 (statement -> input .)
    IF              reduce using rule 7 (statement -> input .)
    FUNC            reduce using rule 7 (statement -> input .)
    $end            reduce using rule 7 (statement -> input .)
    RBRACE          reduce using rule 7 (statement -> input .)
    CASE            reduce using rule 7 (statement -> input .)
    DEFAULT         reduce using rule 7 (statement -> input .)
    RETURN          reduce using rule 7 (statement -> input .)


state 6

    (8) statement -> llamarFuncion .

    IDENTIFIER      reduce using rule 8 (statement -> llamarFuncion .)
    VAR             reduce using rule 8 (statement -> llamarFuncion .)
    TYPE            reduce using rule 8 (statement -> llamarFuncion .)
    FOR             reduce using rule 8 (statement -> llamarFuncion .)
    PACKAGE         reduce using rule 8 (statement -> llamarFuncion .)
    IMPORT          reduce using rule 8 (statement -> llamarFuncion .)
    SWITCH          reduce using rule 8 (statement -> llamarFuncion .)
    IF              reduce using rule 8 (statement -> llamarFuncion .)
    FUNC            reduce using rule 8 (statement -> llamarFuncion .)
    $end            reduce using rule 8 (statement -> llamarFuncion .)
    RBRACE          reduce using rule 8 (statement -> llamarFuncion .)
    CASE            reduce using rule 8 (statement -> llamarFuncion .)
    DEFAULT         reduce using rule 8 (statement -> llamarFuncion .)
    RETURN          reduce using rule 8 (statement -> llamarFuncion .)


state 7

    (9) statement -> struct_definition .

    IDENTIFIER      reduce using rule 9 (statement -> struct_definition .)
    VAR             reduce using rule 9 (statement -> struct_definition .)
    TYPE            reduce using rule 9 (statement -> struct_definition .)
    FOR             reduce using rule 9 (statement -> struct_definition .)
    PACKAGE         reduce using rule 9 (statement -> struct_definition .)
    IMPORT          reduce using rule 9 (statement -> struct_definition .)
    SWITCH          reduce using rule 9 (statement -> struct_definition .)
    IF              reduce using rule 9 (statement -> struct_definition .)
    FUNC            reduce using rule 9 (statement -> struct_definition .)
    $end            reduce using rule 9 (statement -> struct_definition .)
    RBRACE          reduce using rule 9 (statement -> struct_definition .)
    CASE            reduce using rule 9 (statement -> struct_definition .)
    DEFAULT         reduce using rule 9 (statement -> struct_definition .)
    RETURN          reduce using rule 9 (statement -> struct_definition .)


state 8

    (10) statement -> for_statement .

    IDENTIFIER      reduce using rule 10 (statement -> for_statement .)
    VAR             reduce using rule 10 (statement -> for_statement .)
    TYPE            reduce using rule 10 (statement -> for_statement .)
    FOR             reduce using rule 10 (statement -> for_statement .)
    PACKAGE         reduce using rule 10 (statement -> for_statement .)
    IMPORT          reduce using rule 10 (statement -> for_statement .)
    SWITCH          reduce using rule 10 (statement -> for_statement .)
    IF              reduce using rule 10 (statement -> for_statement .)
    FUNC            reduce using rule 10 (statement -> for_statement .)
    $end            reduce using rule 10 (statement -> for_statement .)
    RBRACE          reduce using rule 10 (statement -> for_statement .)
    CASE            reduce using rule 10 (statement -> for_statement .)
    DEFAULT         reduce using rule 10 (statement -> for_statement .)
    RETURN          reduce using rule 10 (statement -> for_statement .)


state 9

    (11) statement -> package .

    IDENTIFIER      reduce using rule 11 (statement -> package .)
    VAR             reduce using rule 11 (statement -> package .)
    TYPE            reduce using rule 11 (statement -> package .)
    FOR             reduce using rule 11 (statement -> package .)
    PACKAGE         reduce using rule 11 (statement -> package .)
    IMPORT          reduce using rule 11 (statement -> package .)
    SWITCH          reduce using rule 11 (statement -> package .)
    IF              reduce using rule 11 (statement -> package .)
    FUNC            reduce using rule 11 (statement -> package .)
    $end            reduce using rule 11 (statement -> package .)
    RBRACE          reduce using rule 11 (statement -> package .)
    CASE            reduce using rule 11 (statement -> package .)
    DEFAULT         reduce using rule 11 (statement -> package .)
    RETURN          reduce using rule 11 (statement -> package .)


state 10

    (12) statement -> import .

    IDENTIFIER      reduce using rule 12 (statement -> import .)
    VAR             reduce using rule 12 (statement -> import .)
    TYPE            reduce using rule 12 (statement -> import .)
    FOR             reduce using rule 12 (statement -> import .)
    PACKAGE         reduce using rule 12 (statement -> import .)
    IMPORT          reduce using rule 12 (statement -> import .)
    SWITCH          reduce using rule 12 (statement -> import .)
    IF              reduce using rule 12 (statement -> import .)
    FUNC            reduce using rule 12 (statement -> import .)
    $end            reduce using rule 12 (statement -> import .)
    RBRACE          reduce using rule 12 (statement -> import .)
    CASE            reduce using rule 12 (statement -> import .)
    DEFAULT         reduce using rule 12 (statement -> import .)
    RETURN          reduce using rule 12 (statement -> import .)


state 11

    (13) statement -> switch .

    IDENTIFIER      reduce using rule 13 (statement -> switch .)
    VAR             reduce using rule 13 (statement -> switch .)
    TYPE            reduce using rule 13 (statement -> switch .)
    FOR             reduce using rule 13 (statement -> switch .)
    PACKAGE         reduce using rule 13 (statement -> switch .)
    IMPORT          reduce using rule 13 (statement -> switch .)
    SWITCH          reduce using rule 13 (statement -> switch .)
    IF              reduce using rule 13 (statement -> switch .)
    FUNC            reduce using rule 13 (statement -> switch .)
    $end            reduce using rule 13 (statement -> switch .)
    RBRACE          reduce using rule 13 (statement -> switch .)
    CASE            reduce using rule 13 (statement -> switch .)
    DEFAULT         reduce using rule 13 (statement -> switch .)
    RETURN          reduce using rule 13 (statement -> switch .)


state 12

    (14) statement -> map .

    IDENTIFIER      reduce using rule 14 (statement -> map .)
    VAR             reduce using rule 14 (statement -> map .)
    TYPE            reduce using rule 14 (statement -> map .)
    FOR             reduce using rule 14 (statement -> map .)
    PACKAGE         reduce using rule 14 (statement -> map .)
    IMPORT          reduce using rule 14 (statement -> map .)
    SWITCH          reduce using rule 14 (statement -> map .)
    IF              reduce using rule 14 (statement -> map .)
    FUNC            reduce using rule 14 (statement -> map .)
    $end            reduce using rule 14 (statement -> map .)
    RBRACE          reduce using rule 14 (statement -> map .)
    CASE            reduce using rule 14 (statement -> map .)
    DEFAULT         reduce using rule 14 (statement -> map .)
    RETURN          reduce using rule 14 (statement -> map .)


state 13

    (15) statement -> if_statement .

    IDENTIFIER      reduce using rule 15 (statement -> if_statement .)
    VAR             reduce using rule 15 (statement -> if_statement .)
    TYPE            reduce using rule 15 (statement -> if_statement .)
    FOR             reduce using rule 15 (statement -> if_statement .)
    PACKAGE         reduce using rule 15 (statement -> if_statement .)
    IMPORT          reduce using rule 15 (statement -> if_statement .)
    SWITCH          reduce using rule 15 (statement -> if_statement .)
    IF              reduce using rule 15 (statement -> if_statement .)
    FUNC            reduce using rule 15 (statement -> if_statement .)
    $end            reduce using rule 15 (statement -> if_statement .)
    RBRACE          reduce using rule 15 (statement -> if_statement .)
    CASE            reduce using rule 15 (statement -> if_statement .)
    DEFAULT         reduce using rule 15 (statement -> if_statement .)
    RETURN          reduce using rule 15 (statement -> if_statement .)


state 14

    (16) statement -> function .

    IDENTIFIER      reduce using rule 16 (statement -> function .)
    VAR             reduce using rule 16 (statement -> function .)
    TYPE            reduce using rule 16 (statement -> function .)
    FOR             reduce using rule 16 (statement -> function .)
    PACKAGE         reduce using rule 16 (statement -> function .)
    IMPORT          reduce using rule 16 (statement -> function .)
    SWITCH          reduce using rule 16 (statement -> function .)
    IF              reduce using rule 16 (statement -> function .)
    FUNC            reduce using rule 16 (statement -> function .)
    $end            reduce using rule 16 (statement -> function .)
    RBRACE          reduce using rule 16 (statement -> function .)
    CASE            reduce using rule 16 (statement -> function .)
    DEFAULT         reduce using rule 16 (statement -> function .)
    RETURN          reduce using rule 16 (statement -> function .)


state 15

    (17) statement -> method_definition .

    IDENTIFIER      reduce using rule 17 (statement -> method_definition .)
    VAR             reduce using rule 17 (statement -> method_definition .)
    TYPE            reduce using rule 17 (statement -> method_definition .)
    FOR             reduce using rule 17 (statement -> method_definition .)
    PACKAGE         reduce using rule 17 (statement -> method_definition .)
    IMPORT          reduce using rule 17 (statement -> method_definition .)
    SWITCH          reduce using rule 17 (statement -> method_definition .)
    IF              reduce using rule 17 (statement -> method_definition .)
    FUNC            reduce using rule 17 (statement -> method_definition .)
    $end            reduce using rule 17 (statement -> method_definition .)
    RBRACE          reduce using rule 17 (statement -> method_definition .)
    CASE            reduce using rule 17 (statement -> method_definition .)
    DEFAULT         reduce using rule 17 (statement -> method_definition .)
    RETURN          reduce using rule 17 (statement -> method_definition .)


state 16

    (18) statement -> function_literal .

    IDENTIFIER      reduce using rule 18 (statement -> function_literal .)
    VAR             reduce using rule 18 (statement -> function_literal .)
    TYPE            reduce using rule 18 (statement -> function_literal .)
    FOR             reduce using rule 18 (statement -> function_literal .)
    PACKAGE         reduce using rule 18 (statement -> function_literal .)
    IMPORT          reduce using rule 18 (statement -> function_literal .)
    SWITCH          reduce using rule 18 (statement -> function_literal .)
    IF              reduce using rule 18 (statement -> function_literal .)
    FUNC            reduce using rule 18 (statement -> function_literal .)
    $end            reduce using rule 18 (statement -> function_literal .)
    RBRACE          reduce using rule 18 (statement -> function_literal .)
    CASE            reduce using rule 18 (statement -> function_literal .)
    DEFAULT         reduce using rule 18 (statement -> function_literal .)
    RETURN          reduce using rule 18 (statement -> function_literal .)


state 17

    (19) statement -> var_declaration .

    IDENTIFIER      reduce using rule 19 (statement -> var_declaration .)
    VAR             reduce using rule 19 (statement -> var_declaration .)
    TYPE            reduce using rule 19 (statement -> var_declaration .)
    FOR             reduce using rule 19 (statement -> var_declaration .)
    PACKAGE         reduce using rule 19 (statement -> var_declaration .)
    IMPORT          reduce using rule 19 (statement -> var_declaration .)
    SWITCH          reduce using rule 19 (statement -> var_declaration .)
    IF              reduce using rule 19 (statement -> var_declaration .)
    FUNC            reduce using rule 19 (statement -> var_declaration .)
    $end            reduce using rule 19 (statement -> var_declaration .)
    RBRACE          reduce using rule 19 (statement -> var_declaration .)
    CASE            reduce using rule 19 (statement -> var_declaration .)
    DEFAULT         reduce using rule 19 (statement -> var_declaration .)
    RETURN          reduce using rule 19 (statement -> var_declaration .)


state 18

    (20) statement -> slice_declaration .

    IDENTIFIER      reduce using rule 20 (statement -> slice_declaration .)
    VAR             reduce using rule 20 (statement -> slice_declaration .)
    TYPE            reduce using rule 20 (statement -> slice_declaration .)
    FOR             reduce using rule 20 (statement -> slice_declaration .)
    PACKAGE         reduce using rule 20 (statement -> slice_declaration .)
    IMPORT          reduce using rule 20 (statement -> slice_declaration .)
    SWITCH          reduce using rule 20 (statement -> slice_declaration .)
    IF              reduce using rule 20 (statement -> slice_declaration .)
    FUNC            reduce using rule 20 (statement -> slice_declaration .)
    $end            reduce using rule 20 (statement -> slice_declaration .)
    RBRACE          reduce using rule 20 (statement -> slice_declaration .)
    CASE            reduce using rule 20 (statement -> slice_declaration .)
    DEFAULT         reduce using rule 20 (statement -> slice_declaration .)
    RETURN          reduce using rule 20 (statement -> slice_declaration .)


state 19

    (21) statement -> declare_assign .

    IDENTIFIER      reduce using rule 21 (statement -> declare_assign .)
    VAR             reduce using rule 21 (statement -> declare_assign .)
    TYPE            reduce using rule 21 (statement -> declare_assign .)
    FOR             reduce using rule 21 (statement -> declare_assign .)
    PACKAGE         reduce using rule 21 (statement -> declare_assign .)
    IMPORT          reduce using rule 21 (statement -> declare_assign .)
    SWITCH          reduce using rule 21 (statement -> declare_assign .)
    IF              reduce using rule 21 (statement -> declare_assign .)
    FUNC            reduce using rule 21 (statement -> declare_assign .)
    $end            reduce using rule 21 (statement -> declare_assign .)
    RBRACE          reduce using rule 21 (statement -> declare_assign .)
    CASE            reduce using rule 21 (statement -> declare_assign .)
    DEFAULT         reduce using rule 21 (statement -> declare_assign .)
    RETURN          reduce using rule 21 (statement -> declare_assign .)


state 20

    (34) assignment -> IDENTIFIER . DECLARE_ASSIGN expression
    (35) assignment -> IDENTIFIER . DECLARE_ASSIGN struct_literal
    (38) assignment -> IDENTIFIER . DECLARE_ASSIGN slice_literal
    (40) assignment -> IDENTIFIER . ASSIGN expression
    (32) input -> IDENTIFIER . DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (41) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (65) map -> IDENTIFIER . DECLARE_ASSIGN mapLiteral
    (143) declare_assign -> IDENTIFIER . DECLARE_ASSIGN slice_literal

    DECLARE_ASSIGN  shift and go to state 30
    ASSIGN          shift and go to state 31
    DOT             shift and go to state 32
    LPAREN          shift and go to state 33


state 21

    (36) assignment -> VAR . IDENTIFIER type_name ASSIGN expression
    (37) assignment -> VAR . IDENTIFIER type_name ASSIGN llamarFuncion
    (39) assignment -> VAR . IDENTIFIER type_name ASSIGN slice_literal
    (66) map -> VAR . IDENTIFIER ASSIGN mapLiteral
    (33) var_declaration -> VAR . IDENTIFIER type_name
    (142) slice_declaration -> VAR . IDENTIFIER LBRACKET RBRACKET type_name

    IDENTIFIER      shift and go to state 34


state 22

    (85) struct_definition -> TYPE . IDENTIFIER STRUCT LBRACE struct_fields RBRACE

    IDENTIFIER      shift and go to state 35


state 23

    (94) for_statement -> FOR . shortAssignment SEMICOLON condicion SEMICOLON expression block
    (96) for_statement -> FOR . condicion block
    (97) for_statement -> FOR . block
    (95) shortAssignment -> . identifier_list DECLARE_ASSIGN expression
    (48) condicion -> . expression comparador expression
    (99) block -> . LBRACE statement_list RBRACE
    (100) block -> . LBRACE RBRACE
    (132) identifier_list -> . IDENTIFIER
    (133) identifier_list -> . IDENTIFIER COMMA identifier_list
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    LBRACE          shift and go to state 41
    IDENTIFIER      shift and go to state 42
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    shortAssignment                shift and go to state 36
    condicion                      shift and go to state 37
    expression                     shift and go to state 38
    block                          shift and go to state 39
    identifier_list                shift and go to state 40
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 24

    (22) package -> PACKAGE . MAIN
    (23) package -> PACKAGE . IDENTIFIER

    MAIN            shift and go to state 57
    IDENTIFIER      shift and go to state 58


state 25

    (24) import -> IMPORT . STRING
    (25) import -> IMPORT . LPAREN import_list RPAREN

    STRING          shift and go to state 59
    LPAREN          shift and go to state 60


state 26

    (60) switch -> SWITCH . expression LBRACE caseBlocks RBRACE
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    expression                     shift and go to state 61
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 27

    (122) if_statement -> IF . condicion block
    (123) if_statement -> IF . condicion block ELSE block
    (124) if_statement -> IF . condicion_compleja block
    (125) if_statement -> IF . condicion_compleja block ELSE block
    (48) condicion -> . expression comparador expression
    (49) condicion_compleja -> . condicion operadorLogico condicion
    (50) condicion_compleja -> . condicion operadorLogico condicion_compleja
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    condicion                      shift and go to state 63
    condicion_compleja             shift and go to state 64
    expression                     shift and go to state 38
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 28

    (73) function -> FUNC . IDENTIFIER LPAREN params_opt RPAREN block
    (74) function -> FUNC . IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (77) function -> FUNC . MAIN LPAREN params_opt RPAREN block
    (93) method_definition -> FUNC . LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (126) function_literal -> FUNC . LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 65
    MAIN            shift and go to state 67
    LPAREN          shift and go to state 66


state 29

    (5) statement_list -> statement_list statement .

    IDENTIFIER      reduce using rule 5 (statement_list -> statement_list statement .)
    VAR             reduce using rule 5 (statement_list -> statement_list statement .)
    TYPE            reduce using rule 5 (statement_list -> statement_list statement .)
    FOR             reduce using rule 5 (statement_list -> statement_list statement .)
    PACKAGE         reduce using rule 5 (statement_list -> statement_list statement .)
    IMPORT          reduce using rule 5 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 5 (statement_list -> statement_list statement .)
    IF              reduce using rule 5 (statement_list -> statement_list statement .)
    FUNC            reduce using rule 5 (statement_list -> statement_list statement .)
    $end            reduce using rule 5 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 5 (statement_list -> statement_list statement .)
    CASE            reduce using rule 5 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 5 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 5 (statement_list -> statement_list statement .)


state 30

    (34) assignment -> IDENTIFIER DECLARE_ASSIGN . expression
    (35) assignment -> IDENTIFIER DECLARE_ASSIGN . struct_literal
    (38) assignment -> IDENTIFIER DECLARE_ASSIGN . slice_literal
    (65) map -> IDENTIFIER DECLARE_ASSIGN . mapLiteral
    (143) declare_assign -> IDENTIFIER DECLARE_ASSIGN . slice_literal
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (86) struct_literal -> . IDENTIFIER LBRACE struct_field_assignments RBRACE
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (67) mapLiteral -> . MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 68
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    MAP             shift and go to state 73
    FUNC            shift and go to state 56

    expression                     shift and go to state 69
    struct_literal                 shift and go to state 70
    slice_literal                  shift and go to state 71
    mapLiteral                     shift and go to state 72
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 31

    (40) assignment -> IDENTIFIER ASSIGN . expression
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    expression                     shift and go to state 74
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 32

    (32) input -> IDENTIFIER DOT . IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (43) llamarFuncion -> IDENTIFIER DOT . IDENTIFIER LPAREN argument_list_opt RPAREN

    IDENTIFIER      shift and go to state 75


state 33

    (41) llamarFuncion -> IDENTIFIER LPAREN . argument_list_opt RPAREN
    (42) llamarFuncion -> IDENTIFIER LPAREN . argument_list_opt COMMA expression RPAREN
    (46) argument_list_opt -> . argument_list
    (47) argument_list_opt -> .
    (44) argument_list -> . expression
    (45) argument_list -> . argument_list COMMA expression
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    RPAREN          reduce using rule 47 (argument_list_opt -> .)
    COMMA           reduce using rule 47 (argument_list_opt -> .)
    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    argument_list_opt              shift and go to state 76
    expression                     shift and go to state 77
    argument_list                  shift and go to state 78
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 34

    (36) assignment -> VAR IDENTIFIER . type_name ASSIGN expression
    (37) assignment -> VAR IDENTIFIER . type_name ASSIGN llamarFuncion
    (39) assignment -> VAR IDENTIFIER . type_name ASSIGN slice_literal
    (66) map -> VAR IDENTIFIER . ASSIGN mapLiteral
    (33) var_declaration -> VAR IDENTIFIER . type_name
    (142) slice_declaration -> VAR IDENTIFIER . LBRACKET RBRACKET type_name
    (134) type_name -> . DATATYPE
    (135) type_name -> . IDENTIFIER
    (136) type_name -> . LBRACKET RBRACKET type_name
    (137) type_name -> . FUNC LPAREN parameters RPAREN return_type

    ASSIGN          shift and go to state 81
    LBRACKET        shift and go to state 82
    DATATYPE        shift and go to state 83
    IDENTIFIER      shift and go to state 79
    FUNC            shift and go to state 84

    type_name                      shift and go to state 80

state 35

    (85) struct_definition -> TYPE IDENTIFIER . STRUCT LBRACE struct_fields RBRACE

    STRUCT          shift and go to state 85


state 36

    (94) for_statement -> FOR shortAssignment . SEMICOLON condicion SEMICOLON expression block

    SEMICOLON       shift and go to state 86


state 37

    (96) for_statement -> FOR condicion . block
    (99) block -> . LBRACE statement_list RBRACE
    (100) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 41

    block                          shift and go to state 87

state 38

    (48) condicion -> expression . comparador expression
    (112) expression -> expression . operadorLogico expression
    (113) expression -> expression . comparador expression
    (114) expression -> expression . operator expression
    (147) expression -> expression . LBRACKET expression RBRACKET
    (148) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (149) expression -> expression . LBRACKET COLON expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON RBRACKET
    (53) comparador -> . EQ
    (54) comparador -> . NEQ
    (55) comparador -> . GT
    (56) comparador -> . LT
    (57) comparador -> . GE
    (58) comparador -> . LE
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    LBRACKET        shift and go to state 91
    EQ              shift and go to state 92
    NEQ             shift and go to state 93
    GT              shift and go to state 94
    LT              shift and go to state 95
    GE              shift and go to state 96
    LE              shift and go to state 97
    AND             shift and go to state 98
    OR              shift and go to state 99
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104

    comparador                     shift and go to state 88
    operadorLogico                 shift and go to state 89
    operator                       shift and go to state 90

state 39

    (97) for_statement -> FOR block .

    IDENTIFIER      reduce using rule 97 (for_statement -> FOR block .)
    VAR             reduce using rule 97 (for_statement -> FOR block .)
    TYPE            reduce using rule 97 (for_statement -> FOR block .)
    FOR             reduce using rule 97 (for_statement -> FOR block .)
    PACKAGE         reduce using rule 97 (for_statement -> FOR block .)
    IMPORT          reduce using rule 97 (for_statement -> FOR block .)
    SWITCH          reduce using rule 97 (for_statement -> FOR block .)
    IF              reduce using rule 97 (for_statement -> FOR block .)
    FUNC            reduce using rule 97 (for_statement -> FOR block .)
    $end            reduce using rule 97 (for_statement -> FOR block .)
    RBRACE          reduce using rule 97 (for_statement -> FOR block .)
    CASE            reduce using rule 97 (for_statement -> FOR block .)
    DEFAULT         reduce using rule 97 (for_statement -> FOR block .)
    RETURN          reduce using rule 97 (for_statement -> FOR block .)


state 40

    (95) shortAssignment -> identifier_list . DECLARE_ASSIGN expression

    DECLARE_ASSIGN  shift and go to state 105


state 41

    (99) block -> LBRACE . statement_list RBRACE
    (100) block -> LBRACE . RBRACE
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . struct_definition
    (10) statement -> . for_statement
    (11) statement -> . package
    (12) statement -> . import
    (13) statement -> . switch
    (14) statement -> . map
    (15) statement -> . if_statement
    (16) statement -> . function
    (17) statement -> . method_definition
    (18) statement -> . function_literal
    (19) statement -> . var_declaration
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (34) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (36) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (38) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (39) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (40) assignment -> . IDENTIFIER ASSIGN expression
    (32) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (85) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (94) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (96) for_statement -> . FOR condicion block
    (97) for_statement -> . FOR block
    (22) package -> . PACKAGE MAIN
    (23) package -> . PACKAGE IDENTIFIER
    (24) import -> . IMPORT STRING
    (25) import -> . IMPORT LPAREN import_list RPAREN
    (60) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (65) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (66) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (122) if_statement -> . IF condicion block
    (123) if_statement -> . IF condicion block ELSE block
    (124) if_statement -> . IF condicion_compleja block
    (125) if_statement -> . IF condicion_compleja block ELSE block
    (73) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (77) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (93) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (33) var_declaration -> . VAR IDENTIFIER type_name
    (142) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (143) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    RBRACE          shift and go to state 107
    IDENTIFIER      shift and go to state 20
    VAR             shift and go to state 21
    TYPE            shift and go to state 22
    FOR             shift and go to state 23
    PACKAGE         shift and go to state 24
    IMPORT          shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27
    FUNC            shift and go to state 28

    statement_list                 shift and go to state 106
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    struct_definition              shift and go to state 7
    for_statement                  shift and go to state 8
    package                        shift and go to state 9
    import                         shift and go to state 10
    switch                         shift and go to state 11
    map                            shift and go to state 12
    if_statement                   shift and go to state 13
    function                       shift and go to state 14
    method_definition              shift and go to state 15
    function_literal               shift and go to state 16
    var_declaration                shift and go to state 17
    slice_declaration              shift and go to state 18
    declare_assign                 shift and go to state 19

state 42

    (132) identifier_list -> IDENTIFIER .
    (133) identifier_list -> IDENTIFIER . COMMA identifier_list
    (101) expression -> IDENTIFIER .
    (110) expression -> IDENTIFIER . DOT IDENTIFIER
    (41) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    DECLARE_ASSIGN  reduce using rule 132 (identifier_list -> IDENTIFIER .)
    COMMA           shift and go to state 108
    LBRACKET        reduce using rule 101 (expression -> IDENTIFIER .)
    EQ              reduce using rule 101 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 101 (expression -> IDENTIFIER .)
    GT              reduce using rule 101 (expression -> IDENTIFIER .)
    LT              reduce using rule 101 (expression -> IDENTIFIER .)
    GE              reduce using rule 101 (expression -> IDENTIFIER .)
    LE              reduce using rule 101 (expression -> IDENTIFIER .)
    AND             reduce using rule 101 (expression -> IDENTIFIER .)
    OR              reduce using rule 101 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 101 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 101 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 101 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 101 (expression -> IDENTIFIER .)
    MOD             reduce using rule 101 (expression -> IDENTIFIER .)
    DOT             shift and go to state 109
    LPAREN          shift and go to state 33


state 43

    (102) expression -> NUMBER .

    LBRACKET        reduce using rule 102 (expression -> NUMBER .)
    EQ              reduce using rule 102 (expression -> NUMBER .)
    NEQ             reduce using rule 102 (expression -> NUMBER .)
    GT              reduce using rule 102 (expression -> NUMBER .)
    LT              reduce using rule 102 (expression -> NUMBER .)
    GE              reduce using rule 102 (expression -> NUMBER .)
    LE              reduce using rule 102 (expression -> NUMBER .)
    AND             reduce using rule 102 (expression -> NUMBER .)
    OR              reduce using rule 102 (expression -> NUMBER .)
    PLUS            reduce using rule 102 (expression -> NUMBER .)
    MINUS           reduce using rule 102 (expression -> NUMBER .)
    TIMES           reduce using rule 102 (expression -> NUMBER .)
    DIVIDE          reduce using rule 102 (expression -> NUMBER .)
    MOD             reduce using rule 102 (expression -> NUMBER .)
    LBRACE          reduce using rule 102 (expression -> NUMBER .)
    IDENTIFIER      reduce using rule 102 (expression -> NUMBER .)
    VAR             reduce using rule 102 (expression -> NUMBER .)
    TYPE            reduce using rule 102 (expression -> NUMBER .)
    FOR             reduce using rule 102 (expression -> NUMBER .)
    PACKAGE         reduce using rule 102 (expression -> NUMBER .)
    IMPORT          reduce using rule 102 (expression -> NUMBER .)
    SWITCH          reduce using rule 102 (expression -> NUMBER .)
    IF              reduce using rule 102 (expression -> NUMBER .)
    FUNC            reduce using rule 102 (expression -> NUMBER .)
    $end            reduce using rule 102 (expression -> NUMBER .)
    RBRACE          reduce using rule 102 (expression -> NUMBER .)
    CASE            reduce using rule 102 (expression -> NUMBER .)
    DEFAULT         reduce using rule 102 (expression -> NUMBER .)
    RETURN          reduce using rule 102 (expression -> NUMBER .)
    COMMA           reduce using rule 102 (expression -> NUMBER .)
    RPAREN          reduce using rule 102 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 102 (expression -> NUMBER .)
    RBRACKET        reduce using rule 102 (expression -> NUMBER .)
    COLON           reduce using rule 102 (expression -> NUMBER .)


state 44

    (103) expression -> RUNE .

    LBRACKET        reduce using rule 103 (expression -> RUNE .)
    EQ              reduce using rule 103 (expression -> RUNE .)
    NEQ             reduce using rule 103 (expression -> RUNE .)
    GT              reduce using rule 103 (expression -> RUNE .)
    LT              reduce using rule 103 (expression -> RUNE .)
    GE              reduce using rule 103 (expression -> RUNE .)
    LE              reduce using rule 103 (expression -> RUNE .)
    AND             reduce using rule 103 (expression -> RUNE .)
    OR              reduce using rule 103 (expression -> RUNE .)
    PLUS            reduce using rule 103 (expression -> RUNE .)
    MINUS           reduce using rule 103 (expression -> RUNE .)
    TIMES           reduce using rule 103 (expression -> RUNE .)
    DIVIDE          reduce using rule 103 (expression -> RUNE .)
    MOD             reduce using rule 103 (expression -> RUNE .)
    LBRACE          reduce using rule 103 (expression -> RUNE .)
    IDENTIFIER      reduce using rule 103 (expression -> RUNE .)
    VAR             reduce using rule 103 (expression -> RUNE .)
    TYPE            reduce using rule 103 (expression -> RUNE .)
    FOR             reduce using rule 103 (expression -> RUNE .)
    PACKAGE         reduce using rule 103 (expression -> RUNE .)
    IMPORT          reduce using rule 103 (expression -> RUNE .)
    SWITCH          reduce using rule 103 (expression -> RUNE .)
    IF              reduce using rule 103 (expression -> RUNE .)
    FUNC            reduce using rule 103 (expression -> RUNE .)
    $end            reduce using rule 103 (expression -> RUNE .)
    RBRACE          reduce using rule 103 (expression -> RUNE .)
    CASE            reduce using rule 103 (expression -> RUNE .)
    DEFAULT         reduce using rule 103 (expression -> RUNE .)
    RETURN          reduce using rule 103 (expression -> RUNE .)
    COMMA           reduce using rule 103 (expression -> RUNE .)
    RPAREN          reduce using rule 103 (expression -> RUNE .)
    SEMICOLON       reduce using rule 103 (expression -> RUNE .)
    RBRACKET        reduce using rule 103 (expression -> RUNE .)
    COLON           reduce using rule 103 (expression -> RUNE .)


state 45

    (104) expression -> STRING .

    LBRACKET        reduce using rule 104 (expression -> STRING .)
    EQ              reduce using rule 104 (expression -> STRING .)
    NEQ             reduce using rule 104 (expression -> STRING .)
    GT              reduce using rule 104 (expression -> STRING .)
    LT              reduce using rule 104 (expression -> STRING .)
    GE              reduce using rule 104 (expression -> STRING .)
    LE              reduce using rule 104 (expression -> STRING .)
    AND             reduce using rule 104 (expression -> STRING .)
    OR              reduce using rule 104 (expression -> STRING .)
    PLUS            reduce using rule 104 (expression -> STRING .)
    MINUS           reduce using rule 104 (expression -> STRING .)
    TIMES           reduce using rule 104 (expression -> STRING .)
    DIVIDE          reduce using rule 104 (expression -> STRING .)
    MOD             reduce using rule 104 (expression -> STRING .)
    LBRACE          reduce using rule 104 (expression -> STRING .)
    IDENTIFIER      reduce using rule 104 (expression -> STRING .)
    VAR             reduce using rule 104 (expression -> STRING .)
    TYPE            reduce using rule 104 (expression -> STRING .)
    FOR             reduce using rule 104 (expression -> STRING .)
    PACKAGE         reduce using rule 104 (expression -> STRING .)
    IMPORT          reduce using rule 104 (expression -> STRING .)
    SWITCH          reduce using rule 104 (expression -> STRING .)
    IF              reduce using rule 104 (expression -> STRING .)
    FUNC            reduce using rule 104 (expression -> STRING .)
    $end            reduce using rule 104 (expression -> STRING .)
    RBRACE          reduce using rule 104 (expression -> STRING .)
    CASE            reduce using rule 104 (expression -> STRING .)
    DEFAULT         reduce using rule 104 (expression -> STRING .)
    RETURN          reduce using rule 104 (expression -> STRING .)
    COMMA           reduce using rule 104 (expression -> STRING .)
    RPAREN          reduce using rule 104 (expression -> STRING .)
    SEMICOLON       reduce using rule 104 (expression -> STRING .)
    RBRACKET        reduce using rule 104 (expression -> STRING .)
    COLON           reduce using rule 104 (expression -> STRING .)


state 46

    (105) expression -> RAW_STRING .

    LBRACKET        reduce using rule 105 (expression -> RAW_STRING .)
    EQ              reduce using rule 105 (expression -> RAW_STRING .)
    NEQ             reduce using rule 105 (expression -> RAW_STRING .)
    GT              reduce using rule 105 (expression -> RAW_STRING .)
    LT              reduce using rule 105 (expression -> RAW_STRING .)
    GE              reduce using rule 105 (expression -> RAW_STRING .)
    LE              reduce using rule 105 (expression -> RAW_STRING .)
    AND             reduce using rule 105 (expression -> RAW_STRING .)
    OR              reduce using rule 105 (expression -> RAW_STRING .)
    PLUS            reduce using rule 105 (expression -> RAW_STRING .)
    MINUS           reduce using rule 105 (expression -> RAW_STRING .)
    TIMES           reduce using rule 105 (expression -> RAW_STRING .)
    DIVIDE          reduce using rule 105 (expression -> RAW_STRING .)
    MOD             reduce using rule 105 (expression -> RAW_STRING .)
    LBRACE          reduce using rule 105 (expression -> RAW_STRING .)
    IDENTIFIER      reduce using rule 105 (expression -> RAW_STRING .)
    VAR             reduce using rule 105 (expression -> RAW_STRING .)
    TYPE            reduce using rule 105 (expression -> RAW_STRING .)
    FOR             reduce using rule 105 (expression -> RAW_STRING .)
    PACKAGE         reduce using rule 105 (expression -> RAW_STRING .)
    IMPORT          reduce using rule 105 (expression -> RAW_STRING .)
    SWITCH          reduce using rule 105 (expression -> RAW_STRING .)
    IF              reduce using rule 105 (expression -> RAW_STRING .)
    FUNC            reduce using rule 105 (expression -> RAW_STRING .)
    $end            reduce using rule 105 (expression -> RAW_STRING .)
    RBRACE          reduce using rule 105 (expression -> RAW_STRING .)
    CASE            reduce using rule 105 (expression -> RAW_STRING .)
    DEFAULT         reduce using rule 105 (expression -> RAW_STRING .)
    RETURN          reduce using rule 105 (expression -> RAW_STRING .)
    COMMA           reduce using rule 105 (expression -> RAW_STRING .)
    RPAREN          reduce using rule 105 (expression -> RAW_STRING .)
    SEMICOLON       reduce using rule 105 (expression -> RAW_STRING .)
    RBRACKET        reduce using rule 105 (expression -> RAW_STRING .)
    COLON           reduce using rule 105 (expression -> RAW_STRING .)


state 47

    (106) expression -> TRUE .

    LBRACKET        reduce using rule 106 (expression -> TRUE .)
    EQ              reduce using rule 106 (expression -> TRUE .)
    NEQ             reduce using rule 106 (expression -> TRUE .)
    GT              reduce using rule 106 (expression -> TRUE .)
    LT              reduce using rule 106 (expression -> TRUE .)
    GE              reduce using rule 106 (expression -> TRUE .)
    LE              reduce using rule 106 (expression -> TRUE .)
    AND             reduce using rule 106 (expression -> TRUE .)
    OR              reduce using rule 106 (expression -> TRUE .)
    PLUS            reduce using rule 106 (expression -> TRUE .)
    MINUS           reduce using rule 106 (expression -> TRUE .)
    TIMES           reduce using rule 106 (expression -> TRUE .)
    DIVIDE          reduce using rule 106 (expression -> TRUE .)
    MOD             reduce using rule 106 (expression -> TRUE .)
    LBRACE          reduce using rule 106 (expression -> TRUE .)
    IDENTIFIER      reduce using rule 106 (expression -> TRUE .)
    VAR             reduce using rule 106 (expression -> TRUE .)
    TYPE            reduce using rule 106 (expression -> TRUE .)
    FOR             reduce using rule 106 (expression -> TRUE .)
    PACKAGE         reduce using rule 106 (expression -> TRUE .)
    IMPORT          reduce using rule 106 (expression -> TRUE .)
    SWITCH          reduce using rule 106 (expression -> TRUE .)
    IF              reduce using rule 106 (expression -> TRUE .)
    FUNC            reduce using rule 106 (expression -> TRUE .)
    $end            reduce using rule 106 (expression -> TRUE .)
    RBRACE          reduce using rule 106 (expression -> TRUE .)
    CASE            reduce using rule 106 (expression -> TRUE .)
    DEFAULT         reduce using rule 106 (expression -> TRUE .)
    RETURN          reduce using rule 106 (expression -> TRUE .)
    COMMA           reduce using rule 106 (expression -> TRUE .)
    RPAREN          reduce using rule 106 (expression -> TRUE .)
    SEMICOLON       reduce using rule 106 (expression -> TRUE .)
    RBRACKET        reduce using rule 106 (expression -> TRUE .)
    COLON           reduce using rule 106 (expression -> TRUE .)


state 48

    (107) expression -> FALSE .

    LBRACKET        reduce using rule 107 (expression -> FALSE .)
    EQ              reduce using rule 107 (expression -> FALSE .)
    NEQ             reduce using rule 107 (expression -> FALSE .)
    GT              reduce using rule 107 (expression -> FALSE .)
    LT              reduce using rule 107 (expression -> FALSE .)
    GE              reduce using rule 107 (expression -> FALSE .)
    LE              reduce using rule 107 (expression -> FALSE .)
    AND             reduce using rule 107 (expression -> FALSE .)
    OR              reduce using rule 107 (expression -> FALSE .)
    PLUS            reduce using rule 107 (expression -> FALSE .)
    MINUS           reduce using rule 107 (expression -> FALSE .)
    TIMES           reduce using rule 107 (expression -> FALSE .)
    DIVIDE          reduce using rule 107 (expression -> FALSE .)
    MOD             reduce using rule 107 (expression -> FALSE .)
    LBRACE          reduce using rule 107 (expression -> FALSE .)
    IDENTIFIER      reduce using rule 107 (expression -> FALSE .)
    VAR             reduce using rule 107 (expression -> FALSE .)
    TYPE            reduce using rule 107 (expression -> FALSE .)
    FOR             reduce using rule 107 (expression -> FALSE .)
    PACKAGE         reduce using rule 107 (expression -> FALSE .)
    IMPORT          reduce using rule 107 (expression -> FALSE .)
    SWITCH          reduce using rule 107 (expression -> FALSE .)
    IF              reduce using rule 107 (expression -> FALSE .)
    FUNC            reduce using rule 107 (expression -> FALSE .)
    $end            reduce using rule 107 (expression -> FALSE .)
    RBRACE          reduce using rule 107 (expression -> FALSE .)
    CASE            reduce using rule 107 (expression -> FALSE .)
    DEFAULT         reduce using rule 107 (expression -> FALSE .)
    RETURN          reduce using rule 107 (expression -> FALSE .)
    COMMA           reduce using rule 107 (expression -> FALSE .)
    RPAREN          reduce using rule 107 (expression -> FALSE .)
    SEMICOLON       reduce using rule 107 (expression -> FALSE .)
    RBRACKET        reduce using rule 107 (expression -> FALSE .)
    COLON           reduce using rule 107 (expression -> FALSE .)


state 49

    (108) expression -> NIL .

    LBRACKET        reduce using rule 108 (expression -> NIL .)
    EQ              reduce using rule 108 (expression -> NIL .)
    NEQ             reduce using rule 108 (expression -> NIL .)
    GT              reduce using rule 108 (expression -> NIL .)
    LT              reduce using rule 108 (expression -> NIL .)
    GE              reduce using rule 108 (expression -> NIL .)
    LE              reduce using rule 108 (expression -> NIL .)
    AND             reduce using rule 108 (expression -> NIL .)
    OR              reduce using rule 108 (expression -> NIL .)
    PLUS            reduce using rule 108 (expression -> NIL .)
    MINUS           reduce using rule 108 (expression -> NIL .)
    TIMES           reduce using rule 108 (expression -> NIL .)
    DIVIDE          reduce using rule 108 (expression -> NIL .)
    MOD             reduce using rule 108 (expression -> NIL .)
    LBRACE          reduce using rule 108 (expression -> NIL .)
    IDENTIFIER      reduce using rule 108 (expression -> NIL .)
    VAR             reduce using rule 108 (expression -> NIL .)
    TYPE            reduce using rule 108 (expression -> NIL .)
    FOR             reduce using rule 108 (expression -> NIL .)
    PACKAGE         reduce using rule 108 (expression -> NIL .)
    IMPORT          reduce using rule 108 (expression -> NIL .)
    SWITCH          reduce using rule 108 (expression -> NIL .)
    IF              reduce using rule 108 (expression -> NIL .)
    FUNC            reduce using rule 108 (expression -> NIL .)
    $end            reduce using rule 108 (expression -> NIL .)
    RBRACE          reduce using rule 108 (expression -> NIL .)
    CASE            reduce using rule 108 (expression -> NIL .)
    DEFAULT         reduce using rule 108 (expression -> NIL .)
    RETURN          reduce using rule 108 (expression -> NIL .)
    COMMA           reduce using rule 108 (expression -> NIL .)
    RPAREN          reduce using rule 108 (expression -> NIL .)
    SEMICOLON       reduce using rule 108 (expression -> NIL .)
    RBRACKET        reduce using rule 108 (expression -> NIL .)
    COLON           reduce using rule 108 (expression -> NIL .)


state 50

    (109) expression -> slice_literal .

    LBRACKET        reduce using rule 109 (expression -> slice_literal .)
    EQ              reduce using rule 109 (expression -> slice_literal .)
    NEQ             reduce using rule 109 (expression -> slice_literal .)
    GT              reduce using rule 109 (expression -> slice_literal .)
    LT              reduce using rule 109 (expression -> slice_literal .)
    GE              reduce using rule 109 (expression -> slice_literal .)
    LE              reduce using rule 109 (expression -> slice_literal .)
    AND             reduce using rule 109 (expression -> slice_literal .)
    OR              reduce using rule 109 (expression -> slice_literal .)
    PLUS            reduce using rule 109 (expression -> slice_literal .)
    MINUS           reduce using rule 109 (expression -> slice_literal .)
    TIMES           reduce using rule 109 (expression -> slice_literal .)
    DIVIDE          reduce using rule 109 (expression -> slice_literal .)
    MOD             reduce using rule 109 (expression -> slice_literal .)
    LBRACE          reduce using rule 109 (expression -> slice_literal .)
    IDENTIFIER      reduce using rule 109 (expression -> slice_literal .)
    VAR             reduce using rule 109 (expression -> slice_literal .)
    TYPE            reduce using rule 109 (expression -> slice_literal .)
    FOR             reduce using rule 109 (expression -> slice_literal .)
    PACKAGE         reduce using rule 109 (expression -> slice_literal .)
    IMPORT          reduce using rule 109 (expression -> slice_literal .)
    SWITCH          reduce using rule 109 (expression -> slice_literal .)
    IF              reduce using rule 109 (expression -> slice_literal .)
    FUNC            reduce using rule 109 (expression -> slice_literal .)
    $end            reduce using rule 109 (expression -> slice_literal .)
    RBRACE          reduce using rule 109 (expression -> slice_literal .)
    CASE            reduce using rule 109 (expression -> slice_literal .)
    DEFAULT         reduce using rule 109 (expression -> slice_literal .)
    RETURN          reduce using rule 109 (expression -> slice_literal .)
    COMMA           reduce using rule 109 (expression -> slice_literal .)
    RPAREN          reduce using rule 109 (expression -> slice_literal .)
    SEMICOLON       reduce using rule 109 (expression -> slice_literal .)
    RBRACKET        reduce using rule 109 (expression -> slice_literal .)
    COLON           reduce using rule 109 (expression -> slice_literal .)


state 51

    (111) expression -> llamarFuncion .

    LBRACKET        reduce using rule 111 (expression -> llamarFuncion .)
    EQ              reduce using rule 111 (expression -> llamarFuncion .)
    NEQ             reduce using rule 111 (expression -> llamarFuncion .)
    GT              reduce using rule 111 (expression -> llamarFuncion .)
    LT              reduce using rule 111 (expression -> llamarFuncion .)
    GE              reduce using rule 111 (expression -> llamarFuncion .)
    LE              reduce using rule 111 (expression -> llamarFuncion .)
    AND             reduce using rule 111 (expression -> llamarFuncion .)
    OR              reduce using rule 111 (expression -> llamarFuncion .)
    PLUS            reduce using rule 111 (expression -> llamarFuncion .)
    MINUS           reduce using rule 111 (expression -> llamarFuncion .)
    TIMES           reduce using rule 111 (expression -> llamarFuncion .)
    DIVIDE          reduce using rule 111 (expression -> llamarFuncion .)
    MOD             reduce using rule 111 (expression -> llamarFuncion .)
    LBRACE          reduce using rule 111 (expression -> llamarFuncion .)
    IDENTIFIER      reduce using rule 111 (expression -> llamarFuncion .)
    VAR             reduce using rule 111 (expression -> llamarFuncion .)
    TYPE            reduce using rule 111 (expression -> llamarFuncion .)
    FOR             reduce using rule 111 (expression -> llamarFuncion .)
    PACKAGE         reduce using rule 111 (expression -> llamarFuncion .)
    IMPORT          reduce using rule 111 (expression -> llamarFuncion .)
    SWITCH          reduce using rule 111 (expression -> llamarFuncion .)
    IF              reduce using rule 111 (expression -> llamarFuncion .)
    FUNC            reduce using rule 111 (expression -> llamarFuncion .)
    $end            reduce using rule 111 (expression -> llamarFuncion .)
    RBRACE          reduce using rule 111 (expression -> llamarFuncion .)
    CASE            reduce using rule 111 (expression -> llamarFuncion .)
    DEFAULT         reduce using rule 111 (expression -> llamarFuncion .)
    RETURN          reduce using rule 111 (expression -> llamarFuncion .)
    COMMA           reduce using rule 111 (expression -> llamarFuncion .)
    RPAREN          reduce using rule 111 (expression -> llamarFuncion .)
    SEMICOLON       reduce using rule 111 (expression -> llamarFuncion .)
    RBRACKET        reduce using rule 111 (expression -> llamarFuncion .)
    COLON           reduce using rule 111 (expression -> llamarFuncion .)


state 52

    (120) expression -> MINUS . expression
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    expression                     shift and go to state 110
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 53

    (121) expression -> LPAREN . expression RPAREN
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    expression                     shift and go to state 111
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 54

    (141) expression -> function_literal .

    LBRACKET        reduce using rule 141 (expression -> function_literal .)
    EQ              reduce using rule 141 (expression -> function_literal .)
    NEQ             reduce using rule 141 (expression -> function_literal .)
    GT              reduce using rule 141 (expression -> function_literal .)
    LT              reduce using rule 141 (expression -> function_literal .)
    GE              reduce using rule 141 (expression -> function_literal .)
    LE              reduce using rule 141 (expression -> function_literal .)
    AND             reduce using rule 141 (expression -> function_literal .)
    OR              reduce using rule 141 (expression -> function_literal .)
    PLUS            reduce using rule 141 (expression -> function_literal .)
    MINUS           reduce using rule 141 (expression -> function_literal .)
    TIMES           reduce using rule 141 (expression -> function_literal .)
    DIVIDE          reduce using rule 141 (expression -> function_literal .)
    MOD             reduce using rule 141 (expression -> function_literal .)
    LBRACE          reduce using rule 141 (expression -> function_literal .)
    IDENTIFIER      reduce using rule 141 (expression -> function_literal .)
    VAR             reduce using rule 141 (expression -> function_literal .)
    TYPE            reduce using rule 141 (expression -> function_literal .)
    FOR             reduce using rule 141 (expression -> function_literal .)
    PACKAGE         reduce using rule 141 (expression -> function_literal .)
    IMPORT          reduce using rule 141 (expression -> function_literal .)
    SWITCH          reduce using rule 141 (expression -> function_literal .)
    IF              reduce using rule 141 (expression -> function_literal .)
    FUNC            reduce using rule 141 (expression -> function_literal .)
    $end            reduce using rule 141 (expression -> function_literal .)
    RBRACE          reduce using rule 141 (expression -> function_literal .)
    CASE            reduce using rule 141 (expression -> function_literal .)
    DEFAULT         reduce using rule 141 (expression -> function_literal .)
    RETURN          reduce using rule 141 (expression -> function_literal .)
    COMMA           reduce using rule 141 (expression -> function_literal .)
    RPAREN          reduce using rule 141 (expression -> function_literal .)
    SEMICOLON       reduce using rule 141 (expression -> function_literal .)
    RBRACKET        reduce using rule 141 (expression -> function_literal .)
    COLON           reduce using rule 141 (expression -> function_literal .)


state 55

    (144) slice_literal -> LBRACKET . RBRACKET type_name LBRACE elements RBRACE

    RBRACKET        shift and go to state 112


state 56

    (126) function_literal -> FUNC . LPAREN parameters RPAREN return_type block

    LPAREN          shift and go to state 113


state 57

    (22) package -> PACKAGE MAIN .

    IDENTIFIER      reduce using rule 22 (package -> PACKAGE MAIN .)
    VAR             reduce using rule 22 (package -> PACKAGE MAIN .)
    TYPE            reduce using rule 22 (package -> PACKAGE MAIN .)
    FOR             reduce using rule 22 (package -> PACKAGE MAIN .)
    PACKAGE         reduce using rule 22 (package -> PACKAGE MAIN .)
    IMPORT          reduce using rule 22 (package -> PACKAGE MAIN .)
    SWITCH          reduce using rule 22 (package -> PACKAGE MAIN .)
    IF              reduce using rule 22 (package -> PACKAGE MAIN .)
    FUNC            reduce using rule 22 (package -> PACKAGE MAIN .)
    $end            reduce using rule 22 (package -> PACKAGE MAIN .)
    RBRACE          reduce using rule 22 (package -> PACKAGE MAIN .)
    CASE            reduce using rule 22 (package -> PACKAGE MAIN .)
    DEFAULT         reduce using rule 22 (package -> PACKAGE MAIN .)
    RETURN          reduce using rule 22 (package -> PACKAGE MAIN .)


state 58

    (23) package -> PACKAGE IDENTIFIER .

    IDENTIFIER      reduce using rule 23 (package -> PACKAGE IDENTIFIER .)
    VAR             reduce using rule 23 (package -> PACKAGE IDENTIFIER .)
    TYPE            reduce using rule 23 (package -> PACKAGE IDENTIFIER .)
    FOR             reduce using rule 23 (package -> PACKAGE IDENTIFIER .)
    PACKAGE         reduce using rule 23 (package -> PACKAGE IDENTIFIER .)
    IMPORT          reduce using rule 23 (package -> PACKAGE IDENTIFIER .)
    SWITCH          reduce using rule 23 (package -> PACKAGE IDENTIFIER .)
    IF              reduce using rule 23 (package -> PACKAGE IDENTIFIER .)
    FUNC            reduce using rule 23 (package -> PACKAGE IDENTIFIER .)
    $end            reduce using rule 23 (package -> PACKAGE IDENTIFIER .)
    RBRACE          reduce using rule 23 (package -> PACKAGE IDENTIFIER .)
    CASE            reduce using rule 23 (package -> PACKAGE IDENTIFIER .)
    DEFAULT         reduce using rule 23 (package -> PACKAGE IDENTIFIER .)
    RETURN          reduce using rule 23 (package -> PACKAGE IDENTIFIER .)


state 59

    (24) import -> IMPORT STRING .

    IDENTIFIER      reduce using rule 24 (import -> IMPORT STRING .)
    VAR             reduce using rule 24 (import -> IMPORT STRING .)
    TYPE            reduce using rule 24 (import -> IMPORT STRING .)
    FOR             reduce using rule 24 (import -> IMPORT STRING .)
    PACKAGE         reduce using rule 24 (import -> IMPORT STRING .)
    IMPORT          reduce using rule 24 (import -> IMPORT STRING .)
    SWITCH          reduce using rule 24 (import -> IMPORT STRING .)
    IF              reduce using rule 24 (import -> IMPORT STRING .)
    FUNC            reduce using rule 24 (import -> IMPORT STRING .)
    $end            reduce using rule 24 (import -> IMPORT STRING .)
    RBRACE          reduce using rule 24 (import -> IMPORT STRING .)
    CASE            reduce using rule 24 (import -> IMPORT STRING .)
    DEFAULT         reduce using rule 24 (import -> IMPORT STRING .)
    RETURN          reduce using rule 24 (import -> IMPORT STRING .)


state 60

    (25) import -> IMPORT LPAREN . import_list RPAREN
    (26) import_list -> . STRING
    (27) import_list -> . import_list STRING

    STRING          shift and go to state 115

    import_list                    shift and go to state 114

state 61

    (60) switch -> SWITCH expression . LBRACE caseBlocks RBRACE
    (112) expression -> expression . operadorLogico expression
    (113) expression -> expression . comparador expression
    (114) expression -> expression . operator expression
    (147) expression -> expression . LBRACKET expression RBRACKET
    (148) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (149) expression -> expression . LBRACKET COLON expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON RBRACKET
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR
    (53) comparador -> . EQ
    (54) comparador -> . NEQ
    (55) comparador -> . GT
    (56) comparador -> . LT
    (57) comparador -> . GE
    (58) comparador -> . LE
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    LBRACE          shift and go to state 116
    LBRACKET        shift and go to state 91
    AND             shift and go to state 98
    OR              shift and go to state 99
    EQ              shift and go to state 92
    NEQ             shift and go to state 93
    GT              shift and go to state 94
    LT              shift and go to state 95
    GE              shift and go to state 96
    LE              shift and go to state 97
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104

    operadorLogico                 shift and go to state 89
    comparador                     shift and go to state 117
    operator                       shift and go to state 90

state 62

    (101) expression -> IDENTIFIER .
    (110) expression -> IDENTIFIER . DOT IDENTIFIER
    (41) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    LBRACE          reduce using rule 101 (expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 101 (expression -> IDENTIFIER .)
    AND             reduce using rule 101 (expression -> IDENTIFIER .)
    OR              reduce using rule 101 (expression -> IDENTIFIER .)
    EQ              reduce using rule 101 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 101 (expression -> IDENTIFIER .)
    GT              reduce using rule 101 (expression -> IDENTIFIER .)
    LT              reduce using rule 101 (expression -> IDENTIFIER .)
    GE              reduce using rule 101 (expression -> IDENTIFIER .)
    LE              reduce using rule 101 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 101 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 101 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 101 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 101 (expression -> IDENTIFIER .)
    MOD             reduce using rule 101 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 101 (expression -> IDENTIFIER .)
    VAR             reduce using rule 101 (expression -> IDENTIFIER .)
    TYPE            reduce using rule 101 (expression -> IDENTIFIER .)
    FOR             reduce using rule 101 (expression -> IDENTIFIER .)
    PACKAGE         reduce using rule 101 (expression -> IDENTIFIER .)
    IMPORT          reduce using rule 101 (expression -> IDENTIFIER .)
    SWITCH          reduce using rule 101 (expression -> IDENTIFIER .)
    IF              reduce using rule 101 (expression -> IDENTIFIER .)
    FUNC            reduce using rule 101 (expression -> IDENTIFIER .)
    $end            reduce using rule 101 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 101 (expression -> IDENTIFIER .)
    CASE            reduce using rule 101 (expression -> IDENTIFIER .)
    DEFAULT         reduce using rule 101 (expression -> IDENTIFIER .)
    RETURN          reduce using rule 101 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 101 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 101 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 101 (expression -> IDENTIFIER .)
    RBRACKET        reduce using rule 101 (expression -> IDENTIFIER .)
    COLON           reduce using rule 101 (expression -> IDENTIFIER .)
    DOT             shift and go to state 109
    LPAREN          shift and go to state 33


state 63

    (122) if_statement -> IF condicion . block
    (123) if_statement -> IF condicion . block ELSE block
    (49) condicion_compleja -> condicion . operadorLogico condicion
    (50) condicion_compleja -> condicion . operadorLogico condicion_compleja
    (99) block -> . LBRACE statement_list RBRACE
    (100) block -> . LBRACE RBRACE
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR

    LBRACE          shift and go to state 41
    AND             shift and go to state 98
    OR              shift and go to state 99

    block                          shift and go to state 118
    operadorLogico                 shift and go to state 119

state 64

    (124) if_statement -> IF condicion_compleja . block
    (125) if_statement -> IF condicion_compleja . block ELSE block
    (99) block -> . LBRACE statement_list RBRACE
    (100) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 41

    block                          shift and go to state 120

state 65

    (73) function -> FUNC IDENTIFIER . LPAREN params_opt RPAREN block
    (74) function -> FUNC IDENTIFIER . LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE

    LPAREN          shift and go to state 121


state 66

    (93) method_definition -> FUNC LPAREN . IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (126) function_literal -> FUNC LPAREN . parameters RPAREN return_type block
    (127) parameters -> . parameters COMMA parameter
    (128) parameters -> . parameter
    (129) parameters -> . empty
    (130) parameter -> . IDENTIFIER type_name
    (131) parameter -> . identifier_list type_name
    (59) empty -> .
    (132) identifier_list -> . IDENTIFIER
    (133) identifier_list -> . IDENTIFIER COMMA identifier_list

    IDENTIFIER      shift and go to state 122
    RPAREN          reduce using rule 59 (empty -> .)
    COMMA           reduce using rule 59 (empty -> .)

    parameters                     shift and go to state 123
    parameter                      shift and go to state 124
    empty                          shift and go to state 125
    identifier_list                shift and go to state 126

state 67

    (77) function -> FUNC MAIN . LPAREN params_opt RPAREN block

    LPAREN          shift and go to state 127


state 68

    (101) expression -> IDENTIFIER .
    (110) expression -> IDENTIFIER . DOT IDENTIFIER
    (86) struct_literal -> IDENTIFIER . LBRACE struct_field_assignments RBRACE
    (41) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    LBRACKET        reduce using rule 101 (expression -> IDENTIFIER .)
    AND             reduce using rule 101 (expression -> IDENTIFIER .)
    OR              reduce using rule 101 (expression -> IDENTIFIER .)
    EQ              reduce using rule 101 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 101 (expression -> IDENTIFIER .)
    GT              reduce using rule 101 (expression -> IDENTIFIER .)
    LT              reduce using rule 101 (expression -> IDENTIFIER .)
    GE              reduce using rule 101 (expression -> IDENTIFIER .)
    LE              reduce using rule 101 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 101 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 101 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 101 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 101 (expression -> IDENTIFIER .)
    MOD             reduce using rule 101 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 101 (expression -> IDENTIFIER .)
    VAR             reduce using rule 101 (expression -> IDENTIFIER .)
    TYPE            reduce using rule 101 (expression -> IDENTIFIER .)
    FOR             reduce using rule 101 (expression -> IDENTIFIER .)
    PACKAGE         reduce using rule 101 (expression -> IDENTIFIER .)
    IMPORT          reduce using rule 101 (expression -> IDENTIFIER .)
    SWITCH          reduce using rule 101 (expression -> IDENTIFIER .)
    IF              reduce using rule 101 (expression -> IDENTIFIER .)
    FUNC            reduce using rule 101 (expression -> IDENTIFIER .)
    $end            reduce using rule 101 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 101 (expression -> IDENTIFIER .)
    CASE            reduce using rule 101 (expression -> IDENTIFIER .)
    DEFAULT         reduce using rule 101 (expression -> IDENTIFIER .)
    RETURN          reduce using rule 101 (expression -> IDENTIFIER .)
    DOT             shift and go to state 109
    LBRACE          shift and go to state 128
    LPAREN          shift and go to state 33


state 69

    (34) assignment -> IDENTIFIER DECLARE_ASSIGN expression .
    (112) expression -> expression . operadorLogico expression
    (113) expression -> expression . comparador expression
    (114) expression -> expression . operator expression
    (147) expression -> expression . LBRACKET expression RBRACKET
    (148) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (149) expression -> expression . LBRACKET COLON expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON RBRACKET
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR
    (53) comparador -> . EQ
    (54) comparador -> . NEQ
    (55) comparador -> . GT
    (56) comparador -> . LT
    (57) comparador -> . GE
    (58) comparador -> . LE
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    IDENTIFIER      reduce using rule 34 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    VAR             reduce using rule 34 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    TYPE            reduce using rule 34 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    FOR             reduce using rule 34 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    PACKAGE         reduce using rule 34 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    IMPORT          reduce using rule 34 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    SWITCH          reduce using rule 34 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    IF              reduce using rule 34 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    FUNC            reduce using rule 34 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    $end            reduce using rule 34 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    RBRACE          reduce using rule 34 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    CASE            reduce using rule 34 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    DEFAULT         reduce using rule 34 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    RETURN          reduce using rule 34 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    LBRACKET        shift and go to state 91
    AND             shift and go to state 98
    OR              shift and go to state 99
    EQ              shift and go to state 92
    NEQ             shift and go to state 93
    GT              shift and go to state 94
    LT              shift and go to state 95
    GE              shift and go to state 96
    LE              shift and go to state 97
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104

    operadorLogico                 shift and go to state 89
    comparador                     shift and go to state 117
    operator                       shift and go to state 90

state 70

    (35) assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .

    IDENTIFIER      reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    VAR             reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    TYPE            reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    FOR             reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    PACKAGE         reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    IMPORT          reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    SWITCH          reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    IF              reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    FUNC            reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    $end            reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    RBRACE          reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    CASE            reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    DEFAULT         reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)
    RETURN          reduce using rule 35 (assignment -> IDENTIFIER DECLARE_ASSIGN struct_literal .)


state 71

    (38) assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .
    (143) declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .
    (109) expression -> slice_literal .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for VAR resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for TYPE resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for FOR resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IMPORT resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for SWITCH resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IF resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for FUNC resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for $end resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for RBRACE resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for CASE resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for RETURN resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for VAR resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for TYPE resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for FOR resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IMPORT resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for SWITCH resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IF resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for FUNC resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for $end resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for RBRACE resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for CASE resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for RETURN resolved using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    IDENTIFIER      reduce using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    VAR             reduce using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    TYPE            reduce using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    FOR             reduce using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    PACKAGE         reduce using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    IMPORT          reduce using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    SWITCH          reduce using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    IF              reduce using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    FUNC            reduce using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    $end            reduce using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    RBRACE          reduce using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    CASE            reduce using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    DEFAULT         reduce using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    RETURN          reduce using rule 38 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    LBRACKET        reduce using rule 109 (expression -> slice_literal .)
    AND             reduce using rule 109 (expression -> slice_literal .)
    OR              reduce using rule 109 (expression -> slice_literal .)
    EQ              reduce using rule 109 (expression -> slice_literal .)
    NEQ             reduce using rule 109 (expression -> slice_literal .)
    GT              reduce using rule 109 (expression -> slice_literal .)
    LT              reduce using rule 109 (expression -> slice_literal .)
    GE              reduce using rule 109 (expression -> slice_literal .)
    LE              reduce using rule 109 (expression -> slice_literal .)
    PLUS            reduce using rule 109 (expression -> slice_literal .)
    MINUS           reduce using rule 109 (expression -> slice_literal .)
    TIMES           reduce using rule 109 (expression -> slice_literal .)
    DIVIDE          reduce using rule 109 (expression -> slice_literal .)
    MOD             reduce using rule 109 (expression -> slice_literal .)

  ! IDENTIFIER      [ reduce using rule 143 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! VAR             [ reduce using rule 143 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! TYPE            [ reduce using rule 143 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! FOR             [ reduce using rule 143 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! PACKAGE         [ reduce using rule 143 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! IMPORT          [ reduce using rule 143 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! SWITCH          [ reduce using rule 143 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! IF              [ reduce using rule 143 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! FUNC            [ reduce using rule 143 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! $end            [ reduce using rule 143 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! RBRACE          [ reduce using rule 143 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! CASE            [ reduce using rule 143 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! DEFAULT         [ reduce using rule 143 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! RETURN          [ reduce using rule 143 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! IDENTIFIER      [ reduce using rule 109 (expression -> slice_literal .) ]
  ! VAR             [ reduce using rule 109 (expression -> slice_literal .) ]
  ! TYPE            [ reduce using rule 109 (expression -> slice_literal .) ]
  ! FOR             [ reduce using rule 109 (expression -> slice_literal .) ]
  ! PACKAGE         [ reduce using rule 109 (expression -> slice_literal .) ]
  ! IMPORT          [ reduce using rule 109 (expression -> slice_literal .) ]
  ! SWITCH          [ reduce using rule 109 (expression -> slice_literal .) ]
  ! IF              [ reduce using rule 109 (expression -> slice_literal .) ]
  ! FUNC            [ reduce using rule 109 (expression -> slice_literal .) ]
  ! $end            [ reduce using rule 109 (expression -> slice_literal .) ]
  ! RBRACE          [ reduce using rule 109 (expression -> slice_literal .) ]
  ! CASE            [ reduce using rule 109 (expression -> slice_literal .) ]
  ! DEFAULT         [ reduce using rule 109 (expression -> slice_literal .) ]
  ! RETURN          [ reduce using rule 109 (expression -> slice_literal .) ]


state 72

    (65) map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .

    IDENTIFIER      reduce using rule 65 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    VAR             reduce using rule 65 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    TYPE            reduce using rule 65 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    FOR             reduce using rule 65 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    PACKAGE         reduce using rule 65 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    IMPORT          reduce using rule 65 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    SWITCH          reduce using rule 65 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    IF              reduce using rule 65 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    FUNC            reduce using rule 65 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    $end            reduce using rule 65 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    RBRACE          reduce using rule 65 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    CASE            reduce using rule 65 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    DEFAULT         reduce using rule 65 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    RETURN          reduce using rule 65 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)


state 73

    (67) mapLiteral -> MAP . LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE

    LBRACKET        shift and go to state 129


state 74

    (40) assignment -> IDENTIFIER ASSIGN expression .
    (112) expression -> expression . operadorLogico expression
    (113) expression -> expression . comparador expression
    (114) expression -> expression . operator expression
    (147) expression -> expression . LBRACKET expression RBRACKET
    (148) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (149) expression -> expression . LBRACKET COLON expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON RBRACKET
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR
    (53) comparador -> . EQ
    (54) comparador -> . NEQ
    (55) comparador -> . GT
    (56) comparador -> . LT
    (57) comparador -> . GE
    (58) comparador -> . LE
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    IDENTIFIER      reduce using rule 40 (assignment -> IDENTIFIER ASSIGN expression .)
    VAR             reduce using rule 40 (assignment -> IDENTIFIER ASSIGN expression .)
    TYPE            reduce using rule 40 (assignment -> IDENTIFIER ASSIGN expression .)
    FOR             reduce using rule 40 (assignment -> IDENTIFIER ASSIGN expression .)
    PACKAGE         reduce using rule 40 (assignment -> IDENTIFIER ASSIGN expression .)
    IMPORT          reduce using rule 40 (assignment -> IDENTIFIER ASSIGN expression .)
    SWITCH          reduce using rule 40 (assignment -> IDENTIFIER ASSIGN expression .)
    IF              reduce using rule 40 (assignment -> IDENTIFIER ASSIGN expression .)
    FUNC            reduce using rule 40 (assignment -> IDENTIFIER ASSIGN expression .)
    $end            reduce using rule 40 (assignment -> IDENTIFIER ASSIGN expression .)
    RBRACE          reduce using rule 40 (assignment -> IDENTIFIER ASSIGN expression .)
    CASE            reduce using rule 40 (assignment -> IDENTIFIER ASSIGN expression .)
    DEFAULT         reduce using rule 40 (assignment -> IDENTIFIER ASSIGN expression .)
    RETURN          reduce using rule 40 (assignment -> IDENTIFIER ASSIGN expression .)
    LBRACKET        shift and go to state 91
    AND             shift and go to state 98
    OR              shift and go to state 99
    EQ              shift and go to state 92
    NEQ             shift and go to state 93
    GT              shift and go to state 94
    LT              shift and go to state 95
    GE              shift and go to state 96
    LE              shift and go to state 97
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104

    operadorLogico                 shift and go to state 89
    comparador                     shift and go to state 117
    operator                       shift and go to state 90

state 75

    (32) input -> IDENTIFIER DOT IDENTIFIER . LPAREN AMPERSAND IDENTIFIER RPAREN
    (43) llamarFuncion -> IDENTIFIER DOT IDENTIFIER . LPAREN argument_list_opt RPAREN

    LPAREN          shift and go to state 130


state 76

    (41) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt . RPAREN
    (42) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt . COMMA expression RPAREN

    RPAREN          shift and go to state 131
    COMMA           shift and go to state 132


state 77

    (44) argument_list -> expression .
    (112) expression -> expression . operadorLogico expression
    (113) expression -> expression . comparador expression
    (114) expression -> expression . operator expression
    (147) expression -> expression . LBRACKET expression RBRACKET
    (148) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (149) expression -> expression . LBRACKET COLON expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON RBRACKET
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR
    (53) comparador -> . EQ
    (54) comparador -> . NEQ
    (55) comparador -> . GT
    (56) comparador -> . LT
    (57) comparador -> . GE
    (58) comparador -> . LE
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    COMMA           reduce using rule 44 (argument_list -> expression .)
    RPAREN          reduce using rule 44 (argument_list -> expression .)
    LBRACKET        shift and go to state 91
    AND             shift and go to state 98
    OR              shift and go to state 99
    EQ              shift and go to state 92
    NEQ             shift and go to state 93
    GT              shift and go to state 94
    LT              shift and go to state 95
    GE              shift and go to state 96
    LE              shift and go to state 97
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104

    operadorLogico                 shift and go to state 89
    comparador                     shift and go to state 117
    operator                       shift and go to state 90

state 78

    (46) argument_list_opt -> argument_list .
    (45) argument_list -> argument_list . COMMA expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 46 (argument_list_opt -> argument_list .)
    COMMA           shift and go to state 133

  ! COMMA           [ reduce using rule 46 (argument_list_opt -> argument_list .) ]


state 79

    (135) type_name -> IDENTIFIER .

    ASSIGN          reduce using rule 135 (type_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 135 (type_name -> IDENTIFIER .)
    VAR             reduce using rule 135 (type_name -> IDENTIFIER .)
    TYPE            reduce using rule 135 (type_name -> IDENTIFIER .)
    FOR             reduce using rule 135 (type_name -> IDENTIFIER .)
    PACKAGE         reduce using rule 135 (type_name -> IDENTIFIER .)
    IMPORT          reduce using rule 135 (type_name -> IDENTIFIER .)
    SWITCH          reduce using rule 135 (type_name -> IDENTIFIER .)
    IF              reduce using rule 135 (type_name -> IDENTIFIER .)
    FUNC            reduce using rule 135 (type_name -> IDENTIFIER .)
    $end            reduce using rule 135 (type_name -> IDENTIFIER .)
    RBRACE          reduce using rule 135 (type_name -> IDENTIFIER .)
    CASE            reduce using rule 135 (type_name -> IDENTIFIER .)
    DEFAULT         reduce using rule 135 (type_name -> IDENTIFIER .)
    RETURN          reduce using rule 135 (type_name -> IDENTIFIER .)
    LBRACE          reduce using rule 135 (type_name -> IDENTIFIER .)
    RPAREN          reduce using rule 135 (type_name -> IDENTIFIER .)
    COMMA           reduce using rule 135 (type_name -> IDENTIFIER .)
    RBRACKET        reduce using rule 135 (type_name -> IDENTIFIER .)


state 80

    (36) assignment -> VAR IDENTIFIER type_name . ASSIGN expression
    (37) assignment -> VAR IDENTIFIER type_name . ASSIGN llamarFuncion
    (39) assignment -> VAR IDENTIFIER type_name . ASSIGN slice_literal
    (33) var_declaration -> VAR IDENTIFIER type_name .

    ASSIGN          shift and go to state 134
    IDENTIFIER      reduce using rule 33 (var_declaration -> VAR IDENTIFIER type_name .)
    VAR             reduce using rule 33 (var_declaration -> VAR IDENTIFIER type_name .)
    TYPE            reduce using rule 33 (var_declaration -> VAR IDENTIFIER type_name .)
    FOR             reduce using rule 33 (var_declaration -> VAR IDENTIFIER type_name .)
    PACKAGE         reduce using rule 33 (var_declaration -> VAR IDENTIFIER type_name .)
    IMPORT          reduce using rule 33 (var_declaration -> VAR IDENTIFIER type_name .)
    SWITCH          reduce using rule 33 (var_declaration -> VAR IDENTIFIER type_name .)
    IF              reduce using rule 33 (var_declaration -> VAR IDENTIFIER type_name .)
    FUNC            reduce using rule 33 (var_declaration -> VAR IDENTIFIER type_name .)
    $end            reduce using rule 33 (var_declaration -> VAR IDENTIFIER type_name .)
    RBRACE          reduce using rule 33 (var_declaration -> VAR IDENTIFIER type_name .)
    CASE            reduce using rule 33 (var_declaration -> VAR IDENTIFIER type_name .)
    DEFAULT         reduce using rule 33 (var_declaration -> VAR IDENTIFIER type_name .)
    RETURN          reduce using rule 33 (var_declaration -> VAR IDENTIFIER type_name .)


state 81

    (66) map -> VAR IDENTIFIER ASSIGN . mapLiteral
    (67) mapLiteral -> . MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE

    MAP             shift and go to state 73

    mapLiteral                     shift and go to state 135

state 82

    (142) slice_declaration -> VAR IDENTIFIER LBRACKET . RBRACKET type_name
    (136) type_name -> LBRACKET . RBRACKET type_name

    RBRACKET        shift and go to state 136


state 83

    (134) type_name -> DATATYPE .

    ASSIGN          reduce using rule 134 (type_name -> DATATYPE .)
    IDENTIFIER      reduce using rule 134 (type_name -> DATATYPE .)
    VAR             reduce using rule 134 (type_name -> DATATYPE .)
    TYPE            reduce using rule 134 (type_name -> DATATYPE .)
    FOR             reduce using rule 134 (type_name -> DATATYPE .)
    PACKAGE         reduce using rule 134 (type_name -> DATATYPE .)
    IMPORT          reduce using rule 134 (type_name -> DATATYPE .)
    SWITCH          reduce using rule 134 (type_name -> DATATYPE .)
    IF              reduce using rule 134 (type_name -> DATATYPE .)
    FUNC            reduce using rule 134 (type_name -> DATATYPE .)
    $end            reduce using rule 134 (type_name -> DATATYPE .)
    RBRACE          reduce using rule 134 (type_name -> DATATYPE .)
    CASE            reduce using rule 134 (type_name -> DATATYPE .)
    DEFAULT         reduce using rule 134 (type_name -> DATATYPE .)
    RETURN          reduce using rule 134 (type_name -> DATATYPE .)
    LBRACE          reduce using rule 134 (type_name -> DATATYPE .)
    RPAREN          reduce using rule 134 (type_name -> DATATYPE .)
    COMMA           reduce using rule 134 (type_name -> DATATYPE .)
    RBRACKET        reduce using rule 134 (type_name -> DATATYPE .)


state 84

    (137) type_name -> FUNC . LPAREN parameters RPAREN return_type

    LPAREN          shift and go to state 137


state 85

    (85) struct_definition -> TYPE IDENTIFIER STRUCT . LBRACE struct_fields RBRACE

    LBRACE          shift and go to state 138


state 86

    (94) for_statement -> FOR shortAssignment SEMICOLON . condicion SEMICOLON expression block
    (48) condicion -> . expression comparador expression
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    condicion                      shift and go to state 139
    expression                     shift and go to state 38
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 87

    (96) for_statement -> FOR condicion block .

    IDENTIFIER      reduce using rule 96 (for_statement -> FOR condicion block .)
    VAR             reduce using rule 96 (for_statement -> FOR condicion block .)
    TYPE            reduce using rule 96 (for_statement -> FOR condicion block .)
    FOR             reduce using rule 96 (for_statement -> FOR condicion block .)
    PACKAGE         reduce using rule 96 (for_statement -> FOR condicion block .)
    IMPORT          reduce using rule 96 (for_statement -> FOR condicion block .)
    SWITCH          reduce using rule 96 (for_statement -> FOR condicion block .)
    IF              reduce using rule 96 (for_statement -> FOR condicion block .)
    FUNC            reduce using rule 96 (for_statement -> FOR condicion block .)
    $end            reduce using rule 96 (for_statement -> FOR condicion block .)
    RBRACE          reduce using rule 96 (for_statement -> FOR condicion block .)
    CASE            reduce using rule 96 (for_statement -> FOR condicion block .)
    DEFAULT         reduce using rule 96 (for_statement -> FOR condicion block .)
    RETURN          reduce using rule 96 (for_statement -> FOR condicion block .)


state 88

    (48) condicion -> expression comparador . expression
    (113) expression -> expression comparador . expression
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    expression                     shift and go to state 140
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 89

    (112) expression -> expression operadorLogico . expression
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    expression                     shift and go to state 141
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 90

    (114) expression -> expression operator . expression
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    expression                     shift and go to state 142
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 91

    (147) expression -> expression LBRACKET . expression RBRACKET
    (148) expression -> expression LBRACKET . expression COLON expression RBRACKET
    (149) expression -> expression LBRACKET . COLON expression RBRACKET
    (150) expression -> expression LBRACKET . expression COLON RBRACKET
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    COLON           shift and go to state 144
    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    expression                     shift and go to state 143
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 92

    (53) comparador -> EQ .

    IDENTIFIER      reduce using rule 53 (comparador -> EQ .)
    NUMBER          reduce using rule 53 (comparador -> EQ .)
    RUNE            reduce using rule 53 (comparador -> EQ .)
    STRING          reduce using rule 53 (comparador -> EQ .)
    RAW_STRING      reduce using rule 53 (comparador -> EQ .)
    TRUE            reduce using rule 53 (comparador -> EQ .)
    FALSE           reduce using rule 53 (comparador -> EQ .)
    NIL             reduce using rule 53 (comparador -> EQ .)
    MINUS           reduce using rule 53 (comparador -> EQ .)
    LPAREN          reduce using rule 53 (comparador -> EQ .)
    LBRACKET        reduce using rule 53 (comparador -> EQ .)
    FUNC            reduce using rule 53 (comparador -> EQ .)


state 93

    (54) comparador -> NEQ .

    IDENTIFIER      reduce using rule 54 (comparador -> NEQ .)
    NUMBER          reduce using rule 54 (comparador -> NEQ .)
    RUNE            reduce using rule 54 (comparador -> NEQ .)
    STRING          reduce using rule 54 (comparador -> NEQ .)
    RAW_STRING      reduce using rule 54 (comparador -> NEQ .)
    TRUE            reduce using rule 54 (comparador -> NEQ .)
    FALSE           reduce using rule 54 (comparador -> NEQ .)
    NIL             reduce using rule 54 (comparador -> NEQ .)
    MINUS           reduce using rule 54 (comparador -> NEQ .)
    LPAREN          reduce using rule 54 (comparador -> NEQ .)
    LBRACKET        reduce using rule 54 (comparador -> NEQ .)
    FUNC            reduce using rule 54 (comparador -> NEQ .)


state 94

    (55) comparador -> GT .

    IDENTIFIER      reduce using rule 55 (comparador -> GT .)
    NUMBER          reduce using rule 55 (comparador -> GT .)
    RUNE            reduce using rule 55 (comparador -> GT .)
    STRING          reduce using rule 55 (comparador -> GT .)
    RAW_STRING      reduce using rule 55 (comparador -> GT .)
    TRUE            reduce using rule 55 (comparador -> GT .)
    FALSE           reduce using rule 55 (comparador -> GT .)
    NIL             reduce using rule 55 (comparador -> GT .)
    MINUS           reduce using rule 55 (comparador -> GT .)
    LPAREN          reduce using rule 55 (comparador -> GT .)
    LBRACKET        reduce using rule 55 (comparador -> GT .)
    FUNC            reduce using rule 55 (comparador -> GT .)


state 95

    (56) comparador -> LT .

    IDENTIFIER      reduce using rule 56 (comparador -> LT .)
    NUMBER          reduce using rule 56 (comparador -> LT .)
    RUNE            reduce using rule 56 (comparador -> LT .)
    STRING          reduce using rule 56 (comparador -> LT .)
    RAW_STRING      reduce using rule 56 (comparador -> LT .)
    TRUE            reduce using rule 56 (comparador -> LT .)
    FALSE           reduce using rule 56 (comparador -> LT .)
    NIL             reduce using rule 56 (comparador -> LT .)
    MINUS           reduce using rule 56 (comparador -> LT .)
    LPAREN          reduce using rule 56 (comparador -> LT .)
    LBRACKET        reduce using rule 56 (comparador -> LT .)
    FUNC            reduce using rule 56 (comparador -> LT .)


state 96

    (57) comparador -> GE .

    IDENTIFIER      reduce using rule 57 (comparador -> GE .)
    NUMBER          reduce using rule 57 (comparador -> GE .)
    RUNE            reduce using rule 57 (comparador -> GE .)
    STRING          reduce using rule 57 (comparador -> GE .)
    RAW_STRING      reduce using rule 57 (comparador -> GE .)
    TRUE            reduce using rule 57 (comparador -> GE .)
    FALSE           reduce using rule 57 (comparador -> GE .)
    NIL             reduce using rule 57 (comparador -> GE .)
    MINUS           reduce using rule 57 (comparador -> GE .)
    LPAREN          reduce using rule 57 (comparador -> GE .)
    LBRACKET        reduce using rule 57 (comparador -> GE .)
    FUNC            reduce using rule 57 (comparador -> GE .)


state 97

    (58) comparador -> LE .

    IDENTIFIER      reduce using rule 58 (comparador -> LE .)
    NUMBER          reduce using rule 58 (comparador -> LE .)
    RUNE            reduce using rule 58 (comparador -> LE .)
    STRING          reduce using rule 58 (comparador -> LE .)
    RAW_STRING      reduce using rule 58 (comparador -> LE .)
    TRUE            reduce using rule 58 (comparador -> LE .)
    FALSE           reduce using rule 58 (comparador -> LE .)
    NIL             reduce using rule 58 (comparador -> LE .)
    MINUS           reduce using rule 58 (comparador -> LE .)
    LPAREN          reduce using rule 58 (comparador -> LE .)
    LBRACKET        reduce using rule 58 (comparador -> LE .)
    FUNC            reduce using rule 58 (comparador -> LE .)


state 98

    (51) operadorLogico -> AND .

    IDENTIFIER      reduce using rule 51 (operadorLogico -> AND .)
    NUMBER          reduce using rule 51 (operadorLogico -> AND .)
    RUNE            reduce using rule 51 (operadorLogico -> AND .)
    STRING          reduce using rule 51 (operadorLogico -> AND .)
    RAW_STRING      reduce using rule 51 (operadorLogico -> AND .)
    TRUE            reduce using rule 51 (operadorLogico -> AND .)
    FALSE           reduce using rule 51 (operadorLogico -> AND .)
    NIL             reduce using rule 51 (operadorLogico -> AND .)
    MINUS           reduce using rule 51 (operadorLogico -> AND .)
    LPAREN          reduce using rule 51 (operadorLogico -> AND .)
    LBRACKET        reduce using rule 51 (operadorLogico -> AND .)
    FUNC            reduce using rule 51 (operadorLogico -> AND .)


state 99

    (52) operadorLogico -> OR .

    IDENTIFIER      reduce using rule 52 (operadorLogico -> OR .)
    NUMBER          reduce using rule 52 (operadorLogico -> OR .)
    RUNE            reduce using rule 52 (operadorLogico -> OR .)
    STRING          reduce using rule 52 (operadorLogico -> OR .)
    RAW_STRING      reduce using rule 52 (operadorLogico -> OR .)
    TRUE            reduce using rule 52 (operadorLogico -> OR .)
    FALSE           reduce using rule 52 (operadorLogico -> OR .)
    NIL             reduce using rule 52 (operadorLogico -> OR .)
    MINUS           reduce using rule 52 (operadorLogico -> OR .)
    LPAREN          reduce using rule 52 (operadorLogico -> OR .)
    LBRACKET        reduce using rule 52 (operadorLogico -> OR .)
    FUNC            reduce using rule 52 (operadorLogico -> OR .)


state 100

    (115) operator -> PLUS .

    IDENTIFIER      reduce using rule 115 (operator -> PLUS .)
    NUMBER          reduce using rule 115 (operator -> PLUS .)
    RUNE            reduce using rule 115 (operator -> PLUS .)
    STRING          reduce using rule 115 (operator -> PLUS .)
    RAW_STRING      reduce using rule 115 (operator -> PLUS .)
    TRUE            reduce using rule 115 (operator -> PLUS .)
    FALSE           reduce using rule 115 (operator -> PLUS .)
    NIL             reduce using rule 115 (operator -> PLUS .)
    MINUS           reduce using rule 115 (operator -> PLUS .)
    LPAREN          reduce using rule 115 (operator -> PLUS .)
    LBRACKET        reduce using rule 115 (operator -> PLUS .)
    FUNC            reduce using rule 115 (operator -> PLUS .)


state 101

    (116) operator -> MINUS .

    IDENTIFIER      reduce using rule 116 (operator -> MINUS .)
    NUMBER          reduce using rule 116 (operator -> MINUS .)
    RUNE            reduce using rule 116 (operator -> MINUS .)
    STRING          reduce using rule 116 (operator -> MINUS .)
    RAW_STRING      reduce using rule 116 (operator -> MINUS .)
    TRUE            reduce using rule 116 (operator -> MINUS .)
    FALSE           reduce using rule 116 (operator -> MINUS .)
    NIL             reduce using rule 116 (operator -> MINUS .)
    MINUS           reduce using rule 116 (operator -> MINUS .)
    LPAREN          reduce using rule 116 (operator -> MINUS .)
    LBRACKET        reduce using rule 116 (operator -> MINUS .)
    FUNC            reduce using rule 116 (operator -> MINUS .)


state 102

    (117) operator -> TIMES .

    IDENTIFIER      reduce using rule 117 (operator -> TIMES .)
    NUMBER          reduce using rule 117 (operator -> TIMES .)
    RUNE            reduce using rule 117 (operator -> TIMES .)
    STRING          reduce using rule 117 (operator -> TIMES .)
    RAW_STRING      reduce using rule 117 (operator -> TIMES .)
    TRUE            reduce using rule 117 (operator -> TIMES .)
    FALSE           reduce using rule 117 (operator -> TIMES .)
    NIL             reduce using rule 117 (operator -> TIMES .)
    MINUS           reduce using rule 117 (operator -> TIMES .)
    LPAREN          reduce using rule 117 (operator -> TIMES .)
    LBRACKET        reduce using rule 117 (operator -> TIMES .)
    FUNC            reduce using rule 117 (operator -> TIMES .)


state 103

    (118) operator -> DIVIDE .

    IDENTIFIER      reduce using rule 118 (operator -> DIVIDE .)
    NUMBER          reduce using rule 118 (operator -> DIVIDE .)
    RUNE            reduce using rule 118 (operator -> DIVIDE .)
    STRING          reduce using rule 118 (operator -> DIVIDE .)
    RAW_STRING      reduce using rule 118 (operator -> DIVIDE .)
    TRUE            reduce using rule 118 (operator -> DIVIDE .)
    FALSE           reduce using rule 118 (operator -> DIVIDE .)
    NIL             reduce using rule 118 (operator -> DIVIDE .)
    MINUS           reduce using rule 118 (operator -> DIVIDE .)
    LPAREN          reduce using rule 118 (operator -> DIVIDE .)
    LBRACKET        reduce using rule 118 (operator -> DIVIDE .)
    FUNC            reduce using rule 118 (operator -> DIVIDE .)


state 104

    (119) operator -> MOD .

    IDENTIFIER      reduce using rule 119 (operator -> MOD .)
    NUMBER          reduce using rule 119 (operator -> MOD .)
    RUNE            reduce using rule 119 (operator -> MOD .)
    STRING          reduce using rule 119 (operator -> MOD .)
    RAW_STRING      reduce using rule 119 (operator -> MOD .)
    TRUE            reduce using rule 119 (operator -> MOD .)
    FALSE           reduce using rule 119 (operator -> MOD .)
    NIL             reduce using rule 119 (operator -> MOD .)
    MINUS           reduce using rule 119 (operator -> MOD .)
    LPAREN          reduce using rule 119 (operator -> MOD .)
    LBRACKET        reduce using rule 119 (operator -> MOD .)
    FUNC            reduce using rule 119 (operator -> MOD .)


state 105

    (95) shortAssignment -> identifier_list DECLARE_ASSIGN . expression
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    expression                     shift and go to state 145
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 106

    (99) block -> LBRACE statement_list . RBRACE
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . struct_definition
    (10) statement -> . for_statement
    (11) statement -> . package
    (12) statement -> . import
    (13) statement -> . switch
    (14) statement -> . map
    (15) statement -> . if_statement
    (16) statement -> . function
    (17) statement -> . method_definition
    (18) statement -> . function_literal
    (19) statement -> . var_declaration
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (34) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (36) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (38) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (39) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (40) assignment -> . IDENTIFIER ASSIGN expression
    (32) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (85) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (94) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (96) for_statement -> . FOR condicion block
    (97) for_statement -> . FOR block
    (22) package -> . PACKAGE MAIN
    (23) package -> . PACKAGE IDENTIFIER
    (24) import -> . IMPORT STRING
    (25) import -> . IMPORT LPAREN import_list RPAREN
    (60) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (65) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (66) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (122) if_statement -> . IF condicion block
    (123) if_statement -> . IF condicion block ELSE block
    (124) if_statement -> . IF condicion_compleja block
    (125) if_statement -> . IF condicion_compleja block ELSE block
    (73) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (77) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (93) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (33) var_declaration -> . VAR IDENTIFIER type_name
    (142) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (143) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    RBRACE          shift and go to state 146
    IDENTIFIER      shift and go to state 20
    VAR             shift and go to state 21
    TYPE            shift and go to state 22
    FOR             shift and go to state 23
    PACKAGE         shift and go to state 24
    IMPORT          shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27
    FUNC            shift and go to state 28

    statement                      shift and go to state 29
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    struct_definition              shift and go to state 7
    for_statement                  shift and go to state 8
    package                        shift and go to state 9
    import                         shift and go to state 10
    switch                         shift and go to state 11
    map                            shift and go to state 12
    if_statement                   shift and go to state 13
    function                       shift and go to state 14
    method_definition              shift and go to state 15
    function_literal               shift and go to state 16
    var_declaration                shift and go to state 17
    slice_declaration              shift and go to state 18
    declare_assign                 shift and go to state 19

state 107

    (100) block -> LBRACE RBRACE .

    IDENTIFIER      reduce using rule 100 (block -> LBRACE RBRACE .)
    VAR             reduce using rule 100 (block -> LBRACE RBRACE .)
    TYPE            reduce using rule 100 (block -> LBRACE RBRACE .)
    FOR             reduce using rule 100 (block -> LBRACE RBRACE .)
    PACKAGE         reduce using rule 100 (block -> LBRACE RBRACE .)
    IMPORT          reduce using rule 100 (block -> LBRACE RBRACE .)
    SWITCH          reduce using rule 100 (block -> LBRACE RBRACE .)
    IF              reduce using rule 100 (block -> LBRACE RBRACE .)
    FUNC            reduce using rule 100 (block -> LBRACE RBRACE .)
    $end            reduce using rule 100 (block -> LBRACE RBRACE .)
    RBRACE          reduce using rule 100 (block -> LBRACE RBRACE .)
    CASE            reduce using rule 100 (block -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 100 (block -> LBRACE RBRACE .)
    RETURN          reduce using rule 100 (block -> LBRACE RBRACE .)
    ELSE            reduce using rule 100 (block -> LBRACE RBRACE .)
    LBRACKET        reduce using rule 100 (block -> LBRACE RBRACE .)
    EQ              reduce using rule 100 (block -> LBRACE RBRACE .)
    NEQ             reduce using rule 100 (block -> LBRACE RBRACE .)
    GT              reduce using rule 100 (block -> LBRACE RBRACE .)
    LT              reduce using rule 100 (block -> LBRACE RBRACE .)
    GE              reduce using rule 100 (block -> LBRACE RBRACE .)
    LE              reduce using rule 100 (block -> LBRACE RBRACE .)
    AND             reduce using rule 100 (block -> LBRACE RBRACE .)
    OR              reduce using rule 100 (block -> LBRACE RBRACE .)
    PLUS            reduce using rule 100 (block -> LBRACE RBRACE .)
    MINUS           reduce using rule 100 (block -> LBRACE RBRACE .)
    TIMES           reduce using rule 100 (block -> LBRACE RBRACE .)
    DIVIDE          reduce using rule 100 (block -> LBRACE RBRACE .)
    MOD             reduce using rule 100 (block -> LBRACE RBRACE .)
    LBRACE          reduce using rule 100 (block -> LBRACE RBRACE .)
    COMMA           reduce using rule 100 (block -> LBRACE RBRACE .)
    RPAREN          reduce using rule 100 (block -> LBRACE RBRACE .)
    SEMICOLON       reduce using rule 100 (block -> LBRACE RBRACE .)
    RBRACKET        reduce using rule 100 (block -> LBRACE RBRACE .)
    COLON           reduce using rule 100 (block -> LBRACE RBRACE .)


state 108

    (133) identifier_list -> IDENTIFIER COMMA . identifier_list
    (132) identifier_list -> . IDENTIFIER
    (133) identifier_list -> . IDENTIFIER COMMA identifier_list

    IDENTIFIER      shift and go to state 147

    identifier_list                shift and go to state 148

state 109

    (110) expression -> IDENTIFIER DOT . IDENTIFIER
    (43) llamarFuncion -> IDENTIFIER DOT . IDENTIFIER LPAREN argument_list_opt RPAREN

    IDENTIFIER      shift and go to state 149


state 110

    (120) expression -> MINUS expression .
    (112) expression -> expression . operadorLogico expression
    (113) expression -> expression . comparador expression
    (114) expression -> expression . operator expression
    (147) expression -> expression . LBRACKET expression RBRACKET
    (148) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (149) expression -> expression . LBRACKET COLON expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON RBRACKET
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR
    (53) comparador -> . EQ
    (54) comparador -> . NEQ
    (55) comparador -> . GT
    (56) comparador -> . LT
    (57) comparador -> . GE
    (58) comparador -> . LE
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    LBRACKET        reduce using rule 120 (expression -> MINUS expression .)
    EQ              reduce using rule 120 (expression -> MINUS expression .)
    NEQ             reduce using rule 120 (expression -> MINUS expression .)
    GT              reduce using rule 120 (expression -> MINUS expression .)
    LT              reduce using rule 120 (expression -> MINUS expression .)
    GE              reduce using rule 120 (expression -> MINUS expression .)
    LE              reduce using rule 120 (expression -> MINUS expression .)
    AND             reduce using rule 120 (expression -> MINUS expression .)
    OR              reduce using rule 120 (expression -> MINUS expression .)
    PLUS            reduce using rule 120 (expression -> MINUS expression .)
    MINUS           reduce using rule 120 (expression -> MINUS expression .)
    TIMES           reduce using rule 120 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 120 (expression -> MINUS expression .)
    MOD             reduce using rule 120 (expression -> MINUS expression .)
    LBRACE          reduce using rule 120 (expression -> MINUS expression .)
    IDENTIFIER      reduce using rule 120 (expression -> MINUS expression .)
    VAR             reduce using rule 120 (expression -> MINUS expression .)
    TYPE            reduce using rule 120 (expression -> MINUS expression .)
    FOR             reduce using rule 120 (expression -> MINUS expression .)
    PACKAGE         reduce using rule 120 (expression -> MINUS expression .)
    IMPORT          reduce using rule 120 (expression -> MINUS expression .)
    SWITCH          reduce using rule 120 (expression -> MINUS expression .)
    IF              reduce using rule 120 (expression -> MINUS expression .)
    FUNC            reduce using rule 120 (expression -> MINUS expression .)
    $end            reduce using rule 120 (expression -> MINUS expression .)
    RBRACE          reduce using rule 120 (expression -> MINUS expression .)
    CASE            reduce using rule 120 (expression -> MINUS expression .)
    DEFAULT         reduce using rule 120 (expression -> MINUS expression .)
    RETURN          reduce using rule 120 (expression -> MINUS expression .)
    COMMA           reduce using rule 120 (expression -> MINUS expression .)
    RPAREN          reduce using rule 120 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 120 (expression -> MINUS expression .)
    RBRACKET        reduce using rule 120 (expression -> MINUS expression .)
    COLON           reduce using rule 120 (expression -> MINUS expression .)

  ! LBRACKET        [ shift and go to state 91 ]
  ! AND             [ shift and go to state 98 ]
  ! OR              [ shift and go to state 99 ]
  ! EQ              [ shift and go to state 92 ]
  ! NEQ             [ shift and go to state 93 ]
  ! GT              [ shift and go to state 94 ]
  ! LT              [ shift and go to state 95 ]
  ! GE              [ shift and go to state 96 ]
  ! LE              [ shift and go to state 97 ]
  ! PLUS            [ shift and go to state 100 ]
  ! MINUS           [ shift and go to state 101 ]
  ! TIMES           [ shift and go to state 102 ]
  ! DIVIDE          [ shift and go to state 103 ]
  ! MOD             [ shift and go to state 104 ]

    operadorLogico                 shift and go to state 89
    comparador                     shift and go to state 117
    operator                       shift and go to state 90

state 111

    (121) expression -> LPAREN expression . RPAREN
    (112) expression -> expression . operadorLogico expression
    (113) expression -> expression . comparador expression
    (114) expression -> expression . operator expression
    (147) expression -> expression . LBRACKET expression RBRACKET
    (148) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (149) expression -> expression . LBRACKET COLON expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON RBRACKET
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR
    (53) comparador -> . EQ
    (54) comparador -> . NEQ
    (55) comparador -> . GT
    (56) comparador -> . LT
    (57) comparador -> . GE
    (58) comparador -> . LE
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    RPAREN          shift and go to state 150
    LBRACKET        shift and go to state 91
    AND             shift and go to state 98
    OR              shift and go to state 99
    EQ              shift and go to state 92
    NEQ             shift and go to state 93
    GT              shift and go to state 94
    LT              shift and go to state 95
    GE              shift and go to state 96
    LE              shift and go to state 97
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104

    operadorLogico                 shift and go to state 89
    comparador                     shift and go to state 117
    operator                       shift and go to state 90

state 112

    (144) slice_literal -> LBRACKET RBRACKET . type_name LBRACE elements RBRACE
    (134) type_name -> . DATATYPE
    (135) type_name -> . IDENTIFIER
    (136) type_name -> . LBRACKET RBRACKET type_name
    (137) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 83
    IDENTIFIER      shift and go to state 79
    LBRACKET        shift and go to state 151
    FUNC            shift and go to state 84

    type_name                      shift and go to state 152

state 113

    (126) function_literal -> FUNC LPAREN . parameters RPAREN return_type block
    (127) parameters -> . parameters COMMA parameter
    (128) parameters -> . parameter
    (129) parameters -> . empty
    (130) parameter -> . IDENTIFIER type_name
    (131) parameter -> . identifier_list type_name
    (59) empty -> .
    (132) identifier_list -> . IDENTIFIER
    (133) identifier_list -> . IDENTIFIER COMMA identifier_list

    IDENTIFIER      shift and go to state 153
    RPAREN          reduce using rule 59 (empty -> .)
    COMMA           reduce using rule 59 (empty -> .)

    parameters                     shift and go to state 123
    parameter                      shift and go to state 124
    empty                          shift and go to state 125
    identifier_list                shift and go to state 126

state 114

    (25) import -> IMPORT LPAREN import_list . RPAREN
    (27) import_list -> import_list . STRING

    RPAREN          shift and go to state 154
    STRING          shift and go to state 155


state 115

    (26) import_list -> STRING .

    RPAREN          reduce using rule 26 (import_list -> STRING .)
    STRING          reduce using rule 26 (import_list -> STRING .)


state 116

    (60) switch -> SWITCH expression LBRACE . caseBlocks RBRACE
    (61) caseBlocks -> . caseBlock
    (62) caseBlocks -> . caseBlock caseBlocks
    (63) caseBlock -> . CASE expression COLON statement_list
    (64) caseBlock -> . DEFAULT COLON statement_list

    CASE            shift and go to state 158
    DEFAULT         shift and go to state 159

    caseBlocks                     shift and go to state 156
    caseBlock                      shift and go to state 157

state 117

    (113) expression -> expression comparador . expression
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    expression                     shift and go to state 160
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 118

    (122) if_statement -> IF condicion block .
    (123) if_statement -> IF condicion block . ELSE block

    IDENTIFIER      reduce using rule 122 (if_statement -> IF condicion block .)
    VAR             reduce using rule 122 (if_statement -> IF condicion block .)
    TYPE            reduce using rule 122 (if_statement -> IF condicion block .)
    FOR             reduce using rule 122 (if_statement -> IF condicion block .)
    PACKAGE         reduce using rule 122 (if_statement -> IF condicion block .)
    IMPORT          reduce using rule 122 (if_statement -> IF condicion block .)
    SWITCH          reduce using rule 122 (if_statement -> IF condicion block .)
    IF              reduce using rule 122 (if_statement -> IF condicion block .)
    FUNC            reduce using rule 122 (if_statement -> IF condicion block .)
    $end            reduce using rule 122 (if_statement -> IF condicion block .)
    RBRACE          reduce using rule 122 (if_statement -> IF condicion block .)
    CASE            reduce using rule 122 (if_statement -> IF condicion block .)
    DEFAULT         reduce using rule 122 (if_statement -> IF condicion block .)
    RETURN          reduce using rule 122 (if_statement -> IF condicion block .)
    ELSE            shift and go to state 161


state 119

    (49) condicion_compleja -> condicion operadorLogico . condicion
    (50) condicion_compleja -> condicion operadorLogico . condicion_compleja
    (48) condicion -> . expression comparador expression
    (49) condicion_compleja -> . condicion operadorLogico condicion
    (50) condicion_compleja -> . condicion operadorLogico condicion_compleja
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    condicion                      shift and go to state 162
    condicion_compleja             shift and go to state 163
    expression                     shift and go to state 38
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 120

    (124) if_statement -> IF condicion_compleja block .
    (125) if_statement -> IF condicion_compleja block . ELSE block

    IDENTIFIER      reduce using rule 124 (if_statement -> IF condicion_compleja block .)
    VAR             reduce using rule 124 (if_statement -> IF condicion_compleja block .)
    TYPE            reduce using rule 124 (if_statement -> IF condicion_compleja block .)
    FOR             reduce using rule 124 (if_statement -> IF condicion_compleja block .)
    PACKAGE         reduce using rule 124 (if_statement -> IF condicion_compleja block .)
    IMPORT          reduce using rule 124 (if_statement -> IF condicion_compleja block .)
    SWITCH          reduce using rule 124 (if_statement -> IF condicion_compleja block .)
    IF              reduce using rule 124 (if_statement -> IF condicion_compleja block .)
    FUNC            reduce using rule 124 (if_statement -> IF condicion_compleja block .)
    $end            reduce using rule 124 (if_statement -> IF condicion_compleja block .)
    RBRACE          reduce using rule 124 (if_statement -> IF condicion_compleja block .)
    CASE            reduce using rule 124 (if_statement -> IF condicion_compleja block .)
    DEFAULT         reduce using rule 124 (if_statement -> IF condicion_compleja block .)
    RETURN          reduce using rule 124 (if_statement -> IF condicion_compleja block .)
    ELSE            shift and go to state 164


state 121

    (73) function -> FUNC IDENTIFIER LPAREN . params_opt RPAREN block
    (74) function -> FUNC IDENTIFIER LPAREN . params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (79) params_opt -> . params
    (80) params_opt -> .
    (81) params -> . param
    (82) params -> . param COMMA params
    (83) param -> . IDENTIFIER type_name
    (84) param -> . identifier_list type_name
    (132) identifier_list -> . IDENTIFIER
    (133) identifier_list -> . IDENTIFIER COMMA identifier_list

    RPAREN          reduce using rule 80 (params_opt -> .)
    IDENTIFIER      shift and go to state 165

    params_opt                     shift and go to state 166
    params                         shift and go to state 167
    param                          shift and go to state 168
    identifier_list                shift and go to state 169

state 122

    (93) method_definition -> FUNC LPAREN IDENTIFIER . IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (130) parameter -> IDENTIFIER . type_name
    (132) identifier_list -> IDENTIFIER .
    (133) identifier_list -> IDENTIFIER . COMMA identifier_list
    (134) type_name -> . DATATYPE
    (135) type_name -> . IDENTIFIER
    (136) type_name -> . LBRACKET RBRACKET type_name
    (137) type_name -> . FUNC LPAREN parameters RPAREN return_type

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for DATATYPE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
    IDENTIFIER      shift and go to state 170
    COMMA           shift and go to state 108
    DATATYPE        shift and go to state 83
    LBRACKET        shift and go to state 151
    FUNC            shift and go to state 84

  ! DATATYPE        [ reduce using rule 132 (identifier_list -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 132 (identifier_list -> IDENTIFIER .) ]
  ! LBRACKET        [ reduce using rule 132 (identifier_list -> IDENTIFIER .) ]
  ! FUNC            [ reduce using rule 132 (identifier_list -> IDENTIFIER .) ]

    type_name                      shift and go to state 171

state 123

    (126) function_literal -> FUNC LPAREN parameters . RPAREN return_type block
    (127) parameters -> parameters . COMMA parameter

    RPAREN          shift and go to state 172
    COMMA           shift and go to state 173


state 124

    (128) parameters -> parameter .

    RPAREN          reduce using rule 128 (parameters -> parameter .)
    COMMA           reduce using rule 128 (parameters -> parameter .)


state 125

    (129) parameters -> empty .

    RPAREN          reduce using rule 129 (parameters -> empty .)
    COMMA           reduce using rule 129 (parameters -> empty .)


state 126

    (131) parameter -> identifier_list . type_name
    (134) type_name -> . DATATYPE
    (135) type_name -> . IDENTIFIER
    (136) type_name -> . LBRACKET RBRACKET type_name
    (137) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 83
    IDENTIFIER      shift and go to state 79
    LBRACKET        shift and go to state 151
    FUNC            shift and go to state 84

    type_name                      shift and go to state 174

state 127

    (77) function -> FUNC MAIN LPAREN . params_opt RPAREN block
    (79) params_opt -> . params
    (80) params_opt -> .
    (81) params -> . param
    (82) params -> . param COMMA params
    (83) param -> . IDENTIFIER type_name
    (84) param -> . identifier_list type_name
    (132) identifier_list -> . IDENTIFIER
    (133) identifier_list -> . IDENTIFIER COMMA identifier_list

    RPAREN          reduce using rule 80 (params_opt -> .)
    IDENTIFIER      shift and go to state 165

    params_opt                     shift and go to state 175
    params                         shift and go to state 167
    param                          shift and go to state 168
    identifier_list                shift and go to state 169

state 128

    (86) struct_literal -> IDENTIFIER LBRACE . struct_field_assignments RBRACE
    (87) struct_field_assignments -> . struct_field_assignment
    (88) struct_field_assignments -> . struct_field_assignments COMMA struct_field_assignment
    (89) struct_field_assignment -> . IDENTIFIER COLON expression

    IDENTIFIER      shift and go to state 176

    struct_field_assignments       shift and go to state 177
    struct_field_assignment        shift and go to state 178

state 129

    (67) mapLiteral -> MAP LBRACKET . type_name RBRACKET type_name LBRACE mapEntries RBRACE
    (134) type_name -> . DATATYPE
    (135) type_name -> . IDENTIFIER
    (136) type_name -> . LBRACKET RBRACKET type_name
    (137) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 83
    IDENTIFIER      shift and go to state 79
    LBRACKET        shift and go to state 151
    FUNC            shift and go to state 84

    type_name                      shift and go to state 179

state 130

    (32) input -> IDENTIFIER DOT IDENTIFIER LPAREN . AMPERSAND IDENTIFIER RPAREN
    (43) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN . argument_list_opt RPAREN
    (46) argument_list_opt -> . argument_list
    (47) argument_list_opt -> .
    (44) argument_list -> . expression
    (45) argument_list -> . argument_list COMMA expression
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    AMPERSAND       shift and go to state 180
    RPAREN          reduce using rule 47 (argument_list_opt -> .)
    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    argument_list_opt              shift and go to state 181
    argument_list                  shift and go to state 78
    expression                     shift and go to state 77
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 131

    (41) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .

    IDENTIFIER      reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    VAR             reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TYPE            reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FOR             reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PACKAGE         reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IMPORT          reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SWITCH          reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IF              reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FUNC            reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    $end            reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LBRACKET        reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    EQ              reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    NEQ             reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    GT              reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LT              reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    GE              reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LE              reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    AND             reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    OR              reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PLUS            reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    MINUS           reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TIMES           reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DIVIDE          reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    MOD             reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LBRACE          reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    CASE            reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DEFAULT         reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RETURN          reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RPAREN          reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SEMICOLON       reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACKET        reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    COLON           reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)


state 132

    (42) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA . expression RPAREN
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    expression                     shift and go to state 182
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 133

    (45) argument_list -> argument_list COMMA . expression
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    expression                     shift and go to state 183
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 134

    (36) assignment -> VAR IDENTIFIER type_name ASSIGN . expression
    (37) assignment -> VAR IDENTIFIER type_name ASSIGN . llamarFuncion
    (39) assignment -> VAR IDENTIFIER type_name ASSIGN . slice_literal
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    expression                     shift and go to state 184
    llamarFuncion                  shift and go to state 185
    slice_literal                  shift and go to state 186
    function_literal               shift and go to state 54

state 135

    (66) map -> VAR IDENTIFIER ASSIGN mapLiteral .

    IDENTIFIER      reduce using rule 66 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    VAR             reduce using rule 66 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    TYPE            reduce using rule 66 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    FOR             reduce using rule 66 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    PACKAGE         reduce using rule 66 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    IMPORT          reduce using rule 66 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    SWITCH          reduce using rule 66 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    IF              reduce using rule 66 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    FUNC            reduce using rule 66 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    $end            reduce using rule 66 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    RBRACE          reduce using rule 66 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    CASE            reduce using rule 66 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    DEFAULT         reduce using rule 66 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    RETURN          reduce using rule 66 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)


state 136

    (142) slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET . type_name
    (136) type_name -> LBRACKET RBRACKET . type_name
    (134) type_name -> . DATATYPE
    (135) type_name -> . IDENTIFIER
    (136) type_name -> . LBRACKET RBRACKET type_name
    (137) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 83
    IDENTIFIER      shift and go to state 79
    LBRACKET        shift and go to state 151
    FUNC            shift and go to state 84

    type_name                      shift and go to state 187

state 137

    (137) type_name -> FUNC LPAREN . parameters RPAREN return_type
    (127) parameters -> . parameters COMMA parameter
    (128) parameters -> . parameter
    (129) parameters -> . empty
    (130) parameter -> . IDENTIFIER type_name
    (131) parameter -> . identifier_list type_name
    (59) empty -> .
    (132) identifier_list -> . IDENTIFIER
    (133) identifier_list -> . IDENTIFIER COMMA identifier_list

    IDENTIFIER      shift and go to state 153
    RPAREN          reduce using rule 59 (empty -> .)
    COMMA           reduce using rule 59 (empty -> .)

    parameters                     shift and go to state 188
    parameter                      shift and go to state 124
    empty                          shift and go to state 125
    identifier_list                shift and go to state 126

state 138

    (85) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE . struct_fields RBRACE
    (91) struct_fields -> . struct_field
    (92) struct_fields -> . struct_fields struct_field
    (90) struct_field -> . IDENTIFIER type_name

    IDENTIFIER      shift and go to state 189

    struct_fields                  shift and go to state 190
    struct_field                   shift and go to state 191

state 139

    (94) for_statement -> FOR shortAssignment SEMICOLON condicion . SEMICOLON expression block

    SEMICOLON       shift and go to state 192


state 140

    (48) condicion -> expression comparador expression .
    (113) expression -> expression comparador expression .
    (112) expression -> expression . operadorLogico expression
    (113) expression -> expression . comparador expression
    (114) expression -> expression . operator expression
    (147) expression -> expression . LBRACKET expression RBRACKET
    (148) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (149) expression -> expression . LBRACKET COLON expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON RBRACKET
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR
    (53) comparador -> . EQ
    (54) comparador -> . NEQ
    (55) comparador -> . GT
    (56) comparador -> . LT
    (57) comparador -> . GE
    (58) comparador -> . LE
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

  ! reduce/reduce conflict for AND resolved using rule 48 (condicion -> expression comparador expression .)
  ! reduce/reduce conflict for OR resolved using rule 48 (condicion -> expression comparador expression .)
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 48 (condicion -> expression comparador expression .)
    SEMICOLON       reduce using rule 48 (condicion -> expression comparador expression .)
    LBRACKET        shift and go to state 91
    AND             shift and go to state 98
    OR              shift and go to state 99
    EQ              shift and go to state 92
    NEQ             shift and go to state 93
    GT              shift and go to state 94
    LT              shift and go to state 95
    GE              shift and go to state 96
    LE              shift and go to state 97
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104

  ! AND             [ reduce using rule 48 (condicion -> expression comparador expression .) ]
  ! OR              [ reduce using rule 48 (condicion -> expression comparador expression .) ]
  ! LBRACKET        [ reduce using rule 113 (expression -> expression comparador expression .) ]
  ! EQ              [ reduce using rule 113 (expression -> expression comparador expression .) ]
  ! NEQ             [ reduce using rule 113 (expression -> expression comparador expression .) ]
  ! GT              [ reduce using rule 113 (expression -> expression comparador expression .) ]
  ! LT              [ reduce using rule 113 (expression -> expression comparador expression .) ]
  ! GE              [ reduce using rule 113 (expression -> expression comparador expression .) ]
  ! LE              [ reduce using rule 113 (expression -> expression comparador expression .) ]
  ! AND             [ reduce using rule 113 (expression -> expression comparador expression .) ]
  ! OR              [ reduce using rule 113 (expression -> expression comparador expression .) ]
  ! PLUS            [ reduce using rule 113 (expression -> expression comparador expression .) ]
  ! MINUS           [ reduce using rule 113 (expression -> expression comparador expression .) ]
  ! TIMES           [ reduce using rule 113 (expression -> expression comparador expression .) ]
  ! DIVIDE          [ reduce using rule 113 (expression -> expression comparador expression .) ]
  ! MOD             [ reduce using rule 113 (expression -> expression comparador expression .) ]

    comparador                     shift and go to state 117
    operadorLogico                 shift and go to state 89
    operator                       shift and go to state 90

state 141

    (112) expression -> expression operadorLogico expression .
    (112) expression -> expression . operadorLogico expression
    (113) expression -> expression . comparador expression
    (114) expression -> expression . operator expression
    (147) expression -> expression . LBRACKET expression RBRACKET
    (148) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (149) expression -> expression . LBRACKET COLON expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON RBRACKET
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR
    (53) comparador -> . EQ
    (54) comparador -> . NEQ
    (55) comparador -> . GT
    (56) comparador -> . LT
    (57) comparador -> . GE
    (58) comparador -> . LE
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 112 (expression -> expression operadorLogico expression .)
    IDENTIFIER      reduce using rule 112 (expression -> expression operadorLogico expression .)
    VAR             reduce using rule 112 (expression -> expression operadorLogico expression .)
    TYPE            reduce using rule 112 (expression -> expression operadorLogico expression .)
    FOR             reduce using rule 112 (expression -> expression operadorLogico expression .)
    PACKAGE         reduce using rule 112 (expression -> expression operadorLogico expression .)
    IMPORT          reduce using rule 112 (expression -> expression operadorLogico expression .)
    SWITCH          reduce using rule 112 (expression -> expression operadorLogico expression .)
    IF              reduce using rule 112 (expression -> expression operadorLogico expression .)
    FUNC            reduce using rule 112 (expression -> expression operadorLogico expression .)
    $end            reduce using rule 112 (expression -> expression operadorLogico expression .)
    RBRACE          reduce using rule 112 (expression -> expression operadorLogico expression .)
    CASE            reduce using rule 112 (expression -> expression operadorLogico expression .)
    DEFAULT         reduce using rule 112 (expression -> expression operadorLogico expression .)
    RETURN          reduce using rule 112 (expression -> expression operadorLogico expression .)
    COMMA           reduce using rule 112 (expression -> expression operadorLogico expression .)
    RPAREN          reduce using rule 112 (expression -> expression operadorLogico expression .)
    SEMICOLON       reduce using rule 112 (expression -> expression operadorLogico expression .)
    RBRACKET        reduce using rule 112 (expression -> expression operadorLogico expression .)
    COLON           reduce using rule 112 (expression -> expression operadorLogico expression .)
    LBRACKET        shift and go to state 91
    AND             shift and go to state 98
    OR              shift and go to state 99
    EQ              shift and go to state 92
    NEQ             shift and go to state 93
    GT              shift and go to state 94
    LT              shift and go to state 95
    GE              shift and go to state 96
    LE              shift and go to state 97
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104

  ! LBRACKET        [ reduce using rule 112 (expression -> expression operadorLogico expression .) ]
  ! EQ              [ reduce using rule 112 (expression -> expression operadorLogico expression .) ]
  ! NEQ             [ reduce using rule 112 (expression -> expression operadorLogico expression .) ]
  ! GT              [ reduce using rule 112 (expression -> expression operadorLogico expression .) ]
  ! LT              [ reduce using rule 112 (expression -> expression operadorLogico expression .) ]
  ! GE              [ reduce using rule 112 (expression -> expression operadorLogico expression .) ]
  ! LE              [ reduce using rule 112 (expression -> expression operadorLogico expression .) ]
  ! AND             [ reduce using rule 112 (expression -> expression operadorLogico expression .) ]
  ! OR              [ reduce using rule 112 (expression -> expression operadorLogico expression .) ]
  ! PLUS            [ reduce using rule 112 (expression -> expression operadorLogico expression .) ]
  ! MINUS           [ reduce using rule 112 (expression -> expression operadorLogico expression .) ]
  ! TIMES           [ reduce using rule 112 (expression -> expression operadorLogico expression .) ]
  ! DIVIDE          [ reduce using rule 112 (expression -> expression operadorLogico expression .) ]
  ! MOD             [ reduce using rule 112 (expression -> expression operadorLogico expression .) ]

    operadorLogico                 shift and go to state 89
    comparador                     shift and go to state 117
    operator                       shift and go to state 90

state 142

    (114) expression -> expression operator expression .
    (112) expression -> expression . operadorLogico expression
    (113) expression -> expression . comparador expression
    (114) expression -> expression . operator expression
    (147) expression -> expression . LBRACKET expression RBRACKET
    (148) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (149) expression -> expression . LBRACKET COLON expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON RBRACKET
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR
    (53) comparador -> . EQ
    (54) comparador -> . NEQ
    (55) comparador -> . GT
    (56) comparador -> . LT
    (57) comparador -> . GE
    (58) comparador -> . LE
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 114 (expression -> expression operator expression .)
    IDENTIFIER      reduce using rule 114 (expression -> expression operator expression .)
    VAR             reduce using rule 114 (expression -> expression operator expression .)
    TYPE            reduce using rule 114 (expression -> expression operator expression .)
    FOR             reduce using rule 114 (expression -> expression operator expression .)
    PACKAGE         reduce using rule 114 (expression -> expression operator expression .)
    IMPORT          reduce using rule 114 (expression -> expression operator expression .)
    SWITCH          reduce using rule 114 (expression -> expression operator expression .)
    IF              reduce using rule 114 (expression -> expression operator expression .)
    FUNC            reduce using rule 114 (expression -> expression operator expression .)
    $end            reduce using rule 114 (expression -> expression operator expression .)
    RBRACE          reduce using rule 114 (expression -> expression operator expression .)
    CASE            reduce using rule 114 (expression -> expression operator expression .)
    DEFAULT         reduce using rule 114 (expression -> expression operator expression .)
    RETURN          reduce using rule 114 (expression -> expression operator expression .)
    COMMA           reduce using rule 114 (expression -> expression operator expression .)
    RPAREN          reduce using rule 114 (expression -> expression operator expression .)
    SEMICOLON       reduce using rule 114 (expression -> expression operator expression .)
    RBRACKET        reduce using rule 114 (expression -> expression operator expression .)
    COLON           reduce using rule 114 (expression -> expression operator expression .)
    LBRACKET        shift and go to state 91
    AND             shift and go to state 98
    OR              shift and go to state 99
    EQ              shift and go to state 92
    NEQ             shift and go to state 93
    GT              shift and go to state 94
    LT              shift and go to state 95
    GE              shift and go to state 96
    LE              shift and go to state 97
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104

  ! LBRACKET        [ reduce using rule 114 (expression -> expression operator expression .) ]
  ! EQ              [ reduce using rule 114 (expression -> expression operator expression .) ]
  ! NEQ             [ reduce using rule 114 (expression -> expression operator expression .) ]
  ! GT              [ reduce using rule 114 (expression -> expression operator expression .) ]
  ! LT              [ reduce using rule 114 (expression -> expression operator expression .) ]
  ! GE              [ reduce using rule 114 (expression -> expression operator expression .) ]
  ! LE              [ reduce using rule 114 (expression -> expression operator expression .) ]
  ! AND             [ reduce using rule 114 (expression -> expression operator expression .) ]
  ! OR              [ reduce using rule 114 (expression -> expression operator expression .) ]
  ! PLUS            [ reduce using rule 114 (expression -> expression operator expression .) ]
  ! MINUS           [ reduce using rule 114 (expression -> expression operator expression .) ]
  ! TIMES           [ reduce using rule 114 (expression -> expression operator expression .) ]
  ! DIVIDE          [ reduce using rule 114 (expression -> expression operator expression .) ]
  ! MOD             [ reduce using rule 114 (expression -> expression operator expression .) ]

    operator                       shift and go to state 90
    operadorLogico                 shift and go to state 89
    comparador                     shift and go to state 117

state 143

    (147) expression -> expression LBRACKET expression . RBRACKET
    (148) expression -> expression LBRACKET expression . COLON expression RBRACKET
    (150) expression -> expression LBRACKET expression . COLON RBRACKET
    (112) expression -> expression . operadorLogico expression
    (113) expression -> expression . comparador expression
    (114) expression -> expression . operator expression
    (147) expression -> expression . LBRACKET expression RBRACKET
    (148) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (149) expression -> expression . LBRACKET COLON expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON RBRACKET
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR
    (53) comparador -> . EQ
    (54) comparador -> . NEQ
    (55) comparador -> . GT
    (56) comparador -> . LT
    (57) comparador -> . GE
    (58) comparador -> . LE
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    RBRACKET        shift and go to state 193
    COLON           shift and go to state 194
    LBRACKET        shift and go to state 91
    AND             shift and go to state 98
    OR              shift and go to state 99
    EQ              shift and go to state 92
    NEQ             shift and go to state 93
    GT              shift and go to state 94
    LT              shift and go to state 95
    GE              shift and go to state 96
    LE              shift and go to state 97
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104

    operadorLogico                 shift and go to state 89
    comparador                     shift and go to state 117
    operator                       shift and go to state 90

state 144

    (149) expression -> expression LBRACKET COLON . expression RBRACKET
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    expression                     shift and go to state 195
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 145

    (95) shortAssignment -> identifier_list DECLARE_ASSIGN expression .
    (112) expression -> expression . operadorLogico expression
    (113) expression -> expression . comparador expression
    (114) expression -> expression . operator expression
    (147) expression -> expression . LBRACKET expression RBRACKET
    (148) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (149) expression -> expression . LBRACKET COLON expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON RBRACKET
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR
    (53) comparador -> . EQ
    (54) comparador -> . NEQ
    (55) comparador -> . GT
    (56) comparador -> . LT
    (57) comparador -> . GE
    (58) comparador -> . LE
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    SEMICOLON       reduce using rule 95 (shortAssignment -> identifier_list DECLARE_ASSIGN expression .)
    LBRACKET        shift and go to state 91
    AND             shift and go to state 98
    OR              shift and go to state 99
    EQ              shift and go to state 92
    NEQ             shift and go to state 93
    GT              shift and go to state 94
    LT              shift and go to state 95
    GE              shift and go to state 96
    LE              shift and go to state 97
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104

    operadorLogico                 shift and go to state 89
    comparador                     shift and go to state 117
    operator                       shift and go to state 90

state 146

    (99) block -> LBRACE statement_list RBRACE .

    IDENTIFIER      reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    VAR             reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    TYPE            reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    PACKAGE         reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    IMPORT          reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    SWITCH          reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    FUNC            reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    CASE            reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    DEFAULT         reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    LBRACKET        reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    EQ              reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    NEQ             reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    GT              reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    LT              reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    GE              reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    LE              reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    AND             reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    OR              reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    DIVIDE          reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    MOD             reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    COMMA           reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    RPAREN          reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    SEMICOLON       reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    RBRACKET        reduce using rule 99 (block -> LBRACE statement_list RBRACE .)
    COLON           reduce using rule 99 (block -> LBRACE statement_list RBRACE .)


state 147

    (132) identifier_list -> IDENTIFIER .
    (133) identifier_list -> IDENTIFIER . COMMA identifier_list

    DECLARE_ASSIGN  reduce using rule 132 (identifier_list -> IDENTIFIER .)
    DATATYPE        reduce using rule 132 (identifier_list -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 132 (identifier_list -> IDENTIFIER .)
    LBRACKET        reduce using rule 132 (identifier_list -> IDENTIFIER .)
    FUNC            reduce using rule 132 (identifier_list -> IDENTIFIER .)
    COMMA           shift and go to state 108


state 148

    (133) identifier_list -> IDENTIFIER COMMA identifier_list .

    DECLARE_ASSIGN  reduce using rule 133 (identifier_list -> IDENTIFIER COMMA identifier_list .)
    DATATYPE        reduce using rule 133 (identifier_list -> IDENTIFIER COMMA identifier_list .)
    IDENTIFIER      reduce using rule 133 (identifier_list -> IDENTIFIER COMMA identifier_list .)
    LBRACKET        reduce using rule 133 (identifier_list -> IDENTIFIER COMMA identifier_list .)
    FUNC            reduce using rule 133 (identifier_list -> IDENTIFIER COMMA identifier_list .)


state 149

    (110) expression -> IDENTIFIER DOT IDENTIFIER .
    (43) llamarFuncion -> IDENTIFIER DOT IDENTIFIER . LPAREN argument_list_opt RPAREN

    LBRACKET        reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    EQ              reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    NEQ             reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    GT              reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    LT              reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    GE              reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    LE              reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    AND             reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    OR              reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    PLUS            reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    MINUS           reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    TIMES           reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    DIVIDE          reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    MOD             reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    LBRACE          reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    VAR             reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    TYPE            reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    FOR             reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    PACKAGE         reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    IMPORT          reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    SWITCH          reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    IF              reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    FUNC            reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    $end            reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    RBRACE          reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    CASE            reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    DEFAULT         reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    RETURN          reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    COMMA           reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    RPAREN          reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    RBRACKET        reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    COLON           reduce using rule 110 (expression -> IDENTIFIER DOT IDENTIFIER .)
    LPAREN          shift and go to state 196


state 150

    (121) expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    TYPE            reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    PACKAGE         reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    IMPORT          reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    FUNC            reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    CASE            reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 121 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 121 (expression -> LPAREN expression RPAREN .)


state 151

    (136) type_name -> LBRACKET . RBRACKET type_name

    RBRACKET        shift and go to state 197


state 152

    (144) slice_literal -> LBRACKET RBRACKET type_name . LBRACE elements RBRACE

    LBRACE          shift and go to state 198


state 153

    (130) parameter -> IDENTIFIER . type_name
    (132) identifier_list -> IDENTIFIER .
    (133) identifier_list -> IDENTIFIER . COMMA identifier_list
    (134) type_name -> . DATATYPE
    (135) type_name -> . IDENTIFIER
    (136) type_name -> . LBRACKET RBRACKET type_name
    (137) type_name -> . FUNC LPAREN parameters RPAREN return_type

  ! shift/reduce conflict for DATATYPE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
    COMMA           shift and go to state 108
    DATATYPE        shift and go to state 83
    IDENTIFIER      shift and go to state 79
    LBRACKET        shift and go to state 151
    FUNC            shift and go to state 84

  ! DATATYPE        [ reduce using rule 132 (identifier_list -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 132 (identifier_list -> IDENTIFIER .) ]
  ! LBRACKET        [ reduce using rule 132 (identifier_list -> IDENTIFIER .) ]
  ! FUNC            [ reduce using rule 132 (identifier_list -> IDENTIFIER .) ]

    type_name                      shift and go to state 171

state 154

    (25) import -> IMPORT LPAREN import_list RPAREN .

    IDENTIFIER      reduce using rule 25 (import -> IMPORT LPAREN import_list RPAREN .)
    VAR             reduce using rule 25 (import -> IMPORT LPAREN import_list RPAREN .)
    TYPE            reduce using rule 25 (import -> IMPORT LPAREN import_list RPAREN .)
    FOR             reduce using rule 25 (import -> IMPORT LPAREN import_list RPAREN .)
    PACKAGE         reduce using rule 25 (import -> IMPORT LPAREN import_list RPAREN .)
    IMPORT          reduce using rule 25 (import -> IMPORT LPAREN import_list RPAREN .)
    SWITCH          reduce using rule 25 (import -> IMPORT LPAREN import_list RPAREN .)
    IF              reduce using rule 25 (import -> IMPORT LPAREN import_list RPAREN .)
    FUNC            reduce using rule 25 (import -> IMPORT LPAREN import_list RPAREN .)
    $end            reduce using rule 25 (import -> IMPORT LPAREN import_list RPAREN .)
    RBRACE          reduce using rule 25 (import -> IMPORT LPAREN import_list RPAREN .)
    CASE            reduce using rule 25 (import -> IMPORT LPAREN import_list RPAREN .)
    DEFAULT         reduce using rule 25 (import -> IMPORT LPAREN import_list RPAREN .)
    RETURN          reduce using rule 25 (import -> IMPORT LPAREN import_list RPAREN .)


state 155

    (27) import_list -> import_list STRING .

    RPAREN          reduce using rule 27 (import_list -> import_list STRING .)
    STRING          reduce using rule 27 (import_list -> import_list STRING .)


state 156

    (60) switch -> SWITCH expression LBRACE caseBlocks . RBRACE

    RBRACE          shift and go to state 199


state 157

    (61) caseBlocks -> caseBlock .
    (62) caseBlocks -> caseBlock . caseBlocks
    (61) caseBlocks -> . caseBlock
    (62) caseBlocks -> . caseBlock caseBlocks
    (63) caseBlock -> . CASE expression COLON statement_list
    (64) caseBlock -> . DEFAULT COLON statement_list

    RBRACE          reduce using rule 61 (caseBlocks -> caseBlock .)
    CASE            shift and go to state 158
    DEFAULT         shift and go to state 159

    caseBlock                      shift and go to state 157
    caseBlocks                     shift and go to state 200

state 158

    (63) caseBlock -> CASE . expression COLON statement_list
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    expression                     shift and go to state 201
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 159

    (64) caseBlock -> DEFAULT . COLON statement_list

    COLON           shift and go to state 202


state 160

    (113) expression -> expression comparador expression .
    (112) expression -> expression . operadorLogico expression
    (113) expression -> expression . comparador expression
    (114) expression -> expression . operator expression
    (147) expression -> expression . LBRACKET expression RBRACKET
    (148) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (149) expression -> expression . LBRACKET COLON expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON RBRACKET
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR
    (53) comparador -> . EQ
    (54) comparador -> . NEQ
    (55) comparador -> . GT
    (56) comparador -> . LT
    (57) comparador -> . GE
    (58) comparador -> . LE
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 113 (expression -> expression comparador expression .)
    IDENTIFIER      reduce using rule 113 (expression -> expression comparador expression .)
    VAR             reduce using rule 113 (expression -> expression comparador expression .)
    TYPE            reduce using rule 113 (expression -> expression comparador expression .)
    FOR             reduce using rule 113 (expression -> expression comparador expression .)
    PACKAGE         reduce using rule 113 (expression -> expression comparador expression .)
    IMPORT          reduce using rule 113 (expression -> expression comparador expression .)
    SWITCH          reduce using rule 113 (expression -> expression comparador expression .)
    IF              reduce using rule 113 (expression -> expression comparador expression .)
    FUNC            reduce using rule 113 (expression -> expression comparador expression .)
    $end            reduce using rule 113 (expression -> expression comparador expression .)
    RBRACE          reduce using rule 113 (expression -> expression comparador expression .)
    CASE            reduce using rule 113 (expression -> expression comparador expression .)
    DEFAULT         reduce using rule 113 (expression -> expression comparador expression .)
    RETURN          reduce using rule 113 (expression -> expression comparador expression .)
    COMMA           reduce using rule 113 (expression -> expression comparador expression .)
    RPAREN          reduce using rule 113 (expression -> expression comparador expression .)
    SEMICOLON       reduce using rule 113 (expression -> expression comparador expression .)
    RBRACKET        reduce using rule 113 (expression -> expression comparador expression .)
    COLON           reduce using rule 113 (expression -> expression comparador expression .)
    LBRACKET        shift and go to state 91
    AND             shift and go to state 98
    OR              shift and go to state 99
    EQ              shift and go to state 92
    NEQ             shift and go to state 93
    GT              shift and go to state 94
    LT              shift and go to state 95
    GE              shift and go to state 96
    LE              shift and go to state 97
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104

  ! LBRACKET        [ reduce using rule 113 (expression -> expression comparador expression .) ]
  ! AND             [ reduce using rule 113 (expression -> expression comparador expression .) ]
  ! OR              [ reduce using rule 113 (expression -> expression comparador expression .) ]
  ! EQ              [ reduce using rule 113 (expression -> expression comparador expression .) ]
  ! NEQ             [ reduce using rule 113 (expression -> expression comparador expression .) ]
  ! GT              [ reduce using rule 113 (expression -> expression comparador expression .) ]
  ! LT              [ reduce using rule 113 (expression -> expression comparador expression .) ]
  ! GE              [ reduce using rule 113 (expression -> expression comparador expression .) ]
  ! LE              [ reduce using rule 113 (expression -> expression comparador expression .) ]
  ! PLUS            [ reduce using rule 113 (expression -> expression comparador expression .) ]
  ! MINUS           [ reduce using rule 113 (expression -> expression comparador expression .) ]
  ! TIMES           [ reduce using rule 113 (expression -> expression comparador expression .) ]
  ! DIVIDE          [ reduce using rule 113 (expression -> expression comparador expression .) ]
  ! MOD             [ reduce using rule 113 (expression -> expression comparador expression .) ]

    comparador                     shift and go to state 117
    operadorLogico                 shift and go to state 89
    operator                       shift and go to state 90

state 161

    (123) if_statement -> IF condicion block ELSE . block
    (99) block -> . LBRACE statement_list RBRACE
    (100) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 41

    block                          shift and go to state 203

state 162

    (49) condicion_compleja -> condicion operadorLogico condicion .
    (49) condicion_compleja -> condicion . operadorLogico condicion
    (50) condicion_compleja -> condicion . operadorLogico condicion_compleja
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR

    LBRACE          reduce using rule 49 (condicion_compleja -> condicion operadorLogico condicion .)
    AND             shift and go to state 98
    OR              shift and go to state 99

    operadorLogico                 shift and go to state 119

state 163

    (50) condicion_compleja -> condicion operadorLogico condicion_compleja .

    LBRACE          reduce using rule 50 (condicion_compleja -> condicion operadorLogico condicion_compleja .)


state 164

    (125) if_statement -> IF condicion_compleja block ELSE . block
    (99) block -> . LBRACE statement_list RBRACE
    (100) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 41

    block                          shift and go to state 204

state 165

    (83) param -> IDENTIFIER . type_name
    (132) identifier_list -> IDENTIFIER .
    (133) identifier_list -> IDENTIFIER . COMMA identifier_list
    (134) type_name -> . DATATYPE
    (135) type_name -> . IDENTIFIER
    (136) type_name -> . LBRACKET RBRACKET type_name
    (137) type_name -> . FUNC LPAREN parameters RPAREN return_type

  ! shift/reduce conflict for DATATYPE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
    COMMA           shift and go to state 108
    DATATYPE        shift and go to state 83
    IDENTIFIER      shift and go to state 79
    LBRACKET        shift and go to state 151
    FUNC            shift and go to state 84

  ! DATATYPE        [ reduce using rule 132 (identifier_list -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 132 (identifier_list -> IDENTIFIER .) ]
  ! LBRACKET        [ reduce using rule 132 (identifier_list -> IDENTIFIER .) ]
  ! FUNC            [ reduce using rule 132 (identifier_list -> IDENTIFIER .) ]

    type_name                      shift and go to state 205

state 166

    (73) function -> FUNC IDENTIFIER LPAREN params_opt . RPAREN block
    (74) function -> FUNC IDENTIFIER LPAREN params_opt . RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE

    RPAREN          shift and go to state 206


state 167

    (79) params_opt -> params .

    RPAREN          reduce using rule 79 (params_opt -> params .)


state 168

    (81) params -> param .
    (82) params -> param . COMMA params

    RPAREN          reduce using rule 81 (params -> param .)
    COMMA           shift and go to state 207


state 169

    (84) param -> identifier_list . type_name
    (134) type_name -> . DATATYPE
    (135) type_name -> . IDENTIFIER
    (136) type_name -> . LBRACKET RBRACKET type_name
    (137) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 83
    IDENTIFIER      shift and go to state 79
    LBRACKET        shift and go to state 151
    FUNC            shift and go to state 84

    type_name                      shift and go to state 208

state 170

    (93) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER . RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (135) type_name -> IDENTIFIER .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 209
    COMMA           reduce using rule 135 (type_name -> IDENTIFIER .)

  ! RPAREN          [ reduce using rule 135 (type_name -> IDENTIFIER .) ]


state 171

    (130) parameter -> IDENTIFIER type_name .

    RPAREN          reduce using rule 130 (parameter -> IDENTIFIER type_name .)
    COMMA           reduce using rule 130 (parameter -> IDENTIFIER type_name .)


state 172

    (126) function_literal -> FUNC LPAREN parameters RPAREN . return_type block
    (138) return_type -> . type_name
    (139) return_type -> . empty
    (140) return_type -> . LPAREN type_name COMMA return_type RPAREN
    (134) type_name -> . DATATYPE
    (135) type_name -> . IDENTIFIER
    (136) type_name -> . LBRACKET RBRACKET type_name
    (137) type_name -> . FUNC LPAREN parameters RPAREN return_type
    (59) empty -> .

    LPAREN          shift and go to state 210
    DATATYPE        shift and go to state 83
    IDENTIFIER      shift and go to state 79
    LBRACKET        shift and go to state 151
    FUNC            shift and go to state 84
    LBRACE          reduce using rule 59 (empty -> .)

    return_type                    shift and go to state 211
    type_name                      shift and go to state 212
    empty                          shift and go to state 213

state 173

    (127) parameters -> parameters COMMA . parameter
    (130) parameter -> . IDENTIFIER type_name
    (131) parameter -> . identifier_list type_name
    (132) identifier_list -> . IDENTIFIER
    (133) identifier_list -> . IDENTIFIER COMMA identifier_list

    IDENTIFIER      shift and go to state 153

    parameter                      shift and go to state 214
    identifier_list                shift and go to state 126

state 174

    (131) parameter -> identifier_list type_name .

    RPAREN          reduce using rule 131 (parameter -> identifier_list type_name .)
    COMMA           reduce using rule 131 (parameter -> identifier_list type_name .)


state 175

    (77) function -> FUNC MAIN LPAREN params_opt . RPAREN block

    RPAREN          shift and go to state 215


state 176

    (89) struct_field_assignment -> IDENTIFIER . COLON expression

    COLON           shift and go to state 216


state 177

    (86) struct_literal -> IDENTIFIER LBRACE struct_field_assignments . RBRACE
    (88) struct_field_assignments -> struct_field_assignments . COMMA struct_field_assignment

    RBRACE          shift and go to state 217
    COMMA           shift and go to state 218


state 178

    (87) struct_field_assignments -> struct_field_assignment .

    RBRACE          reduce using rule 87 (struct_field_assignments -> struct_field_assignment .)
    COMMA           reduce using rule 87 (struct_field_assignments -> struct_field_assignment .)


state 179

    (67) mapLiteral -> MAP LBRACKET type_name . RBRACKET type_name LBRACE mapEntries RBRACE

    RBRACKET        shift and go to state 219


state 180

    (32) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND . IDENTIFIER RPAREN

    IDENTIFIER      shift and go to state 220


state 181

    (43) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 221


state 182

    (42) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression . RPAREN
    (112) expression -> expression . operadorLogico expression
    (113) expression -> expression . comparador expression
    (114) expression -> expression . operator expression
    (147) expression -> expression . LBRACKET expression RBRACKET
    (148) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (149) expression -> expression . LBRACKET COLON expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON RBRACKET
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR
    (53) comparador -> . EQ
    (54) comparador -> . NEQ
    (55) comparador -> . GT
    (56) comparador -> . LT
    (57) comparador -> . GE
    (58) comparador -> . LE
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    RPAREN          shift and go to state 222
    LBRACKET        shift and go to state 91
    AND             shift and go to state 98
    OR              shift and go to state 99
    EQ              shift and go to state 92
    NEQ             shift and go to state 93
    GT              shift and go to state 94
    LT              shift and go to state 95
    GE              shift and go to state 96
    LE              shift and go to state 97
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104

    operadorLogico                 shift and go to state 89
    comparador                     shift and go to state 117
    operator                       shift and go to state 90

state 183

    (45) argument_list -> argument_list COMMA expression .
    (112) expression -> expression . operadorLogico expression
    (113) expression -> expression . comparador expression
    (114) expression -> expression . operator expression
    (147) expression -> expression . LBRACKET expression RBRACKET
    (148) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (149) expression -> expression . LBRACKET COLON expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON RBRACKET
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR
    (53) comparador -> . EQ
    (54) comparador -> . NEQ
    (55) comparador -> . GT
    (56) comparador -> . LT
    (57) comparador -> . GE
    (58) comparador -> . LE
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    COMMA           reduce using rule 45 (argument_list -> argument_list COMMA expression .)
    RPAREN          reduce using rule 45 (argument_list -> argument_list COMMA expression .)
    LBRACKET        shift and go to state 91
    AND             shift and go to state 98
    OR              shift and go to state 99
    EQ              shift and go to state 92
    NEQ             shift and go to state 93
    GT              shift and go to state 94
    LT              shift and go to state 95
    GE              shift and go to state 96
    LE              shift and go to state 97
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104

    operadorLogico                 shift and go to state 89
    comparador                     shift and go to state 117
    operator                       shift and go to state 90

state 184

    (36) assignment -> VAR IDENTIFIER type_name ASSIGN expression .
    (112) expression -> expression . operadorLogico expression
    (113) expression -> expression . comparador expression
    (114) expression -> expression . operator expression
    (147) expression -> expression . LBRACKET expression RBRACKET
    (148) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (149) expression -> expression . LBRACKET COLON expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON RBRACKET
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR
    (53) comparador -> . EQ
    (54) comparador -> . NEQ
    (55) comparador -> . GT
    (56) comparador -> . LT
    (57) comparador -> . GE
    (58) comparador -> . LE
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    IDENTIFIER      reduce using rule 36 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    VAR             reduce using rule 36 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    TYPE            reduce using rule 36 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    FOR             reduce using rule 36 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    PACKAGE         reduce using rule 36 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    IMPORT          reduce using rule 36 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    SWITCH          reduce using rule 36 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    IF              reduce using rule 36 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    FUNC            reduce using rule 36 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    $end            reduce using rule 36 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    RBRACE          reduce using rule 36 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    CASE            reduce using rule 36 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    DEFAULT         reduce using rule 36 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    RETURN          reduce using rule 36 (assignment -> VAR IDENTIFIER type_name ASSIGN expression .)
    LBRACKET        shift and go to state 91
    AND             shift and go to state 98
    OR              shift and go to state 99
    EQ              shift and go to state 92
    NEQ             shift and go to state 93
    GT              shift and go to state 94
    LT              shift and go to state 95
    GE              shift and go to state 96
    LE              shift and go to state 97
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104

    operadorLogico                 shift and go to state 89
    comparador                     shift and go to state 117
    operator                       shift and go to state 90

state 185

    (37) assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .
    (111) expression -> llamarFuncion .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for VAR resolved using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for TYPE resolved using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for FOR resolved using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for IMPORT resolved using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for SWITCH resolved using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for IF resolved using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for FUNC resolved using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for $end resolved using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for RBRACE resolved using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for CASE resolved using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for RETURN resolved using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    IDENTIFIER      reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    VAR             reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    TYPE            reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    FOR             reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    PACKAGE         reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    IMPORT          reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    SWITCH          reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    IF              reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    FUNC            reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    $end            reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    RBRACE          reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    CASE            reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    DEFAULT         reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    RETURN          reduce using rule 37 (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion .)
    LBRACKET        reduce using rule 111 (expression -> llamarFuncion .)
    AND             reduce using rule 111 (expression -> llamarFuncion .)
    OR              reduce using rule 111 (expression -> llamarFuncion .)
    EQ              reduce using rule 111 (expression -> llamarFuncion .)
    NEQ             reduce using rule 111 (expression -> llamarFuncion .)
    GT              reduce using rule 111 (expression -> llamarFuncion .)
    LT              reduce using rule 111 (expression -> llamarFuncion .)
    GE              reduce using rule 111 (expression -> llamarFuncion .)
    LE              reduce using rule 111 (expression -> llamarFuncion .)
    PLUS            reduce using rule 111 (expression -> llamarFuncion .)
    MINUS           reduce using rule 111 (expression -> llamarFuncion .)
    TIMES           reduce using rule 111 (expression -> llamarFuncion .)
    DIVIDE          reduce using rule 111 (expression -> llamarFuncion .)
    MOD             reduce using rule 111 (expression -> llamarFuncion .)

  ! IDENTIFIER      [ reduce using rule 111 (expression -> llamarFuncion .) ]
  ! VAR             [ reduce using rule 111 (expression -> llamarFuncion .) ]
  ! TYPE            [ reduce using rule 111 (expression -> llamarFuncion .) ]
  ! FOR             [ reduce using rule 111 (expression -> llamarFuncion .) ]
  ! PACKAGE         [ reduce using rule 111 (expression -> llamarFuncion .) ]
  ! IMPORT          [ reduce using rule 111 (expression -> llamarFuncion .) ]
  ! SWITCH          [ reduce using rule 111 (expression -> llamarFuncion .) ]
  ! IF              [ reduce using rule 111 (expression -> llamarFuncion .) ]
  ! FUNC            [ reduce using rule 111 (expression -> llamarFuncion .) ]
  ! $end            [ reduce using rule 111 (expression -> llamarFuncion .) ]
  ! RBRACE          [ reduce using rule 111 (expression -> llamarFuncion .) ]
  ! CASE            [ reduce using rule 111 (expression -> llamarFuncion .) ]
  ! DEFAULT         [ reduce using rule 111 (expression -> llamarFuncion .) ]
  ! RETURN          [ reduce using rule 111 (expression -> llamarFuncion .) ]


state 186

    (39) assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .
    (109) expression -> slice_literal .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for VAR resolved using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for TYPE resolved using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for FOR resolved using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for IMPORT resolved using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for SWITCH resolved using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for IF resolved using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for FUNC resolved using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for $end resolved using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for RBRACE resolved using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for CASE resolved using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
  ! reduce/reduce conflict for RETURN resolved using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    IDENTIFIER      reduce using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    VAR             reduce using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    TYPE            reduce using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    FOR             reduce using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    PACKAGE         reduce using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    IMPORT          reduce using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    SWITCH          reduce using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    IF              reduce using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    FUNC            reduce using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    $end            reduce using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    RBRACE          reduce using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    CASE            reduce using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    DEFAULT         reduce using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    RETURN          reduce using rule 39 (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal .)
    LBRACKET        reduce using rule 109 (expression -> slice_literal .)
    AND             reduce using rule 109 (expression -> slice_literal .)
    OR              reduce using rule 109 (expression -> slice_literal .)
    EQ              reduce using rule 109 (expression -> slice_literal .)
    NEQ             reduce using rule 109 (expression -> slice_literal .)
    GT              reduce using rule 109 (expression -> slice_literal .)
    LT              reduce using rule 109 (expression -> slice_literal .)
    GE              reduce using rule 109 (expression -> slice_literal .)
    LE              reduce using rule 109 (expression -> slice_literal .)
    PLUS            reduce using rule 109 (expression -> slice_literal .)
    MINUS           reduce using rule 109 (expression -> slice_literal .)
    TIMES           reduce using rule 109 (expression -> slice_literal .)
    DIVIDE          reduce using rule 109 (expression -> slice_literal .)
    MOD             reduce using rule 109 (expression -> slice_literal .)

  ! IDENTIFIER      [ reduce using rule 109 (expression -> slice_literal .) ]
  ! VAR             [ reduce using rule 109 (expression -> slice_literal .) ]
  ! TYPE            [ reduce using rule 109 (expression -> slice_literal .) ]
  ! FOR             [ reduce using rule 109 (expression -> slice_literal .) ]
  ! PACKAGE         [ reduce using rule 109 (expression -> slice_literal .) ]
  ! IMPORT          [ reduce using rule 109 (expression -> slice_literal .) ]
  ! SWITCH          [ reduce using rule 109 (expression -> slice_literal .) ]
  ! IF              [ reduce using rule 109 (expression -> slice_literal .) ]
  ! FUNC            [ reduce using rule 109 (expression -> slice_literal .) ]
  ! $end            [ reduce using rule 109 (expression -> slice_literal .) ]
  ! RBRACE          [ reduce using rule 109 (expression -> slice_literal .) ]
  ! CASE            [ reduce using rule 109 (expression -> slice_literal .) ]
  ! DEFAULT         [ reduce using rule 109 (expression -> slice_literal .) ]
  ! RETURN          [ reduce using rule 109 (expression -> slice_literal .) ]


state 187

    (142) slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .
    (136) type_name -> LBRACKET RBRACKET type_name .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for VAR resolved using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for TYPE resolved using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for FOR resolved using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for IMPORT resolved using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for SWITCH resolved using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for IF resolved using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for FUNC resolved using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for $end resolved using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for RBRACE resolved using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for CASE resolved using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
  ! reduce/reduce conflict for RETURN resolved using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    ASSIGN          reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    IDENTIFIER      reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    VAR             reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    TYPE            reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    FOR             reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    PACKAGE         reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    IMPORT          reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    SWITCH          reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    IF              reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    FUNC            reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    $end            reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    RBRACE          reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    CASE            reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    DEFAULT         reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    RETURN          reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)

  ! IDENTIFIER      [ reduce using rule 142 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! VAR             [ reduce using rule 142 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! TYPE            [ reduce using rule 142 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! FOR             [ reduce using rule 142 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! PACKAGE         [ reduce using rule 142 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! IMPORT          [ reduce using rule 142 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! SWITCH          [ reduce using rule 142 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! IF              [ reduce using rule 142 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! FUNC            [ reduce using rule 142 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! $end            [ reduce using rule 142 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! RBRACE          [ reduce using rule 142 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! CASE            [ reduce using rule 142 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! DEFAULT         [ reduce using rule 142 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]
  ! RETURN          [ reduce using rule 142 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .) ]


state 188

    (137) type_name -> FUNC LPAREN parameters . RPAREN return_type
    (127) parameters -> parameters . COMMA parameter

    RPAREN          shift and go to state 223
    COMMA           shift and go to state 173


state 189

    (90) struct_field -> IDENTIFIER . type_name
    (134) type_name -> . DATATYPE
    (135) type_name -> . IDENTIFIER
    (136) type_name -> . LBRACKET RBRACKET type_name
    (137) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 83
    IDENTIFIER      shift and go to state 79
    LBRACKET        shift and go to state 151
    FUNC            shift and go to state 84

    type_name                      shift and go to state 224

state 190

    (85) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields . RBRACE
    (92) struct_fields -> struct_fields . struct_field
    (90) struct_field -> . IDENTIFIER type_name

    RBRACE          shift and go to state 225
    IDENTIFIER      shift and go to state 189

    struct_field                   shift and go to state 226

state 191

    (91) struct_fields -> struct_field .

    RBRACE          reduce using rule 91 (struct_fields -> struct_field .)
    IDENTIFIER      reduce using rule 91 (struct_fields -> struct_field .)


state 192

    (94) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON . expression block
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    expression                     shift and go to state 227
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 193

    (147) expression -> expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    NEQ             reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    LBRACE          reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    IDENTIFIER      reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    VAR             reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    TYPE            reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    FOR             reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    PACKAGE         reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    IMPORT          reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    SWITCH          reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    IF              reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    FUNC            reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    $end            reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    CASE            reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    DEFAULT         reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    RETURN          reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 147 (expression -> expression LBRACKET expression RBRACKET .)


state 194

    (148) expression -> expression LBRACKET expression COLON . expression RBRACKET
    (150) expression -> expression LBRACKET expression COLON . RBRACKET
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    RBRACKET        shift and go to state 229
    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    expression                     shift and go to state 228
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 195

    (149) expression -> expression LBRACKET COLON expression . RBRACKET
    (112) expression -> expression . operadorLogico expression
    (113) expression -> expression . comparador expression
    (114) expression -> expression . operator expression
    (147) expression -> expression . LBRACKET expression RBRACKET
    (148) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (149) expression -> expression . LBRACKET COLON expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON RBRACKET
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR
    (53) comparador -> . EQ
    (54) comparador -> . NEQ
    (55) comparador -> . GT
    (56) comparador -> . LT
    (57) comparador -> . GE
    (58) comparador -> . LE
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    RBRACKET        shift and go to state 230
    LBRACKET        shift and go to state 91
    AND             shift and go to state 98
    OR              shift and go to state 99
    EQ              shift and go to state 92
    NEQ             shift and go to state 93
    GT              shift and go to state 94
    LT              shift and go to state 95
    GE              shift and go to state 96
    LE              shift and go to state 97
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104

    operadorLogico                 shift and go to state 89
    comparador                     shift and go to state 117
    operator                       shift and go to state 90

state 196

    (43) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN . argument_list_opt RPAREN
    (46) argument_list_opt -> . argument_list
    (47) argument_list_opt -> .
    (44) argument_list -> . expression
    (45) argument_list -> . argument_list COMMA expression
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    RPAREN          reduce using rule 47 (argument_list_opt -> .)
    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    argument_list_opt              shift and go to state 181
    argument_list                  shift and go to state 78
    expression                     shift and go to state 77
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 197

    (136) type_name -> LBRACKET RBRACKET . type_name
    (134) type_name -> . DATATYPE
    (135) type_name -> . IDENTIFIER
    (136) type_name -> . LBRACKET RBRACKET type_name
    (137) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 83
    IDENTIFIER      shift and go to state 79
    LBRACKET        shift and go to state 151
    FUNC            shift and go to state 84

    type_name                      shift and go to state 231

state 198

    (144) slice_literal -> LBRACKET RBRACKET type_name LBRACE . elements RBRACE
    (145) elements -> . elements COMMA expression
    (146) elements -> . expression
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    elements                       shift and go to state 232
    expression                     shift and go to state 233
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 199

    (60) switch -> SWITCH expression LBRACE caseBlocks RBRACE .

    IDENTIFIER      reduce using rule 60 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    VAR             reduce using rule 60 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    TYPE            reduce using rule 60 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    FOR             reduce using rule 60 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    PACKAGE         reduce using rule 60 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    IMPORT          reduce using rule 60 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    SWITCH          reduce using rule 60 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    IF              reduce using rule 60 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    FUNC            reduce using rule 60 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    $end            reduce using rule 60 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    RBRACE          reduce using rule 60 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    CASE            reduce using rule 60 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    DEFAULT         reduce using rule 60 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    RETURN          reduce using rule 60 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)


state 200

    (62) caseBlocks -> caseBlock caseBlocks .

    RBRACE          reduce using rule 62 (caseBlocks -> caseBlock caseBlocks .)


state 201

    (63) caseBlock -> CASE expression . COLON statement_list
    (112) expression -> expression . operadorLogico expression
    (113) expression -> expression . comparador expression
    (114) expression -> expression . operator expression
    (147) expression -> expression . LBRACKET expression RBRACKET
    (148) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (149) expression -> expression . LBRACKET COLON expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON RBRACKET
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR
    (53) comparador -> . EQ
    (54) comparador -> . NEQ
    (55) comparador -> . GT
    (56) comparador -> . LT
    (57) comparador -> . GE
    (58) comparador -> . LE
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    COLON           shift and go to state 234
    LBRACKET        shift and go to state 91
    AND             shift and go to state 98
    OR              shift and go to state 99
    EQ              shift and go to state 92
    NEQ             shift and go to state 93
    GT              shift and go to state 94
    LT              shift and go to state 95
    GE              shift and go to state 96
    LE              shift and go to state 97
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104

    operadorLogico                 shift and go to state 89
    comparador                     shift and go to state 117
    operator                       shift and go to state 90

state 202

    (64) caseBlock -> DEFAULT COLON . statement_list
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . struct_definition
    (10) statement -> . for_statement
    (11) statement -> . package
    (12) statement -> . import
    (13) statement -> . switch
    (14) statement -> . map
    (15) statement -> . if_statement
    (16) statement -> . function
    (17) statement -> . method_definition
    (18) statement -> . function_literal
    (19) statement -> . var_declaration
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (34) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (36) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (38) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (39) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (40) assignment -> . IDENTIFIER ASSIGN expression
    (32) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (85) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (94) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (96) for_statement -> . FOR condicion block
    (97) for_statement -> . FOR block
    (22) package -> . PACKAGE MAIN
    (23) package -> . PACKAGE IDENTIFIER
    (24) import -> . IMPORT STRING
    (25) import -> . IMPORT LPAREN import_list RPAREN
    (60) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (65) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (66) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (122) if_statement -> . IF condicion block
    (123) if_statement -> . IF condicion block ELSE block
    (124) if_statement -> . IF condicion_compleja block
    (125) if_statement -> . IF condicion_compleja block ELSE block
    (73) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (77) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (93) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (33) var_declaration -> . VAR IDENTIFIER type_name
    (142) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (143) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    IDENTIFIER      shift and go to state 20
    VAR             shift and go to state 21
    TYPE            shift and go to state 22
    FOR             shift and go to state 23
    PACKAGE         shift and go to state 24
    IMPORT          shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27
    FUNC            shift and go to state 28

    statement_list                 shift and go to state 235
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    struct_definition              shift and go to state 7
    for_statement                  shift and go to state 8
    package                        shift and go to state 9
    import                         shift and go to state 10
    switch                         shift and go to state 11
    map                            shift and go to state 12
    if_statement                   shift and go to state 13
    function                       shift and go to state 14
    method_definition              shift and go to state 15
    function_literal               shift and go to state 16
    var_declaration                shift and go to state 17
    slice_declaration              shift and go to state 18
    declare_assign                 shift and go to state 19

state 203

    (123) if_statement -> IF condicion block ELSE block .

    IDENTIFIER      reduce using rule 123 (if_statement -> IF condicion block ELSE block .)
    VAR             reduce using rule 123 (if_statement -> IF condicion block ELSE block .)
    TYPE            reduce using rule 123 (if_statement -> IF condicion block ELSE block .)
    FOR             reduce using rule 123 (if_statement -> IF condicion block ELSE block .)
    PACKAGE         reduce using rule 123 (if_statement -> IF condicion block ELSE block .)
    IMPORT          reduce using rule 123 (if_statement -> IF condicion block ELSE block .)
    SWITCH          reduce using rule 123 (if_statement -> IF condicion block ELSE block .)
    IF              reduce using rule 123 (if_statement -> IF condicion block ELSE block .)
    FUNC            reduce using rule 123 (if_statement -> IF condicion block ELSE block .)
    $end            reduce using rule 123 (if_statement -> IF condicion block ELSE block .)
    RBRACE          reduce using rule 123 (if_statement -> IF condicion block ELSE block .)
    CASE            reduce using rule 123 (if_statement -> IF condicion block ELSE block .)
    DEFAULT         reduce using rule 123 (if_statement -> IF condicion block ELSE block .)
    RETURN          reduce using rule 123 (if_statement -> IF condicion block ELSE block .)


state 204

    (125) if_statement -> IF condicion_compleja block ELSE block .

    IDENTIFIER      reduce using rule 125 (if_statement -> IF condicion_compleja block ELSE block .)
    VAR             reduce using rule 125 (if_statement -> IF condicion_compleja block ELSE block .)
    TYPE            reduce using rule 125 (if_statement -> IF condicion_compleja block ELSE block .)
    FOR             reduce using rule 125 (if_statement -> IF condicion_compleja block ELSE block .)
    PACKAGE         reduce using rule 125 (if_statement -> IF condicion_compleja block ELSE block .)
    IMPORT          reduce using rule 125 (if_statement -> IF condicion_compleja block ELSE block .)
    SWITCH          reduce using rule 125 (if_statement -> IF condicion_compleja block ELSE block .)
    IF              reduce using rule 125 (if_statement -> IF condicion_compleja block ELSE block .)
    FUNC            reduce using rule 125 (if_statement -> IF condicion_compleja block ELSE block .)
    $end            reduce using rule 125 (if_statement -> IF condicion_compleja block ELSE block .)
    RBRACE          reduce using rule 125 (if_statement -> IF condicion_compleja block ELSE block .)
    CASE            reduce using rule 125 (if_statement -> IF condicion_compleja block ELSE block .)
    DEFAULT         reduce using rule 125 (if_statement -> IF condicion_compleja block ELSE block .)
    RETURN          reduce using rule 125 (if_statement -> IF condicion_compleja block ELSE block .)


state 205

    (83) param -> IDENTIFIER type_name .

    COMMA           reduce using rule 83 (param -> IDENTIFIER type_name .)
    RPAREN          reduce using rule 83 (param -> IDENTIFIER type_name .)


state 206

    (73) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN . block
    (74) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN . return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (99) block -> . LBRACE statement_list RBRACE
    (100) block -> . LBRACE RBRACE
    (138) return_type -> . type_name
    (139) return_type -> . empty
    (140) return_type -> . LPAREN type_name COMMA return_type RPAREN
    (134) type_name -> . DATATYPE
    (135) type_name -> . IDENTIFIER
    (136) type_name -> . LBRACKET RBRACKET type_name
    (137) type_name -> . FUNC LPAREN parameters RPAREN return_type
    (59) empty -> .

  ! shift/reduce conflict for LBRACE resolved as shift
    LBRACE          shift and go to state 41
    LPAREN          shift and go to state 210
    DATATYPE        shift and go to state 83
    IDENTIFIER      shift and go to state 79
    LBRACKET        shift and go to state 151
    FUNC            shift and go to state 84

  ! LBRACE          [ reduce using rule 59 (empty -> .) ]

    block                          shift and go to state 236
    return_type                    shift and go to state 237
    type_name                      shift and go to state 212
    empty                          shift and go to state 213

state 207

    (82) params -> param COMMA . params
    (81) params -> . param
    (82) params -> . param COMMA params
    (83) param -> . IDENTIFIER type_name
    (84) param -> . identifier_list type_name
    (132) identifier_list -> . IDENTIFIER
    (133) identifier_list -> . IDENTIFIER COMMA identifier_list

    IDENTIFIER      shift and go to state 165

    param                          shift and go to state 168
    params                         shift and go to state 238
    identifier_list                shift and go to state 169

state 208

    (84) param -> identifier_list type_name .

    COMMA           reduce using rule 84 (param -> identifier_list type_name .)
    RPAREN          reduce using rule 84 (param -> identifier_list type_name .)


state 209

    (93) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN . IDENTIFIER LPAREN arguments RPAREN block

    IDENTIFIER      shift and go to state 239


state 210

    (140) return_type -> LPAREN . type_name COMMA return_type RPAREN
    (134) type_name -> . DATATYPE
    (135) type_name -> . IDENTIFIER
    (136) type_name -> . LBRACKET RBRACKET type_name
    (137) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 83
    IDENTIFIER      shift and go to state 79
    LBRACKET        shift and go to state 151
    FUNC            shift and go to state 84

    type_name                      shift and go to state 240

state 211

    (126) function_literal -> FUNC LPAREN parameters RPAREN return_type . block
    (99) block -> . LBRACE statement_list RBRACE
    (100) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 41

    block                          shift and go to state 241

state 212

    (138) return_type -> type_name .

    LBRACE          reduce using rule 138 (return_type -> type_name .)
    RPAREN          reduce using rule 138 (return_type -> type_name .)
    COMMA           reduce using rule 138 (return_type -> type_name .)
    RBRACKET        reduce using rule 138 (return_type -> type_name .)
    IDENTIFIER      reduce using rule 138 (return_type -> type_name .)
    VAR             reduce using rule 138 (return_type -> type_name .)
    TYPE            reduce using rule 138 (return_type -> type_name .)
    FOR             reduce using rule 138 (return_type -> type_name .)
    PACKAGE         reduce using rule 138 (return_type -> type_name .)
    IMPORT          reduce using rule 138 (return_type -> type_name .)
    SWITCH          reduce using rule 138 (return_type -> type_name .)
    IF              reduce using rule 138 (return_type -> type_name .)
    FUNC            reduce using rule 138 (return_type -> type_name .)
    $end            reduce using rule 138 (return_type -> type_name .)
    ASSIGN          reduce using rule 138 (return_type -> type_name .)
    RBRACE          reduce using rule 138 (return_type -> type_name .)
    CASE            reduce using rule 138 (return_type -> type_name .)
    DEFAULT         reduce using rule 138 (return_type -> type_name .)
    RETURN          reduce using rule 138 (return_type -> type_name .)


state 213

    (139) return_type -> empty .

    LBRACE          reduce using rule 139 (return_type -> empty .)
    RPAREN          reduce using rule 139 (return_type -> empty .)
    COMMA           reduce using rule 139 (return_type -> empty .)
    RBRACKET        reduce using rule 139 (return_type -> empty .)
    IDENTIFIER      reduce using rule 139 (return_type -> empty .)
    VAR             reduce using rule 139 (return_type -> empty .)
    TYPE            reduce using rule 139 (return_type -> empty .)
    FOR             reduce using rule 139 (return_type -> empty .)
    PACKAGE         reduce using rule 139 (return_type -> empty .)
    IMPORT          reduce using rule 139 (return_type -> empty .)
    SWITCH          reduce using rule 139 (return_type -> empty .)
    IF              reduce using rule 139 (return_type -> empty .)
    FUNC            reduce using rule 139 (return_type -> empty .)
    $end            reduce using rule 139 (return_type -> empty .)
    ASSIGN          reduce using rule 139 (return_type -> empty .)
    RBRACE          reduce using rule 139 (return_type -> empty .)
    CASE            reduce using rule 139 (return_type -> empty .)
    DEFAULT         reduce using rule 139 (return_type -> empty .)
    RETURN          reduce using rule 139 (return_type -> empty .)


state 214

    (127) parameters -> parameters COMMA parameter .

    RPAREN          reduce using rule 127 (parameters -> parameters COMMA parameter .)
    COMMA           reduce using rule 127 (parameters -> parameters COMMA parameter .)


state 215

    (77) function -> FUNC MAIN LPAREN params_opt RPAREN . block
    (99) block -> . LBRACE statement_list RBRACE
    (100) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 41

    block                          shift and go to state 242

state 216

    (89) struct_field_assignment -> IDENTIFIER COLON . expression
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    expression                     shift and go to state 243
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 217

    (86) struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .

    IDENTIFIER      reduce using rule 86 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    VAR             reduce using rule 86 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    TYPE            reduce using rule 86 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    FOR             reduce using rule 86 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    PACKAGE         reduce using rule 86 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    IMPORT          reduce using rule 86 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    SWITCH          reduce using rule 86 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    IF              reduce using rule 86 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    FUNC            reduce using rule 86 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    $end            reduce using rule 86 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    RBRACE          reduce using rule 86 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    CASE            reduce using rule 86 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    DEFAULT         reduce using rule 86 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)
    RETURN          reduce using rule 86 (struct_literal -> IDENTIFIER LBRACE struct_field_assignments RBRACE .)


state 218

    (88) struct_field_assignments -> struct_field_assignments COMMA . struct_field_assignment
    (89) struct_field_assignment -> . IDENTIFIER COLON expression

    IDENTIFIER      shift and go to state 176

    struct_field_assignment        shift and go to state 244

state 219

    (67) mapLiteral -> MAP LBRACKET type_name RBRACKET . type_name LBRACE mapEntries RBRACE
    (134) type_name -> . DATATYPE
    (135) type_name -> . IDENTIFIER
    (136) type_name -> . LBRACKET RBRACKET type_name
    (137) type_name -> . FUNC LPAREN parameters RPAREN return_type

    DATATYPE        shift and go to state 83
    IDENTIFIER      shift and go to state 79
    LBRACKET        shift and go to state 151
    FUNC            shift and go to state 84

    type_name                      shift and go to state 245

state 220

    (32) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER . RPAREN

    RPAREN          shift and go to state 246


state 221

    (43) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .

    IDENTIFIER      reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    VAR             reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TYPE            reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FOR             reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PACKAGE         reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IMPORT          reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SWITCH          reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IF              reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FUNC            reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    $end            reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LBRACKET        reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    EQ              reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    NEQ             reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    GT              reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LT              reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    GE              reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LE              reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    AND             reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    OR              reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PLUS            reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    MINUS           reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TIMES           reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DIVIDE          reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    MOD             reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LBRACE          reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    CASE            reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DEFAULT         reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RETURN          reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RPAREN          reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SEMICOLON       reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACKET        reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    COLON           reduce using rule 43 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)


state 222

    (42) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .

    IDENTIFIER      reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    VAR             reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    TYPE            reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    FOR             reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    PACKAGE         reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    IMPORT          reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    SWITCH          reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    IF              reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    FUNC            reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    $end            reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    LBRACKET        reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    EQ              reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    NEQ             reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    GT              reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    LT              reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    GE              reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    LE              reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    AND             reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    OR              reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    PLUS            reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    MINUS           reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    TIMES           reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    DIVIDE          reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    MOD             reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    LBRACE          reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    RBRACE          reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    CASE            reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    DEFAULT         reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    RETURN          reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    COMMA           reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    RPAREN          reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    SEMICOLON       reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    RBRACKET        reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    COLON           reduce using rule 42 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)


state 223

    (137) type_name -> FUNC LPAREN parameters RPAREN . return_type
    (138) return_type -> . type_name
    (139) return_type -> . empty
    (140) return_type -> . LPAREN type_name COMMA return_type RPAREN
    (134) type_name -> . DATATYPE
    (135) type_name -> . IDENTIFIER
    (136) type_name -> . LBRACKET RBRACKET type_name
    (137) type_name -> . FUNC LPAREN parameters RPAREN return_type
    (59) empty -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
    LPAREN          shift and go to state 210
    DATATYPE        shift and go to state 83
    IDENTIFIER      shift and go to state 79
    LBRACKET        shift and go to state 151
    FUNC            shift and go to state 84
    LBRACE          reduce using rule 59 (empty -> .)
    RPAREN          reduce using rule 59 (empty -> .)
    COMMA           reduce using rule 59 (empty -> .)
    RBRACKET        reduce using rule 59 (empty -> .)
    VAR             reduce using rule 59 (empty -> .)
    TYPE            reduce using rule 59 (empty -> .)
    FOR             reduce using rule 59 (empty -> .)
    PACKAGE         reduce using rule 59 (empty -> .)
    IMPORT          reduce using rule 59 (empty -> .)
    SWITCH          reduce using rule 59 (empty -> .)
    IF              reduce using rule 59 (empty -> .)
    $end            reduce using rule 59 (empty -> .)
    ASSIGN          reduce using rule 59 (empty -> .)
    RBRACE          reduce using rule 59 (empty -> .)
    CASE            reduce using rule 59 (empty -> .)
    DEFAULT         reduce using rule 59 (empty -> .)
    RETURN          reduce using rule 59 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 59 (empty -> .) ]
  ! FUNC            [ reduce using rule 59 (empty -> .) ]

    return_type                    shift and go to state 247
    type_name                      shift and go to state 212
    empty                          shift and go to state 213

state 224

    (90) struct_field -> IDENTIFIER type_name .

    RBRACE          reduce using rule 90 (struct_field -> IDENTIFIER type_name .)
    IDENTIFIER      reduce using rule 90 (struct_field -> IDENTIFIER type_name .)


state 225

    (85) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .

    IDENTIFIER      reduce using rule 85 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    VAR             reduce using rule 85 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    TYPE            reduce using rule 85 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    FOR             reduce using rule 85 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    PACKAGE         reduce using rule 85 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    IMPORT          reduce using rule 85 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    SWITCH          reduce using rule 85 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    IF              reduce using rule 85 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    FUNC            reduce using rule 85 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    $end            reduce using rule 85 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    RBRACE          reduce using rule 85 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    CASE            reduce using rule 85 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    DEFAULT         reduce using rule 85 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    RETURN          reduce using rule 85 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)


state 226

    (92) struct_fields -> struct_fields struct_field .

    RBRACE          reduce using rule 92 (struct_fields -> struct_fields struct_field .)
    IDENTIFIER      reduce using rule 92 (struct_fields -> struct_fields struct_field .)


state 227

    (94) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression . block
    (112) expression -> expression . operadorLogico expression
    (113) expression -> expression . comparador expression
    (114) expression -> expression . operator expression
    (147) expression -> expression . LBRACKET expression RBRACKET
    (148) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (149) expression -> expression . LBRACKET COLON expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON RBRACKET
    (99) block -> . LBRACE statement_list RBRACE
    (100) block -> . LBRACE RBRACE
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR
    (53) comparador -> . EQ
    (54) comparador -> . NEQ
    (55) comparador -> . GT
    (56) comparador -> . LT
    (57) comparador -> . GE
    (58) comparador -> . LE
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    LBRACKET        shift and go to state 91
    LBRACE          shift and go to state 41
    AND             shift and go to state 98
    OR              shift and go to state 99
    EQ              shift and go to state 92
    NEQ             shift and go to state 93
    GT              shift and go to state 94
    LT              shift and go to state 95
    GE              shift and go to state 96
    LE              shift and go to state 97
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104

    block                          shift and go to state 248
    operadorLogico                 shift and go to state 89
    comparador                     shift and go to state 117
    operator                       shift and go to state 90

state 228

    (148) expression -> expression LBRACKET expression COLON expression . RBRACKET
    (112) expression -> expression . operadorLogico expression
    (113) expression -> expression . comparador expression
    (114) expression -> expression . operator expression
    (147) expression -> expression . LBRACKET expression RBRACKET
    (148) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (149) expression -> expression . LBRACKET COLON expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON RBRACKET
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR
    (53) comparador -> . EQ
    (54) comparador -> . NEQ
    (55) comparador -> . GT
    (56) comparador -> . LT
    (57) comparador -> . GE
    (58) comparador -> . LE
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    RBRACKET        shift and go to state 249
    LBRACKET        shift and go to state 91
    AND             shift and go to state 98
    OR              shift and go to state 99
    EQ              shift and go to state 92
    NEQ             shift and go to state 93
    GT              shift and go to state 94
    LT              shift and go to state 95
    GE              shift and go to state 96
    LE              shift and go to state 97
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104

    operadorLogico                 shift and go to state 89
    comparador                     shift and go to state 117
    operator                       shift and go to state 90

state 229

    (150) expression -> expression LBRACKET expression COLON RBRACKET .

    LBRACKET        reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    EQ              reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    NEQ             reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    GT              reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    LT              reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    GE              reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    LE              reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    AND             reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    OR              reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    PLUS            reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    MINUS           reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    TIMES           reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    DIVIDE          reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    MOD             reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    LBRACE          reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    IDENTIFIER      reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    VAR             reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    TYPE            reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    FOR             reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    PACKAGE         reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    IMPORT          reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    SWITCH          reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    IF              reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    FUNC            reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    $end            reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    RBRACE          reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    CASE            reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    DEFAULT         reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    RETURN          reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    COMMA           reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    RPAREN          reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    SEMICOLON       reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    RBRACKET        reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)
    COLON           reduce using rule 150 (expression -> expression LBRACKET expression COLON RBRACKET .)


state 230

    (149) expression -> expression LBRACKET COLON expression RBRACKET .

    LBRACKET        reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    EQ              reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    NEQ             reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    GT              reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    LT              reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    GE              reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    LE              reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    AND             reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    OR              reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    PLUS            reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    MINUS           reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    TIMES           reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    DIVIDE          reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    MOD             reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    LBRACE          reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    IDENTIFIER      reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    VAR             reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    TYPE            reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    FOR             reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    PACKAGE         reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    IMPORT          reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    SWITCH          reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    IF              reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    FUNC            reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    $end            reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    RBRACE          reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    CASE            reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    DEFAULT         reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    RETURN          reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    COMMA           reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    RPAREN          reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    SEMICOLON       reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    RBRACKET        reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)
    COLON           reduce using rule 149 (expression -> expression LBRACKET COLON expression RBRACKET .)


state 231

    (136) type_name -> LBRACKET RBRACKET type_name .

    LBRACE          reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    RPAREN          reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    COMMA           reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    RBRACKET        reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    IDENTIFIER      reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    VAR             reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    TYPE            reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    FOR             reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    PACKAGE         reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    IMPORT          reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    SWITCH          reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    IF              reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    FUNC            reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    $end            reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    ASSIGN          reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    RBRACE          reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    CASE            reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    DEFAULT         reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)
    RETURN          reduce using rule 136 (type_name -> LBRACKET RBRACKET type_name .)


state 232

    (144) slice_literal -> LBRACKET RBRACKET type_name LBRACE elements . RBRACE
    (145) elements -> elements . COMMA expression

    RBRACE          shift and go to state 250
    COMMA           shift and go to state 251


state 233

    (146) elements -> expression .
    (112) expression -> expression . operadorLogico expression
    (113) expression -> expression . comparador expression
    (114) expression -> expression . operator expression
    (147) expression -> expression . LBRACKET expression RBRACKET
    (148) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (149) expression -> expression . LBRACKET COLON expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON RBRACKET
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR
    (53) comparador -> . EQ
    (54) comparador -> . NEQ
    (55) comparador -> . GT
    (56) comparador -> . LT
    (57) comparador -> . GE
    (58) comparador -> . LE
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    RBRACE          reduce using rule 146 (elements -> expression .)
    COMMA           reduce using rule 146 (elements -> expression .)
    LBRACKET        shift and go to state 91
    AND             shift and go to state 98
    OR              shift and go to state 99
    EQ              shift and go to state 92
    NEQ             shift and go to state 93
    GT              shift and go to state 94
    LT              shift and go to state 95
    GE              shift and go to state 96
    LE              shift and go to state 97
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104

    operadorLogico                 shift and go to state 89
    comparador                     shift and go to state 117
    operator                       shift and go to state 90

state 234

    (63) caseBlock -> CASE expression COLON . statement_list
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . struct_definition
    (10) statement -> . for_statement
    (11) statement -> . package
    (12) statement -> . import
    (13) statement -> . switch
    (14) statement -> . map
    (15) statement -> . if_statement
    (16) statement -> . function
    (17) statement -> . method_definition
    (18) statement -> . function_literal
    (19) statement -> . var_declaration
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (34) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (36) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (38) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (39) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (40) assignment -> . IDENTIFIER ASSIGN expression
    (32) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (85) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (94) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (96) for_statement -> . FOR condicion block
    (97) for_statement -> . FOR block
    (22) package -> . PACKAGE MAIN
    (23) package -> . PACKAGE IDENTIFIER
    (24) import -> . IMPORT STRING
    (25) import -> . IMPORT LPAREN import_list RPAREN
    (60) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (65) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (66) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (122) if_statement -> . IF condicion block
    (123) if_statement -> . IF condicion block ELSE block
    (124) if_statement -> . IF condicion_compleja block
    (125) if_statement -> . IF condicion_compleja block ELSE block
    (73) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (77) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (93) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (33) var_declaration -> . VAR IDENTIFIER type_name
    (142) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (143) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    IDENTIFIER      shift and go to state 20
    VAR             shift and go to state 21
    TYPE            shift and go to state 22
    FOR             shift and go to state 23
    PACKAGE         shift and go to state 24
    IMPORT          shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27
    FUNC            shift and go to state 28

    statement_list                 shift and go to state 252
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    struct_definition              shift and go to state 7
    for_statement                  shift and go to state 8
    package                        shift and go to state 9
    import                         shift and go to state 10
    switch                         shift and go to state 11
    map                            shift and go to state 12
    if_statement                   shift and go to state 13
    function                       shift and go to state 14
    method_definition              shift and go to state 15
    function_literal               shift and go to state 16
    var_declaration                shift and go to state 17
    slice_declaration              shift and go to state 18
    declare_assign                 shift and go to state 19

state 235

    (64) caseBlock -> DEFAULT COLON statement_list .
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . struct_definition
    (10) statement -> . for_statement
    (11) statement -> . package
    (12) statement -> . import
    (13) statement -> . switch
    (14) statement -> . map
    (15) statement -> . if_statement
    (16) statement -> . function
    (17) statement -> . method_definition
    (18) statement -> . function_literal
    (19) statement -> . var_declaration
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (34) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (36) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (38) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (39) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (40) assignment -> . IDENTIFIER ASSIGN expression
    (32) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (85) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (94) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (96) for_statement -> . FOR condicion block
    (97) for_statement -> . FOR block
    (22) package -> . PACKAGE MAIN
    (23) package -> . PACKAGE IDENTIFIER
    (24) import -> . IMPORT STRING
    (25) import -> . IMPORT LPAREN import_list RPAREN
    (60) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (65) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (66) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (122) if_statement -> . IF condicion block
    (123) if_statement -> . IF condicion block ELSE block
    (124) if_statement -> . IF condicion_compleja block
    (125) if_statement -> . IF condicion_compleja block ELSE block
    (73) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (77) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (93) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (33) var_declaration -> . VAR IDENTIFIER type_name
    (142) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (143) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    CASE            reduce using rule 64 (caseBlock -> DEFAULT COLON statement_list .)
    DEFAULT         reduce using rule 64 (caseBlock -> DEFAULT COLON statement_list .)
    RBRACE          reduce using rule 64 (caseBlock -> DEFAULT COLON statement_list .)
    IDENTIFIER      shift and go to state 20
    VAR             shift and go to state 21
    TYPE            shift and go to state 22
    FOR             shift and go to state 23
    PACKAGE         shift and go to state 24
    IMPORT          shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27
    FUNC            shift and go to state 28

    statement                      shift and go to state 29
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    struct_definition              shift and go to state 7
    for_statement                  shift and go to state 8
    package                        shift and go to state 9
    import                         shift and go to state 10
    switch                         shift and go to state 11
    map                            shift and go to state 12
    if_statement                   shift and go to state 13
    function                       shift and go to state 14
    method_definition              shift and go to state 15
    function_literal               shift and go to state 16
    var_declaration                shift and go to state 17
    slice_declaration              shift and go to state 18
    declare_assign                 shift and go to state 19

state 236

    (73) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .

    IDENTIFIER      reduce using rule 73 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    VAR             reduce using rule 73 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    TYPE            reduce using rule 73 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    FOR             reduce using rule 73 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    PACKAGE         reduce using rule 73 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    IMPORT          reduce using rule 73 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    SWITCH          reduce using rule 73 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    IF              reduce using rule 73 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    FUNC            reduce using rule 73 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    $end            reduce using rule 73 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    RBRACE          reduce using rule 73 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    CASE            reduce using rule 73 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    DEFAULT         reduce using rule 73 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    RETURN          reduce using rule 73 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)


state 237

    (74) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type . LBRACE statement_list_opt RETURN return_values RBRACE

    LBRACE          shift and go to state 253


state 238

    (82) params -> param COMMA params .

    RPAREN          reduce using rule 82 (params -> param COMMA params .)


state 239

    (93) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER . LPAREN arguments RPAREN block

    LPAREN          shift and go to state 254


state 240

    (140) return_type -> LPAREN type_name . COMMA return_type RPAREN

    COMMA           shift and go to state 255


state 241

    (126) function_literal -> FUNC LPAREN parameters RPAREN return_type block .

    IDENTIFIER      reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    VAR             reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    TYPE            reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    FOR             reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    PACKAGE         reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    IMPORT          reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    SWITCH          reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    IF              reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    FUNC            reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    $end            reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    LBRACKET        reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    EQ              reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    NEQ             reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    GT              reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    LT              reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    GE              reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    LE              reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    AND             reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    OR              reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    PLUS            reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    MINUS           reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    TIMES           reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    DIVIDE          reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    MOD             reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    LBRACE          reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    RBRACE          reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    CASE            reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    DEFAULT         reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    RETURN          reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    COMMA           reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    RPAREN          reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    SEMICOLON       reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    RBRACKET        reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    COLON           reduce using rule 126 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)


state 242

    (77) function -> FUNC MAIN LPAREN params_opt RPAREN block .

    IDENTIFIER      reduce using rule 77 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    VAR             reduce using rule 77 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    TYPE            reduce using rule 77 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    FOR             reduce using rule 77 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    PACKAGE         reduce using rule 77 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    IMPORT          reduce using rule 77 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    SWITCH          reduce using rule 77 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    IF              reduce using rule 77 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    FUNC            reduce using rule 77 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    $end            reduce using rule 77 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    RBRACE          reduce using rule 77 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    CASE            reduce using rule 77 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    DEFAULT         reduce using rule 77 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    RETURN          reduce using rule 77 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)


state 243

    (89) struct_field_assignment -> IDENTIFIER COLON expression .
    (112) expression -> expression . operadorLogico expression
    (113) expression -> expression . comparador expression
    (114) expression -> expression . operator expression
    (147) expression -> expression . LBRACKET expression RBRACKET
    (148) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (149) expression -> expression . LBRACKET COLON expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON RBRACKET
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR
    (53) comparador -> . EQ
    (54) comparador -> . NEQ
    (55) comparador -> . GT
    (56) comparador -> . LT
    (57) comparador -> . GE
    (58) comparador -> . LE
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    RBRACE          reduce using rule 89 (struct_field_assignment -> IDENTIFIER COLON expression .)
    COMMA           reduce using rule 89 (struct_field_assignment -> IDENTIFIER COLON expression .)
    LBRACKET        shift and go to state 91
    AND             shift and go to state 98
    OR              shift and go to state 99
    EQ              shift and go to state 92
    NEQ             shift and go to state 93
    GT              shift and go to state 94
    LT              shift and go to state 95
    GE              shift and go to state 96
    LE              shift and go to state 97
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104

    operadorLogico                 shift and go to state 89
    comparador                     shift and go to state 117
    operator                       shift and go to state 90

state 244

    (88) struct_field_assignments -> struct_field_assignments COMMA struct_field_assignment .

    RBRACE          reduce using rule 88 (struct_field_assignments -> struct_field_assignments COMMA struct_field_assignment .)
    COMMA           reduce using rule 88 (struct_field_assignments -> struct_field_assignments COMMA struct_field_assignment .)


state 245

    (67) mapLiteral -> MAP LBRACKET type_name RBRACKET type_name . LBRACE mapEntries RBRACE

    LBRACE          shift and go to state 256


state 246

    (32) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .

    IDENTIFIER      reduce using rule 32 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    VAR             reduce using rule 32 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    TYPE            reduce using rule 32 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    FOR             reduce using rule 32 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    PACKAGE         reduce using rule 32 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    IMPORT          reduce using rule 32 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    SWITCH          reduce using rule 32 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    IF              reduce using rule 32 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    FUNC            reduce using rule 32 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    $end            reduce using rule 32 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    RBRACE          reduce using rule 32 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    CASE            reduce using rule 32 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    DEFAULT         reduce using rule 32 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    RETURN          reduce using rule 32 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)


state 247

    (137) type_name -> FUNC LPAREN parameters RPAREN return_type .

    ASSIGN          reduce using rule 137 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    IDENTIFIER      reduce using rule 137 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    VAR             reduce using rule 137 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    TYPE            reduce using rule 137 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    FOR             reduce using rule 137 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    PACKAGE         reduce using rule 137 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    IMPORT          reduce using rule 137 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    SWITCH          reduce using rule 137 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    IF              reduce using rule 137 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    FUNC            reduce using rule 137 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    $end            reduce using rule 137 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    RBRACE          reduce using rule 137 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    CASE            reduce using rule 137 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    DEFAULT         reduce using rule 137 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    RETURN          reduce using rule 137 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    LBRACE          reduce using rule 137 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    RPAREN          reduce using rule 137 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    COMMA           reduce using rule 137 (type_name -> FUNC LPAREN parameters RPAREN return_type .)
    RBRACKET        reduce using rule 137 (type_name -> FUNC LPAREN parameters RPAREN return_type .)


state 248

    (94) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .

    IDENTIFIER      reduce using rule 94 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    VAR             reduce using rule 94 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    TYPE            reduce using rule 94 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    FOR             reduce using rule 94 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    PACKAGE         reduce using rule 94 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    IMPORT          reduce using rule 94 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    SWITCH          reduce using rule 94 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    IF              reduce using rule 94 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    FUNC            reduce using rule 94 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    $end            reduce using rule 94 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    RBRACE          reduce using rule 94 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    CASE            reduce using rule 94 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    DEFAULT         reduce using rule 94 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    RETURN          reduce using rule 94 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)


state 249

    (148) expression -> expression LBRACKET expression COLON expression RBRACKET .

    LBRACKET        reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    EQ              reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    NEQ             reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    GT              reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    LT              reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    GE              reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    LE              reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    AND             reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    OR              reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    PLUS            reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    MINUS           reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    TIMES           reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    DIVIDE          reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    MOD             reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    LBRACE          reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    IDENTIFIER      reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    VAR             reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    TYPE            reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    FOR             reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    PACKAGE         reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    IMPORT          reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    SWITCH          reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    IF              reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    FUNC            reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    $end            reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    RBRACE          reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    CASE            reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    DEFAULT         reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    RETURN          reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    RPAREN          reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    SEMICOLON       reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    RBRACKET        reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    COLON           reduce using rule 148 (expression -> expression LBRACKET expression COLON expression RBRACKET .)


state 250

    (144) slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .

    LBRACKET        reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    EQ              reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    NEQ             reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    GT              reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    LT              reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    GE              reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    LE              reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    AND             reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    OR              reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    PLUS            reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    MINUS           reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    TIMES           reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    DIVIDE          reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    MOD             reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    LBRACE          reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    IDENTIFIER      reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    VAR             reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    TYPE            reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    FOR             reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    PACKAGE         reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    IMPORT          reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    SWITCH          reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    IF              reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    FUNC            reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    $end            reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    RBRACE          reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    CASE            reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    DEFAULT         reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    RETURN          reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    COMMA           reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    RPAREN          reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    SEMICOLON       reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    RBRACKET        reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    COLON           reduce using rule 144 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)


state 251

    (145) elements -> elements COMMA . expression
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    expression                     shift and go to state 257
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 252

    (63) caseBlock -> CASE expression COLON statement_list .
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . struct_definition
    (10) statement -> . for_statement
    (11) statement -> . package
    (12) statement -> . import
    (13) statement -> . switch
    (14) statement -> . map
    (15) statement -> . if_statement
    (16) statement -> . function
    (17) statement -> . method_definition
    (18) statement -> . function_literal
    (19) statement -> . var_declaration
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (34) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (36) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (38) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (39) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (40) assignment -> . IDENTIFIER ASSIGN expression
    (32) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (85) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (94) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (96) for_statement -> . FOR condicion block
    (97) for_statement -> . FOR block
    (22) package -> . PACKAGE MAIN
    (23) package -> . PACKAGE IDENTIFIER
    (24) import -> . IMPORT STRING
    (25) import -> . IMPORT LPAREN import_list RPAREN
    (60) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (65) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (66) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (122) if_statement -> . IF condicion block
    (123) if_statement -> . IF condicion block ELSE block
    (124) if_statement -> . IF condicion_compleja block
    (125) if_statement -> . IF condicion_compleja block ELSE block
    (73) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (77) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (93) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (33) var_declaration -> . VAR IDENTIFIER type_name
    (142) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (143) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    CASE            reduce using rule 63 (caseBlock -> CASE expression COLON statement_list .)
    DEFAULT         reduce using rule 63 (caseBlock -> CASE expression COLON statement_list .)
    RBRACE          reduce using rule 63 (caseBlock -> CASE expression COLON statement_list .)
    IDENTIFIER      shift and go to state 20
    VAR             shift and go to state 21
    TYPE            shift and go to state 22
    FOR             shift and go to state 23
    PACKAGE         shift and go to state 24
    IMPORT          shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27
    FUNC            shift and go to state 28

    statement                      shift and go to state 29
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    struct_definition              shift and go to state 7
    for_statement                  shift and go to state 8
    package                        shift and go to state 9
    import                         shift and go to state 10
    switch                         shift and go to state 11
    map                            shift and go to state 12
    if_statement                   shift and go to state 13
    function                       shift and go to state 14
    method_definition              shift and go to state 15
    function_literal               shift and go to state 16
    var_declaration                shift and go to state 17
    slice_declaration              shift and go to state 18
    declare_assign                 shift and go to state 19

state 253

    (74) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE . statement_list_opt RETURN return_values RBRACE
    (2) statement_list_opt -> . statement_list
    (3) statement_list_opt -> .
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . struct_definition
    (10) statement -> . for_statement
    (11) statement -> . package
    (12) statement -> . import
    (13) statement -> . switch
    (14) statement -> . map
    (15) statement -> . if_statement
    (16) statement -> . function
    (17) statement -> . method_definition
    (18) statement -> . function_literal
    (19) statement -> . var_declaration
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (34) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (36) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (38) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (39) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (40) assignment -> . IDENTIFIER ASSIGN expression
    (32) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (85) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (94) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (96) for_statement -> . FOR condicion block
    (97) for_statement -> . FOR block
    (22) package -> . PACKAGE MAIN
    (23) package -> . PACKAGE IDENTIFIER
    (24) import -> . IMPORT STRING
    (25) import -> . IMPORT LPAREN import_list RPAREN
    (60) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (65) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (66) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (122) if_statement -> . IF condicion block
    (123) if_statement -> . IF condicion block ELSE block
    (124) if_statement -> . IF condicion_compleja block
    (125) if_statement -> . IF condicion_compleja block ELSE block
    (73) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (77) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (93) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (33) var_declaration -> . VAR IDENTIFIER type_name
    (142) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (143) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    RETURN          reduce using rule 3 (statement_list_opt -> .)
    IDENTIFIER      shift and go to state 20
    VAR             shift and go to state 21
    TYPE            shift and go to state 22
    FOR             shift and go to state 23
    PACKAGE         shift and go to state 24
    IMPORT          shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27
    FUNC            shift and go to state 28

    statement_list_opt             shift and go to state 258
    statement_list                 shift and go to state 259
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    struct_definition              shift and go to state 7
    for_statement                  shift and go to state 8
    package                        shift and go to state 9
    import                         shift and go to state 10
    switch                         shift and go to state 11
    map                            shift and go to state 12
    if_statement                   shift and go to state 13
    function                       shift and go to state 14
    method_definition              shift and go to state 15
    function_literal               shift and go to state 16
    var_declaration                shift and go to state 17
    slice_declaration              shift and go to state 18
    declare_assign                 shift and go to state 19

state 254

    (93) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN . arguments RPAREN block
    (28) arguments -> . expression
    (29) arguments -> . arguments COMMA expression
    (30) arguments -> .
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    RPAREN          reduce using rule 30 (arguments -> .)
    COMMA           reduce using rule 30 (arguments -> .)
    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    arguments                      shift and go to state 260
    expression                     shift and go to state 261
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 255

    (140) return_type -> LPAREN type_name COMMA . return_type RPAREN
    (138) return_type -> . type_name
    (139) return_type -> . empty
    (140) return_type -> . LPAREN type_name COMMA return_type RPAREN
    (134) type_name -> . DATATYPE
    (135) type_name -> . IDENTIFIER
    (136) type_name -> . LBRACKET RBRACKET type_name
    (137) type_name -> . FUNC LPAREN parameters RPAREN return_type
    (59) empty -> .

    LPAREN          shift and go to state 210
    DATATYPE        shift and go to state 83
    IDENTIFIER      shift and go to state 79
    LBRACKET        shift and go to state 151
    FUNC            shift and go to state 84
    RPAREN          reduce using rule 59 (empty -> .)

    type_name                      shift and go to state 212
    return_type                    shift and go to state 262
    empty                          shift and go to state 213

state 256

    (67) mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE . mapEntries RBRACE
    (68) mapEntries -> . mapEntry
    (69) mapEntries -> . mapEntry COMMA mapEntries
    (70) mapEntry -> . value_key COLON value_key
    (71) value_key -> . expression
    (72) value_key -> . STRING
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    STRING          shift and go to state 267
    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    mapEntries                     shift and go to state 263
    mapEntry                       shift and go to state 264
    value_key                      shift and go to state 265
    expression                     shift and go to state 266
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 257

    (145) elements -> elements COMMA expression .
    (112) expression -> expression . operadorLogico expression
    (113) expression -> expression . comparador expression
    (114) expression -> expression . operator expression
    (147) expression -> expression . LBRACKET expression RBRACKET
    (148) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (149) expression -> expression . LBRACKET COLON expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON RBRACKET
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR
    (53) comparador -> . EQ
    (54) comparador -> . NEQ
    (55) comparador -> . GT
    (56) comparador -> . LT
    (57) comparador -> . GE
    (58) comparador -> . LE
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    RBRACE          reduce using rule 145 (elements -> elements COMMA expression .)
    COMMA           reduce using rule 145 (elements -> elements COMMA expression .)
    LBRACKET        shift and go to state 91
    AND             shift and go to state 98
    OR              shift and go to state 99
    EQ              shift and go to state 92
    NEQ             shift and go to state 93
    GT              shift and go to state 94
    LT              shift and go to state 95
    GE              shift and go to state 96
    LE              shift and go to state 97
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104

    operadorLogico                 shift and go to state 89
    comparador                     shift and go to state 117
    operator                       shift and go to state 90

state 258

    (74) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt . RETURN return_values RBRACE

    RETURN          shift and go to state 268


state 259

    (2) statement_list_opt -> statement_list .
    (5) statement_list -> statement_list . statement
    (6) statement -> . assignment
    (7) statement -> . input
    (8) statement -> . llamarFuncion
    (9) statement -> . struct_definition
    (10) statement -> . for_statement
    (11) statement -> . package
    (12) statement -> . import
    (13) statement -> . switch
    (14) statement -> . map
    (15) statement -> . if_statement
    (16) statement -> . function
    (17) statement -> . method_definition
    (18) statement -> . function_literal
    (19) statement -> . var_declaration
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (34) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (35) assignment -> . IDENTIFIER DECLARE_ASSIGN struct_literal
    (36) assignment -> . VAR IDENTIFIER type_name ASSIGN expression
    (37) assignment -> . VAR IDENTIFIER type_name ASSIGN llamarFuncion
    (38) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (39) assignment -> . VAR IDENTIFIER type_name ASSIGN slice_literal
    (40) assignment -> . IDENTIFIER ASSIGN expression
    (32) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (85) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (94) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (96) for_statement -> . FOR condicion block
    (97) for_statement -> . FOR block
    (22) package -> . PACKAGE MAIN
    (23) package -> . PACKAGE IDENTIFIER
    (24) import -> . IMPORT STRING
    (25) import -> . IMPORT LPAREN import_list RPAREN
    (60) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (65) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (66) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (122) if_statement -> . IF condicion block
    (123) if_statement -> . IF condicion block ELSE block
    (124) if_statement -> . IF condicion_compleja block
    (125) if_statement -> . IF condicion_compleja block ELSE block
    (73) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE
    (77) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (93) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (33) var_declaration -> . VAR IDENTIFIER type_name
    (142) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (143) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    RETURN          reduce using rule 2 (statement_list_opt -> statement_list .)
    IDENTIFIER      shift and go to state 20
    VAR             shift and go to state 21
    TYPE            shift and go to state 22
    FOR             shift and go to state 23
    PACKAGE         shift and go to state 24
    IMPORT          shift and go to state 25
    SWITCH          shift and go to state 26
    IF              shift and go to state 27
    FUNC            shift and go to state 28

    statement                      shift and go to state 29
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    struct_definition              shift and go to state 7
    for_statement                  shift and go to state 8
    package                        shift and go to state 9
    import                         shift and go to state 10
    switch                         shift and go to state 11
    map                            shift and go to state 12
    if_statement                   shift and go to state 13
    function                       shift and go to state 14
    method_definition              shift and go to state 15
    function_literal               shift and go to state 16
    var_declaration                shift and go to state 17
    slice_declaration              shift and go to state 18
    declare_assign                 shift and go to state 19

state 260

    (93) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments . RPAREN block
    (29) arguments -> arguments . COMMA expression

    RPAREN          shift and go to state 269
    COMMA           shift and go to state 270


state 261

    (28) arguments -> expression .
    (112) expression -> expression . operadorLogico expression
    (113) expression -> expression . comparador expression
    (114) expression -> expression . operator expression
    (147) expression -> expression . LBRACKET expression RBRACKET
    (148) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (149) expression -> expression . LBRACKET COLON expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON RBRACKET
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR
    (53) comparador -> . EQ
    (54) comparador -> . NEQ
    (55) comparador -> . GT
    (56) comparador -> . LT
    (57) comparador -> . GE
    (58) comparador -> . LE
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    RPAREN          reduce using rule 28 (arguments -> expression .)
    COMMA           reduce using rule 28 (arguments -> expression .)
    LBRACKET        shift and go to state 91
    AND             shift and go to state 98
    OR              shift and go to state 99
    EQ              shift and go to state 92
    NEQ             shift and go to state 93
    GT              shift and go to state 94
    LT              shift and go to state 95
    GE              shift and go to state 96
    LE              shift and go to state 97
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104

    operadorLogico                 shift and go to state 89
    comparador                     shift and go to state 117
    operator                       shift and go to state 90

state 262

    (140) return_type -> LPAREN type_name COMMA return_type . RPAREN

    RPAREN          shift and go to state 271


state 263

    (67) mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries . RBRACE

    RBRACE          shift and go to state 272


state 264

    (68) mapEntries -> mapEntry .
    (69) mapEntries -> mapEntry . COMMA mapEntries

    RBRACE          reduce using rule 68 (mapEntries -> mapEntry .)
    COMMA           shift and go to state 273


state 265

    (70) mapEntry -> value_key . COLON value_key

    COLON           shift and go to state 274


state 266

    (71) value_key -> expression .
    (112) expression -> expression . operadorLogico expression
    (113) expression -> expression . comparador expression
    (114) expression -> expression . operator expression
    (147) expression -> expression . LBRACKET expression RBRACKET
    (148) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (149) expression -> expression . LBRACKET COLON expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON RBRACKET
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR
    (53) comparador -> . EQ
    (54) comparador -> . NEQ
    (55) comparador -> . GT
    (56) comparador -> . LT
    (57) comparador -> . GE
    (58) comparador -> . LE
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    COLON           reduce using rule 71 (value_key -> expression .)
    COMMA           reduce using rule 71 (value_key -> expression .)
    RBRACE          reduce using rule 71 (value_key -> expression .)
    LBRACKET        shift and go to state 91
    AND             shift and go to state 98
    OR              shift and go to state 99
    EQ              shift and go to state 92
    NEQ             shift and go to state 93
    GT              shift and go to state 94
    LT              shift and go to state 95
    GE              shift and go to state 96
    LE              shift and go to state 97
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104

    operadorLogico                 shift and go to state 89
    comparador                     shift and go to state 117
    operator                       shift and go to state 90

state 267

    (72) value_key -> STRING .
    (104) expression -> STRING .

  ! reduce/reduce conflict for COLON resolved using rule 72 (value_key -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 72 (value_key -> STRING .)
  ! reduce/reduce conflict for RBRACE resolved using rule 72 (value_key -> STRING .)
    COLON           reduce using rule 72 (value_key -> STRING .)
    COMMA           reduce using rule 72 (value_key -> STRING .)
    RBRACE          reduce using rule 72 (value_key -> STRING .)
    LBRACKET        reduce using rule 104 (expression -> STRING .)
    AND             reduce using rule 104 (expression -> STRING .)
    OR              reduce using rule 104 (expression -> STRING .)
    EQ              reduce using rule 104 (expression -> STRING .)
    NEQ             reduce using rule 104 (expression -> STRING .)
    GT              reduce using rule 104 (expression -> STRING .)
    LT              reduce using rule 104 (expression -> STRING .)
    GE              reduce using rule 104 (expression -> STRING .)
    LE              reduce using rule 104 (expression -> STRING .)
    PLUS            reduce using rule 104 (expression -> STRING .)
    MINUS           reduce using rule 104 (expression -> STRING .)
    TIMES           reduce using rule 104 (expression -> STRING .)
    DIVIDE          reduce using rule 104 (expression -> STRING .)
    MOD             reduce using rule 104 (expression -> STRING .)

  ! COLON           [ reduce using rule 104 (expression -> STRING .) ]
  ! COMMA           [ reduce using rule 104 (expression -> STRING .) ]
  ! RBRACE          [ reduce using rule 104 (expression -> STRING .) ]


state 268

    (74) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN . return_values RBRACE
    (75) return_values -> . expression
    (76) return_values -> . return_values COMMA expression
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    return_values                  shift and go to state 275
    expression                     shift and go to state 276
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 269

    (93) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN . block
    (99) block -> . LBRACE statement_list RBRACE
    (100) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 41

    block                          shift and go to state 277

state 270

    (29) arguments -> arguments COMMA . expression
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    expression                     shift and go to state 278
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 271

    (140) return_type -> LPAREN type_name COMMA return_type RPAREN .

    LBRACE          reduce using rule 140 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    RPAREN          reduce using rule 140 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    COMMA           reduce using rule 140 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    RBRACKET        reduce using rule 140 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    IDENTIFIER      reduce using rule 140 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    VAR             reduce using rule 140 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    TYPE            reduce using rule 140 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    FOR             reduce using rule 140 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    PACKAGE         reduce using rule 140 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    IMPORT          reduce using rule 140 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    SWITCH          reduce using rule 140 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    IF              reduce using rule 140 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    FUNC            reduce using rule 140 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    $end            reduce using rule 140 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    ASSIGN          reduce using rule 140 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    RBRACE          reduce using rule 140 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    CASE            reduce using rule 140 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    DEFAULT         reduce using rule 140 (return_type -> LPAREN type_name COMMA return_type RPAREN .)
    RETURN          reduce using rule 140 (return_type -> LPAREN type_name COMMA return_type RPAREN .)


state 272

    (67) mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .

    IDENTIFIER      reduce using rule 67 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    VAR             reduce using rule 67 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    TYPE            reduce using rule 67 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    FOR             reduce using rule 67 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    PACKAGE         reduce using rule 67 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    IMPORT          reduce using rule 67 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    SWITCH          reduce using rule 67 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    IF              reduce using rule 67 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    FUNC            reduce using rule 67 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    $end            reduce using rule 67 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    RBRACE          reduce using rule 67 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    CASE            reduce using rule 67 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    DEFAULT         reduce using rule 67 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)
    RETURN          reduce using rule 67 (mapLiteral -> MAP LBRACKET type_name RBRACKET type_name LBRACE mapEntries RBRACE .)


state 273

    (69) mapEntries -> mapEntry COMMA . mapEntries
    (68) mapEntries -> . mapEntry
    (69) mapEntries -> . mapEntry COMMA mapEntries
    (70) mapEntry -> . value_key COLON value_key
    (71) value_key -> . expression
    (72) value_key -> . STRING
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    STRING          shift and go to state 267
    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    mapEntry                       shift and go to state 264
    mapEntries                     shift and go to state 279
    value_key                      shift and go to state 265
    expression                     shift and go to state 266
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 274

    (70) mapEntry -> value_key COLON . value_key
    (71) value_key -> . expression
    (72) value_key -> . STRING
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    STRING          shift and go to state 267
    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    value_key                      shift and go to state 280
    expression                     shift and go to state 266
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 275

    (74) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values . RBRACE
    (76) return_values -> return_values . COMMA expression

    RBRACE          shift and go to state 281
    COMMA           shift and go to state 282


state 276

    (75) return_values -> expression .
    (112) expression -> expression . operadorLogico expression
    (113) expression -> expression . comparador expression
    (114) expression -> expression . operator expression
    (147) expression -> expression . LBRACKET expression RBRACKET
    (148) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (149) expression -> expression . LBRACKET COLON expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON RBRACKET
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR
    (53) comparador -> . EQ
    (54) comparador -> . NEQ
    (55) comparador -> . GT
    (56) comparador -> . LT
    (57) comparador -> . GE
    (58) comparador -> . LE
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    RBRACE          reduce using rule 75 (return_values -> expression .)
    COMMA           reduce using rule 75 (return_values -> expression .)
    LBRACKET        shift and go to state 91
    AND             shift and go to state 98
    OR              shift and go to state 99
    EQ              shift and go to state 92
    NEQ             shift and go to state 93
    GT              shift and go to state 94
    LT              shift and go to state 95
    GE              shift and go to state 96
    LE              shift and go to state 97
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104

    operadorLogico                 shift and go to state 89
    comparador                     shift and go to state 117
    operator                       shift and go to state 90

state 277

    (93) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .

    IDENTIFIER      reduce using rule 93 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    VAR             reduce using rule 93 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    TYPE            reduce using rule 93 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    FOR             reduce using rule 93 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    PACKAGE         reduce using rule 93 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    IMPORT          reduce using rule 93 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    SWITCH          reduce using rule 93 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    IF              reduce using rule 93 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    FUNC            reduce using rule 93 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    $end            reduce using rule 93 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    RBRACE          reduce using rule 93 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    CASE            reduce using rule 93 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    DEFAULT         reduce using rule 93 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    RETURN          reduce using rule 93 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)


state 278

    (29) arguments -> arguments COMMA expression .
    (112) expression -> expression . operadorLogico expression
    (113) expression -> expression . comparador expression
    (114) expression -> expression . operator expression
    (147) expression -> expression . LBRACKET expression RBRACKET
    (148) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (149) expression -> expression . LBRACKET COLON expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON RBRACKET
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR
    (53) comparador -> . EQ
    (54) comparador -> . NEQ
    (55) comparador -> . GT
    (56) comparador -> . LT
    (57) comparador -> . GE
    (58) comparador -> . LE
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    RPAREN          reduce using rule 29 (arguments -> arguments COMMA expression .)
    COMMA           reduce using rule 29 (arguments -> arguments COMMA expression .)
    LBRACKET        shift and go to state 91
    AND             shift and go to state 98
    OR              shift and go to state 99
    EQ              shift and go to state 92
    NEQ             shift and go to state 93
    GT              shift and go to state 94
    LT              shift and go to state 95
    GE              shift and go to state 96
    LE              shift and go to state 97
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104

    operadorLogico                 shift and go to state 89
    comparador                     shift and go to state 117
    operator                       shift and go to state 90

state 279

    (69) mapEntries -> mapEntry COMMA mapEntries .

    RBRACE          reduce using rule 69 (mapEntries -> mapEntry COMMA mapEntries .)


state 280

    (70) mapEntry -> value_key COLON value_key .

    COMMA           reduce using rule 70 (mapEntry -> value_key COLON value_key .)
    RBRACE          reduce using rule 70 (mapEntry -> value_key COLON value_key .)


state 281

    (74) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .

    IDENTIFIER      reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    VAR             reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    TYPE            reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    FOR             reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    PACKAGE         reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    IMPORT          reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    SWITCH          reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    IF              reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    FUNC            reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    $end            reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    RBRACE          reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    CASE            reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    DEFAULT         reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)
    RETURN          reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list_opt RETURN return_values RBRACE .)


state 282

    (76) return_values -> return_values COMMA . expression
    (101) expression -> . IDENTIFIER
    (102) expression -> . NUMBER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . slice_literal
    (110) expression -> . IDENTIFIER DOT IDENTIFIER
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operadorLogico expression
    (113) expression -> . expression comparador expression
    (114) expression -> . expression operator expression
    (120) expression -> . MINUS expression
    (121) expression -> . LPAREN expression RPAREN
    (141) expression -> . function_literal
    (147) expression -> . expression LBRACKET expression RBRACKET
    (148) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (149) expression -> . expression LBRACKET COLON expression RBRACKET
    (150) expression -> . expression LBRACKET expression COLON RBRACKET
    (144) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (42) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (43) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (126) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 43
    RUNE            shift and go to state 44
    STRING          shift and go to state 45
    RAW_STRING      shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NIL             shift and go to state 49
    MINUS           shift and go to state 52
    LPAREN          shift and go to state 53
    LBRACKET        shift and go to state 55
    FUNC            shift and go to state 56

    expression                     shift and go to state 283
    slice_literal                  shift and go to state 50
    llamarFuncion                  shift and go to state 51
    function_literal               shift and go to state 54

state 283

    (76) return_values -> return_values COMMA expression .
    (112) expression -> expression . operadorLogico expression
    (113) expression -> expression . comparador expression
    (114) expression -> expression . operator expression
    (147) expression -> expression . LBRACKET expression RBRACKET
    (148) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (149) expression -> expression . LBRACKET COLON expression RBRACKET
    (150) expression -> expression . LBRACKET expression COLON RBRACKET
    (51) operadorLogico -> . AND
    (52) operadorLogico -> . OR
    (53) comparador -> . EQ
    (54) comparador -> . NEQ
    (55) comparador -> . GT
    (56) comparador -> . LT
    (57) comparador -> . GE
    (58) comparador -> . LE
    (115) operator -> . PLUS
    (116) operator -> . MINUS
    (117) operator -> . TIMES
    (118) operator -> . DIVIDE
    (119) operator -> . MOD

    RBRACE          reduce using rule 76 (return_values -> return_values COMMA expression .)
    COMMA           reduce using rule 76 (return_values -> return_values COMMA expression .)
    LBRACKET        shift and go to state 91
    AND             shift and go to state 98
    OR              shift and go to state 99
    EQ              shift and go to state 92
    NEQ             shift and go to state 93
    GT              shift and go to state 94
    LT              shift and go to state 95
    GE              shift and go to state 96
    LE              shift and go to state 97
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104

    operadorLogico                 shift and go to state 89
    comparador                     shift and go to state 117
    operator                       shift and go to state 90
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 78 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 122 resolved as shift
WARNING: shift/reduce conflict for DATATYPE in state 122 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 122 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 122 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 140 resolved as shift
WARNING: shift/reduce conflict for AND in state 140 resolved as shift
WARNING: shift/reduce conflict for OR in state 140 resolved as shift
WARNING: shift/reduce conflict for EQ in state 140 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 140 resolved as shift
WARNING: shift/reduce conflict for GT in state 140 resolved as shift
WARNING: shift/reduce conflict for LT in state 140 resolved as shift
WARNING: shift/reduce conflict for GE in state 140 resolved as shift
WARNING: shift/reduce conflict for LE in state 140 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 140 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 140 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 140 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 140 resolved as shift
WARNING: shift/reduce conflict for MOD in state 140 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 141 resolved as shift
WARNING: shift/reduce conflict for AND in state 141 resolved as shift
WARNING: shift/reduce conflict for OR in state 141 resolved as shift
WARNING: shift/reduce conflict for EQ in state 141 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 141 resolved as shift
WARNING: shift/reduce conflict for GT in state 141 resolved as shift
WARNING: shift/reduce conflict for LT in state 141 resolved as shift
WARNING: shift/reduce conflict for GE in state 141 resolved as shift
WARNING: shift/reduce conflict for LE in state 141 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 141 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 141 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 141 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 141 resolved as shift
WARNING: shift/reduce conflict for MOD in state 141 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 142 resolved as shift
WARNING: shift/reduce conflict for AND in state 142 resolved as shift
WARNING: shift/reduce conflict for OR in state 142 resolved as shift
WARNING: shift/reduce conflict for EQ in state 142 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 142 resolved as shift
WARNING: shift/reduce conflict for GT in state 142 resolved as shift
WARNING: shift/reduce conflict for LT in state 142 resolved as shift
WARNING: shift/reduce conflict for GE in state 142 resolved as shift
WARNING: shift/reduce conflict for LE in state 142 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 142 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 142 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 142 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 142 resolved as shift
WARNING: shift/reduce conflict for MOD in state 142 resolved as shift
WARNING: shift/reduce conflict for DATATYPE in state 153 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 153 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 153 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 153 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 160 resolved as shift
WARNING: shift/reduce conflict for AND in state 160 resolved as shift
WARNING: shift/reduce conflict for OR in state 160 resolved as shift
WARNING: shift/reduce conflict for EQ in state 160 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 160 resolved as shift
WARNING: shift/reduce conflict for GT in state 160 resolved as shift
WARNING: shift/reduce conflict for LT in state 160 resolved as shift
WARNING: shift/reduce conflict for GE in state 160 resolved as shift
WARNING: shift/reduce conflict for LE in state 160 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 160 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 160 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 160 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 160 resolved as shift
WARNING: shift/reduce conflict for MOD in state 160 resolved as shift
WARNING: shift/reduce conflict for DATATYPE in state 165 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 165 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 165 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 165 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 170 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 206 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 223 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 223 resolved as shift
WARNING: reduce/reduce conflict in state 71 resolved using rule (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal)
WARNING: rejected rule (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal) in state 71
WARNING: reduce/reduce conflict in state 71 resolved using rule (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal)
WARNING: rejected rule (expression -> slice_literal) in state 71
WARNING: reduce/reduce conflict in state 140 resolved using rule (condicion -> expression comparador expression)
WARNING: rejected rule (expression -> expression comparador expression) in state 140
WARNING: reduce/reduce conflict in state 185 resolved using rule (assignment -> VAR IDENTIFIER type_name ASSIGN llamarFuncion)
WARNING: rejected rule (expression -> llamarFuncion) in state 185
WARNING: reduce/reduce conflict in state 186 resolved using rule (assignment -> VAR IDENTIFIER type_name ASSIGN slice_literal)
WARNING: rejected rule (expression -> slice_literal) in state 186
WARNING: reduce/reduce conflict in state 187 resolved using rule (type_name -> LBRACKET RBRACKET type_name)
WARNING: rejected rule (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name) in state 187
WARNING: reduce/reduce conflict in state 267 resolved using rule (value_key -> STRING)
WARNING: rejected rule (expression -> STRING) in state 267
WARNING: Rule (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal) is never reduced
WARNING: Rule (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name) is never reduced
