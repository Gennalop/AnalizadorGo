Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CONTINUE
    DEFER
    FALLTHROUGH
    GO
    INTERFACE
    SELECT
    STRING_UNCLOSED

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> assignment
Rule 5     statement -> input
Rule 6     statement -> llamarFuncion
Rule 7     statement -> print_statement
Rule 8     statement -> struct_definition
Rule 9     statement -> for_statement
Rule 10    statement -> package
Rule 11    statement -> import
Rule 12    statement -> switch
Rule 13    statement -> map
Rule 14    statement -> if_statement
Rule 15    statement -> function
Rule 16    statement -> method_definition
Rule 17    statement -> function_literal
Rule 18    statement -> var_declaration
Rule 19    statement -> return_statement
Rule 20    statement -> slice_declaration
Rule 21    statement -> declare_assign
Rule 22    package -> PACKAGE MAIN
Rule 23    package -> PACKAGE IDENTIFIER
Rule 24    import -> IMPORT STRING
Rule 25    import -> IMPORT LPAREN import_list RPAREN
Rule 26    import_list -> STRING
Rule 27    import_list -> import_list STRING
Rule 28    arguments -> expression
Rule 29    arguments -> arguments COMMA expression
Rule 30    arguments -> <empty>
Rule 31    const_declaration -> CONST IDENTIFIER ASSIGN expression
Rule 32    input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
Rule 33    var_declaration -> VAR IDENTIFIER DATATYPE
Rule 34    assignment -> IDENTIFIER DECLARE_ASSIGN expression
Rule 35    assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression
Rule 36    assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
Rule 37    assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal
Rule 38    assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal
Rule 39    assignment -> IDENTIFIER ASSIGN expression
Rule 40    llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN
Rule 41    llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
Rule 42    llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
Rule 43    expression -> expression comparador expression
Rule 44    expression -> expression operadorLogico expression
Rule 45    argument_list -> expression
Rule 46    argument_list -> argument_list COMMA expression
Rule 47    argument_list_opt -> argument_list
Rule 48    argument_list_opt -> <empty>
Rule 49    condicion -> expression comparador expression
Rule 50    condicion_compleja -> condicion operadorLogico condicion
Rule 51    condicion_compleja -> condicion operadorLogico condicion_compleja
Rule 52    operadorLogico -> AND
Rule 53    operadorLogico -> OR
Rule 54    comparador -> EQ
Rule 55    comparador -> NEQ
Rule 56    comparador -> GT
Rule 57    comparador -> LT
Rule 58    comparador -> GE
Rule 59    comparador -> LE
Rule 60    empty -> <empty>
Rule 61    switch -> SWITCH expression LBRACE caseBlocks RBRACE
Rule 62    caseBlocks -> caseBlock
Rule 63    caseBlocks -> caseBlock caseBlocks
Rule 64    caseBlock -> CASE expression COLON statement_list
Rule 65    caseBlock -> DEFAULT COLON statement_list
Rule 66    map -> IDENTIFIER DECLARE_ASSIGN mapLiteral
Rule 67    map -> VAR IDENTIFIER ASSIGN mapLiteral
Rule 68    mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE
Rule 69    mapEntries -> mapEntry
Rule 70    mapEntries -> mapEntry COMMA mapEntries
Rule 71    mapEntry -> value_key COLON value_key
Rule 72    value_key -> expression
Rule 73    value_key -> STRING
Rule 74    function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block
Rule 75    function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
Rule 76    function -> FUNC MAIN LPAREN params_opt RPAREN block
Rule 77    return_statement -> RETURN return_values
Rule 78    return_values -> expression
Rule 79    return_values -> expression COMMA return_values
Rule 80    params_opt -> params
Rule 81    params_opt -> empty
Rule 82    params -> param
Rule 83    params -> param COMMA params
Rule 84    param -> IDENTIFIER type_name
Rule 85    type_name -> DATATYPE
Rule 86    type_name -> IDENTIFIER
Rule 87    print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
Rule 88    struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
Rule 89    struct_field -> IDENTIFIER DATATYPE
Rule 90    struct_fields -> struct_field
Rule 91    struct_fields -> struct_fields struct_field
Rule 92    method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
Rule 93    for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
Rule 94    identifier_list -> IDENTIFIER
Rule 95    identifier_list -> IDENTIFIER COMMA identifier_list
Rule 96    shortAssignment -> identifier_list DECLARE_ASSIGN expression
Rule 97    for_statement -> FOR condicion block
Rule 98    for_statement -> FOR block
Rule 99    for_range_clause -> shortAssignment RANGE expression
Rule 100   block -> LBRACE statement_list RBRACE
Rule 101   block -> LBRACE RBRACE
Rule 102   expression -> NUMBER
Rule 103   expression -> IDENTIFIER
Rule 104   expression -> RUNE
Rule 105   expression -> STRING
Rule 106   expression -> RAW_STRING
Rule 107   expression -> TRUE
Rule 108   expression -> FALSE
Rule 109   expression -> NIL
Rule 110   expression -> slice_literal
Rule 111   expression -> llamarFuncion
Rule 112   expression -> expression operator expression
Rule 113   expression -> expression DOT IDENTIFIER
Rule 114   operator -> PLUS
Rule 115   operator -> MINUS
Rule 116   operator -> TIMES
Rule 117   operator -> DIVIDE
Rule 118   operator -> MOD
Rule 119   expression -> MINUS expression
Rule 120   expression -> LPAREN expression RPAREN
Rule 121   if_statement -> IF condicion block
Rule 122   if_statement -> IF condicion block ELSE block
Rule 123   if_statement -> IF condicion_compleja block
Rule 124   if_statement -> IF condicion_compleja block ELSE block
Rule 125   function_literal -> FUNC LPAREN parameters RPAREN return_type block
Rule 126   parameters -> parameters COMMA parameter
Rule 127   parameters -> parameter
Rule 128   parameters -> empty
Rule 129   parameter -> IDENTIFIER DATATYPE
Rule 130   parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE
Rule 131   return_type -> DATATYPE
Rule 132   return_type -> LPAREN type_list RPAREN
Rule 133   return_type -> empty
Rule 134   type_list -> DATATYPE
Rule 135   type_list -> DATATYPE COMMA type_list
Rule 136   slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name
Rule 137   declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal
Rule 138   slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE
Rule 139   elements -> elements COMMA expression
Rule 140   elements -> expression
Rule 141   expression -> expression LBRACKET expression RBRACKET
Rule 142   expression -> expression LBRACKET expression COLON expression RBRACKET
Rule 143   expression -> expression LBRACKET COLON expression RBRACKET
Rule 144   expression -> expression LBRACKET expression COLON RBRACKET

Terminals, with rules where they appear

AMPERSAND            : 32
AND                  : 52
ASSIGN               : 31 35 36 38 39 67
BREAK                : 
CASE                 : 64
COLON                : 64 65 71 142 143 144
COMMA                : 29 41 46 70 79 83 95 126 135 139
CONST                : 31
CONTINUE             : 
DATATYPE             : 33 35 36 38 68 68 85 89 129 130 131 134 135
DECLARE_ASSIGN       : 34 37 66 96 137
DEFAULT              : 65
DEFER                : 
DIVIDE               : 117
DOT                  : 32 42 87 113
ELSE                 : 122 124
EQ                   : 54
FALLTHROUGH          : 
FALSE                : 108
FOR                  : 93 97 98
FUNC                 : 74 75 76 92 125 130
GE                   : 58
GO                   : 
GT                   : 56
IDENTIFIER           : 23 31 32 32 32 33 34 35 36 37 38 39 40 41 42 42 66 67 74 75 84 86 87 87 88 89 92 92 92 94 95 103 113 129 130 136 137
IF                   : 121 122 123 124
IMPORT               : 24 25
INTERFACE            : 
LBRACE               : 61 68 75 88 100 101 138
LBRACKET             : 68 136 138 141 142 143 144
LE                   : 59
LPAREN               : 25 32 40 41 42 74 75 76 87 92 92 120 125 130 132
LT                   : 57
MAIN                 : 22 76
MAP                  : 68
MINUS                : 115 119
MOD                  : 118
NEQ                  : 55
NIL                  : 109
NUMBER               : 102
OR                   : 53
PACKAGE              : 22 23
PLUS                 : 114
RANGE                : 99
RAW_STRING           : 106
RBRACE               : 61 68 75 88 100 101 138
RBRACKET             : 68 136 138 141 142 143 144
RETURN               : 77
RPAREN               : 25 32 40 41 42 74 75 76 87 92 92 120 125 130 132
RUNE                 : 104
SELECT               : 
SEMICOLON            : 93 93
STRING               : 24 26 27 73 105
STRING_UNCLOSED      : 
STRUCT               : 88
SWITCH               : 61
TIMES                : 116
TRUE                 : 107
TYPE                 : 88
VAR                  : 33 35 36 38 67 136
error                : 

Nonterminals, with rules where they appear

argument_list        : 46 47
argument_list_opt    : 40 41 42 87
arguments            : 29 92
assignment           : 4
block                : 74 76 92 93 97 98 121 122 122 123 124 124 125
caseBlock            : 62 63
caseBlocks           : 61 63
comparador           : 43 49
condicion            : 50 50 51 93 97 121 122
condicion_compleja   : 51 123 124
const_declaration    : 
declare_assign       : 21
elements             : 138 139
empty                : 81 128 133
expression           : 28 29 31 34 35 39 41 43 43 44 44 45 46 49 49 61 64 72 78 79 93 96 99 112 112 113 119 120 139 140 141 141 142 142 142 143 143 144 144
for_range_clause     : 
for_statement        : 9
function             : 15
function_literal     : 17
identifier_list      : 95 96
if_statement         : 14
import               : 11
import_list          : 25 27
input                : 5
llamarFuncion        : 6 36 111
map                  : 13
mapEntries           : 68 70
mapEntry             : 69 70
mapLiteral           : 66 67
method_definition    : 16
operadorLogico       : 44 50 51
operator             : 112
package              : 10
param                : 82 83
parameter            : 126 127
parameters           : 125 126 130
params               : 80 83
params_opt           : 74 75 76
print_statement      : 7
program              : 0
return_statement     : 19
return_type          : 75 125
return_values        : 77 79
shortAssignment      : 93 99
slice_declaration    : 20
slice_literal        : 37 38 110 137
statement            : 2 3
statement_list       : 1 3 64 65 75 100
struct_definition    : 8
struct_field         : 90 91
struct_fields        : 88 91
switch               : 12
type_list            : 132 135
type_name            : 84 136 138
value_key            : 71 71
var_declaration      : 18

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . assignment
    (5) statement -> . input
    (6) statement -> . llamarFuncion
    (7) statement -> . print_statement
    (8) statement -> . struct_definition
    (9) statement -> . for_statement
    (10) statement -> . package
    (11) statement -> . import
    (12) statement -> . switch
    (13) statement -> . map
    (14) statement -> . if_statement
    (15) statement -> . function
    (16) statement -> . method_definition
    (17) statement -> . function_literal
    (18) statement -> . var_declaration
    (19) statement -> . return_statement
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (34) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (35) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (36) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (37) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (38) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN slice_literal
    (39) assignment -> . IDENTIFIER ASSIGN expression
    (32) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (87) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (93) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (97) for_statement -> . FOR condicion block
    (98) for_statement -> . FOR block
    (22) package -> . PACKAGE MAIN
    (23) package -> . PACKAGE IDENTIFIER
    (24) import -> . IMPORT STRING
    (25) import -> . IMPORT LPAREN import_list RPAREN
    (61) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (66) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (67) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (121) if_statement -> . IF condicion block
    (122) if_statement -> . IF condicion block ELSE block
    (123) if_statement -> . IF condicion_compleja block
    (124) if_statement -> . IF condicion_compleja block ELSE block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (76) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (92) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (125) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (33) var_declaration -> . VAR IDENTIFIER DATATYPE
    (77) return_statement -> . RETURN return_values
    (136) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (137) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    IDENTIFIER      shift and go to state 22
    VAR             shift and go to state 23
    TYPE            shift and go to state 24
    FOR             shift and go to state 25
    PACKAGE         shift and go to state 26
    IMPORT          shift and go to state 27
    SWITCH          shift and go to state 28
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    RETURN          shift and go to state 31

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    return_statement               shift and go to state 19
    slice_declaration              shift and go to state 20
    declare_assign                 shift and go to state 21

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . assignment
    (5) statement -> . input
    (6) statement -> . llamarFuncion
    (7) statement -> . print_statement
    (8) statement -> . struct_definition
    (9) statement -> . for_statement
    (10) statement -> . package
    (11) statement -> . import
    (12) statement -> . switch
    (13) statement -> . map
    (14) statement -> . if_statement
    (15) statement -> . function
    (16) statement -> . method_definition
    (17) statement -> . function_literal
    (18) statement -> . var_declaration
    (19) statement -> . return_statement
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (34) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (35) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (36) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (37) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (38) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN slice_literal
    (39) assignment -> . IDENTIFIER ASSIGN expression
    (32) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (87) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (93) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (97) for_statement -> . FOR condicion block
    (98) for_statement -> . FOR block
    (22) package -> . PACKAGE MAIN
    (23) package -> . PACKAGE IDENTIFIER
    (24) import -> . IMPORT STRING
    (25) import -> . IMPORT LPAREN import_list RPAREN
    (61) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (66) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (67) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (121) if_statement -> . IF condicion block
    (122) if_statement -> . IF condicion block ELSE block
    (123) if_statement -> . IF condicion_compleja block
    (124) if_statement -> . IF condicion_compleja block ELSE block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (76) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (92) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (125) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (33) var_declaration -> . VAR IDENTIFIER DATATYPE
    (77) return_statement -> . RETURN return_values
    (136) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (137) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    $end            reduce using rule 1 (program -> statement_list .)
    IDENTIFIER      shift and go to state 22
    VAR             shift and go to state 23
    TYPE            shift and go to state 24
    FOR             shift and go to state 25
    PACKAGE         shift and go to state 26
    IMPORT          shift and go to state 27
    SWITCH          shift and go to state 28
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    RETURN          shift and go to state 31

    statement                      shift and go to state 32
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    return_statement               shift and go to state 19
    slice_declaration              shift and go to state 20
    declare_assign                 shift and go to state 21

state 3

    (2) statement_list -> statement .

    IDENTIFIER      reduce using rule 2 (statement_list -> statement .)
    VAR             reduce using rule 2 (statement_list -> statement .)
    TYPE            reduce using rule 2 (statement_list -> statement .)
    FOR             reduce using rule 2 (statement_list -> statement .)
    PACKAGE         reduce using rule 2 (statement_list -> statement .)
    IMPORT          reduce using rule 2 (statement_list -> statement .)
    SWITCH          reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    FUNC            reduce using rule 2 (statement_list -> statement .)
    RETURN          reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)
    RBRACE          reduce using rule 2 (statement_list -> statement .)
    CASE            reduce using rule 2 (statement_list -> statement .)
    DEFAULT         reduce using rule 2 (statement_list -> statement .)


state 4

    (4) statement -> assignment .

    IDENTIFIER      reduce using rule 4 (statement -> assignment .)
    VAR             reduce using rule 4 (statement -> assignment .)
    TYPE            reduce using rule 4 (statement -> assignment .)
    FOR             reduce using rule 4 (statement -> assignment .)
    PACKAGE         reduce using rule 4 (statement -> assignment .)
    IMPORT          reduce using rule 4 (statement -> assignment .)
    SWITCH          reduce using rule 4 (statement -> assignment .)
    IF              reduce using rule 4 (statement -> assignment .)
    FUNC            reduce using rule 4 (statement -> assignment .)
    RETURN          reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)
    RBRACE          reduce using rule 4 (statement -> assignment .)
    CASE            reduce using rule 4 (statement -> assignment .)
    DEFAULT         reduce using rule 4 (statement -> assignment .)


state 5

    (5) statement -> input .

    IDENTIFIER      reduce using rule 5 (statement -> input .)
    VAR             reduce using rule 5 (statement -> input .)
    TYPE            reduce using rule 5 (statement -> input .)
    FOR             reduce using rule 5 (statement -> input .)
    PACKAGE         reduce using rule 5 (statement -> input .)
    IMPORT          reduce using rule 5 (statement -> input .)
    SWITCH          reduce using rule 5 (statement -> input .)
    IF              reduce using rule 5 (statement -> input .)
    FUNC            reduce using rule 5 (statement -> input .)
    RETURN          reduce using rule 5 (statement -> input .)
    $end            reduce using rule 5 (statement -> input .)
    RBRACE          reduce using rule 5 (statement -> input .)
    CASE            reduce using rule 5 (statement -> input .)
    DEFAULT         reduce using rule 5 (statement -> input .)


state 6

    (6) statement -> llamarFuncion .

    IDENTIFIER      reduce using rule 6 (statement -> llamarFuncion .)
    VAR             reduce using rule 6 (statement -> llamarFuncion .)
    TYPE            reduce using rule 6 (statement -> llamarFuncion .)
    FOR             reduce using rule 6 (statement -> llamarFuncion .)
    PACKAGE         reduce using rule 6 (statement -> llamarFuncion .)
    IMPORT          reduce using rule 6 (statement -> llamarFuncion .)
    SWITCH          reduce using rule 6 (statement -> llamarFuncion .)
    IF              reduce using rule 6 (statement -> llamarFuncion .)
    FUNC            reduce using rule 6 (statement -> llamarFuncion .)
    RETURN          reduce using rule 6 (statement -> llamarFuncion .)
    $end            reduce using rule 6 (statement -> llamarFuncion .)
    RBRACE          reduce using rule 6 (statement -> llamarFuncion .)
    CASE            reduce using rule 6 (statement -> llamarFuncion .)
    DEFAULT         reduce using rule 6 (statement -> llamarFuncion .)


state 7

    (7) statement -> print_statement .

    IDENTIFIER      reduce using rule 7 (statement -> print_statement .)
    VAR             reduce using rule 7 (statement -> print_statement .)
    TYPE            reduce using rule 7 (statement -> print_statement .)
    FOR             reduce using rule 7 (statement -> print_statement .)
    PACKAGE         reduce using rule 7 (statement -> print_statement .)
    IMPORT          reduce using rule 7 (statement -> print_statement .)
    SWITCH          reduce using rule 7 (statement -> print_statement .)
    IF              reduce using rule 7 (statement -> print_statement .)
    FUNC            reduce using rule 7 (statement -> print_statement .)
    RETURN          reduce using rule 7 (statement -> print_statement .)
    $end            reduce using rule 7 (statement -> print_statement .)
    RBRACE          reduce using rule 7 (statement -> print_statement .)
    CASE            reduce using rule 7 (statement -> print_statement .)
    DEFAULT         reduce using rule 7 (statement -> print_statement .)


state 8

    (8) statement -> struct_definition .

    IDENTIFIER      reduce using rule 8 (statement -> struct_definition .)
    VAR             reduce using rule 8 (statement -> struct_definition .)
    TYPE            reduce using rule 8 (statement -> struct_definition .)
    FOR             reduce using rule 8 (statement -> struct_definition .)
    PACKAGE         reduce using rule 8 (statement -> struct_definition .)
    IMPORT          reduce using rule 8 (statement -> struct_definition .)
    SWITCH          reduce using rule 8 (statement -> struct_definition .)
    IF              reduce using rule 8 (statement -> struct_definition .)
    FUNC            reduce using rule 8 (statement -> struct_definition .)
    RETURN          reduce using rule 8 (statement -> struct_definition .)
    $end            reduce using rule 8 (statement -> struct_definition .)
    RBRACE          reduce using rule 8 (statement -> struct_definition .)
    CASE            reduce using rule 8 (statement -> struct_definition .)
    DEFAULT         reduce using rule 8 (statement -> struct_definition .)


state 9

    (9) statement -> for_statement .

    IDENTIFIER      reduce using rule 9 (statement -> for_statement .)
    VAR             reduce using rule 9 (statement -> for_statement .)
    TYPE            reduce using rule 9 (statement -> for_statement .)
    FOR             reduce using rule 9 (statement -> for_statement .)
    PACKAGE         reduce using rule 9 (statement -> for_statement .)
    IMPORT          reduce using rule 9 (statement -> for_statement .)
    SWITCH          reduce using rule 9 (statement -> for_statement .)
    IF              reduce using rule 9 (statement -> for_statement .)
    FUNC            reduce using rule 9 (statement -> for_statement .)
    RETURN          reduce using rule 9 (statement -> for_statement .)
    $end            reduce using rule 9 (statement -> for_statement .)
    RBRACE          reduce using rule 9 (statement -> for_statement .)
    CASE            reduce using rule 9 (statement -> for_statement .)
    DEFAULT         reduce using rule 9 (statement -> for_statement .)


state 10

    (10) statement -> package .

    IDENTIFIER      reduce using rule 10 (statement -> package .)
    VAR             reduce using rule 10 (statement -> package .)
    TYPE            reduce using rule 10 (statement -> package .)
    FOR             reduce using rule 10 (statement -> package .)
    PACKAGE         reduce using rule 10 (statement -> package .)
    IMPORT          reduce using rule 10 (statement -> package .)
    SWITCH          reduce using rule 10 (statement -> package .)
    IF              reduce using rule 10 (statement -> package .)
    FUNC            reduce using rule 10 (statement -> package .)
    RETURN          reduce using rule 10 (statement -> package .)
    $end            reduce using rule 10 (statement -> package .)
    RBRACE          reduce using rule 10 (statement -> package .)
    CASE            reduce using rule 10 (statement -> package .)
    DEFAULT         reduce using rule 10 (statement -> package .)


state 11

    (11) statement -> import .

    IDENTIFIER      reduce using rule 11 (statement -> import .)
    VAR             reduce using rule 11 (statement -> import .)
    TYPE            reduce using rule 11 (statement -> import .)
    FOR             reduce using rule 11 (statement -> import .)
    PACKAGE         reduce using rule 11 (statement -> import .)
    IMPORT          reduce using rule 11 (statement -> import .)
    SWITCH          reduce using rule 11 (statement -> import .)
    IF              reduce using rule 11 (statement -> import .)
    FUNC            reduce using rule 11 (statement -> import .)
    RETURN          reduce using rule 11 (statement -> import .)
    $end            reduce using rule 11 (statement -> import .)
    RBRACE          reduce using rule 11 (statement -> import .)
    CASE            reduce using rule 11 (statement -> import .)
    DEFAULT         reduce using rule 11 (statement -> import .)


state 12

    (12) statement -> switch .

    IDENTIFIER      reduce using rule 12 (statement -> switch .)
    VAR             reduce using rule 12 (statement -> switch .)
    TYPE            reduce using rule 12 (statement -> switch .)
    FOR             reduce using rule 12 (statement -> switch .)
    PACKAGE         reduce using rule 12 (statement -> switch .)
    IMPORT          reduce using rule 12 (statement -> switch .)
    SWITCH          reduce using rule 12 (statement -> switch .)
    IF              reduce using rule 12 (statement -> switch .)
    FUNC            reduce using rule 12 (statement -> switch .)
    RETURN          reduce using rule 12 (statement -> switch .)
    $end            reduce using rule 12 (statement -> switch .)
    RBRACE          reduce using rule 12 (statement -> switch .)
    CASE            reduce using rule 12 (statement -> switch .)
    DEFAULT         reduce using rule 12 (statement -> switch .)


state 13

    (13) statement -> map .

    IDENTIFIER      reduce using rule 13 (statement -> map .)
    VAR             reduce using rule 13 (statement -> map .)
    TYPE            reduce using rule 13 (statement -> map .)
    FOR             reduce using rule 13 (statement -> map .)
    PACKAGE         reduce using rule 13 (statement -> map .)
    IMPORT          reduce using rule 13 (statement -> map .)
    SWITCH          reduce using rule 13 (statement -> map .)
    IF              reduce using rule 13 (statement -> map .)
    FUNC            reduce using rule 13 (statement -> map .)
    RETURN          reduce using rule 13 (statement -> map .)
    $end            reduce using rule 13 (statement -> map .)
    RBRACE          reduce using rule 13 (statement -> map .)
    CASE            reduce using rule 13 (statement -> map .)
    DEFAULT         reduce using rule 13 (statement -> map .)


state 14

    (14) statement -> if_statement .

    IDENTIFIER      reduce using rule 14 (statement -> if_statement .)
    VAR             reduce using rule 14 (statement -> if_statement .)
    TYPE            reduce using rule 14 (statement -> if_statement .)
    FOR             reduce using rule 14 (statement -> if_statement .)
    PACKAGE         reduce using rule 14 (statement -> if_statement .)
    IMPORT          reduce using rule 14 (statement -> if_statement .)
    SWITCH          reduce using rule 14 (statement -> if_statement .)
    IF              reduce using rule 14 (statement -> if_statement .)
    FUNC            reduce using rule 14 (statement -> if_statement .)
    RETURN          reduce using rule 14 (statement -> if_statement .)
    $end            reduce using rule 14 (statement -> if_statement .)
    RBRACE          reduce using rule 14 (statement -> if_statement .)
    CASE            reduce using rule 14 (statement -> if_statement .)
    DEFAULT         reduce using rule 14 (statement -> if_statement .)


state 15

    (15) statement -> function .

    IDENTIFIER      reduce using rule 15 (statement -> function .)
    VAR             reduce using rule 15 (statement -> function .)
    TYPE            reduce using rule 15 (statement -> function .)
    FOR             reduce using rule 15 (statement -> function .)
    PACKAGE         reduce using rule 15 (statement -> function .)
    IMPORT          reduce using rule 15 (statement -> function .)
    SWITCH          reduce using rule 15 (statement -> function .)
    IF              reduce using rule 15 (statement -> function .)
    FUNC            reduce using rule 15 (statement -> function .)
    RETURN          reduce using rule 15 (statement -> function .)
    $end            reduce using rule 15 (statement -> function .)
    RBRACE          reduce using rule 15 (statement -> function .)
    CASE            reduce using rule 15 (statement -> function .)
    DEFAULT         reduce using rule 15 (statement -> function .)


state 16

    (16) statement -> method_definition .

    IDENTIFIER      reduce using rule 16 (statement -> method_definition .)
    VAR             reduce using rule 16 (statement -> method_definition .)
    TYPE            reduce using rule 16 (statement -> method_definition .)
    FOR             reduce using rule 16 (statement -> method_definition .)
    PACKAGE         reduce using rule 16 (statement -> method_definition .)
    IMPORT          reduce using rule 16 (statement -> method_definition .)
    SWITCH          reduce using rule 16 (statement -> method_definition .)
    IF              reduce using rule 16 (statement -> method_definition .)
    FUNC            reduce using rule 16 (statement -> method_definition .)
    RETURN          reduce using rule 16 (statement -> method_definition .)
    $end            reduce using rule 16 (statement -> method_definition .)
    RBRACE          reduce using rule 16 (statement -> method_definition .)
    CASE            reduce using rule 16 (statement -> method_definition .)
    DEFAULT         reduce using rule 16 (statement -> method_definition .)


state 17

    (17) statement -> function_literal .

    IDENTIFIER      reduce using rule 17 (statement -> function_literal .)
    VAR             reduce using rule 17 (statement -> function_literal .)
    TYPE            reduce using rule 17 (statement -> function_literal .)
    FOR             reduce using rule 17 (statement -> function_literal .)
    PACKAGE         reduce using rule 17 (statement -> function_literal .)
    IMPORT          reduce using rule 17 (statement -> function_literal .)
    SWITCH          reduce using rule 17 (statement -> function_literal .)
    IF              reduce using rule 17 (statement -> function_literal .)
    FUNC            reduce using rule 17 (statement -> function_literal .)
    RETURN          reduce using rule 17 (statement -> function_literal .)
    $end            reduce using rule 17 (statement -> function_literal .)
    RBRACE          reduce using rule 17 (statement -> function_literal .)
    CASE            reduce using rule 17 (statement -> function_literal .)
    DEFAULT         reduce using rule 17 (statement -> function_literal .)


state 18

    (18) statement -> var_declaration .

    IDENTIFIER      reduce using rule 18 (statement -> var_declaration .)
    VAR             reduce using rule 18 (statement -> var_declaration .)
    TYPE            reduce using rule 18 (statement -> var_declaration .)
    FOR             reduce using rule 18 (statement -> var_declaration .)
    PACKAGE         reduce using rule 18 (statement -> var_declaration .)
    IMPORT          reduce using rule 18 (statement -> var_declaration .)
    SWITCH          reduce using rule 18 (statement -> var_declaration .)
    IF              reduce using rule 18 (statement -> var_declaration .)
    FUNC            reduce using rule 18 (statement -> var_declaration .)
    RETURN          reduce using rule 18 (statement -> var_declaration .)
    $end            reduce using rule 18 (statement -> var_declaration .)
    RBRACE          reduce using rule 18 (statement -> var_declaration .)
    CASE            reduce using rule 18 (statement -> var_declaration .)
    DEFAULT         reduce using rule 18 (statement -> var_declaration .)


state 19

    (19) statement -> return_statement .

    IDENTIFIER      reduce using rule 19 (statement -> return_statement .)
    VAR             reduce using rule 19 (statement -> return_statement .)
    TYPE            reduce using rule 19 (statement -> return_statement .)
    FOR             reduce using rule 19 (statement -> return_statement .)
    PACKAGE         reduce using rule 19 (statement -> return_statement .)
    IMPORT          reduce using rule 19 (statement -> return_statement .)
    SWITCH          reduce using rule 19 (statement -> return_statement .)
    IF              reduce using rule 19 (statement -> return_statement .)
    FUNC            reduce using rule 19 (statement -> return_statement .)
    RETURN          reduce using rule 19 (statement -> return_statement .)
    $end            reduce using rule 19 (statement -> return_statement .)
    RBRACE          reduce using rule 19 (statement -> return_statement .)
    CASE            reduce using rule 19 (statement -> return_statement .)
    DEFAULT         reduce using rule 19 (statement -> return_statement .)


state 20

    (20) statement -> slice_declaration .

    IDENTIFIER      reduce using rule 20 (statement -> slice_declaration .)
    VAR             reduce using rule 20 (statement -> slice_declaration .)
    TYPE            reduce using rule 20 (statement -> slice_declaration .)
    FOR             reduce using rule 20 (statement -> slice_declaration .)
    PACKAGE         reduce using rule 20 (statement -> slice_declaration .)
    IMPORT          reduce using rule 20 (statement -> slice_declaration .)
    SWITCH          reduce using rule 20 (statement -> slice_declaration .)
    IF              reduce using rule 20 (statement -> slice_declaration .)
    FUNC            reduce using rule 20 (statement -> slice_declaration .)
    RETURN          reduce using rule 20 (statement -> slice_declaration .)
    $end            reduce using rule 20 (statement -> slice_declaration .)
    RBRACE          reduce using rule 20 (statement -> slice_declaration .)
    CASE            reduce using rule 20 (statement -> slice_declaration .)
    DEFAULT         reduce using rule 20 (statement -> slice_declaration .)


state 21

    (21) statement -> declare_assign .

    IDENTIFIER      reduce using rule 21 (statement -> declare_assign .)
    VAR             reduce using rule 21 (statement -> declare_assign .)
    TYPE            reduce using rule 21 (statement -> declare_assign .)
    FOR             reduce using rule 21 (statement -> declare_assign .)
    PACKAGE         reduce using rule 21 (statement -> declare_assign .)
    IMPORT          reduce using rule 21 (statement -> declare_assign .)
    SWITCH          reduce using rule 21 (statement -> declare_assign .)
    IF              reduce using rule 21 (statement -> declare_assign .)
    FUNC            reduce using rule 21 (statement -> declare_assign .)
    RETURN          reduce using rule 21 (statement -> declare_assign .)
    $end            reduce using rule 21 (statement -> declare_assign .)
    RBRACE          reduce using rule 21 (statement -> declare_assign .)
    CASE            reduce using rule 21 (statement -> declare_assign .)
    DEFAULT         reduce using rule 21 (statement -> declare_assign .)


state 22

    (34) assignment -> IDENTIFIER . DECLARE_ASSIGN expression
    (37) assignment -> IDENTIFIER . DECLARE_ASSIGN slice_literal
    (39) assignment -> IDENTIFIER . ASSIGN expression
    (32) input -> IDENTIFIER . DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (40) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (87) print_statement -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (66) map -> IDENTIFIER . DECLARE_ASSIGN mapLiteral
    (137) declare_assign -> IDENTIFIER . DECLARE_ASSIGN slice_literal

    DECLARE_ASSIGN  shift and go to state 33
    ASSIGN          shift and go to state 34
    DOT             shift and go to state 35
    LPAREN          shift and go to state 36


state 23

    (35) assignment -> VAR . IDENTIFIER DATATYPE ASSIGN expression
    (36) assignment -> VAR . IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (38) assignment -> VAR . IDENTIFIER DATATYPE ASSIGN slice_literal
    (67) map -> VAR . IDENTIFIER ASSIGN mapLiteral
    (33) var_declaration -> VAR . IDENTIFIER DATATYPE
    (136) slice_declaration -> VAR . IDENTIFIER LBRACKET RBRACKET type_name

    IDENTIFIER      shift and go to state 37


state 24

    (88) struct_definition -> TYPE . IDENTIFIER STRUCT LBRACE struct_fields RBRACE

    IDENTIFIER      shift and go to state 38


state 25

    (93) for_statement -> FOR . shortAssignment SEMICOLON condicion SEMICOLON expression block
    (97) for_statement -> FOR . condicion block
    (98) for_statement -> FOR . block
    (96) shortAssignment -> . identifier_list DECLARE_ASSIGN expression
    (49) condicion -> . expression comparador expression
    (100) block -> . LBRACE statement_list RBRACE
    (101) block -> . LBRACE RBRACE
    (94) identifier_list -> . IDENTIFIER
    (95) identifier_list -> . IDENTIFIER COMMA identifier_list
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    LBRACE          shift and go to state 44
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 46
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    shortAssignment                shift and go to state 39
    condicion                      shift and go to state 40
    expression                     shift and go to state 41
    block                          shift and go to state 42
    identifier_list                shift and go to state 43
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 26

    (22) package -> PACKAGE . MAIN
    (23) package -> PACKAGE . IDENTIFIER

    MAIN            shift and go to state 58
    IDENTIFIER      shift and go to state 59


state 27

    (24) import -> IMPORT . STRING
    (25) import -> IMPORT . LPAREN import_list RPAREN

    STRING          shift and go to state 60
    LPAREN          shift and go to state 61


state 28

    (61) switch -> SWITCH . expression LBRACE caseBlocks RBRACE
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    expression                     shift and go to state 62
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 29

    (121) if_statement -> IF . condicion block
    (122) if_statement -> IF . condicion block ELSE block
    (123) if_statement -> IF . condicion_compleja block
    (124) if_statement -> IF . condicion_compleja block ELSE block
    (49) condicion -> . expression comparador expression
    (50) condicion_compleja -> . condicion operadorLogico condicion
    (51) condicion_compleja -> . condicion operadorLogico condicion_compleja
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    condicion                      shift and go to state 64
    condicion_compleja             shift and go to state 65
    expression                     shift and go to state 41
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 30

    (74) function -> FUNC . IDENTIFIER LPAREN params_opt RPAREN block
    (75) function -> FUNC . IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (76) function -> FUNC . MAIN LPAREN params_opt RPAREN block
    (92) method_definition -> FUNC . LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (125) function_literal -> FUNC . LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 66
    MAIN            shift and go to state 68
    LPAREN          shift and go to state 67


state 31

    (77) return_statement -> RETURN . return_values
    (78) return_values -> . expression
    (79) return_values -> . expression COMMA return_values
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    return_values                  shift and go to state 69
    expression                     shift and go to state 70
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 32

    (3) statement_list -> statement_list statement .

    IDENTIFIER      reduce using rule 3 (statement_list -> statement_list statement .)
    VAR             reduce using rule 3 (statement_list -> statement_list statement .)
    TYPE            reduce using rule 3 (statement_list -> statement_list statement .)
    FOR             reduce using rule 3 (statement_list -> statement_list statement .)
    PACKAGE         reduce using rule 3 (statement_list -> statement_list statement .)
    IMPORT          reduce using rule 3 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    FUNC            reduce using rule 3 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 3 (statement_list -> statement_list statement .)
    CASE            reduce using rule 3 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 3 (statement_list -> statement_list statement .)


state 33

    (34) assignment -> IDENTIFIER DECLARE_ASSIGN . expression
    (37) assignment -> IDENTIFIER DECLARE_ASSIGN . slice_literal
    (66) map -> IDENTIFIER DECLARE_ASSIGN . mapLiteral
    (137) declare_assign -> IDENTIFIER DECLARE_ASSIGN . slice_literal
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (68) mapLiteral -> . MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57
    MAP             shift and go to state 74

    expression                     shift and go to state 71
    slice_literal                  shift and go to state 72
    mapLiteral                     shift and go to state 73
    llamarFuncion                  shift and go to state 54

state 34

    (39) assignment -> IDENTIFIER ASSIGN . expression
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    expression                     shift and go to state 75
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 35

    (32) input -> IDENTIFIER DOT . IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (42) llamarFuncion -> IDENTIFIER DOT . IDENTIFIER LPAREN argument_list_opt RPAREN
    (87) print_statement -> IDENTIFIER DOT . IDENTIFIER LPAREN argument_list_opt RPAREN

    IDENTIFIER      shift and go to state 76


state 36

    (40) llamarFuncion -> IDENTIFIER LPAREN . argument_list_opt RPAREN
    (41) llamarFuncion -> IDENTIFIER LPAREN . argument_list_opt COMMA expression RPAREN
    (47) argument_list_opt -> . argument_list
    (48) argument_list_opt -> .
    (45) argument_list -> . expression
    (46) argument_list -> . argument_list COMMA expression
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    RPAREN          reduce using rule 48 (argument_list_opt -> .)
    COMMA           reduce using rule 48 (argument_list_opt -> .)
    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    argument_list_opt              shift and go to state 77
    expression                     shift and go to state 78
    argument_list                  shift and go to state 79
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 37

    (35) assignment -> VAR IDENTIFIER . DATATYPE ASSIGN expression
    (36) assignment -> VAR IDENTIFIER . DATATYPE ASSIGN llamarFuncion
    (38) assignment -> VAR IDENTIFIER . DATATYPE ASSIGN slice_literal
    (67) map -> VAR IDENTIFIER . ASSIGN mapLiteral
    (33) var_declaration -> VAR IDENTIFIER . DATATYPE
    (136) slice_declaration -> VAR IDENTIFIER . LBRACKET RBRACKET type_name

    DATATYPE        shift and go to state 80
    ASSIGN          shift and go to state 81
    LBRACKET        shift and go to state 82


state 38

    (88) struct_definition -> TYPE IDENTIFIER . STRUCT LBRACE struct_fields RBRACE

    STRUCT          shift and go to state 83


state 39

    (93) for_statement -> FOR shortAssignment . SEMICOLON condicion SEMICOLON expression block

    SEMICOLON       shift and go to state 84


state 40

    (97) for_statement -> FOR condicion . block
    (100) block -> . LBRACE statement_list RBRACE
    (101) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 44

    block                          shift and go to state 85

state 41

    (49) condicion -> expression . comparador expression
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (112) expression -> expression . operator expression
    (113) expression -> expression . DOT IDENTIFIER
    (141) expression -> expression . LBRACKET expression RBRACKET
    (142) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (143) expression -> expression . LBRACKET COLON expression RBRACKET
    (144) expression -> expression . LBRACKET expression COLON RBRACKET
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (114) operator -> . PLUS
    (115) operator -> . MINUS
    (116) operator -> . TIMES
    (117) operator -> . DIVIDE
    (118) operator -> . MOD

    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90
    EQ              shift and go to state 91
    NEQ             shift and go to state 92
    GT              shift and go to state 93
    LT              shift and go to state 94
    GE              shift and go to state 95
    LE              shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103

    comparador                     shift and go to state 86
    operadorLogico                 shift and go to state 87
    operator                       shift and go to state 88

state 42

    (98) for_statement -> FOR block .

    IDENTIFIER      reduce using rule 98 (for_statement -> FOR block .)
    VAR             reduce using rule 98 (for_statement -> FOR block .)
    TYPE            reduce using rule 98 (for_statement -> FOR block .)
    FOR             reduce using rule 98 (for_statement -> FOR block .)
    PACKAGE         reduce using rule 98 (for_statement -> FOR block .)
    IMPORT          reduce using rule 98 (for_statement -> FOR block .)
    SWITCH          reduce using rule 98 (for_statement -> FOR block .)
    IF              reduce using rule 98 (for_statement -> FOR block .)
    FUNC            reduce using rule 98 (for_statement -> FOR block .)
    RETURN          reduce using rule 98 (for_statement -> FOR block .)
    $end            reduce using rule 98 (for_statement -> FOR block .)
    RBRACE          reduce using rule 98 (for_statement -> FOR block .)
    CASE            reduce using rule 98 (for_statement -> FOR block .)
    DEFAULT         reduce using rule 98 (for_statement -> FOR block .)


state 43

    (96) shortAssignment -> identifier_list . DECLARE_ASSIGN expression

    DECLARE_ASSIGN  shift and go to state 104


state 44

    (100) block -> LBRACE . statement_list RBRACE
    (101) block -> LBRACE . RBRACE
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . assignment
    (5) statement -> . input
    (6) statement -> . llamarFuncion
    (7) statement -> . print_statement
    (8) statement -> . struct_definition
    (9) statement -> . for_statement
    (10) statement -> . package
    (11) statement -> . import
    (12) statement -> . switch
    (13) statement -> . map
    (14) statement -> . if_statement
    (15) statement -> . function
    (16) statement -> . method_definition
    (17) statement -> . function_literal
    (18) statement -> . var_declaration
    (19) statement -> . return_statement
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (34) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (35) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (36) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (37) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (38) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN slice_literal
    (39) assignment -> . IDENTIFIER ASSIGN expression
    (32) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (87) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (93) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (97) for_statement -> . FOR condicion block
    (98) for_statement -> . FOR block
    (22) package -> . PACKAGE MAIN
    (23) package -> . PACKAGE IDENTIFIER
    (24) import -> . IMPORT STRING
    (25) import -> . IMPORT LPAREN import_list RPAREN
    (61) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (66) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (67) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (121) if_statement -> . IF condicion block
    (122) if_statement -> . IF condicion block ELSE block
    (123) if_statement -> . IF condicion_compleja block
    (124) if_statement -> . IF condicion_compleja block ELSE block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (76) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (92) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (125) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (33) var_declaration -> . VAR IDENTIFIER DATATYPE
    (77) return_statement -> . RETURN return_values
    (136) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (137) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    RBRACE          shift and go to state 106
    IDENTIFIER      shift and go to state 22
    VAR             shift and go to state 23
    TYPE            shift and go to state 24
    FOR             shift and go to state 25
    PACKAGE         shift and go to state 26
    IMPORT          shift and go to state 27
    SWITCH          shift and go to state 28
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    RETURN          shift and go to state 31

    statement_list                 shift and go to state 105
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    return_statement               shift and go to state 19
    slice_declaration              shift and go to state 20
    declare_assign                 shift and go to state 21

state 45

    (94) identifier_list -> IDENTIFIER .
    (95) identifier_list -> IDENTIFIER . COMMA identifier_list
    (103) expression -> IDENTIFIER .
    (40) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN

  ! shift/reduce conflict for DOT resolved as shift
    DECLARE_ASSIGN  reduce using rule 94 (identifier_list -> IDENTIFIER .)
    COMMA           shift and go to state 107
    LBRACKET        reduce using rule 103 (expression -> IDENTIFIER .)
    EQ              reduce using rule 103 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 103 (expression -> IDENTIFIER .)
    GT              reduce using rule 103 (expression -> IDENTIFIER .)
    LT              reduce using rule 103 (expression -> IDENTIFIER .)
    GE              reduce using rule 103 (expression -> IDENTIFIER .)
    LE              reduce using rule 103 (expression -> IDENTIFIER .)
    AND             reduce using rule 103 (expression -> IDENTIFIER .)
    OR              reduce using rule 103 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 103 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 103 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 103 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 103 (expression -> IDENTIFIER .)
    MOD             reduce using rule 103 (expression -> IDENTIFIER .)
    LPAREN          shift and go to state 36
    DOT             shift and go to state 108

  ! DOT             [ reduce using rule 103 (expression -> IDENTIFIER .) ]


state 46

    (102) expression -> NUMBER .

    DOT             reduce using rule 102 (expression -> NUMBER .)
    LBRACKET        reduce using rule 102 (expression -> NUMBER .)
    EQ              reduce using rule 102 (expression -> NUMBER .)
    NEQ             reduce using rule 102 (expression -> NUMBER .)
    GT              reduce using rule 102 (expression -> NUMBER .)
    LT              reduce using rule 102 (expression -> NUMBER .)
    GE              reduce using rule 102 (expression -> NUMBER .)
    LE              reduce using rule 102 (expression -> NUMBER .)
    AND             reduce using rule 102 (expression -> NUMBER .)
    OR              reduce using rule 102 (expression -> NUMBER .)
    PLUS            reduce using rule 102 (expression -> NUMBER .)
    MINUS           reduce using rule 102 (expression -> NUMBER .)
    TIMES           reduce using rule 102 (expression -> NUMBER .)
    DIVIDE          reduce using rule 102 (expression -> NUMBER .)
    MOD             reduce using rule 102 (expression -> NUMBER .)
    LBRACE          reduce using rule 102 (expression -> NUMBER .)
    COMMA           reduce using rule 102 (expression -> NUMBER .)
    IDENTIFIER      reduce using rule 102 (expression -> NUMBER .)
    VAR             reduce using rule 102 (expression -> NUMBER .)
    TYPE            reduce using rule 102 (expression -> NUMBER .)
    FOR             reduce using rule 102 (expression -> NUMBER .)
    PACKAGE         reduce using rule 102 (expression -> NUMBER .)
    IMPORT          reduce using rule 102 (expression -> NUMBER .)
    SWITCH          reduce using rule 102 (expression -> NUMBER .)
    IF              reduce using rule 102 (expression -> NUMBER .)
    FUNC            reduce using rule 102 (expression -> NUMBER .)
    RETURN          reduce using rule 102 (expression -> NUMBER .)
    $end            reduce using rule 102 (expression -> NUMBER .)
    RBRACE          reduce using rule 102 (expression -> NUMBER .)
    CASE            reduce using rule 102 (expression -> NUMBER .)
    DEFAULT         reduce using rule 102 (expression -> NUMBER .)
    RPAREN          reduce using rule 102 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 102 (expression -> NUMBER .)
    RBRACKET        reduce using rule 102 (expression -> NUMBER .)
    COLON           reduce using rule 102 (expression -> NUMBER .)


state 47

    (104) expression -> RUNE .

    DOT             reduce using rule 104 (expression -> RUNE .)
    LBRACKET        reduce using rule 104 (expression -> RUNE .)
    EQ              reduce using rule 104 (expression -> RUNE .)
    NEQ             reduce using rule 104 (expression -> RUNE .)
    GT              reduce using rule 104 (expression -> RUNE .)
    LT              reduce using rule 104 (expression -> RUNE .)
    GE              reduce using rule 104 (expression -> RUNE .)
    LE              reduce using rule 104 (expression -> RUNE .)
    AND             reduce using rule 104 (expression -> RUNE .)
    OR              reduce using rule 104 (expression -> RUNE .)
    PLUS            reduce using rule 104 (expression -> RUNE .)
    MINUS           reduce using rule 104 (expression -> RUNE .)
    TIMES           reduce using rule 104 (expression -> RUNE .)
    DIVIDE          reduce using rule 104 (expression -> RUNE .)
    MOD             reduce using rule 104 (expression -> RUNE .)
    LBRACE          reduce using rule 104 (expression -> RUNE .)
    COMMA           reduce using rule 104 (expression -> RUNE .)
    IDENTIFIER      reduce using rule 104 (expression -> RUNE .)
    VAR             reduce using rule 104 (expression -> RUNE .)
    TYPE            reduce using rule 104 (expression -> RUNE .)
    FOR             reduce using rule 104 (expression -> RUNE .)
    PACKAGE         reduce using rule 104 (expression -> RUNE .)
    IMPORT          reduce using rule 104 (expression -> RUNE .)
    SWITCH          reduce using rule 104 (expression -> RUNE .)
    IF              reduce using rule 104 (expression -> RUNE .)
    FUNC            reduce using rule 104 (expression -> RUNE .)
    RETURN          reduce using rule 104 (expression -> RUNE .)
    $end            reduce using rule 104 (expression -> RUNE .)
    RBRACE          reduce using rule 104 (expression -> RUNE .)
    CASE            reduce using rule 104 (expression -> RUNE .)
    DEFAULT         reduce using rule 104 (expression -> RUNE .)
    RPAREN          reduce using rule 104 (expression -> RUNE .)
    SEMICOLON       reduce using rule 104 (expression -> RUNE .)
    RBRACKET        reduce using rule 104 (expression -> RUNE .)
    COLON           reduce using rule 104 (expression -> RUNE .)


state 48

    (105) expression -> STRING .

    DOT             reduce using rule 105 (expression -> STRING .)
    LBRACKET        reduce using rule 105 (expression -> STRING .)
    EQ              reduce using rule 105 (expression -> STRING .)
    NEQ             reduce using rule 105 (expression -> STRING .)
    GT              reduce using rule 105 (expression -> STRING .)
    LT              reduce using rule 105 (expression -> STRING .)
    GE              reduce using rule 105 (expression -> STRING .)
    LE              reduce using rule 105 (expression -> STRING .)
    AND             reduce using rule 105 (expression -> STRING .)
    OR              reduce using rule 105 (expression -> STRING .)
    PLUS            reduce using rule 105 (expression -> STRING .)
    MINUS           reduce using rule 105 (expression -> STRING .)
    TIMES           reduce using rule 105 (expression -> STRING .)
    DIVIDE          reduce using rule 105 (expression -> STRING .)
    MOD             reduce using rule 105 (expression -> STRING .)
    LBRACE          reduce using rule 105 (expression -> STRING .)
    COMMA           reduce using rule 105 (expression -> STRING .)
    IDENTIFIER      reduce using rule 105 (expression -> STRING .)
    VAR             reduce using rule 105 (expression -> STRING .)
    TYPE            reduce using rule 105 (expression -> STRING .)
    FOR             reduce using rule 105 (expression -> STRING .)
    PACKAGE         reduce using rule 105 (expression -> STRING .)
    IMPORT          reduce using rule 105 (expression -> STRING .)
    SWITCH          reduce using rule 105 (expression -> STRING .)
    IF              reduce using rule 105 (expression -> STRING .)
    FUNC            reduce using rule 105 (expression -> STRING .)
    RETURN          reduce using rule 105 (expression -> STRING .)
    $end            reduce using rule 105 (expression -> STRING .)
    RBRACE          reduce using rule 105 (expression -> STRING .)
    CASE            reduce using rule 105 (expression -> STRING .)
    DEFAULT         reduce using rule 105 (expression -> STRING .)
    RPAREN          reduce using rule 105 (expression -> STRING .)
    SEMICOLON       reduce using rule 105 (expression -> STRING .)
    RBRACKET        reduce using rule 105 (expression -> STRING .)
    COLON           reduce using rule 105 (expression -> STRING .)


state 49

    (106) expression -> RAW_STRING .

    DOT             reduce using rule 106 (expression -> RAW_STRING .)
    LBRACKET        reduce using rule 106 (expression -> RAW_STRING .)
    EQ              reduce using rule 106 (expression -> RAW_STRING .)
    NEQ             reduce using rule 106 (expression -> RAW_STRING .)
    GT              reduce using rule 106 (expression -> RAW_STRING .)
    LT              reduce using rule 106 (expression -> RAW_STRING .)
    GE              reduce using rule 106 (expression -> RAW_STRING .)
    LE              reduce using rule 106 (expression -> RAW_STRING .)
    AND             reduce using rule 106 (expression -> RAW_STRING .)
    OR              reduce using rule 106 (expression -> RAW_STRING .)
    PLUS            reduce using rule 106 (expression -> RAW_STRING .)
    MINUS           reduce using rule 106 (expression -> RAW_STRING .)
    TIMES           reduce using rule 106 (expression -> RAW_STRING .)
    DIVIDE          reduce using rule 106 (expression -> RAW_STRING .)
    MOD             reduce using rule 106 (expression -> RAW_STRING .)
    LBRACE          reduce using rule 106 (expression -> RAW_STRING .)
    COMMA           reduce using rule 106 (expression -> RAW_STRING .)
    IDENTIFIER      reduce using rule 106 (expression -> RAW_STRING .)
    VAR             reduce using rule 106 (expression -> RAW_STRING .)
    TYPE            reduce using rule 106 (expression -> RAW_STRING .)
    FOR             reduce using rule 106 (expression -> RAW_STRING .)
    PACKAGE         reduce using rule 106 (expression -> RAW_STRING .)
    IMPORT          reduce using rule 106 (expression -> RAW_STRING .)
    SWITCH          reduce using rule 106 (expression -> RAW_STRING .)
    IF              reduce using rule 106 (expression -> RAW_STRING .)
    FUNC            reduce using rule 106 (expression -> RAW_STRING .)
    RETURN          reduce using rule 106 (expression -> RAW_STRING .)
    $end            reduce using rule 106 (expression -> RAW_STRING .)
    RBRACE          reduce using rule 106 (expression -> RAW_STRING .)
    CASE            reduce using rule 106 (expression -> RAW_STRING .)
    DEFAULT         reduce using rule 106 (expression -> RAW_STRING .)
    RPAREN          reduce using rule 106 (expression -> RAW_STRING .)
    SEMICOLON       reduce using rule 106 (expression -> RAW_STRING .)
    RBRACKET        reduce using rule 106 (expression -> RAW_STRING .)
    COLON           reduce using rule 106 (expression -> RAW_STRING .)


state 50

    (107) expression -> TRUE .

    DOT             reduce using rule 107 (expression -> TRUE .)
    LBRACKET        reduce using rule 107 (expression -> TRUE .)
    EQ              reduce using rule 107 (expression -> TRUE .)
    NEQ             reduce using rule 107 (expression -> TRUE .)
    GT              reduce using rule 107 (expression -> TRUE .)
    LT              reduce using rule 107 (expression -> TRUE .)
    GE              reduce using rule 107 (expression -> TRUE .)
    LE              reduce using rule 107 (expression -> TRUE .)
    AND             reduce using rule 107 (expression -> TRUE .)
    OR              reduce using rule 107 (expression -> TRUE .)
    PLUS            reduce using rule 107 (expression -> TRUE .)
    MINUS           reduce using rule 107 (expression -> TRUE .)
    TIMES           reduce using rule 107 (expression -> TRUE .)
    DIVIDE          reduce using rule 107 (expression -> TRUE .)
    MOD             reduce using rule 107 (expression -> TRUE .)
    LBRACE          reduce using rule 107 (expression -> TRUE .)
    COMMA           reduce using rule 107 (expression -> TRUE .)
    IDENTIFIER      reduce using rule 107 (expression -> TRUE .)
    VAR             reduce using rule 107 (expression -> TRUE .)
    TYPE            reduce using rule 107 (expression -> TRUE .)
    FOR             reduce using rule 107 (expression -> TRUE .)
    PACKAGE         reduce using rule 107 (expression -> TRUE .)
    IMPORT          reduce using rule 107 (expression -> TRUE .)
    SWITCH          reduce using rule 107 (expression -> TRUE .)
    IF              reduce using rule 107 (expression -> TRUE .)
    FUNC            reduce using rule 107 (expression -> TRUE .)
    RETURN          reduce using rule 107 (expression -> TRUE .)
    $end            reduce using rule 107 (expression -> TRUE .)
    RBRACE          reduce using rule 107 (expression -> TRUE .)
    CASE            reduce using rule 107 (expression -> TRUE .)
    DEFAULT         reduce using rule 107 (expression -> TRUE .)
    RPAREN          reduce using rule 107 (expression -> TRUE .)
    SEMICOLON       reduce using rule 107 (expression -> TRUE .)
    RBRACKET        reduce using rule 107 (expression -> TRUE .)
    COLON           reduce using rule 107 (expression -> TRUE .)


state 51

    (108) expression -> FALSE .

    DOT             reduce using rule 108 (expression -> FALSE .)
    LBRACKET        reduce using rule 108 (expression -> FALSE .)
    EQ              reduce using rule 108 (expression -> FALSE .)
    NEQ             reduce using rule 108 (expression -> FALSE .)
    GT              reduce using rule 108 (expression -> FALSE .)
    LT              reduce using rule 108 (expression -> FALSE .)
    GE              reduce using rule 108 (expression -> FALSE .)
    LE              reduce using rule 108 (expression -> FALSE .)
    AND             reduce using rule 108 (expression -> FALSE .)
    OR              reduce using rule 108 (expression -> FALSE .)
    PLUS            reduce using rule 108 (expression -> FALSE .)
    MINUS           reduce using rule 108 (expression -> FALSE .)
    TIMES           reduce using rule 108 (expression -> FALSE .)
    DIVIDE          reduce using rule 108 (expression -> FALSE .)
    MOD             reduce using rule 108 (expression -> FALSE .)
    LBRACE          reduce using rule 108 (expression -> FALSE .)
    COMMA           reduce using rule 108 (expression -> FALSE .)
    IDENTIFIER      reduce using rule 108 (expression -> FALSE .)
    VAR             reduce using rule 108 (expression -> FALSE .)
    TYPE            reduce using rule 108 (expression -> FALSE .)
    FOR             reduce using rule 108 (expression -> FALSE .)
    PACKAGE         reduce using rule 108 (expression -> FALSE .)
    IMPORT          reduce using rule 108 (expression -> FALSE .)
    SWITCH          reduce using rule 108 (expression -> FALSE .)
    IF              reduce using rule 108 (expression -> FALSE .)
    FUNC            reduce using rule 108 (expression -> FALSE .)
    RETURN          reduce using rule 108 (expression -> FALSE .)
    $end            reduce using rule 108 (expression -> FALSE .)
    RBRACE          reduce using rule 108 (expression -> FALSE .)
    CASE            reduce using rule 108 (expression -> FALSE .)
    DEFAULT         reduce using rule 108 (expression -> FALSE .)
    RPAREN          reduce using rule 108 (expression -> FALSE .)
    SEMICOLON       reduce using rule 108 (expression -> FALSE .)
    RBRACKET        reduce using rule 108 (expression -> FALSE .)
    COLON           reduce using rule 108 (expression -> FALSE .)


state 52

    (109) expression -> NIL .

    DOT             reduce using rule 109 (expression -> NIL .)
    LBRACKET        reduce using rule 109 (expression -> NIL .)
    EQ              reduce using rule 109 (expression -> NIL .)
    NEQ             reduce using rule 109 (expression -> NIL .)
    GT              reduce using rule 109 (expression -> NIL .)
    LT              reduce using rule 109 (expression -> NIL .)
    GE              reduce using rule 109 (expression -> NIL .)
    LE              reduce using rule 109 (expression -> NIL .)
    AND             reduce using rule 109 (expression -> NIL .)
    OR              reduce using rule 109 (expression -> NIL .)
    PLUS            reduce using rule 109 (expression -> NIL .)
    MINUS           reduce using rule 109 (expression -> NIL .)
    TIMES           reduce using rule 109 (expression -> NIL .)
    DIVIDE          reduce using rule 109 (expression -> NIL .)
    MOD             reduce using rule 109 (expression -> NIL .)
    LBRACE          reduce using rule 109 (expression -> NIL .)
    COMMA           reduce using rule 109 (expression -> NIL .)
    IDENTIFIER      reduce using rule 109 (expression -> NIL .)
    VAR             reduce using rule 109 (expression -> NIL .)
    TYPE            reduce using rule 109 (expression -> NIL .)
    FOR             reduce using rule 109 (expression -> NIL .)
    PACKAGE         reduce using rule 109 (expression -> NIL .)
    IMPORT          reduce using rule 109 (expression -> NIL .)
    SWITCH          reduce using rule 109 (expression -> NIL .)
    IF              reduce using rule 109 (expression -> NIL .)
    FUNC            reduce using rule 109 (expression -> NIL .)
    RETURN          reduce using rule 109 (expression -> NIL .)
    $end            reduce using rule 109 (expression -> NIL .)
    RBRACE          reduce using rule 109 (expression -> NIL .)
    CASE            reduce using rule 109 (expression -> NIL .)
    DEFAULT         reduce using rule 109 (expression -> NIL .)
    RPAREN          reduce using rule 109 (expression -> NIL .)
    SEMICOLON       reduce using rule 109 (expression -> NIL .)
    RBRACKET        reduce using rule 109 (expression -> NIL .)
    COLON           reduce using rule 109 (expression -> NIL .)


state 53

    (110) expression -> slice_literal .

    DOT             reduce using rule 110 (expression -> slice_literal .)
    LBRACKET        reduce using rule 110 (expression -> slice_literal .)
    EQ              reduce using rule 110 (expression -> slice_literal .)
    NEQ             reduce using rule 110 (expression -> slice_literal .)
    GT              reduce using rule 110 (expression -> slice_literal .)
    LT              reduce using rule 110 (expression -> slice_literal .)
    GE              reduce using rule 110 (expression -> slice_literal .)
    LE              reduce using rule 110 (expression -> slice_literal .)
    AND             reduce using rule 110 (expression -> slice_literal .)
    OR              reduce using rule 110 (expression -> slice_literal .)
    PLUS            reduce using rule 110 (expression -> slice_literal .)
    MINUS           reduce using rule 110 (expression -> slice_literal .)
    TIMES           reduce using rule 110 (expression -> slice_literal .)
    DIVIDE          reduce using rule 110 (expression -> slice_literal .)
    MOD             reduce using rule 110 (expression -> slice_literal .)
    LBRACE          reduce using rule 110 (expression -> slice_literal .)
    COMMA           reduce using rule 110 (expression -> slice_literal .)
    IDENTIFIER      reduce using rule 110 (expression -> slice_literal .)
    VAR             reduce using rule 110 (expression -> slice_literal .)
    TYPE            reduce using rule 110 (expression -> slice_literal .)
    FOR             reduce using rule 110 (expression -> slice_literal .)
    PACKAGE         reduce using rule 110 (expression -> slice_literal .)
    IMPORT          reduce using rule 110 (expression -> slice_literal .)
    SWITCH          reduce using rule 110 (expression -> slice_literal .)
    IF              reduce using rule 110 (expression -> slice_literal .)
    FUNC            reduce using rule 110 (expression -> slice_literal .)
    RETURN          reduce using rule 110 (expression -> slice_literal .)
    $end            reduce using rule 110 (expression -> slice_literal .)
    RBRACE          reduce using rule 110 (expression -> slice_literal .)
    CASE            reduce using rule 110 (expression -> slice_literal .)
    DEFAULT         reduce using rule 110 (expression -> slice_literal .)
    RPAREN          reduce using rule 110 (expression -> slice_literal .)
    SEMICOLON       reduce using rule 110 (expression -> slice_literal .)
    RBRACKET        reduce using rule 110 (expression -> slice_literal .)
    COLON           reduce using rule 110 (expression -> slice_literal .)


state 54

    (111) expression -> llamarFuncion .

    DOT             reduce using rule 111 (expression -> llamarFuncion .)
    LBRACKET        reduce using rule 111 (expression -> llamarFuncion .)
    EQ              reduce using rule 111 (expression -> llamarFuncion .)
    NEQ             reduce using rule 111 (expression -> llamarFuncion .)
    GT              reduce using rule 111 (expression -> llamarFuncion .)
    LT              reduce using rule 111 (expression -> llamarFuncion .)
    GE              reduce using rule 111 (expression -> llamarFuncion .)
    LE              reduce using rule 111 (expression -> llamarFuncion .)
    AND             reduce using rule 111 (expression -> llamarFuncion .)
    OR              reduce using rule 111 (expression -> llamarFuncion .)
    PLUS            reduce using rule 111 (expression -> llamarFuncion .)
    MINUS           reduce using rule 111 (expression -> llamarFuncion .)
    TIMES           reduce using rule 111 (expression -> llamarFuncion .)
    DIVIDE          reduce using rule 111 (expression -> llamarFuncion .)
    MOD             reduce using rule 111 (expression -> llamarFuncion .)
    LBRACE          reduce using rule 111 (expression -> llamarFuncion .)
    COMMA           reduce using rule 111 (expression -> llamarFuncion .)
    IDENTIFIER      reduce using rule 111 (expression -> llamarFuncion .)
    VAR             reduce using rule 111 (expression -> llamarFuncion .)
    TYPE            reduce using rule 111 (expression -> llamarFuncion .)
    FOR             reduce using rule 111 (expression -> llamarFuncion .)
    PACKAGE         reduce using rule 111 (expression -> llamarFuncion .)
    IMPORT          reduce using rule 111 (expression -> llamarFuncion .)
    SWITCH          reduce using rule 111 (expression -> llamarFuncion .)
    IF              reduce using rule 111 (expression -> llamarFuncion .)
    FUNC            reduce using rule 111 (expression -> llamarFuncion .)
    RETURN          reduce using rule 111 (expression -> llamarFuncion .)
    $end            reduce using rule 111 (expression -> llamarFuncion .)
    RBRACE          reduce using rule 111 (expression -> llamarFuncion .)
    CASE            reduce using rule 111 (expression -> llamarFuncion .)
    DEFAULT         reduce using rule 111 (expression -> llamarFuncion .)
    RPAREN          reduce using rule 111 (expression -> llamarFuncion .)
    SEMICOLON       reduce using rule 111 (expression -> llamarFuncion .)
    RBRACKET        reduce using rule 111 (expression -> llamarFuncion .)
    COLON           reduce using rule 111 (expression -> llamarFuncion .)


state 55

    (119) expression -> MINUS . expression
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    expression                     shift and go to state 109
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 56

    (120) expression -> LPAREN . expression RPAREN
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    expression                     shift and go to state 110
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 57

    (138) slice_literal -> LBRACKET . RBRACKET type_name LBRACE elements RBRACE

    RBRACKET        shift and go to state 111


state 58

    (22) package -> PACKAGE MAIN .

    IDENTIFIER      reduce using rule 22 (package -> PACKAGE MAIN .)
    VAR             reduce using rule 22 (package -> PACKAGE MAIN .)
    TYPE            reduce using rule 22 (package -> PACKAGE MAIN .)
    FOR             reduce using rule 22 (package -> PACKAGE MAIN .)
    PACKAGE         reduce using rule 22 (package -> PACKAGE MAIN .)
    IMPORT          reduce using rule 22 (package -> PACKAGE MAIN .)
    SWITCH          reduce using rule 22 (package -> PACKAGE MAIN .)
    IF              reduce using rule 22 (package -> PACKAGE MAIN .)
    FUNC            reduce using rule 22 (package -> PACKAGE MAIN .)
    RETURN          reduce using rule 22 (package -> PACKAGE MAIN .)
    $end            reduce using rule 22 (package -> PACKAGE MAIN .)
    RBRACE          reduce using rule 22 (package -> PACKAGE MAIN .)
    CASE            reduce using rule 22 (package -> PACKAGE MAIN .)
    DEFAULT         reduce using rule 22 (package -> PACKAGE MAIN .)


state 59

    (23) package -> PACKAGE IDENTIFIER .

    IDENTIFIER      reduce using rule 23 (package -> PACKAGE IDENTIFIER .)
    VAR             reduce using rule 23 (package -> PACKAGE IDENTIFIER .)
    TYPE            reduce using rule 23 (package -> PACKAGE IDENTIFIER .)
    FOR             reduce using rule 23 (package -> PACKAGE IDENTIFIER .)
    PACKAGE         reduce using rule 23 (package -> PACKAGE IDENTIFIER .)
    IMPORT          reduce using rule 23 (package -> PACKAGE IDENTIFIER .)
    SWITCH          reduce using rule 23 (package -> PACKAGE IDENTIFIER .)
    IF              reduce using rule 23 (package -> PACKAGE IDENTIFIER .)
    FUNC            reduce using rule 23 (package -> PACKAGE IDENTIFIER .)
    RETURN          reduce using rule 23 (package -> PACKAGE IDENTIFIER .)
    $end            reduce using rule 23 (package -> PACKAGE IDENTIFIER .)
    RBRACE          reduce using rule 23 (package -> PACKAGE IDENTIFIER .)
    CASE            reduce using rule 23 (package -> PACKAGE IDENTIFIER .)
    DEFAULT         reduce using rule 23 (package -> PACKAGE IDENTIFIER .)


state 60

    (24) import -> IMPORT STRING .

    IDENTIFIER      reduce using rule 24 (import -> IMPORT STRING .)
    VAR             reduce using rule 24 (import -> IMPORT STRING .)
    TYPE            reduce using rule 24 (import -> IMPORT STRING .)
    FOR             reduce using rule 24 (import -> IMPORT STRING .)
    PACKAGE         reduce using rule 24 (import -> IMPORT STRING .)
    IMPORT          reduce using rule 24 (import -> IMPORT STRING .)
    SWITCH          reduce using rule 24 (import -> IMPORT STRING .)
    IF              reduce using rule 24 (import -> IMPORT STRING .)
    FUNC            reduce using rule 24 (import -> IMPORT STRING .)
    RETURN          reduce using rule 24 (import -> IMPORT STRING .)
    $end            reduce using rule 24 (import -> IMPORT STRING .)
    RBRACE          reduce using rule 24 (import -> IMPORT STRING .)
    CASE            reduce using rule 24 (import -> IMPORT STRING .)
    DEFAULT         reduce using rule 24 (import -> IMPORT STRING .)


state 61

    (25) import -> IMPORT LPAREN . import_list RPAREN
    (26) import_list -> . STRING
    (27) import_list -> . import_list STRING

    STRING          shift and go to state 113

    import_list                    shift and go to state 112

state 62

    (61) switch -> SWITCH expression . LBRACE caseBlocks RBRACE
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (112) expression -> expression . operator expression
    (113) expression -> expression . DOT IDENTIFIER
    (141) expression -> expression . LBRACKET expression RBRACKET
    (142) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (143) expression -> expression . LBRACKET COLON expression RBRACKET
    (144) expression -> expression . LBRACKET expression COLON RBRACKET
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (114) operator -> . PLUS
    (115) operator -> . MINUS
    (116) operator -> . TIMES
    (117) operator -> . DIVIDE
    (118) operator -> . MOD

    LBRACE          shift and go to state 114
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90
    EQ              shift and go to state 91
    NEQ             shift and go to state 92
    GT              shift and go to state 93
    LT              shift and go to state 94
    GE              shift and go to state 95
    LE              shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103

    comparador                     shift and go to state 115
    operadorLogico                 shift and go to state 87
    operator                       shift and go to state 88

state 63

    (103) expression -> IDENTIFIER .
    (40) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN

  ! shift/reduce conflict for DOT resolved as shift
    LBRACE          reduce using rule 103 (expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 103 (expression -> IDENTIFIER .)
    EQ              reduce using rule 103 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 103 (expression -> IDENTIFIER .)
    GT              reduce using rule 103 (expression -> IDENTIFIER .)
    LT              reduce using rule 103 (expression -> IDENTIFIER .)
    GE              reduce using rule 103 (expression -> IDENTIFIER .)
    LE              reduce using rule 103 (expression -> IDENTIFIER .)
    AND             reduce using rule 103 (expression -> IDENTIFIER .)
    OR              reduce using rule 103 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 103 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 103 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 103 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 103 (expression -> IDENTIFIER .)
    MOD             reduce using rule 103 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 103 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 103 (expression -> IDENTIFIER .)
    VAR             reduce using rule 103 (expression -> IDENTIFIER .)
    TYPE            reduce using rule 103 (expression -> IDENTIFIER .)
    FOR             reduce using rule 103 (expression -> IDENTIFIER .)
    PACKAGE         reduce using rule 103 (expression -> IDENTIFIER .)
    IMPORT          reduce using rule 103 (expression -> IDENTIFIER .)
    SWITCH          reduce using rule 103 (expression -> IDENTIFIER .)
    IF              reduce using rule 103 (expression -> IDENTIFIER .)
    FUNC            reduce using rule 103 (expression -> IDENTIFIER .)
    RETURN          reduce using rule 103 (expression -> IDENTIFIER .)
    $end            reduce using rule 103 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 103 (expression -> IDENTIFIER .)
    CASE            reduce using rule 103 (expression -> IDENTIFIER .)
    DEFAULT         reduce using rule 103 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 103 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 103 (expression -> IDENTIFIER .)
    RBRACKET        reduce using rule 103 (expression -> IDENTIFIER .)
    COLON           reduce using rule 103 (expression -> IDENTIFIER .)
    LPAREN          shift and go to state 36
    DOT             shift and go to state 108

  ! DOT             [ reduce using rule 103 (expression -> IDENTIFIER .) ]


state 64

    (121) if_statement -> IF condicion . block
    (122) if_statement -> IF condicion . block ELSE block
    (50) condicion_compleja -> condicion . operadorLogico condicion
    (51) condicion_compleja -> condicion . operadorLogico condicion_compleja
    (100) block -> . LBRACE statement_list RBRACE
    (101) block -> . LBRACE RBRACE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR

    LBRACE          shift and go to state 44
    AND             shift and go to state 97
    OR              shift and go to state 98

    block                          shift and go to state 116
    operadorLogico                 shift and go to state 117

state 65

    (123) if_statement -> IF condicion_compleja . block
    (124) if_statement -> IF condicion_compleja . block ELSE block
    (100) block -> . LBRACE statement_list RBRACE
    (101) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 44

    block                          shift and go to state 118

state 66

    (74) function -> FUNC IDENTIFIER . LPAREN params_opt RPAREN block
    (75) function -> FUNC IDENTIFIER . LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE

    LPAREN          shift and go to state 119


state 67

    (92) method_definition -> FUNC LPAREN . IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (125) function_literal -> FUNC LPAREN . parameters RPAREN return_type block
    (126) parameters -> . parameters COMMA parameter
    (127) parameters -> . parameter
    (128) parameters -> . empty
    (129) parameter -> . IDENTIFIER DATATYPE
    (130) parameter -> . IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE
    (60) empty -> .

    IDENTIFIER      shift and go to state 120
    RPAREN          reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)

    parameters                     shift and go to state 121
    parameter                      shift and go to state 122
    empty                          shift and go to state 123

state 68

    (76) function -> FUNC MAIN . LPAREN params_opt RPAREN block

    LPAREN          shift and go to state 124


state 69

    (77) return_statement -> RETURN return_values .

    IDENTIFIER      reduce using rule 77 (return_statement -> RETURN return_values .)
    VAR             reduce using rule 77 (return_statement -> RETURN return_values .)
    TYPE            reduce using rule 77 (return_statement -> RETURN return_values .)
    FOR             reduce using rule 77 (return_statement -> RETURN return_values .)
    PACKAGE         reduce using rule 77 (return_statement -> RETURN return_values .)
    IMPORT          reduce using rule 77 (return_statement -> RETURN return_values .)
    SWITCH          reduce using rule 77 (return_statement -> RETURN return_values .)
    IF              reduce using rule 77 (return_statement -> RETURN return_values .)
    FUNC            reduce using rule 77 (return_statement -> RETURN return_values .)
    RETURN          reduce using rule 77 (return_statement -> RETURN return_values .)
    $end            reduce using rule 77 (return_statement -> RETURN return_values .)
    RBRACE          reduce using rule 77 (return_statement -> RETURN return_values .)
    CASE            reduce using rule 77 (return_statement -> RETURN return_values .)
    DEFAULT         reduce using rule 77 (return_statement -> RETURN return_values .)


state 70

    (78) return_values -> expression .
    (79) return_values -> expression . COMMA return_values
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (112) expression -> expression . operator expression
    (113) expression -> expression . DOT IDENTIFIER
    (141) expression -> expression . LBRACKET expression RBRACKET
    (142) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (143) expression -> expression . LBRACKET COLON expression RBRACKET
    (144) expression -> expression . LBRACKET expression COLON RBRACKET
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (114) operator -> . PLUS
    (115) operator -> . MINUS
    (116) operator -> . TIMES
    (117) operator -> . DIVIDE
    (118) operator -> . MOD

    IDENTIFIER      reduce using rule 78 (return_values -> expression .)
    VAR             reduce using rule 78 (return_values -> expression .)
    TYPE            reduce using rule 78 (return_values -> expression .)
    FOR             reduce using rule 78 (return_values -> expression .)
    PACKAGE         reduce using rule 78 (return_values -> expression .)
    IMPORT          reduce using rule 78 (return_values -> expression .)
    SWITCH          reduce using rule 78 (return_values -> expression .)
    IF              reduce using rule 78 (return_values -> expression .)
    FUNC            reduce using rule 78 (return_values -> expression .)
    RETURN          reduce using rule 78 (return_values -> expression .)
    $end            reduce using rule 78 (return_values -> expression .)
    RBRACE          reduce using rule 78 (return_values -> expression .)
    CASE            reduce using rule 78 (return_values -> expression .)
    DEFAULT         reduce using rule 78 (return_values -> expression .)
    COMMA           shift and go to state 125
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90
    EQ              shift and go to state 91
    NEQ             shift and go to state 92
    GT              shift and go to state 93
    LT              shift and go to state 94
    GE              shift and go to state 95
    LE              shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103

    comparador                     shift and go to state 115
    operadorLogico                 shift and go to state 87
    operator                       shift and go to state 88

state 71

    (34) assignment -> IDENTIFIER DECLARE_ASSIGN expression .
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (112) expression -> expression . operator expression
    (113) expression -> expression . DOT IDENTIFIER
    (141) expression -> expression . LBRACKET expression RBRACKET
    (142) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (143) expression -> expression . LBRACKET COLON expression RBRACKET
    (144) expression -> expression . LBRACKET expression COLON RBRACKET
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (114) operator -> . PLUS
    (115) operator -> . MINUS
    (116) operator -> . TIMES
    (117) operator -> . DIVIDE
    (118) operator -> . MOD

    IDENTIFIER      reduce using rule 34 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    VAR             reduce using rule 34 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    TYPE            reduce using rule 34 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    FOR             reduce using rule 34 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    PACKAGE         reduce using rule 34 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    IMPORT          reduce using rule 34 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    SWITCH          reduce using rule 34 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    IF              reduce using rule 34 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    FUNC            reduce using rule 34 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    RETURN          reduce using rule 34 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    $end            reduce using rule 34 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    RBRACE          reduce using rule 34 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    CASE            reduce using rule 34 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    DEFAULT         reduce using rule 34 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90
    EQ              shift and go to state 91
    NEQ             shift and go to state 92
    GT              shift and go to state 93
    LT              shift and go to state 94
    GE              shift and go to state 95
    LE              shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103

    comparador                     shift and go to state 115
    operadorLogico                 shift and go to state 87
    operator                       shift and go to state 88

state 72

    (37) assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .
    (137) declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .
    (110) expression -> slice_literal .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for VAR resolved using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for TYPE resolved using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for FOR resolved using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IMPORT resolved using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for SWITCH resolved using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IF resolved using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for FUNC resolved using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for RETURN resolved using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for $end resolved using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for RBRACE resolved using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for CASE resolved using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for VAR resolved using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for TYPE resolved using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for FOR resolved using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IMPORT resolved using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for SWITCH resolved using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for IF resolved using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for FUNC resolved using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for RETURN resolved using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for $end resolved using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for RBRACE resolved using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for CASE resolved using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    IDENTIFIER      reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    VAR             reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    TYPE            reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    FOR             reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    PACKAGE         reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    IMPORT          reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    SWITCH          reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    IF              reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    FUNC            reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    RETURN          reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    $end            reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    RBRACE          reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    CASE            reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    DEFAULT         reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal .)
    DOT             reduce using rule 110 (expression -> slice_literal .)
    LBRACKET        reduce using rule 110 (expression -> slice_literal .)
    EQ              reduce using rule 110 (expression -> slice_literal .)
    NEQ             reduce using rule 110 (expression -> slice_literal .)
    GT              reduce using rule 110 (expression -> slice_literal .)
    LT              reduce using rule 110 (expression -> slice_literal .)
    GE              reduce using rule 110 (expression -> slice_literal .)
    LE              reduce using rule 110 (expression -> slice_literal .)
    AND             reduce using rule 110 (expression -> slice_literal .)
    OR              reduce using rule 110 (expression -> slice_literal .)
    PLUS            reduce using rule 110 (expression -> slice_literal .)
    MINUS           reduce using rule 110 (expression -> slice_literal .)
    TIMES           reduce using rule 110 (expression -> slice_literal .)
    DIVIDE          reduce using rule 110 (expression -> slice_literal .)
    MOD             reduce using rule 110 (expression -> slice_literal .)

  ! IDENTIFIER      [ reduce using rule 137 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! VAR             [ reduce using rule 137 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! TYPE            [ reduce using rule 137 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! FOR             [ reduce using rule 137 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! PACKAGE         [ reduce using rule 137 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! IMPORT          [ reduce using rule 137 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! SWITCH          [ reduce using rule 137 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! IF              [ reduce using rule 137 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! FUNC            [ reduce using rule 137 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! RETURN          [ reduce using rule 137 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! $end            [ reduce using rule 137 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! RBRACE          [ reduce using rule 137 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! CASE            [ reduce using rule 137 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! DEFAULT         [ reduce using rule 137 (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal .) ]
  ! IDENTIFIER      [ reduce using rule 110 (expression -> slice_literal .) ]
  ! VAR             [ reduce using rule 110 (expression -> slice_literal .) ]
  ! TYPE            [ reduce using rule 110 (expression -> slice_literal .) ]
  ! FOR             [ reduce using rule 110 (expression -> slice_literal .) ]
  ! PACKAGE         [ reduce using rule 110 (expression -> slice_literal .) ]
  ! IMPORT          [ reduce using rule 110 (expression -> slice_literal .) ]
  ! SWITCH          [ reduce using rule 110 (expression -> slice_literal .) ]
  ! IF              [ reduce using rule 110 (expression -> slice_literal .) ]
  ! FUNC            [ reduce using rule 110 (expression -> slice_literal .) ]
  ! RETURN          [ reduce using rule 110 (expression -> slice_literal .) ]
  ! $end            [ reduce using rule 110 (expression -> slice_literal .) ]
  ! RBRACE          [ reduce using rule 110 (expression -> slice_literal .) ]
  ! CASE            [ reduce using rule 110 (expression -> slice_literal .) ]
  ! DEFAULT         [ reduce using rule 110 (expression -> slice_literal .) ]


state 73

    (66) map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .

    IDENTIFIER      reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    VAR             reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    TYPE            reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    FOR             reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    PACKAGE         reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    IMPORT          reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    SWITCH          reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    IF              reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    FUNC            reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    RETURN          reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    $end            reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    RBRACE          reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    CASE            reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    DEFAULT         reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)


state 74

    (68) mapLiteral -> MAP . LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE

    LBRACKET        shift and go to state 126


state 75

    (39) assignment -> IDENTIFIER ASSIGN expression .
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (112) expression -> expression . operator expression
    (113) expression -> expression . DOT IDENTIFIER
    (141) expression -> expression . LBRACKET expression RBRACKET
    (142) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (143) expression -> expression . LBRACKET COLON expression RBRACKET
    (144) expression -> expression . LBRACKET expression COLON RBRACKET
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (114) operator -> . PLUS
    (115) operator -> . MINUS
    (116) operator -> . TIMES
    (117) operator -> . DIVIDE
    (118) operator -> . MOD

    IDENTIFIER      reduce using rule 39 (assignment -> IDENTIFIER ASSIGN expression .)
    VAR             reduce using rule 39 (assignment -> IDENTIFIER ASSIGN expression .)
    TYPE            reduce using rule 39 (assignment -> IDENTIFIER ASSIGN expression .)
    FOR             reduce using rule 39 (assignment -> IDENTIFIER ASSIGN expression .)
    PACKAGE         reduce using rule 39 (assignment -> IDENTIFIER ASSIGN expression .)
    IMPORT          reduce using rule 39 (assignment -> IDENTIFIER ASSIGN expression .)
    SWITCH          reduce using rule 39 (assignment -> IDENTIFIER ASSIGN expression .)
    IF              reduce using rule 39 (assignment -> IDENTIFIER ASSIGN expression .)
    FUNC            reduce using rule 39 (assignment -> IDENTIFIER ASSIGN expression .)
    RETURN          reduce using rule 39 (assignment -> IDENTIFIER ASSIGN expression .)
    $end            reduce using rule 39 (assignment -> IDENTIFIER ASSIGN expression .)
    RBRACE          reduce using rule 39 (assignment -> IDENTIFIER ASSIGN expression .)
    CASE            reduce using rule 39 (assignment -> IDENTIFIER ASSIGN expression .)
    DEFAULT         reduce using rule 39 (assignment -> IDENTIFIER ASSIGN expression .)
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90
    EQ              shift and go to state 91
    NEQ             shift and go to state 92
    GT              shift and go to state 93
    LT              shift and go to state 94
    GE              shift and go to state 95
    LE              shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103

    comparador                     shift and go to state 115
    operadorLogico                 shift and go to state 87
    operator                       shift and go to state 88

state 76

    (32) input -> IDENTIFIER DOT IDENTIFIER . LPAREN AMPERSAND IDENTIFIER RPAREN
    (42) llamarFuncion -> IDENTIFIER DOT IDENTIFIER . LPAREN argument_list_opt RPAREN
    (87) print_statement -> IDENTIFIER DOT IDENTIFIER . LPAREN argument_list_opt RPAREN

    LPAREN          shift and go to state 127


state 77

    (40) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt . RPAREN
    (41) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt . COMMA expression RPAREN

    RPAREN          shift and go to state 128
    COMMA           shift and go to state 129


state 78

    (45) argument_list -> expression .
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (112) expression -> expression . operator expression
    (113) expression -> expression . DOT IDENTIFIER
    (141) expression -> expression . LBRACKET expression RBRACKET
    (142) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (143) expression -> expression . LBRACKET COLON expression RBRACKET
    (144) expression -> expression . LBRACKET expression COLON RBRACKET
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (114) operator -> . PLUS
    (115) operator -> . MINUS
    (116) operator -> . TIMES
    (117) operator -> . DIVIDE
    (118) operator -> . MOD

    COMMA           reduce using rule 45 (argument_list -> expression .)
    RPAREN          reduce using rule 45 (argument_list -> expression .)
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90
    EQ              shift and go to state 91
    NEQ             shift and go to state 92
    GT              shift and go to state 93
    LT              shift and go to state 94
    GE              shift and go to state 95
    LE              shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103

    comparador                     shift and go to state 115
    operadorLogico                 shift and go to state 87
    operator                       shift and go to state 88

state 79

    (47) argument_list_opt -> argument_list .
    (46) argument_list -> argument_list . COMMA expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 47 (argument_list_opt -> argument_list .)
    COMMA           shift and go to state 130

  ! COMMA           [ reduce using rule 47 (argument_list_opt -> argument_list .) ]


state 80

    (35) assignment -> VAR IDENTIFIER DATATYPE . ASSIGN expression
    (36) assignment -> VAR IDENTIFIER DATATYPE . ASSIGN llamarFuncion
    (38) assignment -> VAR IDENTIFIER DATATYPE . ASSIGN slice_literal
    (33) var_declaration -> VAR IDENTIFIER DATATYPE .

    ASSIGN          shift and go to state 131
    IDENTIFIER      reduce using rule 33 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    VAR             reduce using rule 33 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    TYPE            reduce using rule 33 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    FOR             reduce using rule 33 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    PACKAGE         reduce using rule 33 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    IMPORT          reduce using rule 33 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    SWITCH          reduce using rule 33 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    IF              reduce using rule 33 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    FUNC            reduce using rule 33 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    RETURN          reduce using rule 33 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    $end            reduce using rule 33 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    RBRACE          reduce using rule 33 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    CASE            reduce using rule 33 (var_declaration -> VAR IDENTIFIER DATATYPE .)
    DEFAULT         reduce using rule 33 (var_declaration -> VAR IDENTIFIER DATATYPE .)


state 81

    (67) map -> VAR IDENTIFIER ASSIGN . mapLiteral
    (68) mapLiteral -> . MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE

    MAP             shift and go to state 74

    mapLiteral                     shift and go to state 132

state 82

    (136) slice_declaration -> VAR IDENTIFIER LBRACKET . RBRACKET type_name

    RBRACKET        shift and go to state 133


state 83

    (88) struct_definition -> TYPE IDENTIFIER STRUCT . LBRACE struct_fields RBRACE

    LBRACE          shift and go to state 134


state 84

    (93) for_statement -> FOR shortAssignment SEMICOLON . condicion SEMICOLON expression block
    (49) condicion -> . expression comparador expression
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    condicion                      shift and go to state 135
    expression                     shift and go to state 41
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 85

    (97) for_statement -> FOR condicion block .

    IDENTIFIER      reduce using rule 97 (for_statement -> FOR condicion block .)
    VAR             reduce using rule 97 (for_statement -> FOR condicion block .)
    TYPE            reduce using rule 97 (for_statement -> FOR condicion block .)
    FOR             reduce using rule 97 (for_statement -> FOR condicion block .)
    PACKAGE         reduce using rule 97 (for_statement -> FOR condicion block .)
    IMPORT          reduce using rule 97 (for_statement -> FOR condicion block .)
    SWITCH          reduce using rule 97 (for_statement -> FOR condicion block .)
    IF              reduce using rule 97 (for_statement -> FOR condicion block .)
    FUNC            reduce using rule 97 (for_statement -> FOR condicion block .)
    RETURN          reduce using rule 97 (for_statement -> FOR condicion block .)
    $end            reduce using rule 97 (for_statement -> FOR condicion block .)
    RBRACE          reduce using rule 97 (for_statement -> FOR condicion block .)
    CASE            reduce using rule 97 (for_statement -> FOR condicion block .)
    DEFAULT         reduce using rule 97 (for_statement -> FOR condicion block .)


state 86

    (49) condicion -> expression comparador . expression
    (43) expression -> expression comparador . expression
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    expression                     shift and go to state 136
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 87

    (44) expression -> expression operadorLogico . expression
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    expression                     shift and go to state 137
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 88

    (112) expression -> expression operator . expression
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    expression                     shift and go to state 138
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 89

    (113) expression -> expression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 139


state 90

    (141) expression -> expression LBRACKET . expression RBRACKET
    (142) expression -> expression LBRACKET . expression COLON expression RBRACKET
    (143) expression -> expression LBRACKET . COLON expression RBRACKET
    (144) expression -> expression LBRACKET . expression COLON RBRACKET
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    COLON           shift and go to state 141
    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    expression                     shift and go to state 140
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 91

    (54) comparador -> EQ .

    NUMBER          reduce using rule 54 (comparador -> EQ .)
    IDENTIFIER      reduce using rule 54 (comparador -> EQ .)
    RUNE            reduce using rule 54 (comparador -> EQ .)
    STRING          reduce using rule 54 (comparador -> EQ .)
    RAW_STRING      reduce using rule 54 (comparador -> EQ .)
    TRUE            reduce using rule 54 (comparador -> EQ .)
    FALSE           reduce using rule 54 (comparador -> EQ .)
    NIL             reduce using rule 54 (comparador -> EQ .)
    MINUS           reduce using rule 54 (comparador -> EQ .)
    LPAREN          reduce using rule 54 (comparador -> EQ .)
    LBRACKET        reduce using rule 54 (comparador -> EQ .)


state 92

    (55) comparador -> NEQ .

    NUMBER          reduce using rule 55 (comparador -> NEQ .)
    IDENTIFIER      reduce using rule 55 (comparador -> NEQ .)
    RUNE            reduce using rule 55 (comparador -> NEQ .)
    STRING          reduce using rule 55 (comparador -> NEQ .)
    RAW_STRING      reduce using rule 55 (comparador -> NEQ .)
    TRUE            reduce using rule 55 (comparador -> NEQ .)
    FALSE           reduce using rule 55 (comparador -> NEQ .)
    NIL             reduce using rule 55 (comparador -> NEQ .)
    MINUS           reduce using rule 55 (comparador -> NEQ .)
    LPAREN          reduce using rule 55 (comparador -> NEQ .)
    LBRACKET        reduce using rule 55 (comparador -> NEQ .)


state 93

    (56) comparador -> GT .

    NUMBER          reduce using rule 56 (comparador -> GT .)
    IDENTIFIER      reduce using rule 56 (comparador -> GT .)
    RUNE            reduce using rule 56 (comparador -> GT .)
    STRING          reduce using rule 56 (comparador -> GT .)
    RAW_STRING      reduce using rule 56 (comparador -> GT .)
    TRUE            reduce using rule 56 (comparador -> GT .)
    FALSE           reduce using rule 56 (comparador -> GT .)
    NIL             reduce using rule 56 (comparador -> GT .)
    MINUS           reduce using rule 56 (comparador -> GT .)
    LPAREN          reduce using rule 56 (comparador -> GT .)
    LBRACKET        reduce using rule 56 (comparador -> GT .)


state 94

    (57) comparador -> LT .

    NUMBER          reduce using rule 57 (comparador -> LT .)
    IDENTIFIER      reduce using rule 57 (comparador -> LT .)
    RUNE            reduce using rule 57 (comparador -> LT .)
    STRING          reduce using rule 57 (comparador -> LT .)
    RAW_STRING      reduce using rule 57 (comparador -> LT .)
    TRUE            reduce using rule 57 (comparador -> LT .)
    FALSE           reduce using rule 57 (comparador -> LT .)
    NIL             reduce using rule 57 (comparador -> LT .)
    MINUS           reduce using rule 57 (comparador -> LT .)
    LPAREN          reduce using rule 57 (comparador -> LT .)
    LBRACKET        reduce using rule 57 (comparador -> LT .)


state 95

    (58) comparador -> GE .

    NUMBER          reduce using rule 58 (comparador -> GE .)
    IDENTIFIER      reduce using rule 58 (comparador -> GE .)
    RUNE            reduce using rule 58 (comparador -> GE .)
    STRING          reduce using rule 58 (comparador -> GE .)
    RAW_STRING      reduce using rule 58 (comparador -> GE .)
    TRUE            reduce using rule 58 (comparador -> GE .)
    FALSE           reduce using rule 58 (comparador -> GE .)
    NIL             reduce using rule 58 (comparador -> GE .)
    MINUS           reduce using rule 58 (comparador -> GE .)
    LPAREN          reduce using rule 58 (comparador -> GE .)
    LBRACKET        reduce using rule 58 (comparador -> GE .)


state 96

    (59) comparador -> LE .

    NUMBER          reduce using rule 59 (comparador -> LE .)
    IDENTIFIER      reduce using rule 59 (comparador -> LE .)
    RUNE            reduce using rule 59 (comparador -> LE .)
    STRING          reduce using rule 59 (comparador -> LE .)
    RAW_STRING      reduce using rule 59 (comparador -> LE .)
    TRUE            reduce using rule 59 (comparador -> LE .)
    FALSE           reduce using rule 59 (comparador -> LE .)
    NIL             reduce using rule 59 (comparador -> LE .)
    MINUS           reduce using rule 59 (comparador -> LE .)
    LPAREN          reduce using rule 59 (comparador -> LE .)
    LBRACKET        reduce using rule 59 (comparador -> LE .)


state 97

    (52) operadorLogico -> AND .

    NUMBER          reduce using rule 52 (operadorLogico -> AND .)
    IDENTIFIER      reduce using rule 52 (operadorLogico -> AND .)
    RUNE            reduce using rule 52 (operadorLogico -> AND .)
    STRING          reduce using rule 52 (operadorLogico -> AND .)
    RAW_STRING      reduce using rule 52 (operadorLogico -> AND .)
    TRUE            reduce using rule 52 (operadorLogico -> AND .)
    FALSE           reduce using rule 52 (operadorLogico -> AND .)
    NIL             reduce using rule 52 (operadorLogico -> AND .)
    MINUS           reduce using rule 52 (operadorLogico -> AND .)
    LPAREN          reduce using rule 52 (operadorLogico -> AND .)
    LBRACKET        reduce using rule 52 (operadorLogico -> AND .)


state 98

    (53) operadorLogico -> OR .

    NUMBER          reduce using rule 53 (operadorLogico -> OR .)
    IDENTIFIER      reduce using rule 53 (operadorLogico -> OR .)
    RUNE            reduce using rule 53 (operadorLogico -> OR .)
    STRING          reduce using rule 53 (operadorLogico -> OR .)
    RAW_STRING      reduce using rule 53 (operadorLogico -> OR .)
    TRUE            reduce using rule 53 (operadorLogico -> OR .)
    FALSE           reduce using rule 53 (operadorLogico -> OR .)
    NIL             reduce using rule 53 (operadorLogico -> OR .)
    MINUS           reduce using rule 53 (operadorLogico -> OR .)
    LPAREN          reduce using rule 53 (operadorLogico -> OR .)
    LBRACKET        reduce using rule 53 (operadorLogico -> OR .)


state 99

    (114) operator -> PLUS .

    NUMBER          reduce using rule 114 (operator -> PLUS .)
    IDENTIFIER      reduce using rule 114 (operator -> PLUS .)
    RUNE            reduce using rule 114 (operator -> PLUS .)
    STRING          reduce using rule 114 (operator -> PLUS .)
    RAW_STRING      reduce using rule 114 (operator -> PLUS .)
    TRUE            reduce using rule 114 (operator -> PLUS .)
    FALSE           reduce using rule 114 (operator -> PLUS .)
    NIL             reduce using rule 114 (operator -> PLUS .)
    MINUS           reduce using rule 114 (operator -> PLUS .)
    LPAREN          reduce using rule 114 (operator -> PLUS .)
    LBRACKET        reduce using rule 114 (operator -> PLUS .)


state 100

    (115) operator -> MINUS .

    NUMBER          reduce using rule 115 (operator -> MINUS .)
    IDENTIFIER      reduce using rule 115 (operator -> MINUS .)
    RUNE            reduce using rule 115 (operator -> MINUS .)
    STRING          reduce using rule 115 (operator -> MINUS .)
    RAW_STRING      reduce using rule 115 (operator -> MINUS .)
    TRUE            reduce using rule 115 (operator -> MINUS .)
    FALSE           reduce using rule 115 (operator -> MINUS .)
    NIL             reduce using rule 115 (operator -> MINUS .)
    MINUS           reduce using rule 115 (operator -> MINUS .)
    LPAREN          reduce using rule 115 (operator -> MINUS .)
    LBRACKET        reduce using rule 115 (operator -> MINUS .)


state 101

    (116) operator -> TIMES .

    NUMBER          reduce using rule 116 (operator -> TIMES .)
    IDENTIFIER      reduce using rule 116 (operator -> TIMES .)
    RUNE            reduce using rule 116 (operator -> TIMES .)
    STRING          reduce using rule 116 (operator -> TIMES .)
    RAW_STRING      reduce using rule 116 (operator -> TIMES .)
    TRUE            reduce using rule 116 (operator -> TIMES .)
    FALSE           reduce using rule 116 (operator -> TIMES .)
    NIL             reduce using rule 116 (operator -> TIMES .)
    MINUS           reduce using rule 116 (operator -> TIMES .)
    LPAREN          reduce using rule 116 (operator -> TIMES .)
    LBRACKET        reduce using rule 116 (operator -> TIMES .)


state 102

    (117) operator -> DIVIDE .

    NUMBER          reduce using rule 117 (operator -> DIVIDE .)
    IDENTIFIER      reduce using rule 117 (operator -> DIVIDE .)
    RUNE            reduce using rule 117 (operator -> DIVIDE .)
    STRING          reduce using rule 117 (operator -> DIVIDE .)
    RAW_STRING      reduce using rule 117 (operator -> DIVIDE .)
    TRUE            reduce using rule 117 (operator -> DIVIDE .)
    FALSE           reduce using rule 117 (operator -> DIVIDE .)
    NIL             reduce using rule 117 (operator -> DIVIDE .)
    MINUS           reduce using rule 117 (operator -> DIVIDE .)
    LPAREN          reduce using rule 117 (operator -> DIVIDE .)
    LBRACKET        reduce using rule 117 (operator -> DIVIDE .)


state 103

    (118) operator -> MOD .

    NUMBER          reduce using rule 118 (operator -> MOD .)
    IDENTIFIER      reduce using rule 118 (operator -> MOD .)
    RUNE            reduce using rule 118 (operator -> MOD .)
    STRING          reduce using rule 118 (operator -> MOD .)
    RAW_STRING      reduce using rule 118 (operator -> MOD .)
    TRUE            reduce using rule 118 (operator -> MOD .)
    FALSE           reduce using rule 118 (operator -> MOD .)
    NIL             reduce using rule 118 (operator -> MOD .)
    MINUS           reduce using rule 118 (operator -> MOD .)
    LPAREN          reduce using rule 118 (operator -> MOD .)
    LBRACKET        reduce using rule 118 (operator -> MOD .)


state 104

    (96) shortAssignment -> identifier_list DECLARE_ASSIGN . expression
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    expression                     shift and go to state 142
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 105

    (100) block -> LBRACE statement_list . RBRACE
    (3) statement_list -> statement_list . statement
    (4) statement -> . assignment
    (5) statement -> . input
    (6) statement -> . llamarFuncion
    (7) statement -> . print_statement
    (8) statement -> . struct_definition
    (9) statement -> . for_statement
    (10) statement -> . package
    (11) statement -> . import
    (12) statement -> . switch
    (13) statement -> . map
    (14) statement -> . if_statement
    (15) statement -> . function
    (16) statement -> . method_definition
    (17) statement -> . function_literal
    (18) statement -> . var_declaration
    (19) statement -> . return_statement
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (34) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (35) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (36) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (37) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (38) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN slice_literal
    (39) assignment -> . IDENTIFIER ASSIGN expression
    (32) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (87) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (93) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (97) for_statement -> . FOR condicion block
    (98) for_statement -> . FOR block
    (22) package -> . PACKAGE MAIN
    (23) package -> . PACKAGE IDENTIFIER
    (24) import -> . IMPORT STRING
    (25) import -> . IMPORT LPAREN import_list RPAREN
    (61) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (66) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (67) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (121) if_statement -> . IF condicion block
    (122) if_statement -> . IF condicion block ELSE block
    (123) if_statement -> . IF condicion_compleja block
    (124) if_statement -> . IF condicion_compleja block ELSE block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (76) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (92) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (125) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (33) var_declaration -> . VAR IDENTIFIER DATATYPE
    (77) return_statement -> . RETURN return_values
    (136) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (137) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    RBRACE          shift and go to state 143
    IDENTIFIER      shift and go to state 22
    VAR             shift and go to state 23
    TYPE            shift and go to state 24
    FOR             shift and go to state 25
    PACKAGE         shift and go to state 26
    IMPORT          shift and go to state 27
    SWITCH          shift and go to state 28
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    RETURN          shift and go to state 31

    statement                      shift and go to state 32
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    return_statement               shift and go to state 19
    slice_declaration              shift and go to state 20
    declare_assign                 shift and go to state 21

state 106

    (101) block -> LBRACE RBRACE .

    IDENTIFIER      reduce using rule 101 (block -> LBRACE RBRACE .)
    VAR             reduce using rule 101 (block -> LBRACE RBRACE .)
    TYPE            reduce using rule 101 (block -> LBRACE RBRACE .)
    FOR             reduce using rule 101 (block -> LBRACE RBRACE .)
    PACKAGE         reduce using rule 101 (block -> LBRACE RBRACE .)
    IMPORT          reduce using rule 101 (block -> LBRACE RBRACE .)
    SWITCH          reduce using rule 101 (block -> LBRACE RBRACE .)
    IF              reduce using rule 101 (block -> LBRACE RBRACE .)
    FUNC            reduce using rule 101 (block -> LBRACE RBRACE .)
    RETURN          reduce using rule 101 (block -> LBRACE RBRACE .)
    $end            reduce using rule 101 (block -> LBRACE RBRACE .)
    RBRACE          reduce using rule 101 (block -> LBRACE RBRACE .)
    CASE            reduce using rule 101 (block -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 101 (block -> LBRACE RBRACE .)
    ELSE            reduce using rule 101 (block -> LBRACE RBRACE .)


state 107

    (95) identifier_list -> IDENTIFIER COMMA . identifier_list
    (94) identifier_list -> . IDENTIFIER
    (95) identifier_list -> . IDENTIFIER COMMA identifier_list

    IDENTIFIER      shift and go to state 144

    identifier_list                shift and go to state 145

state 108

    (42) llamarFuncion -> IDENTIFIER DOT . IDENTIFIER LPAREN argument_list_opt RPAREN

    IDENTIFIER      shift and go to state 146


state 109

    (119) expression -> MINUS expression .
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (112) expression -> expression . operator expression
    (113) expression -> expression . DOT IDENTIFIER
    (141) expression -> expression . LBRACKET expression RBRACKET
    (142) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (143) expression -> expression . LBRACKET COLON expression RBRACKET
    (144) expression -> expression . LBRACKET expression COLON RBRACKET
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (114) operator -> . PLUS
    (115) operator -> . MINUS
    (116) operator -> . TIMES
    (117) operator -> . DIVIDE
    (118) operator -> . MOD

    DOT             reduce using rule 119 (expression -> MINUS expression .)
    LBRACKET        reduce using rule 119 (expression -> MINUS expression .)
    EQ              reduce using rule 119 (expression -> MINUS expression .)
    NEQ             reduce using rule 119 (expression -> MINUS expression .)
    GT              reduce using rule 119 (expression -> MINUS expression .)
    LT              reduce using rule 119 (expression -> MINUS expression .)
    GE              reduce using rule 119 (expression -> MINUS expression .)
    LE              reduce using rule 119 (expression -> MINUS expression .)
    AND             reduce using rule 119 (expression -> MINUS expression .)
    OR              reduce using rule 119 (expression -> MINUS expression .)
    PLUS            reduce using rule 119 (expression -> MINUS expression .)
    MINUS           reduce using rule 119 (expression -> MINUS expression .)
    TIMES           reduce using rule 119 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 119 (expression -> MINUS expression .)
    MOD             reduce using rule 119 (expression -> MINUS expression .)
    LBRACE          reduce using rule 119 (expression -> MINUS expression .)
    COMMA           reduce using rule 119 (expression -> MINUS expression .)
    IDENTIFIER      reduce using rule 119 (expression -> MINUS expression .)
    VAR             reduce using rule 119 (expression -> MINUS expression .)
    TYPE            reduce using rule 119 (expression -> MINUS expression .)
    FOR             reduce using rule 119 (expression -> MINUS expression .)
    PACKAGE         reduce using rule 119 (expression -> MINUS expression .)
    IMPORT          reduce using rule 119 (expression -> MINUS expression .)
    SWITCH          reduce using rule 119 (expression -> MINUS expression .)
    IF              reduce using rule 119 (expression -> MINUS expression .)
    FUNC            reduce using rule 119 (expression -> MINUS expression .)
    RETURN          reduce using rule 119 (expression -> MINUS expression .)
    $end            reduce using rule 119 (expression -> MINUS expression .)
    RBRACE          reduce using rule 119 (expression -> MINUS expression .)
    CASE            reduce using rule 119 (expression -> MINUS expression .)
    DEFAULT         reduce using rule 119 (expression -> MINUS expression .)
    RPAREN          reduce using rule 119 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 119 (expression -> MINUS expression .)
    RBRACKET        reduce using rule 119 (expression -> MINUS expression .)
    COLON           reduce using rule 119 (expression -> MINUS expression .)

  ! DOT             [ shift and go to state 89 ]
  ! LBRACKET        [ shift and go to state 90 ]
  ! EQ              [ shift and go to state 91 ]
  ! NEQ             [ shift and go to state 92 ]
  ! GT              [ shift and go to state 93 ]
  ! LT              [ shift and go to state 94 ]
  ! GE              [ shift and go to state 95 ]
  ! LE              [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! PLUS            [ shift and go to state 99 ]
  ! MINUS           [ shift and go to state 100 ]
  ! TIMES           [ shift and go to state 101 ]
  ! DIVIDE          [ shift and go to state 102 ]
  ! MOD             [ shift and go to state 103 ]

    comparador                     shift and go to state 115
    operadorLogico                 shift and go to state 87
    operator                       shift and go to state 88

state 110

    (120) expression -> LPAREN expression . RPAREN
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (112) expression -> expression . operator expression
    (113) expression -> expression . DOT IDENTIFIER
    (141) expression -> expression . LBRACKET expression RBRACKET
    (142) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (143) expression -> expression . LBRACKET COLON expression RBRACKET
    (144) expression -> expression . LBRACKET expression COLON RBRACKET
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (114) operator -> . PLUS
    (115) operator -> . MINUS
    (116) operator -> . TIMES
    (117) operator -> . DIVIDE
    (118) operator -> . MOD

    RPAREN          shift and go to state 147
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90
    EQ              shift and go to state 91
    NEQ             shift and go to state 92
    GT              shift and go to state 93
    LT              shift and go to state 94
    GE              shift and go to state 95
    LE              shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103

    comparador                     shift and go to state 115
    operadorLogico                 shift and go to state 87
    operator                       shift and go to state 88

state 111

    (138) slice_literal -> LBRACKET RBRACKET . type_name LBRACE elements RBRACE
    (85) type_name -> . DATATYPE
    (86) type_name -> . IDENTIFIER

    DATATYPE        shift and go to state 149
    IDENTIFIER      shift and go to state 150

    type_name                      shift and go to state 148

state 112

    (25) import -> IMPORT LPAREN import_list . RPAREN
    (27) import_list -> import_list . STRING

    RPAREN          shift and go to state 151
    STRING          shift and go to state 152


state 113

    (26) import_list -> STRING .

    RPAREN          reduce using rule 26 (import_list -> STRING .)
    STRING          reduce using rule 26 (import_list -> STRING .)


state 114

    (61) switch -> SWITCH expression LBRACE . caseBlocks RBRACE
    (62) caseBlocks -> . caseBlock
    (63) caseBlocks -> . caseBlock caseBlocks
    (64) caseBlock -> . CASE expression COLON statement_list
    (65) caseBlock -> . DEFAULT COLON statement_list

    CASE            shift and go to state 155
    DEFAULT         shift and go to state 156

    caseBlocks                     shift and go to state 153
    caseBlock                      shift and go to state 154

state 115

    (43) expression -> expression comparador . expression
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    expression                     shift and go to state 157
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 116

    (121) if_statement -> IF condicion block .
    (122) if_statement -> IF condicion block . ELSE block

    IDENTIFIER      reduce using rule 121 (if_statement -> IF condicion block .)
    VAR             reduce using rule 121 (if_statement -> IF condicion block .)
    TYPE            reduce using rule 121 (if_statement -> IF condicion block .)
    FOR             reduce using rule 121 (if_statement -> IF condicion block .)
    PACKAGE         reduce using rule 121 (if_statement -> IF condicion block .)
    IMPORT          reduce using rule 121 (if_statement -> IF condicion block .)
    SWITCH          reduce using rule 121 (if_statement -> IF condicion block .)
    IF              reduce using rule 121 (if_statement -> IF condicion block .)
    FUNC            reduce using rule 121 (if_statement -> IF condicion block .)
    RETURN          reduce using rule 121 (if_statement -> IF condicion block .)
    $end            reduce using rule 121 (if_statement -> IF condicion block .)
    RBRACE          reduce using rule 121 (if_statement -> IF condicion block .)
    CASE            reduce using rule 121 (if_statement -> IF condicion block .)
    DEFAULT         reduce using rule 121 (if_statement -> IF condicion block .)
    ELSE            shift and go to state 158


state 117

    (50) condicion_compleja -> condicion operadorLogico . condicion
    (51) condicion_compleja -> condicion operadorLogico . condicion_compleja
    (49) condicion -> . expression comparador expression
    (50) condicion_compleja -> . condicion operadorLogico condicion
    (51) condicion_compleja -> . condicion operadorLogico condicion_compleja
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    condicion                      shift and go to state 159
    condicion_compleja             shift and go to state 160
    expression                     shift and go to state 41
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 118

    (123) if_statement -> IF condicion_compleja block .
    (124) if_statement -> IF condicion_compleja block . ELSE block

    IDENTIFIER      reduce using rule 123 (if_statement -> IF condicion_compleja block .)
    VAR             reduce using rule 123 (if_statement -> IF condicion_compleja block .)
    TYPE            reduce using rule 123 (if_statement -> IF condicion_compleja block .)
    FOR             reduce using rule 123 (if_statement -> IF condicion_compleja block .)
    PACKAGE         reduce using rule 123 (if_statement -> IF condicion_compleja block .)
    IMPORT          reduce using rule 123 (if_statement -> IF condicion_compleja block .)
    SWITCH          reduce using rule 123 (if_statement -> IF condicion_compleja block .)
    IF              reduce using rule 123 (if_statement -> IF condicion_compleja block .)
    FUNC            reduce using rule 123 (if_statement -> IF condicion_compleja block .)
    RETURN          reduce using rule 123 (if_statement -> IF condicion_compleja block .)
    $end            reduce using rule 123 (if_statement -> IF condicion_compleja block .)
    RBRACE          reduce using rule 123 (if_statement -> IF condicion_compleja block .)
    CASE            reduce using rule 123 (if_statement -> IF condicion_compleja block .)
    DEFAULT         reduce using rule 123 (if_statement -> IF condicion_compleja block .)
    ELSE            shift and go to state 161


state 119

    (74) function -> FUNC IDENTIFIER LPAREN . params_opt RPAREN block
    (75) function -> FUNC IDENTIFIER LPAREN . params_opt RPAREN return_type LBRACE statement_list RBRACE
    (80) params_opt -> . params
    (81) params_opt -> . empty
    (82) params -> . param
    (83) params -> . param COMMA params
    (60) empty -> .
    (84) param -> . IDENTIFIER type_name

    RPAREN          reduce using rule 60 (empty -> .)
    IDENTIFIER      shift and go to state 162

    params_opt                     shift and go to state 163
    params                         shift and go to state 164
    empty                          shift and go to state 165
    param                          shift and go to state 166

state 120

    (92) method_definition -> FUNC LPAREN IDENTIFIER . IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (129) parameter -> IDENTIFIER . DATATYPE
    (130) parameter -> IDENTIFIER . FUNC LPAREN parameters RPAREN DATATYPE

    IDENTIFIER      shift and go to state 168
    DATATYPE        shift and go to state 169
    FUNC            shift and go to state 167


state 121

    (125) function_literal -> FUNC LPAREN parameters . RPAREN return_type block
    (126) parameters -> parameters . COMMA parameter

    RPAREN          shift and go to state 170
    COMMA           shift and go to state 171


state 122

    (127) parameters -> parameter .

    RPAREN          reduce using rule 127 (parameters -> parameter .)
    COMMA           reduce using rule 127 (parameters -> parameter .)


state 123

    (128) parameters -> empty .

    RPAREN          reduce using rule 128 (parameters -> empty .)
    COMMA           reduce using rule 128 (parameters -> empty .)


state 124

    (76) function -> FUNC MAIN LPAREN . params_opt RPAREN block
    (80) params_opt -> . params
    (81) params_opt -> . empty
    (82) params -> . param
    (83) params -> . param COMMA params
    (60) empty -> .
    (84) param -> . IDENTIFIER type_name

    RPAREN          reduce using rule 60 (empty -> .)
    IDENTIFIER      shift and go to state 162

    params_opt                     shift and go to state 172
    params                         shift and go to state 164
    empty                          shift and go to state 165
    param                          shift and go to state 166

state 125

    (79) return_values -> expression COMMA . return_values
    (78) return_values -> . expression
    (79) return_values -> . expression COMMA return_values
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    expression                     shift and go to state 70
    return_values                  shift and go to state 173
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 126

    (68) mapLiteral -> MAP LBRACKET . DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE

    DATATYPE        shift and go to state 174


state 127

    (32) input -> IDENTIFIER DOT IDENTIFIER LPAREN . AMPERSAND IDENTIFIER RPAREN
    (42) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN . argument_list_opt RPAREN
    (87) print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN . argument_list_opt RPAREN
    (47) argument_list_opt -> . argument_list
    (48) argument_list_opt -> .
    (45) argument_list -> . expression
    (46) argument_list -> . argument_list COMMA expression
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    AMPERSAND       shift and go to state 175
    RPAREN          reduce using rule 48 (argument_list_opt -> .)
    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    argument_list_opt              shift and go to state 176
    argument_list                  shift and go to state 79
    expression                     shift and go to state 78
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 128

    (40) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .

    IDENTIFIER      reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    VAR             reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TYPE            reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FOR             reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PACKAGE         reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IMPORT          reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SWITCH          reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IF              reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FUNC            reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RETURN          reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    $end            reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DOT             reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LBRACKET        reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    EQ              reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    NEQ             reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    GT              reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LT              reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    GE              reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LE              reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    AND             reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    OR              reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PLUS            reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    MINUS           reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TIMES           reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DIVIDE          reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    MOD             reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LBRACE          reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    CASE            reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DEFAULT         reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RPAREN          reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SEMICOLON       reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACKET        reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    COLON           reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)


state 129

    (41) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA . expression RPAREN
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    expression                     shift and go to state 177
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 130

    (46) argument_list -> argument_list COMMA . expression
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    expression                     shift and go to state 178
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 131

    (35) assignment -> VAR IDENTIFIER DATATYPE ASSIGN . expression
    (36) assignment -> VAR IDENTIFIER DATATYPE ASSIGN . llamarFuncion
    (38) assignment -> VAR IDENTIFIER DATATYPE ASSIGN . slice_literal
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    expression                     shift and go to state 179
    llamarFuncion                  shift and go to state 180
    slice_literal                  shift and go to state 181

state 132

    (67) map -> VAR IDENTIFIER ASSIGN mapLiteral .

    IDENTIFIER      reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    VAR             reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    TYPE            reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    FOR             reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    PACKAGE         reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    IMPORT          reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    SWITCH          reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    IF              reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    FUNC            reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    RETURN          reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    $end            reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    RBRACE          reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    CASE            reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    DEFAULT         reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)


state 133

    (136) slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET . type_name
    (85) type_name -> . DATATYPE
    (86) type_name -> . IDENTIFIER

    DATATYPE        shift and go to state 149
    IDENTIFIER      shift and go to state 150

    type_name                      shift and go to state 182

state 134

    (88) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE . struct_fields RBRACE
    (90) struct_fields -> . struct_field
    (91) struct_fields -> . struct_fields struct_field
    (89) struct_field -> . IDENTIFIER DATATYPE

    IDENTIFIER      shift and go to state 183

    struct_fields                  shift and go to state 184
    struct_field                   shift and go to state 185

state 135

    (93) for_statement -> FOR shortAssignment SEMICOLON condicion . SEMICOLON expression block

    SEMICOLON       shift and go to state 186


state 136

    (49) condicion -> expression comparador expression .
    (43) expression -> expression comparador expression .
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (112) expression -> expression . operator expression
    (113) expression -> expression . DOT IDENTIFIER
    (141) expression -> expression . LBRACKET expression RBRACKET
    (142) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (143) expression -> expression . LBRACKET COLON expression RBRACKET
    (144) expression -> expression . LBRACKET expression COLON RBRACKET
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (114) operator -> . PLUS
    (115) operator -> . MINUS
    (116) operator -> . TIMES
    (117) operator -> . DIVIDE
    (118) operator -> . MOD

  ! reduce/reduce conflict for AND resolved using rule 43 (expression -> expression comparador expression .)
  ! reduce/reduce conflict for OR resolved using rule 43 (expression -> expression comparador expression .)
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 49 (condicion -> expression comparador expression .)
    SEMICOLON       reduce using rule 49 (condicion -> expression comparador expression .)
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90
    EQ              shift and go to state 91
    NEQ             shift and go to state 92
    GT              shift and go to state 93
    LT              shift and go to state 94
    GE              shift and go to state 95
    LE              shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103

  ! AND             [ reduce using rule 49 (condicion -> expression comparador expression .) ]
  ! OR              [ reduce using rule 49 (condicion -> expression comparador expression .) ]
  ! DOT             [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! LBRACKET        [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! EQ              [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! NEQ             [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! GT              [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! LT              [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! GE              [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! LE              [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! AND             [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! OR              [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! PLUS            [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! MINUS           [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! TIMES           [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! MOD             [ reduce using rule 43 (expression -> expression comparador expression .) ]

    comparador                     shift and go to state 115
    operadorLogico                 shift and go to state 87
    operator                       shift and go to state 88

state 137

    (44) expression -> expression operadorLogico expression .
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (112) expression -> expression . operator expression
    (113) expression -> expression . DOT IDENTIFIER
    (141) expression -> expression . LBRACKET expression RBRACKET
    (142) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (143) expression -> expression . LBRACKET COLON expression RBRACKET
    (144) expression -> expression . LBRACKET expression COLON RBRACKET
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (114) operator -> . PLUS
    (115) operator -> . MINUS
    (116) operator -> . TIMES
    (117) operator -> . DIVIDE
    (118) operator -> . MOD

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 44 (expression -> expression operadorLogico expression .)
    COMMA           reduce using rule 44 (expression -> expression operadorLogico expression .)
    IDENTIFIER      reduce using rule 44 (expression -> expression operadorLogico expression .)
    VAR             reduce using rule 44 (expression -> expression operadorLogico expression .)
    TYPE            reduce using rule 44 (expression -> expression operadorLogico expression .)
    FOR             reduce using rule 44 (expression -> expression operadorLogico expression .)
    PACKAGE         reduce using rule 44 (expression -> expression operadorLogico expression .)
    IMPORT          reduce using rule 44 (expression -> expression operadorLogico expression .)
    SWITCH          reduce using rule 44 (expression -> expression operadorLogico expression .)
    IF              reduce using rule 44 (expression -> expression operadorLogico expression .)
    FUNC            reduce using rule 44 (expression -> expression operadorLogico expression .)
    RETURN          reduce using rule 44 (expression -> expression operadorLogico expression .)
    $end            reduce using rule 44 (expression -> expression operadorLogico expression .)
    RBRACE          reduce using rule 44 (expression -> expression operadorLogico expression .)
    CASE            reduce using rule 44 (expression -> expression operadorLogico expression .)
    DEFAULT         reduce using rule 44 (expression -> expression operadorLogico expression .)
    RPAREN          reduce using rule 44 (expression -> expression operadorLogico expression .)
    SEMICOLON       reduce using rule 44 (expression -> expression operadorLogico expression .)
    RBRACKET        reduce using rule 44 (expression -> expression operadorLogico expression .)
    COLON           reduce using rule 44 (expression -> expression operadorLogico expression .)
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90
    EQ              shift and go to state 91
    NEQ             shift and go to state 92
    GT              shift and go to state 93
    LT              shift and go to state 94
    GE              shift and go to state 95
    LE              shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103

  ! DOT             [ reduce using rule 44 (expression -> expression operadorLogico expression .) ]
  ! LBRACKET        [ reduce using rule 44 (expression -> expression operadorLogico expression .) ]
  ! EQ              [ reduce using rule 44 (expression -> expression operadorLogico expression .) ]
  ! NEQ             [ reduce using rule 44 (expression -> expression operadorLogico expression .) ]
  ! GT              [ reduce using rule 44 (expression -> expression operadorLogico expression .) ]
  ! LT              [ reduce using rule 44 (expression -> expression operadorLogico expression .) ]
  ! GE              [ reduce using rule 44 (expression -> expression operadorLogico expression .) ]
  ! LE              [ reduce using rule 44 (expression -> expression operadorLogico expression .) ]
  ! AND             [ reduce using rule 44 (expression -> expression operadorLogico expression .) ]
  ! OR              [ reduce using rule 44 (expression -> expression operadorLogico expression .) ]
  ! PLUS            [ reduce using rule 44 (expression -> expression operadorLogico expression .) ]
  ! MINUS           [ reduce using rule 44 (expression -> expression operadorLogico expression .) ]
  ! TIMES           [ reduce using rule 44 (expression -> expression operadorLogico expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> expression operadorLogico expression .) ]
  ! MOD             [ reduce using rule 44 (expression -> expression operadorLogico expression .) ]

    operadorLogico                 shift and go to state 87
    comparador                     shift and go to state 115
    operator                       shift and go to state 88

state 138

    (112) expression -> expression operator expression .
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (112) expression -> expression . operator expression
    (113) expression -> expression . DOT IDENTIFIER
    (141) expression -> expression . LBRACKET expression RBRACKET
    (142) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (143) expression -> expression . LBRACKET COLON expression RBRACKET
    (144) expression -> expression . LBRACKET expression COLON RBRACKET
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (114) operator -> . PLUS
    (115) operator -> . MINUS
    (116) operator -> . TIMES
    (117) operator -> . DIVIDE
    (118) operator -> . MOD

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 112 (expression -> expression operator expression .)
    COMMA           reduce using rule 112 (expression -> expression operator expression .)
    IDENTIFIER      reduce using rule 112 (expression -> expression operator expression .)
    VAR             reduce using rule 112 (expression -> expression operator expression .)
    TYPE            reduce using rule 112 (expression -> expression operator expression .)
    FOR             reduce using rule 112 (expression -> expression operator expression .)
    PACKAGE         reduce using rule 112 (expression -> expression operator expression .)
    IMPORT          reduce using rule 112 (expression -> expression operator expression .)
    SWITCH          reduce using rule 112 (expression -> expression operator expression .)
    IF              reduce using rule 112 (expression -> expression operator expression .)
    FUNC            reduce using rule 112 (expression -> expression operator expression .)
    RETURN          reduce using rule 112 (expression -> expression operator expression .)
    $end            reduce using rule 112 (expression -> expression operator expression .)
    RBRACE          reduce using rule 112 (expression -> expression operator expression .)
    CASE            reduce using rule 112 (expression -> expression operator expression .)
    DEFAULT         reduce using rule 112 (expression -> expression operator expression .)
    RPAREN          reduce using rule 112 (expression -> expression operator expression .)
    SEMICOLON       reduce using rule 112 (expression -> expression operator expression .)
    RBRACKET        reduce using rule 112 (expression -> expression operator expression .)
    COLON           reduce using rule 112 (expression -> expression operator expression .)
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90
    EQ              shift and go to state 91
    NEQ             shift and go to state 92
    GT              shift and go to state 93
    LT              shift and go to state 94
    GE              shift and go to state 95
    LE              shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103

  ! DOT             [ reduce using rule 112 (expression -> expression operator expression .) ]
  ! LBRACKET        [ reduce using rule 112 (expression -> expression operator expression .) ]
  ! EQ              [ reduce using rule 112 (expression -> expression operator expression .) ]
  ! NEQ             [ reduce using rule 112 (expression -> expression operator expression .) ]
  ! GT              [ reduce using rule 112 (expression -> expression operator expression .) ]
  ! LT              [ reduce using rule 112 (expression -> expression operator expression .) ]
  ! GE              [ reduce using rule 112 (expression -> expression operator expression .) ]
  ! LE              [ reduce using rule 112 (expression -> expression operator expression .) ]
  ! AND             [ reduce using rule 112 (expression -> expression operator expression .) ]
  ! OR              [ reduce using rule 112 (expression -> expression operator expression .) ]
  ! PLUS            [ reduce using rule 112 (expression -> expression operator expression .) ]
  ! MINUS           [ reduce using rule 112 (expression -> expression operator expression .) ]
  ! TIMES           [ reduce using rule 112 (expression -> expression operator expression .) ]
  ! DIVIDE          [ reduce using rule 112 (expression -> expression operator expression .) ]
  ! MOD             [ reduce using rule 112 (expression -> expression operator expression .) ]

    operator                       shift and go to state 88
    comparador                     shift and go to state 115
    operadorLogico                 shift and go to state 87

state 139

    (113) expression -> expression DOT IDENTIFIER .

    DOT             reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    LBRACKET        reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    EQ              reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    NEQ             reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    GT              reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    LT              reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    GE              reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    LE              reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    AND             reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    OR              reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    PLUS            reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    MINUS           reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    TIMES           reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    DIVIDE          reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    MOD             reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    LBRACE          reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    COMMA           reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    VAR             reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    TYPE            reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    FOR             reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    PACKAGE         reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    IMPORT          reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    SWITCH          reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    IF              reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    FUNC            reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    RETURN          reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    $end            reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    RBRACE          reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    CASE            reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    DEFAULT         reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    RPAREN          reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    RBRACKET        reduce using rule 113 (expression -> expression DOT IDENTIFIER .)
    COLON           reduce using rule 113 (expression -> expression DOT IDENTIFIER .)


state 140

    (141) expression -> expression LBRACKET expression . RBRACKET
    (142) expression -> expression LBRACKET expression . COLON expression RBRACKET
    (144) expression -> expression LBRACKET expression . COLON RBRACKET
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (112) expression -> expression . operator expression
    (113) expression -> expression . DOT IDENTIFIER
    (141) expression -> expression . LBRACKET expression RBRACKET
    (142) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (143) expression -> expression . LBRACKET COLON expression RBRACKET
    (144) expression -> expression . LBRACKET expression COLON RBRACKET
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (114) operator -> . PLUS
    (115) operator -> . MINUS
    (116) operator -> . TIMES
    (117) operator -> . DIVIDE
    (118) operator -> . MOD

    RBRACKET        shift and go to state 187
    COLON           shift and go to state 188
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90
    EQ              shift and go to state 91
    NEQ             shift and go to state 92
    GT              shift and go to state 93
    LT              shift and go to state 94
    GE              shift and go to state 95
    LE              shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103

    comparador                     shift and go to state 115
    operadorLogico                 shift and go to state 87
    operator                       shift and go to state 88

state 141

    (143) expression -> expression LBRACKET COLON . expression RBRACKET
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    expression                     shift and go to state 189
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 142

    (96) shortAssignment -> identifier_list DECLARE_ASSIGN expression .
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (112) expression -> expression . operator expression
    (113) expression -> expression . DOT IDENTIFIER
    (141) expression -> expression . LBRACKET expression RBRACKET
    (142) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (143) expression -> expression . LBRACKET COLON expression RBRACKET
    (144) expression -> expression . LBRACKET expression COLON RBRACKET
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (114) operator -> . PLUS
    (115) operator -> . MINUS
    (116) operator -> . TIMES
    (117) operator -> . DIVIDE
    (118) operator -> . MOD

    SEMICOLON       reduce using rule 96 (shortAssignment -> identifier_list DECLARE_ASSIGN expression .)
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90
    EQ              shift and go to state 91
    NEQ             shift and go to state 92
    GT              shift and go to state 93
    LT              shift and go to state 94
    GE              shift and go to state 95
    LE              shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103

    comparador                     shift and go to state 115
    operadorLogico                 shift and go to state 87
    operator                       shift and go to state 88

state 143

    (100) block -> LBRACE statement_list RBRACE .

    IDENTIFIER      reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    VAR             reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    TYPE            reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    PACKAGE         reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    IMPORT          reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    SWITCH          reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    FUNC            reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    CASE            reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    DEFAULT         reduce using rule 100 (block -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 100 (block -> LBRACE statement_list RBRACE .)


state 144

    (94) identifier_list -> IDENTIFIER .
    (95) identifier_list -> IDENTIFIER . COMMA identifier_list

    DECLARE_ASSIGN  reduce using rule 94 (identifier_list -> IDENTIFIER .)
    COMMA           shift and go to state 107


state 145

    (95) identifier_list -> IDENTIFIER COMMA identifier_list .

    DECLARE_ASSIGN  reduce using rule 95 (identifier_list -> IDENTIFIER COMMA identifier_list .)


state 146

    (42) llamarFuncion -> IDENTIFIER DOT IDENTIFIER . LPAREN argument_list_opt RPAREN

    LPAREN          shift and go to state 190


state 147

    (120) expression -> LPAREN expression RPAREN .

    DOT             reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    TYPE            reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    PACKAGE         reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    IMPORT          reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    FUNC            reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    CASE            reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 120 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 120 (expression -> LPAREN expression RPAREN .)


state 148

    (138) slice_literal -> LBRACKET RBRACKET type_name . LBRACE elements RBRACE

    LBRACE          shift and go to state 191


state 149

    (85) type_name -> DATATYPE .

    LBRACE          reduce using rule 85 (type_name -> DATATYPE .)
    IDENTIFIER      reduce using rule 85 (type_name -> DATATYPE .)
    VAR             reduce using rule 85 (type_name -> DATATYPE .)
    TYPE            reduce using rule 85 (type_name -> DATATYPE .)
    FOR             reduce using rule 85 (type_name -> DATATYPE .)
    PACKAGE         reduce using rule 85 (type_name -> DATATYPE .)
    IMPORT          reduce using rule 85 (type_name -> DATATYPE .)
    SWITCH          reduce using rule 85 (type_name -> DATATYPE .)
    IF              reduce using rule 85 (type_name -> DATATYPE .)
    FUNC            reduce using rule 85 (type_name -> DATATYPE .)
    RETURN          reduce using rule 85 (type_name -> DATATYPE .)
    $end            reduce using rule 85 (type_name -> DATATYPE .)
    RBRACE          reduce using rule 85 (type_name -> DATATYPE .)
    CASE            reduce using rule 85 (type_name -> DATATYPE .)
    DEFAULT         reduce using rule 85 (type_name -> DATATYPE .)
    COMMA           reduce using rule 85 (type_name -> DATATYPE .)
    RPAREN          reduce using rule 85 (type_name -> DATATYPE .)


state 150

    (86) type_name -> IDENTIFIER .

    LBRACE          reduce using rule 86 (type_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 86 (type_name -> IDENTIFIER .)
    VAR             reduce using rule 86 (type_name -> IDENTIFIER .)
    TYPE            reduce using rule 86 (type_name -> IDENTIFIER .)
    FOR             reduce using rule 86 (type_name -> IDENTIFIER .)
    PACKAGE         reduce using rule 86 (type_name -> IDENTIFIER .)
    IMPORT          reduce using rule 86 (type_name -> IDENTIFIER .)
    SWITCH          reduce using rule 86 (type_name -> IDENTIFIER .)
    IF              reduce using rule 86 (type_name -> IDENTIFIER .)
    FUNC            reduce using rule 86 (type_name -> IDENTIFIER .)
    RETURN          reduce using rule 86 (type_name -> IDENTIFIER .)
    $end            reduce using rule 86 (type_name -> IDENTIFIER .)
    RBRACE          reduce using rule 86 (type_name -> IDENTIFIER .)
    CASE            reduce using rule 86 (type_name -> IDENTIFIER .)
    DEFAULT         reduce using rule 86 (type_name -> IDENTIFIER .)
    COMMA           reduce using rule 86 (type_name -> IDENTIFIER .)
    RPAREN          reduce using rule 86 (type_name -> IDENTIFIER .)


state 151

    (25) import -> IMPORT LPAREN import_list RPAREN .

    IDENTIFIER      reduce using rule 25 (import -> IMPORT LPAREN import_list RPAREN .)
    VAR             reduce using rule 25 (import -> IMPORT LPAREN import_list RPAREN .)
    TYPE            reduce using rule 25 (import -> IMPORT LPAREN import_list RPAREN .)
    FOR             reduce using rule 25 (import -> IMPORT LPAREN import_list RPAREN .)
    PACKAGE         reduce using rule 25 (import -> IMPORT LPAREN import_list RPAREN .)
    IMPORT          reduce using rule 25 (import -> IMPORT LPAREN import_list RPAREN .)
    SWITCH          reduce using rule 25 (import -> IMPORT LPAREN import_list RPAREN .)
    IF              reduce using rule 25 (import -> IMPORT LPAREN import_list RPAREN .)
    FUNC            reduce using rule 25 (import -> IMPORT LPAREN import_list RPAREN .)
    RETURN          reduce using rule 25 (import -> IMPORT LPAREN import_list RPAREN .)
    $end            reduce using rule 25 (import -> IMPORT LPAREN import_list RPAREN .)
    RBRACE          reduce using rule 25 (import -> IMPORT LPAREN import_list RPAREN .)
    CASE            reduce using rule 25 (import -> IMPORT LPAREN import_list RPAREN .)
    DEFAULT         reduce using rule 25 (import -> IMPORT LPAREN import_list RPAREN .)


state 152

    (27) import_list -> import_list STRING .

    RPAREN          reduce using rule 27 (import_list -> import_list STRING .)
    STRING          reduce using rule 27 (import_list -> import_list STRING .)


state 153

    (61) switch -> SWITCH expression LBRACE caseBlocks . RBRACE

    RBRACE          shift and go to state 192


state 154

    (62) caseBlocks -> caseBlock .
    (63) caseBlocks -> caseBlock . caseBlocks
    (62) caseBlocks -> . caseBlock
    (63) caseBlocks -> . caseBlock caseBlocks
    (64) caseBlock -> . CASE expression COLON statement_list
    (65) caseBlock -> . DEFAULT COLON statement_list

    RBRACE          reduce using rule 62 (caseBlocks -> caseBlock .)
    CASE            shift and go to state 155
    DEFAULT         shift and go to state 156

    caseBlock                      shift and go to state 154
    caseBlocks                     shift and go to state 193

state 155

    (64) caseBlock -> CASE . expression COLON statement_list
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    expression                     shift and go to state 194
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 156

    (65) caseBlock -> DEFAULT . COLON statement_list

    COLON           shift and go to state 195


state 157

    (43) expression -> expression comparador expression .
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (112) expression -> expression . operator expression
    (113) expression -> expression . DOT IDENTIFIER
    (141) expression -> expression . LBRACKET expression RBRACKET
    (142) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (143) expression -> expression . LBRACKET COLON expression RBRACKET
    (144) expression -> expression . LBRACKET expression COLON RBRACKET
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (114) operator -> . PLUS
    (115) operator -> . MINUS
    (116) operator -> . TIMES
    (117) operator -> . DIVIDE
    (118) operator -> . MOD

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 43 (expression -> expression comparador expression .)
    COMMA           reduce using rule 43 (expression -> expression comparador expression .)
    IDENTIFIER      reduce using rule 43 (expression -> expression comparador expression .)
    VAR             reduce using rule 43 (expression -> expression comparador expression .)
    TYPE            reduce using rule 43 (expression -> expression comparador expression .)
    FOR             reduce using rule 43 (expression -> expression comparador expression .)
    PACKAGE         reduce using rule 43 (expression -> expression comparador expression .)
    IMPORT          reduce using rule 43 (expression -> expression comparador expression .)
    SWITCH          reduce using rule 43 (expression -> expression comparador expression .)
    IF              reduce using rule 43 (expression -> expression comparador expression .)
    FUNC            reduce using rule 43 (expression -> expression comparador expression .)
    RETURN          reduce using rule 43 (expression -> expression comparador expression .)
    $end            reduce using rule 43 (expression -> expression comparador expression .)
    RBRACE          reduce using rule 43 (expression -> expression comparador expression .)
    CASE            reduce using rule 43 (expression -> expression comparador expression .)
    DEFAULT         reduce using rule 43 (expression -> expression comparador expression .)
    RPAREN          reduce using rule 43 (expression -> expression comparador expression .)
    SEMICOLON       reduce using rule 43 (expression -> expression comparador expression .)
    RBRACKET        reduce using rule 43 (expression -> expression comparador expression .)
    COLON           reduce using rule 43 (expression -> expression comparador expression .)
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90
    EQ              shift and go to state 91
    NEQ             shift and go to state 92
    GT              shift and go to state 93
    LT              shift and go to state 94
    GE              shift and go to state 95
    LE              shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103

  ! DOT             [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! LBRACKET        [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! EQ              [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! NEQ             [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! GT              [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! LT              [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! GE              [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! LE              [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! AND             [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! OR              [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! PLUS            [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! MINUS           [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! TIMES           [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! MOD             [ reduce using rule 43 (expression -> expression comparador expression .) ]

    comparador                     shift and go to state 115
    operadorLogico                 shift and go to state 87
    operator                       shift and go to state 88

state 158

    (122) if_statement -> IF condicion block ELSE . block
    (100) block -> . LBRACE statement_list RBRACE
    (101) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 44

    block                          shift and go to state 196

state 159

    (50) condicion_compleja -> condicion operadorLogico condicion .
    (50) condicion_compleja -> condicion . operadorLogico condicion
    (51) condicion_compleja -> condicion . operadorLogico condicion_compleja
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR

    LBRACE          reduce using rule 50 (condicion_compleja -> condicion operadorLogico condicion .)
    AND             shift and go to state 97
    OR              shift and go to state 98

    operadorLogico                 shift and go to state 117

state 160

    (51) condicion_compleja -> condicion operadorLogico condicion_compleja .

    LBRACE          reduce using rule 51 (condicion_compleja -> condicion operadorLogico condicion_compleja .)


state 161

    (124) if_statement -> IF condicion_compleja block ELSE . block
    (100) block -> . LBRACE statement_list RBRACE
    (101) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 44

    block                          shift and go to state 197

state 162

    (84) param -> IDENTIFIER . type_name
    (85) type_name -> . DATATYPE
    (86) type_name -> . IDENTIFIER

    DATATYPE        shift and go to state 149
    IDENTIFIER      shift and go to state 150

    type_name                      shift and go to state 198

state 163

    (74) function -> FUNC IDENTIFIER LPAREN params_opt . RPAREN block
    (75) function -> FUNC IDENTIFIER LPAREN params_opt . RPAREN return_type LBRACE statement_list RBRACE

    RPAREN          shift and go to state 199


state 164

    (80) params_opt -> params .

    RPAREN          reduce using rule 80 (params_opt -> params .)


state 165

    (81) params_opt -> empty .

    RPAREN          reduce using rule 81 (params_opt -> empty .)


state 166

    (82) params -> param .
    (83) params -> param . COMMA params

    RPAREN          reduce using rule 82 (params -> param .)
    COMMA           shift and go to state 200


state 167

    (130) parameter -> IDENTIFIER FUNC . LPAREN parameters RPAREN DATATYPE

    LPAREN          shift and go to state 201


state 168

    (92) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER . RPAREN IDENTIFIER LPAREN arguments RPAREN block

    RPAREN          shift and go to state 202


state 169

    (129) parameter -> IDENTIFIER DATATYPE .

    RPAREN          reduce using rule 129 (parameter -> IDENTIFIER DATATYPE .)
    COMMA           reduce using rule 129 (parameter -> IDENTIFIER DATATYPE .)


state 170

    (125) function_literal -> FUNC LPAREN parameters RPAREN . return_type block
    (131) return_type -> . DATATYPE
    (132) return_type -> . LPAREN type_list RPAREN
    (133) return_type -> . empty
    (60) empty -> .

    DATATYPE        shift and go to state 205
    LPAREN          shift and go to state 203
    LBRACE          reduce using rule 60 (empty -> .)

    return_type                    shift and go to state 204
    empty                          shift and go to state 206

state 171

    (126) parameters -> parameters COMMA . parameter
    (129) parameter -> . IDENTIFIER DATATYPE
    (130) parameter -> . IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE

    IDENTIFIER      shift and go to state 208

    parameter                      shift and go to state 207

state 172

    (76) function -> FUNC MAIN LPAREN params_opt . RPAREN block

    RPAREN          shift and go to state 209


state 173

    (79) return_values -> expression COMMA return_values .

    IDENTIFIER      reduce using rule 79 (return_values -> expression COMMA return_values .)
    VAR             reduce using rule 79 (return_values -> expression COMMA return_values .)
    TYPE            reduce using rule 79 (return_values -> expression COMMA return_values .)
    FOR             reduce using rule 79 (return_values -> expression COMMA return_values .)
    PACKAGE         reduce using rule 79 (return_values -> expression COMMA return_values .)
    IMPORT          reduce using rule 79 (return_values -> expression COMMA return_values .)
    SWITCH          reduce using rule 79 (return_values -> expression COMMA return_values .)
    IF              reduce using rule 79 (return_values -> expression COMMA return_values .)
    FUNC            reduce using rule 79 (return_values -> expression COMMA return_values .)
    RETURN          reduce using rule 79 (return_values -> expression COMMA return_values .)
    $end            reduce using rule 79 (return_values -> expression COMMA return_values .)
    RBRACE          reduce using rule 79 (return_values -> expression COMMA return_values .)
    CASE            reduce using rule 79 (return_values -> expression COMMA return_values .)
    DEFAULT         reduce using rule 79 (return_values -> expression COMMA return_values .)


state 174

    (68) mapLiteral -> MAP LBRACKET DATATYPE . RBRACKET DATATYPE LBRACE mapEntries RBRACE

    RBRACKET        shift and go to state 210


state 175

    (32) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND . IDENTIFIER RPAREN

    IDENTIFIER      shift and go to state 211


state 176

    (42) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt . RPAREN
    (87) print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 212


state 177

    (41) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression . RPAREN
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (112) expression -> expression . operator expression
    (113) expression -> expression . DOT IDENTIFIER
    (141) expression -> expression . LBRACKET expression RBRACKET
    (142) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (143) expression -> expression . LBRACKET COLON expression RBRACKET
    (144) expression -> expression . LBRACKET expression COLON RBRACKET
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (114) operator -> . PLUS
    (115) operator -> . MINUS
    (116) operator -> . TIMES
    (117) operator -> . DIVIDE
    (118) operator -> . MOD

    RPAREN          shift and go to state 213
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90
    EQ              shift and go to state 91
    NEQ             shift and go to state 92
    GT              shift and go to state 93
    LT              shift and go to state 94
    GE              shift and go to state 95
    LE              shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103

    comparador                     shift and go to state 115
    operadorLogico                 shift and go to state 87
    operator                       shift and go to state 88

state 178

    (46) argument_list -> argument_list COMMA expression .
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (112) expression -> expression . operator expression
    (113) expression -> expression . DOT IDENTIFIER
    (141) expression -> expression . LBRACKET expression RBRACKET
    (142) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (143) expression -> expression . LBRACKET COLON expression RBRACKET
    (144) expression -> expression . LBRACKET expression COLON RBRACKET
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (114) operator -> . PLUS
    (115) operator -> . MINUS
    (116) operator -> . TIMES
    (117) operator -> . DIVIDE
    (118) operator -> . MOD

    COMMA           reduce using rule 46 (argument_list -> argument_list COMMA expression .)
    RPAREN          reduce using rule 46 (argument_list -> argument_list COMMA expression .)
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90
    EQ              shift and go to state 91
    NEQ             shift and go to state 92
    GT              shift and go to state 93
    LT              shift and go to state 94
    GE              shift and go to state 95
    LE              shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103

    comparador                     shift and go to state 115
    operadorLogico                 shift and go to state 87
    operator                       shift and go to state 88

state 179

    (35) assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (112) expression -> expression . operator expression
    (113) expression -> expression . DOT IDENTIFIER
    (141) expression -> expression . LBRACKET expression RBRACKET
    (142) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (143) expression -> expression . LBRACKET COLON expression RBRACKET
    (144) expression -> expression . LBRACKET expression COLON RBRACKET
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (114) operator -> . PLUS
    (115) operator -> . MINUS
    (116) operator -> . TIMES
    (117) operator -> . DIVIDE
    (118) operator -> . MOD

    IDENTIFIER      reduce using rule 35 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    VAR             reduce using rule 35 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    TYPE            reduce using rule 35 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    FOR             reduce using rule 35 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    PACKAGE         reduce using rule 35 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    IMPORT          reduce using rule 35 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    SWITCH          reduce using rule 35 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    IF              reduce using rule 35 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    FUNC            reduce using rule 35 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    RETURN          reduce using rule 35 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    $end            reduce using rule 35 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    RBRACE          reduce using rule 35 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    CASE            reduce using rule 35 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    DEFAULT         reduce using rule 35 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90
    EQ              shift and go to state 91
    NEQ             shift and go to state 92
    GT              shift and go to state 93
    LT              shift and go to state 94
    GE              shift and go to state 95
    LE              shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103

    comparador                     shift and go to state 115
    operadorLogico                 shift and go to state 87
    operator                       shift and go to state 88

state 180

    (36) assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .
    (111) expression -> llamarFuncion .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for VAR resolved using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for TYPE resolved using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for FOR resolved using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for IMPORT resolved using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for SWITCH resolved using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for IF resolved using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for FUNC resolved using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for RETURN resolved using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for $end resolved using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for RBRACE resolved using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for CASE resolved using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    IDENTIFIER      reduce using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    VAR             reduce using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    TYPE            reduce using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    FOR             reduce using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    PACKAGE         reduce using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    IMPORT          reduce using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    SWITCH          reduce using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    IF              reduce using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    FUNC            reduce using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    RETURN          reduce using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    $end            reduce using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    RBRACE          reduce using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    CASE            reduce using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    DEFAULT         reduce using rule 36 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    DOT             reduce using rule 111 (expression -> llamarFuncion .)
    LBRACKET        reduce using rule 111 (expression -> llamarFuncion .)
    EQ              reduce using rule 111 (expression -> llamarFuncion .)
    NEQ             reduce using rule 111 (expression -> llamarFuncion .)
    GT              reduce using rule 111 (expression -> llamarFuncion .)
    LT              reduce using rule 111 (expression -> llamarFuncion .)
    GE              reduce using rule 111 (expression -> llamarFuncion .)
    LE              reduce using rule 111 (expression -> llamarFuncion .)
    AND             reduce using rule 111 (expression -> llamarFuncion .)
    OR              reduce using rule 111 (expression -> llamarFuncion .)
    PLUS            reduce using rule 111 (expression -> llamarFuncion .)
    MINUS           reduce using rule 111 (expression -> llamarFuncion .)
    TIMES           reduce using rule 111 (expression -> llamarFuncion .)
    DIVIDE          reduce using rule 111 (expression -> llamarFuncion .)
    MOD             reduce using rule 111 (expression -> llamarFuncion .)

  ! IDENTIFIER      [ reduce using rule 111 (expression -> llamarFuncion .) ]
  ! VAR             [ reduce using rule 111 (expression -> llamarFuncion .) ]
  ! TYPE            [ reduce using rule 111 (expression -> llamarFuncion .) ]
  ! FOR             [ reduce using rule 111 (expression -> llamarFuncion .) ]
  ! PACKAGE         [ reduce using rule 111 (expression -> llamarFuncion .) ]
  ! IMPORT          [ reduce using rule 111 (expression -> llamarFuncion .) ]
  ! SWITCH          [ reduce using rule 111 (expression -> llamarFuncion .) ]
  ! IF              [ reduce using rule 111 (expression -> llamarFuncion .) ]
  ! FUNC            [ reduce using rule 111 (expression -> llamarFuncion .) ]
  ! RETURN          [ reduce using rule 111 (expression -> llamarFuncion .) ]
  ! $end            [ reduce using rule 111 (expression -> llamarFuncion .) ]
  ! RBRACE          [ reduce using rule 111 (expression -> llamarFuncion .) ]
  ! CASE            [ reduce using rule 111 (expression -> llamarFuncion .) ]
  ! DEFAULT         [ reduce using rule 111 (expression -> llamarFuncion .) ]


state 181

    (38) assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .
    (110) expression -> slice_literal .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
  ! reduce/reduce conflict for VAR resolved using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
  ! reduce/reduce conflict for TYPE resolved using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
  ! reduce/reduce conflict for FOR resolved using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
  ! reduce/reduce conflict for IMPORT resolved using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
  ! reduce/reduce conflict for SWITCH resolved using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
  ! reduce/reduce conflict for IF resolved using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
  ! reduce/reduce conflict for FUNC resolved using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
  ! reduce/reduce conflict for RETURN resolved using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
  ! reduce/reduce conflict for $end resolved using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
  ! reduce/reduce conflict for RBRACE resolved using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
  ! reduce/reduce conflict for CASE resolved using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    IDENTIFIER      reduce using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    VAR             reduce using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    TYPE            reduce using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    FOR             reduce using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    PACKAGE         reduce using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    IMPORT          reduce using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    SWITCH          reduce using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    IF              reduce using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    FUNC            reduce using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    RETURN          reduce using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    $end            reduce using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    RBRACE          reduce using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    CASE            reduce using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    DEFAULT         reduce using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal .)
    DOT             reduce using rule 110 (expression -> slice_literal .)
    LBRACKET        reduce using rule 110 (expression -> slice_literal .)
    EQ              reduce using rule 110 (expression -> slice_literal .)
    NEQ             reduce using rule 110 (expression -> slice_literal .)
    GT              reduce using rule 110 (expression -> slice_literal .)
    LT              reduce using rule 110 (expression -> slice_literal .)
    GE              reduce using rule 110 (expression -> slice_literal .)
    LE              reduce using rule 110 (expression -> slice_literal .)
    AND             reduce using rule 110 (expression -> slice_literal .)
    OR              reduce using rule 110 (expression -> slice_literal .)
    PLUS            reduce using rule 110 (expression -> slice_literal .)
    MINUS           reduce using rule 110 (expression -> slice_literal .)
    TIMES           reduce using rule 110 (expression -> slice_literal .)
    DIVIDE          reduce using rule 110 (expression -> slice_literal .)
    MOD             reduce using rule 110 (expression -> slice_literal .)

  ! IDENTIFIER      [ reduce using rule 110 (expression -> slice_literal .) ]
  ! VAR             [ reduce using rule 110 (expression -> slice_literal .) ]
  ! TYPE            [ reduce using rule 110 (expression -> slice_literal .) ]
  ! FOR             [ reduce using rule 110 (expression -> slice_literal .) ]
  ! PACKAGE         [ reduce using rule 110 (expression -> slice_literal .) ]
  ! IMPORT          [ reduce using rule 110 (expression -> slice_literal .) ]
  ! SWITCH          [ reduce using rule 110 (expression -> slice_literal .) ]
  ! IF              [ reduce using rule 110 (expression -> slice_literal .) ]
  ! FUNC            [ reduce using rule 110 (expression -> slice_literal .) ]
  ! RETURN          [ reduce using rule 110 (expression -> slice_literal .) ]
  ! $end            [ reduce using rule 110 (expression -> slice_literal .) ]
  ! RBRACE          [ reduce using rule 110 (expression -> slice_literal .) ]
  ! CASE            [ reduce using rule 110 (expression -> slice_literal .) ]
  ! DEFAULT         [ reduce using rule 110 (expression -> slice_literal .) ]


state 182

    (136) slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .

    IDENTIFIER      reduce using rule 136 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .)
    VAR             reduce using rule 136 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .)
    TYPE            reduce using rule 136 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .)
    FOR             reduce using rule 136 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .)
    PACKAGE         reduce using rule 136 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .)
    IMPORT          reduce using rule 136 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .)
    SWITCH          reduce using rule 136 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .)
    IF              reduce using rule 136 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .)
    FUNC            reduce using rule 136 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .)
    RETURN          reduce using rule 136 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .)
    $end            reduce using rule 136 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .)
    RBRACE          reduce using rule 136 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .)
    CASE            reduce using rule 136 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .)
    DEFAULT         reduce using rule 136 (slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name .)


state 183

    (89) struct_field -> IDENTIFIER . DATATYPE

    DATATYPE        shift and go to state 214


state 184

    (88) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields . RBRACE
    (91) struct_fields -> struct_fields . struct_field
    (89) struct_field -> . IDENTIFIER DATATYPE

    RBRACE          shift and go to state 215
    IDENTIFIER      shift and go to state 183

    struct_field                   shift and go to state 216

state 185

    (90) struct_fields -> struct_field .

    RBRACE          reduce using rule 90 (struct_fields -> struct_field .)
    IDENTIFIER      reduce using rule 90 (struct_fields -> struct_field .)


state 186

    (93) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON . expression block
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    expression                     shift and go to state 217
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 187

    (141) expression -> expression LBRACKET expression RBRACKET .

    DOT             reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    NEQ             reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    LBRACE          reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    IDENTIFIER      reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    VAR             reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    TYPE            reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    FOR             reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    PACKAGE         reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    IMPORT          reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    SWITCH          reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    IF              reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    FUNC            reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    RETURN          reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    $end            reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    CASE            reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    DEFAULT         reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 141 (expression -> expression LBRACKET expression RBRACKET .)


state 188

    (142) expression -> expression LBRACKET expression COLON . expression RBRACKET
    (144) expression -> expression LBRACKET expression COLON . RBRACKET
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    RBRACKET        shift and go to state 219
    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    expression                     shift and go to state 218
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 189

    (143) expression -> expression LBRACKET COLON expression . RBRACKET
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (112) expression -> expression . operator expression
    (113) expression -> expression . DOT IDENTIFIER
    (141) expression -> expression . LBRACKET expression RBRACKET
    (142) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (143) expression -> expression . LBRACKET COLON expression RBRACKET
    (144) expression -> expression . LBRACKET expression COLON RBRACKET
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (114) operator -> . PLUS
    (115) operator -> . MINUS
    (116) operator -> . TIMES
    (117) operator -> . DIVIDE
    (118) operator -> . MOD

    RBRACKET        shift and go to state 220
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90
    EQ              shift and go to state 91
    NEQ             shift and go to state 92
    GT              shift and go to state 93
    LT              shift and go to state 94
    GE              shift and go to state 95
    LE              shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103

    comparador                     shift and go to state 115
    operadorLogico                 shift and go to state 87
    operator                       shift and go to state 88

state 190

    (42) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN . argument_list_opt RPAREN
    (47) argument_list_opt -> . argument_list
    (48) argument_list_opt -> .
    (45) argument_list -> . expression
    (46) argument_list -> . argument_list COMMA expression
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    RPAREN          reduce using rule 48 (argument_list_opt -> .)
    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    argument_list_opt              shift and go to state 221
    argument_list                  shift and go to state 79
    expression                     shift and go to state 78
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 191

    (138) slice_literal -> LBRACKET RBRACKET type_name LBRACE . elements RBRACE
    (139) elements -> . elements COMMA expression
    (140) elements -> . expression
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    elements                       shift and go to state 222
    expression                     shift and go to state 223
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 192

    (61) switch -> SWITCH expression LBRACE caseBlocks RBRACE .

    IDENTIFIER      reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    VAR             reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    TYPE            reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    FOR             reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    PACKAGE         reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    IMPORT          reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    SWITCH          reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    IF              reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    FUNC            reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    RETURN          reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    $end            reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    RBRACE          reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    CASE            reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    DEFAULT         reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)


state 193

    (63) caseBlocks -> caseBlock caseBlocks .

    RBRACE          reduce using rule 63 (caseBlocks -> caseBlock caseBlocks .)


state 194

    (64) caseBlock -> CASE expression . COLON statement_list
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (112) expression -> expression . operator expression
    (113) expression -> expression . DOT IDENTIFIER
    (141) expression -> expression . LBRACKET expression RBRACKET
    (142) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (143) expression -> expression . LBRACKET COLON expression RBRACKET
    (144) expression -> expression . LBRACKET expression COLON RBRACKET
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (114) operator -> . PLUS
    (115) operator -> . MINUS
    (116) operator -> . TIMES
    (117) operator -> . DIVIDE
    (118) operator -> . MOD

    COLON           shift and go to state 224
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90
    EQ              shift and go to state 91
    NEQ             shift and go to state 92
    GT              shift and go to state 93
    LT              shift and go to state 94
    GE              shift and go to state 95
    LE              shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103

    comparador                     shift and go to state 115
    operadorLogico                 shift and go to state 87
    operator                       shift and go to state 88

state 195

    (65) caseBlock -> DEFAULT COLON . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . assignment
    (5) statement -> . input
    (6) statement -> . llamarFuncion
    (7) statement -> . print_statement
    (8) statement -> . struct_definition
    (9) statement -> . for_statement
    (10) statement -> . package
    (11) statement -> . import
    (12) statement -> . switch
    (13) statement -> . map
    (14) statement -> . if_statement
    (15) statement -> . function
    (16) statement -> . method_definition
    (17) statement -> . function_literal
    (18) statement -> . var_declaration
    (19) statement -> . return_statement
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (34) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (35) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (36) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (37) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (38) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN slice_literal
    (39) assignment -> . IDENTIFIER ASSIGN expression
    (32) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (87) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (93) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (97) for_statement -> . FOR condicion block
    (98) for_statement -> . FOR block
    (22) package -> . PACKAGE MAIN
    (23) package -> . PACKAGE IDENTIFIER
    (24) import -> . IMPORT STRING
    (25) import -> . IMPORT LPAREN import_list RPAREN
    (61) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (66) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (67) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (121) if_statement -> . IF condicion block
    (122) if_statement -> . IF condicion block ELSE block
    (123) if_statement -> . IF condicion_compleja block
    (124) if_statement -> . IF condicion_compleja block ELSE block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (76) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (92) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (125) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (33) var_declaration -> . VAR IDENTIFIER DATATYPE
    (77) return_statement -> . RETURN return_values
    (136) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (137) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    IDENTIFIER      shift and go to state 22
    VAR             shift and go to state 23
    TYPE            shift and go to state 24
    FOR             shift and go to state 25
    PACKAGE         shift and go to state 26
    IMPORT          shift and go to state 27
    SWITCH          shift and go to state 28
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    RETURN          shift and go to state 31

    statement_list                 shift and go to state 225
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    return_statement               shift and go to state 19
    slice_declaration              shift and go to state 20
    declare_assign                 shift and go to state 21

state 196

    (122) if_statement -> IF condicion block ELSE block .

    IDENTIFIER      reduce using rule 122 (if_statement -> IF condicion block ELSE block .)
    VAR             reduce using rule 122 (if_statement -> IF condicion block ELSE block .)
    TYPE            reduce using rule 122 (if_statement -> IF condicion block ELSE block .)
    FOR             reduce using rule 122 (if_statement -> IF condicion block ELSE block .)
    PACKAGE         reduce using rule 122 (if_statement -> IF condicion block ELSE block .)
    IMPORT          reduce using rule 122 (if_statement -> IF condicion block ELSE block .)
    SWITCH          reduce using rule 122 (if_statement -> IF condicion block ELSE block .)
    IF              reduce using rule 122 (if_statement -> IF condicion block ELSE block .)
    FUNC            reduce using rule 122 (if_statement -> IF condicion block ELSE block .)
    RETURN          reduce using rule 122 (if_statement -> IF condicion block ELSE block .)
    $end            reduce using rule 122 (if_statement -> IF condicion block ELSE block .)
    RBRACE          reduce using rule 122 (if_statement -> IF condicion block ELSE block .)
    CASE            reduce using rule 122 (if_statement -> IF condicion block ELSE block .)
    DEFAULT         reduce using rule 122 (if_statement -> IF condicion block ELSE block .)


state 197

    (124) if_statement -> IF condicion_compleja block ELSE block .

    IDENTIFIER      reduce using rule 124 (if_statement -> IF condicion_compleja block ELSE block .)
    VAR             reduce using rule 124 (if_statement -> IF condicion_compleja block ELSE block .)
    TYPE            reduce using rule 124 (if_statement -> IF condicion_compleja block ELSE block .)
    FOR             reduce using rule 124 (if_statement -> IF condicion_compleja block ELSE block .)
    PACKAGE         reduce using rule 124 (if_statement -> IF condicion_compleja block ELSE block .)
    IMPORT          reduce using rule 124 (if_statement -> IF condicion_compleja block ELSE block .)
    SWITCH          reduce using rule 124 (if_statement -> IF condicion_compleja block ELSE block .)
    IF              reduce using rule 124 (if_statement -> IF condicion_compleja block ELSE block .)
    FUNC            reduce using rule 124 (if_statement -> IF condicion_compleja block ELSE block .)
    RETURN          reduce using rule 124 (if_statement -> IF condicion_compleja block ELSE block .)
    $end            reduce using rule 124 (if_statement -> IF condicion_compleja block ELSE block .)
    RBRACE          reduce using rule 124 (if_statement -> IF condicion_compleja block ELSE block .)
    CASE            reduce using rule 124 (if_statement -> IF condicion_compleja block ELSE block .)
    DEFAULT         reduce using rule 124 (if_statement -> IF condicion_compleja block ELSE block .)


state 198

    (84) param -> IDENTIFIER type_name .

    COMMA           reduce using rule 84 (param -> IDENTIFIER type_name .)
    RPAREN          reduce using rule 84 (param -> IDENTIFIER type_name .)


state 199

    (74) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN . block
    (75) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN . return_type LBRACE statement_list RBRACE
    (100) block -> . LBRACE statement_list RBRACE
    (101) block -> . LBRACE RBRACE
    (131) return_type -> . DATATYPE
    (132) return_type -> . LPAREN type_list RPAREN
    (133) return_type -> . empty
    (60) empty -> .

  ! shift/reduce conflict for LBRACE resolved as shift
    LBRACE          shift and go to state 44
    DATATYPE        shift and go to state 205
    LPAREN          shift and go to state 203

  ! LBRACE          [ reduce using rule 60 (empty -> .) ]

    block                          shift and go to state 226
    return_type                    shift and go to state 227
    empty                          shift and go to state 206

state 200

    (83) params -> param COMMA . params
    (82) params -> . param
    (83) params -> . param COMMA params
    (84) param -> . IDENTIFIER type_name

    IDENTIFIER      shift and go to state 162

    param                          shift and go to state 166
    params                         shift and go to state 228

state 201

    (130) parameter -> IDENTIFIER FUNC LPAREN . parameters RPAREN DATATYPE
    (126) parameters -> . parameters COMMA parameter
    (127) parameters -> . parameter
    (128) parameters -> . empty
    (129) parameter -> . IDENTIFIER DATATYPE
    (130) parameter -> . IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE
    (60) empty -> .

    IDENTIFIER      shift and go to state 208
    RPAREN          reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)

    parameters                     shift and go to state 229
    parameter                      shift and go to state 122
    empty                          shift and go to state 123

state 202

    (92) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN . IDENTIFIER LPAREN arguments RPAREN block

    IDENTIFIER      shift and go to state 230


state 203

    (132) return_type -> LPAREN . type_list RPAREN
    (134) type_list -> . DATATYPE
    (135) type_list -> . DATATYPE COMMA type_list

    DATATYPE        shift and go to state 232

    type_list                      shift and go to state 231

state 204

    (125) function_literal -> FUNC LPAREN parameters RPAREN return_type . block
    (100) block -> . LBRACE statement_list RBRACE
    (101) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 44

    block                          shift and go to state 233

state 205

    (131) return_type -> DATATYPE .

    LBRACE          reduce using rule 131 (return_type -> DATATYPE .)


state 206

    (133) return_type -> empty .

    LBRACE          reduce using rule 133 (return_type -> empty .)


state 207

    (126) parameters -> parameters COMMA parameter .

    RPAREN          reduce using rule 126 (parameters -> parameters COMMA parameter .)
    COMMA           reduce using rule 126 (parameters -> parameters COMMA parameter .)


state 208

    (129) parameter -> IDENTIFIER . DATATYPE
    (130) parameter -> IDENTIFIER . FUNC LPAREN parameters RPAREN DATATYPE

    DATATYPE        shift and go to state 169
    FUNC            shift and go to state 167


state 209

    (76) function -> FUNC MAIN LPAREN params_opt RPAREN . block
    (100) block -> . LBRACE statement_list RBRACE
    (101) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 44

    block                          shift and go to state 234

state 210

    (68) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET . DATATYPE LBRACE mapEntries RBRACE

    DATATYPE        shift and go to state 235


state 211

    (32) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER . RPAREN

    RPAREN          shift and go to state 236


state 212

    (42) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .
    (87) print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for VAR resolved using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for TYPE resolved using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for FOR resolved using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for PACKAGE resolved using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for IMPORT resolved using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for SWITCH resolved using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for IF resolved using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for FUNC resolved using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for RETURN resolved using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for RBRACE resolved using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for CASE resolved using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IDENTIFIER      reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    VAR             reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TYPE            reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FOR             reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PACKAGE         reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IMPORT          reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SWITCH          reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IF              reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FUNC            reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RETURN          reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    $end            reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    CASE            reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DEFAULT         reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)

  ! IDENTIFIER      [ reduce using rule 87 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! VAR             [ reduce using rule 87 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! TYPE            [ reduce using rule 87 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! FOR             [ reduce using rule 87 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! PACKAGE         [ reduce using rule 87 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! IMPORT          [ reduce using rule 87 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! SWITCH          [ reduce using rule 87 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! IF              [ reduce using rule 87 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! FUNC            [ reduce using rule 87 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! RETURN          [ reduce using rule 87 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! $end            [ reduce using rule 87 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! RBRACE          [ reduce using rule 87 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! CASE            [ reduce using rule 87 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]
  ! DEFAULT         [ reduce using rule 87 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .) ]


state 213

    (41) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .

    IDENTIFIER      reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    VAR             reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    TYPE            reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    FOR             reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    PACKAGE         reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    IMPORT          reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    SWITCH          reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    IF              reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    FUNC            reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    RETURN          reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    $end            reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    DOT             reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    LBRACKET        reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    EQ              reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    NEQ             reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    GT              reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    LT              reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    GE              reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    LE              reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    AND             reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    OR              reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    PLUS            reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    MINUS           reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    TIMES           reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    DIVIDE          reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    MOD             reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    LBRACE          reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    COMMA           reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    RBRACE          reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    CASE            reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    DEFAULT         reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    RPAREN          reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    SEMICOLON       reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    RBRACKET        reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)
    COLON           reduce using rule 41 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN .)


state 214

    (89) struct_field -> IDENTIFIER DATATYPE .

    RBRACE          reduce using rule 89 (struct_field -> IDENTIFIER DATATYPE .)
    IDENTIFIER      reduce using rule 89 (struct_field -> IDENTIFIER DATATYPE .)


state 215

    (88) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .

    IDENTIFIER      reduce using rule 88 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    VAR             reduce using rule 88 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    TYPE            reduce using rule 88 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    FOR             reduce using rule 88 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    PACKAGE         reduce using rule 88 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    IMPORT          reduce using rule 88 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    SWITCH          reduce using rule 88 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    IF              reduce using rule 88 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    FUNC            reduce using rule 88 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    RETURN          reduce using rule 88 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    $end            reduce using rule 88 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    RBRACE          reduce using rule 88 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    CASE            reduce using rule 88 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    DEFAULT         reduce using rule 88 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)


state 216

    (91) struct_fields -> struct_fields struct_field .

    RBRACE          reduce using rule 91 (struct_fields -> struct_fields struct_field .)
    IDENTIFIER      reduce using rule 91 (struct_fields -> struct_fields struct_field .)


state 217

    (93) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression . block
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (112) expression -> expression . operator expression
    (113) expression -> expression . DOT IDENTIFIER
    (141) expression -> expression . LBRACKET expression RBRACKET
    (142) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (143) expression -> expression . LBRACKET COLON expression RBRACKET
    (144) expression -> expression . LBRACKET expression COLON RBRACKET
    (100) block -> . LBRACE statement_list RBRACE
    (101) block -> . LBRACE RBRACE
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (114) operator -> . PLUS
    (115) operator -> . MINUS
    (116) operator -> . TIMES
    (117) operator -> . DIVIDE
    (118) operator -> . MOD

    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90
    LBRACE          shift and go to state 44
    EQ              shift and go to state 91
    NEQ             shift and go to state 92
    GT              shift and go to state 93
    LT              shift and go to state 94
    GE              shift and go to state 95
    LE              shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103

    block                          shift and go to state 237
    comparador                     shift and go to state 115
    operadorLogico                 shift and go to state 87
    operator                       shift and go to state 88

state 218

    (142) expression -> expression LBRACKET expression COLON expression . RBRACKET
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (112) expression -> expression . operator expression
    (113) expression -> expression . DOT IDENTIFIER
    (141) expression -> expression . LBRACKET expression RBRACKET
    (142) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (143) expression -> expression . LBRACKET COLON expression RBRACKET
    (144) expression -> expression . LBRACKET expression COLON RBRACKET
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (114) operator -> . PLUS
    (115) operator -> . MINUS
    (116) operator -> . TIMES
    (117) operator -> . DIVIDE
    (118) operator -> . MOD

    RBRACKET        shift and go to state 238
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90
    EQ              shift and go to state 91
    NEQ             shift and go to state 92
    GT              shift and go to state 93
    LT              shift and go to state 94
    GE              shift and go to state 95
    LE              shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103

    comparador                     shift and go to state 115
    operadorLogico                 shift and go to state 87
    operator                       shift and go to state 88

state 219

    (144) expression -> expression LBRACKET expression COLON RBRACKET .

    DOT             reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    LBRACKET        reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    EQ              reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    NEQ             reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    GT              reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    LT              reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    GE              reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    LE              reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    AND             reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    OR              reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    PLUS            reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    MINUS           reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    TIMES           reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    DIVIDE          reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    MOD             reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    LBRACE          reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    COMMA           reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    IDENTIFIER      reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    VAR             reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    TYPE            reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    FOR             reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    PACKAGE         reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    IMPORT          reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    SWITCH          reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    IF              reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    FUNC            reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    RETURN          reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    $end            reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    RBRACE          reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    CASE            reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    DEFAULT         reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    RPAREN          reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    SEMICOLON       reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    RBRACKET        reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)
    COLON           reduce using rule 144 (expression -> expression LBRACKET expression COLON RBRACKET .)


state 220

    (143) expression -> expression LBRACKET COLON expression RBRACKET .

    DOT             reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    LBRACKET        reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    EQ              reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    NEQ             reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    GT              reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    LT              reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    GE              reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    LE              reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    AND             reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    OR              reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    PLUS            reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    MINUS           reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    TIMES           reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    DIVIDE          reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    MOD             reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    LBRACE          reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    COMMA           reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    IDENTIFIER      reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    VAR             reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    TYPE            reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    FOR             reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    PACKAGE         reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    IMPORT          reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    SWITCH          reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    IF              reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    FUNC            reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    RETURN          reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    $end            reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    RBRACE          reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    CASE            reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    DEFAULT         reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    RPAREN          reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    SEMICOLON       reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    RBRACKET        reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)
    COLON           reduce using rule 143 (expression -> expression LBRACKET COLON expression RBRACKET .)


state 221

    (42) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 239


state 222

    (138) slice_literal -> LBRACKET RBRACKET type_name LBRACE elements . RBRACE
    (139) elements -> elements . COMMA expression

    RBRACE          shift and go to state 240
    COMMA           shift and go to state 241


state 223

    (140) elements -> expression .
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (112) expression -> expression . operator expression
    (113) expression -> expression . DOT IDENTIFIER
    (141) expression -> expression . LBRACKET expression RBRACKET
    (142) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (143) expression -> expression . LBRACKET COLON expression RBRACKET
    (144) expression -> expression . LBRACKET expression COLON RBRACKET
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (114) operator -> . PLUS
    (115) operator -> . MINUS
    (116) operator -> . TIMES
    (117) operator -> . DIVIDE
    (118) operator -> . MOD

    RBRACE          reduce using rule 140 (elements -> expression .)
    COMMA           reduce using rule 140 (elements -> expression .)
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90
    EQ              shift and go to state 91
    NEQ             shift and go to state 92
    GT              shift and go to state 93
    LT              shift and go to state 94
    GE              shift and go to state 95
    LE              shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103

    comparador                     shift and go to state 115
    operadorLogico                 shift and go to state 87
    operator                       shift and go to state 88

state 224

    (64) caseBlock -> CASE expression COLON . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . assignment
    (5) statement -> . input
    (6) statement -> . llamarFuncion
    (7) statement -> . print_statement
    (8) statement -> . struct_definition
    (9) statement -> . for_statement
    (10) statement -> . package
    (11) statement -> . import
    (12) statement -> . switch
    (13) statement -> . map
    (14) statement -> . if_statement
    (15) statement -> . function
    (16) statement -> . method_definition
    (17) statement -> . function_literal
    (18) statement -> . var_declaration
    (19) statement -> . return_statement
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (34) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (35) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (36) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (37) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (38) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN slice_literal
    (39) assignment -> . IDENTIFIER ASSIGN expression
    (32) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (87) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (93) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (97) for_statement -> . FOR condicion block
    (98) for_statement -> . FOR block
    (22) package -> . PACKAGE MAIN
    (23) package -> . PACKAGE IDENTIFIER
    (24) import -> . IMPORT STRING
    (25) import -> . IMPORT LPAREN import_list RPAREN
    (61) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (66) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (67) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (121) if_statement -> . IF condicion block
    (122) if_statement -> . IF condicion block ELSE block
    (123) if_statement -> . IF condicion_compleja block
    (124) if_statement -> . IF condicion_compleja block ELSE block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (76) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (92) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (125) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (33) var_declaration -> . VAR IDENTIFIER DATATYPE
    (77) return_statement -> . RETURN return_values
    (136) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (137) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    IDENTIFIER      shift and go to state 22
    VAR             shift and go to state 23
    TYPE            shift and go to state 24
    FOR             shift and go to state 25
    PACKAGE         shift and go to state 26
    IMPORT          shift and go to state 27
    SWITCH          shift and go to state 28
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    RETURN          shift and go to state 31

    statement_list                 shift and go to state 242
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    return_statement               shift and go to state 19
    slice_declaration              shift and go to state 20
    declare_assign                 shift and go to state 21

state 225

    (65) caseBlock -> DEFAULT COLON statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . assignment
    (5) statement -> . input
    (6) statement -> . llamarFuncion
    (7) statement -> . print_statement
    (8) statement -> . struct_definition
    (9) statement -> . for_statement
    (10) statement -> . package
    (11) statement -> . import
    (12) statement -> . switch
    (13) statement -> . map
    (14) statement -> . if_statement
    (15) statement -> . function
    (16) statement -> . method_definition
    (17) statement -> . function_literal
    (18) statement -> . var_declaration
    (19) statement -> . return_statement
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (34) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (35) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (36) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (37) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (38) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN slice_literal
    (39) assignment -> . IDENTIFIER ASSIGN expression
    (32) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (87) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (93) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (97) for_statement -> . FOR condicion block
    (98) for_statement -> . FOR block
    (22) package -> . PACKAGE MAIN
    (23) package -> . PACKAGE IDENTIFIER
    (24) import -> . IMPORT STRING
    (25) import -> . IMPORT LPAREN import_list RPAREN
    (61) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (66) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (67) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (121) if_statement -> . IF condicion block
    (122) if_statement -> . IF condicion block ELSE block
    (123) if_statement -> . IF condicion_compleja block
    (124) if_statement -> . IF condicion_compleja block ELSE block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (76) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (92) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (125) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (33) var_declaration -> . VAR IDENTIFIER DATATYPE
    (77) return_statement -> . RETURN return_values
    (136) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (137) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    CASE            reduce using rule 65 (caseBlock -> DEFAULT COLON statement_list .)
    DEFAULT         reduce using rule 65 (caseBlock -> DEFAULT COLON statement_list .)
    RBRACE          reduce using rule 65 (caseBlock -> DEFAULT COLON statement_list .)
    IDENTIFIER      shift and go to state 22
    VAR             shift and go to state 23
    TYPE            shift and go to state 24
    FOR             shift and go to state 25
    PACKAGE         shift and go to state 26
    IMPORT          shift and go to state 27
    SWITCH          shift and go to state 28
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    RETURN          shift and go to state 31

    statement                      shift and go to state 32
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    return_statement               shift and go to state 19
    slice_declaration              shift and go to state 20
    declare_assign                 shift and go to state 21

state 226

    (74) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .

    IDENTIFIER      reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    VAR             reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    TYPE            reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    FOR             reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    PACKAGE         reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    IMPORT          reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    SWITCH          reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    IF              reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    FUNC            reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    RETURN          reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    $end            reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    RBRACE          reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    CASE            reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)
    DEFAULT         reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN block .)


state 227

    (75) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 243


state 228

    (83) params -> param COMMA params .

    RPAREN          reduce using rule 83 (params -> param COMMA params .)


state 229

    (130) parameter -> IDENTIFIER FUNC LPAREN parameters . RPAREN DATATYPE
    (126) parameters -> parameters . COMMA parameter

    RPAREN          shift and go to state 244
    COMMA           shift and go to state 171


state 230

    (92) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER . LPAREN arguments RPAREN block

    LPAREN          shift and go to state 245


state 231

    (132) return_type -> LPAREN type_list . RPAREN

    RPAREN          shift and go to state 246


state 232

    (134) type_list -> DATATYPE .
    (135) type_list -> DATATYPE . COMMA type_list

    RPAREN          reduce using rule 134 (type_list -> DATATYPE .)
    COMMA           shift and go to state 247


state 233

    (125) function_literal -> FUNC LPAREN parameters RPAREN return_type block .

    IDENTIFIER      reduce using rule 125 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    VAR             reduce using rule 125 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    TYPE            reduce using rule 125 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    FOR             reduce using rule 125 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    PACKAGE         reduce using rule 125 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    IMPORT          reduce using rule 125 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    SWITCH          reduce using rule 125 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    IF              reduce using rule 125 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    FUNC            reduce using rule 125 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    RETURN          reduce using rule 125 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    $end            reduce using rule 125 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    RBRACE          reduce using rule 125 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    CASE            reduce using rule 125 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    DEFAULT         reduce using rule 125 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)


state 234

    (76) function -> FUNC MAIN LPAREN params_opt RPAREN block .

    IDENTIFIER      reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    VAR             reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    TYPE            reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    FOR             reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    PACKAGE         reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    IMPORT          reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    SWITCH          reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    IF              reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    FUNC            reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    RETURN          reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    $end            reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    RBRACE          reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    CASE            reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    DEFAULT         reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)


state 235

    (68) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE . LBRACE mapEntries RBRACE

    LBRACE          shift and go to state 248


state 236

    (32) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .

    IDENTIFIER      reduce using rule 32 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    VAR             reduce using rule 32 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    TYPE            reduce using rule 32 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    FOR             reduce using rule 32 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    PACKAGE         reduce using rule 32 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    IMPORT          reduce using rule 32 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    SWITCH          reduce using rule 32 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    IF              reduce using rule 32 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    FUNC            reduce using rule 32 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    RETURN          reduce using rule 32 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    $end            reduce using rule 32 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    RBRACE          reduce using rule 32 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    CASE            reduce using rule 32 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    DEFAULT         reduce using rule 32 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)


state 237

    (93) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .

    IDENTIFIER      reduce using rule 93 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    VAR             reduce using rule 93 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    TYPE            reduce using rule 93 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    FOR             reduce using rule 93 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    PACKAGE         reduce using rule 93 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    IMPORT          reduce using rule 93 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    SWITCH          reduce using rule 93 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    IF              reduce using rule 93 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    FUNC            reduce using rule 93 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    RETURN          reduce using rule 93 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    $end            reduce using rule 93 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    RBRACE          reduce using rule 93 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    CASE            reduce using rule 93 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    DEFAULT         reduce using rule 93 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)


state 238

    (142) expression -> expression LBRACKET expression COLON expression RBRACKET .

    DOT             reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    LBRACKET        reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    EQ              reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    NEQ             reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    GT              reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    LT              reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    GE              reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    LE              reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    AND             reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    OR              reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    PLUS            reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    MINUS           reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    TIMES           reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    DIVIDE          reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    MOD             reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    LBRACE          reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    IDENTIFIER      reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    VAR             reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    TYPE            reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    FOR             reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    PACKAGE         reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    IMPORT          reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    SWITCH          reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    IF              reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    FUNC            reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    RETURN          reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    $end            reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    RBRACE          reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    CASE            reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    DEFAULT         reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    RPAREN          reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    SEMICOLON       reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    RBRACKET        reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)
    COLON           reduce using rule 142 (expression -> expression LBRACKET expression COLON expression RBRACKET .)


state 239

    (42) llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .

    DOT             reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LBRACKET        reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    EQ              reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    NEQ             reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    GT              reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LT              reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    GE              reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LE              reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    AND             reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    OR              reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PLUS            reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    MINUS           reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TIMES           reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DIVIDE          reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    MOD             reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    LBRACE          reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IDENTIFIER      reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    VAR             reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TYPE            reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FOR             reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PACKAGE         reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IMPORT          reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SWITCH          reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IF              reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FUNC            reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RETURN          reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    $end            reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    CASE            reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DEFAULT         reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RPAREN          reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SEMICOLON       reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACKET        reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    COLON           reduce using rule 42 (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)


state 240

    (138) slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .

    DOT             reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    LBRACKET        reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    EQ              reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    NEQ             reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    GT              reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    LT              reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    GE              reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    LE              reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    AND             reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    OR              reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    PLUS            reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    MINUS           reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    TIMES           reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    DIVIDE          reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    MOD             reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    LBRACE          reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    COMMA           reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    IDENTIFIER      reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    VAR             reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    TYPE            reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    FOR             reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    PACKAGE         reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    IMPORT          reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    SWITCH          reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    IF              reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    FUNC            reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    RETURN          reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    $end            reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    RBRACE          reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    CASE            reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    DEFAULT         reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    RPAREN          reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    SEMICOLON       reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    RBRACKET        reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)
    COLON           reduce using rule 138 (slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE .)


state 241

    (139) elements -> elements COMMA . expression
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    expression                     shift and go to state 249
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 242

    (64) caseBlock -> CASE expression COLON statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . assignment
    (5) statement -> . input
    (6) statement -> . llamarFuncion
    (7) statement -> . print_statement
    (8) statement -> . struct_definition
    (9) statement -> . for_statement
    (10) statement -> . package
    (11) statement -> . import
    (12) statement -> . switch
    (13) statement -> . map
    (14) statement -> . if_statement
    (15) statement -> . function
    (16) statement -> . method_definition
    (17) statement -> . function_literal
    (18) statement -> . var_declaration
    (19) statement -> . return_statement
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (34) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (35) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (36) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (37) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (38) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN slice_literal
    (39) assignment -> . IDENTIFIER ASSIGN expression
    (32) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (87) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (93) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (97) for_statement -> . FOR condicion block
    (98) for_statement -> . FOR block
    (22) package -> . PACKAGE MAIN
    (23) package -> . PACKAGE IDENTIFIER
    (24) import -> . IMPORT STRING
    (25) import -> . IMPORT LPAREN import_list RPAREN
    (61) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (66) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (67) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (121) if_statement -> . IF condicion block
    (122) if_statement -> . IF condicion block ELSE block
    (123) if_statement -> . IF condicion_compleja block
    (124) if_statement -> . IF condicion_compleja block ELSE block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (76) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (92) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (125) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (33) var_declaration -> . VAR IDENTIFIER DATATYPE
    (77) return_statement -> . RETURN return_values
    (136) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (137) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    CASE            reduce using rule 64 (caseBlock -> CASE expression COLON statement_list .)
    DEFAULT         reduce using rule 64 (caseBlock -> CASE expression COLON statement_list .)
    RBRACE          reduce using rule 64 (caseBlock -> CASE expression COLON statement_list .)
    IDENTIFIER      shift and go to state 22
    VAR             shift and go to state 23
    TYPE            shift and go to state 24
    FOR             shift and go to state 25
    PACKAGE         shift and go to state 26
    IMPORT          shift and go to state 27
    SWITCH          shift and go to state 28
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    RETURN          shift and go to state 31

    statement                      shift and go to state 32
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    return_statement               shift and go to state 19
    slice_declaration              shift and go to state 20
    declare_assign                 shift and go to state 21

state 243

    (75) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE . statement_list RBRACE
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . assignment
    (5) statement -> . input
    (6) statement -> . llamarFuncion
    (7) statement -> . print_statement
    (8) statement -> . struct_definition
    (9) statement -> . for_statement
    (10) statement -> . package
    (11) statement -> . import
    (12) statement -> . switch
    (13) statement -> . map
    (14) statement -> . if_statement
    (15) statement -> . function
    (16) statement -> . method_definition
    (17) statement -> . function_literal
    (18) statement -> . var_declaration
    (19) statement -> . return_statement
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (34) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (35) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (36) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (37) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (38) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN slice_literal
    (39) assignment -> . IDENTIFIER ASSIGN expression
    (32) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (87) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (93) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (97) for_statement -> . FOR condicion block
    (98) for_statement -> . FOR block
    (22) package -> . PACKAGE MAIN
    (23) package -> . PACKAGE IDENTIFIER
    (24) import -> . IMPORT STRING
    (25) import -> . IMPORT LPAREN import_list RPAREN
    (61) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (66) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (67) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (121) if_statement -> . IF condicion block
    (122) if_statement -> . IF condicion block ELSE block
    (123) if_statement -> . IF condicion_compleja block
    (124) if_statement -> . IF condicion_compleja block ELSE block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (76) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (92) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (125) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (33) var_declaration -> . VAR IDENTIFIER DATATYPE
    (77) return_statement -> . RETURN return_values
    (136) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (137) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    IDENTIFIER      shift and go to state 22
    VAR             shift and go to state 23
    TYPE            shift and go to state 24
    FOR             shift and go to state 25
    PACKAGE         shift and go to state 26
    IMPORT          shift and go to state 27
    SWITCH          shift and go to state 28
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    RETURN          shift and go to state 31

    statement_list                 shift and go to state 250
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    return_statement               shift and go to state 19
    slice_declaration              shift and go to state 20
    declare_assign                 shift and go to state 21

state 244

    (130) parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN . DATATYPE

    DATATYPE        shift and go to state 251


state 245

    (92) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN . arguments RPAREN block
    (28) arguments -> . expression
    (29) arguments -> . arguments COMMA expression
    (30) arguments -> .
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    RPAREN          reduce using rule 30 (arguments -> .)
    COMMA           reduce using rule 30 (arguments -> .)
    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    arguments                      shift and go to state 252
    expression                     shift and go to state 253
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 246

    (132) return_type -> LPAREN type_list RPAREN .

    LBRACE          reduce using rule 132 (return_type -> LPAREN type_list RPAREN .)


state 247

    (135) type_list -> DATATYPE COMMA . type_list
    (134) type_list -> . DATATYPE
    (135) type_list -> . DATATYPE COMMA type_list

    DATATYPE        shift and go to state 232

    type_list                      shift and go to state 254

state 248

    (68) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE . mapEntries RBRACE
    (69) mapEntries -> . mapEntry
    (70) mapEntries -> . mapEntry COMMA mapEntries
    (71) mapEntry -> . value_key COLON value_key
    (72) value_key -> . expression
    (73) value_key -> . STRING
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    STRING          shift and go to state 259
    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    mapEntries                     shift and go to state 255
    mapEntry                       shift and go to state 256
    value_key                      shift and go to state 257
    expression                     shift and go to state 258
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 249

    (139) elements -> elements COMMA expression .
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (112) expression -> expression . operator expression
    (113) expression -> expression . DOT IDENTIFIER
    (141) expression -> expression . LBRACKET expression RBRACKET
    (142) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (143) expression -> expression . LBRACKET COLON expression RBRACKET
    (144) expression -> expression . LBRACKET expression COLON RBRACKET
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (114) operator -> . PLUS
    (115) operator -> . MINUS
    (116) operator -> . TIMES
    (117) operator -> . DIVIDE
    (118) operator -> . MOD

    RBRACE          reduce using rule 139 (elements -> elements COMMA expression .)
    COMMA           reduce using rule 139 (elements -> elements COMMA expression .)
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90
    EQ              shift and go to state 91
    NEQ             shift and go to state 92
    GT              shift and go to state 93
    LT              shift and go to state 94
    GE              shift and go to state 95
    LE              shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103

    comparador                     shift and go to state 115
    operadorLogico                 shift and go to state 87
    operator                       shift and go to state 88

state 250

    (75) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list . RBRACE
    (3) statement_list -> statement_list . statement
    (4) statement -> . assignment
    (5) statement -> . input
    (6) statement -> . llamarFuncion
    (7) statement -> . print_statement
    (8) statement -> . struct_definition
    (9) statement -> . for_statement
    (10) statement -> . package
    (11) statement -> . import
    (12) statement -> . switch
    (13) statement -> . map
    (14) statement -> . if_statement
    (15) statement -> . function
    (16) statement -> . method_definition
    (17) statement -> . function_literal
    (18) statement -> . var_declaration
    (19) statement -> . return_statement
    (20) statement -> . slice_declaration
    (21) statement -> . declare_assign
    (34) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (35) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (36) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (37) assignment -> . IDENTIFIER DECLARE_ASSIGN slice_literal
    (38) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN slice_literal
    (39) assignment -> . IDENTIFIER ASSIGN expression
    (32) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (87) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (88) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (93) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (97) for_statement -> . FOR condicion block
    (98) for_statement -> . FOR block
    (22) package -> . PACKAGE MAIN
    (23) package -> . PACKAGE IDENTIFIER
    (24) import -> . IMPORT STRING
    (25) import -> . IMPORT LPAREN import_list RPAREN
    (61) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (66) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (67) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (121) if_statement -> . IF condicion block
    (122) if_statement -> . IF condicion block ELSE block
    (123) if_statement -> . IF condicion_compleja block
    (124) if_statement -> . IF condicion_compleja block ELSE block
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE
    (76) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (92) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (125) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (33) var_declaration -> . VAR IDENTIFIER DATATYPE
    (77) return_statement -> . RETURN return_values
    (136) slice_declaration -> . VAR IDENTIFIER LBRACKET RBRACKET type_name
    (137) declare_assign -> . IDENTIFIER DECLARE_ASSIGN slice_literal

    RBRACE          shift and go to state 260
    IDENTIFIER      shift and go to state 22
    VAR             shift and go to state 23
    TYPE            shift and go to state 24
    FOR             shift and go to state 25
    PACKAGE         shift and go to state 26
    IMPORT          shift and go to state 27
    SWITCH          shift and go to state 28
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    RETURN          shift and go to state 31

    statement                      shift and go to state 32
    assignment                     shift and go to state 4
    input                          shift and go to state 5
    llamarFuncion                  shift and go to state 6
    print_statement                shift and go to state 7
    struct_definition              shift and go to state 8
    for_statement                  shift and go to state 9
    package                        shift and go to state 10
    import                         shift and go to state 11
    switch                         shift and go to state 12
    map                            shift and go to state 13
    if_statement                   shift and go to state 14
    function                       shift and go to state 15
    method_definition              shift and go to state 16
    function_literal               shift and go to state 17
    var_declaration                shift and go to state 18
    return_statement               shift and go to state 19
    slice_declaration              shift and go to state 20
    declare_assign                 shift and go to state 21

state 251

    (130) parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE .

    RPAREN          reduce using rule 130 (parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE .)
    COMMA           reduce using rule 130 (parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE .)


state 252

    (92) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments . RPAREN block
    (29) arguments -> arguments . COMMA expression

    RPAREN          shift and go to state 261
    COMMA           shift and go to state 262


state 253

    (28) arguments -> expression .
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (112) expression -> expression . operator expression
    (113) expression -> expression . DOT IDENTIFIER
    (141) expression -> expression . LBRACKET expression RBRACKET
    (142) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (143) expression -> expression . LBRACKET COLON expression RBRACKET
    (144) expression -> expression . LBRACKET expression COLON RBRACKET
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (114) operator -> . PLUS
    (115) operator -> . MINUS
    (116) operator -> . TIMES
    (117) operator -> . DIVIDE
    (118) operator -> . MOD

    RPAREN          reduce using rule 28 (arguments -> expression .)
    COMMA           reduce using rule 28 (arguments -> expression .)
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90
    EQ              shift and go to state 91
    NEQ             shift and go to state 92
    GT              shift and go to state 93
    LT              shift and go to state 94
    GE              shift and go to state 95
    LE              shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103

    comparador                     shift and go to state 115
    operadorLogico                 shift and go to state 87
    operator                       shift and go to state 88

state 254

    (135) type_list -> DATATYPE COMMA type_list .

    RPAREN          reduce using rule 135 (type_list -> DATATYPE COMMA type_list .)


state 255

    (68) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries . RBRACE

    RBRACE          shift and go to state 263


state 256

    (69) mapEntries -> mapEntry .
    (70) mapEntries -> mapEntry . COMMA mapEntries

    RBRACE          reduce using rule 69 (mapEntries -> mapEntry .)
    COMMA           shift and go to state 264


state 257

    (71) mapEntry -> value_key . COLON value_key

    COLON           shift and go to state 265


state 258

    (72) value_key -> expression .
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (112) expression -> expression . operator expression
    (113) expression -> expression . DOT IDENTIFIER
    (141) expression -> expression . LBRACKET expression RBRACKET
    (142) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (143) expression -> expression . LBRACKET COLON expression RBRACKET
    (144) expression -> expression . LBRACKET expression COLON RBRACKET
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (114) operator -> . PLUS
    (115) operator -> . MINUS
    (116) operator -> . TIMES
    (117) operator -> . DIVIDE
    (118) operator -> . MOD

    COLON           reduce using rule 72 (value_key -> expression .)
    COMMA           reduce using rule 72 (value_key -> expression .)
    RBRACE          reduce using rule 72 (value_key -> expression .)
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90
    EQ              shift and go to state 91
    NEQ             shift and go to state 92
    GT              shift and go to state 93
    LT              shift and go to state 94
    GE              shift and go to state 95
    LE              shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103

    comparador                     shift and go to state 115
    operadorLogico                 shift and go to state 87
    operator                       shift and go to state 88

state 259

    (73) value_key -> STRING .
    (105) expression -> STRING .

  ! reduce/reduce conflict for COLON resolved using rule 73 (value_key -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 73 (value_key -> STRING .)
  ! reduce/reduce conflict for RBRACE resolved using rule 73 (value_key -> STRING .)
    COLON           reduce using rule 73 (value_key -> STRING .)
    COMMA           reduce using rule 73 (value_key -> STRING .)
    RBRACE          reduce using rule 73 (value_key -> STRING .)
    DOT             reduce using rule 105 (expression -> STRING .)
    LBRACKET        reduce using rule 105 (expression -> STRING .)
    EQ              reduce using rule 105 (expression -> STRING .)
    NEQ             reduce using rule 105 (expression -> STRING .)
    GT              reduce using rule 105 (expression -> STRING .)
    LT              reduce using rule 105 (expression -> STRING .)
    GE              reduce using rule 105 (expression -> STRING .)
    LE              reduce using rule 105 (expression -> STRING .)
    AND             reduce using rule 105 (expression -> STRING .)
    OR              reduce using rule 105 (expression -> STRING .)
    PLUS            reduce using rule 105 (expression -> STRING .)
    MINUS           reduce using rule 105 (expression -> STRING .)
    TIMES           reduce using rule 105 (expression -> STRING .)
    DIVIDE          reduce using rule 105 (expression -> STRING .)
    MOD             reduce using rule 105 (expression -> STRING .)

  ! COLON           [ reduce using rule 105 (expression -> STRING .) ]
  ! COMMA           [ reduce using rule 105 (expression -> STRING .) ]
  ! RBRACE          [ reduce using rule 105 (expression -> STRING .) ]


state 260

    (75) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .

    IDENTIFIER      reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    VAR             reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    TYPE            reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    FOR             reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    PACKAGE         reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    IMPORT          reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    SWITCH          reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    IF              reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    FUNC            reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    $end            reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    CASE            reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)
    DEFAULT         reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE statement_list RBRACE .)


state 261

    (92) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN . block
    (100) block -> . LBRACE statement_list RBRACE
    (101) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 44

    block                          shift and go to state 266

state 262

    (29) arguments -> arguments COMMA . expression
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    STRING          shift and go to state 48
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    expression                     shift and go to state 267
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 263

    (68) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .

    IDENTIFIER      reduce using rule 68 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    VAR             reduce using rule 68 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    TYPE            reduce using rule 68 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    FOR             reduce using rule 68 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    PACKAGE         reduce using rule 68 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    IMPORT          reduce using rule 68 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    SWITCH          reduce using rule 68 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    IF              reduce using rule 68 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    FUNC            reduce using rule 68 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    RETURN          reduce using rule 68 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    $end            reduce using rule 68 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    RBRACE          reduce using rule 68 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    CASE            reduce using rule 68 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    DEFAULT         reduce using rule 68 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)


state 264

    (70) mapEntries -> mapEntry COMMA . mapEntries
    (69) mapEntries -> . mapEntry
    (70) mapEntries -> . mapEntry COMMA mapEntries
    (71) mapEntry -> . value_key COLON value_key
    (72) value_key -> . expression
    (73) value_key -> . STRING
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    STRING          shift and go to state 259
    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    mapEntry                       shift and go to state 256
    mapEntries                     shift and go to state 268
    value_key                      shift and go to state 257
    expression                     shift and go to state 258
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 265

    (71) mapEntry -> value_key COLON . value_key
    (72) value_key -> . expression
    (73) value_key -> . STRING
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (102) expression -> . NUMBER
    (103) expression -> . IDENTIFIER
    (104) expression -> . RUNE
    (105) expression -> . STRING
    (106) expression -> . RAW_STRING
    (107) expression -> . TRUE
    (108) expression -> . FALSE
    (109) expression -> . NIL
    (110) expression -> . slice_literal
    (111) expression -> . llamarFuncion
    (112) expression -> . expression operator expression
    (113) expression -> . expression DOT IDENTIFIER
    (119) expression -> . MINUS expression
    (120) expression -> . LPAREN expression RPAREN
    (141) expression -> . expression LBRACKET expression RBRACKET
    (142) expression -> . expression LBRACKET expression COLON expression RBRACKET
    (143) expression -> . expression LBRACKET COLON expression RBRACKET
    (144) expression -> . expression LBRACKET expression COLON RBRACKET
    (138) slice_literal -> . LBRACKET RBRACKET type_name LBRACE elements RBRACE
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (41) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt COMMA expression RPAREN
    (42) llamarFuncion -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    STRING          shift and go to state 259
    NUMBER          shift and go to state 46
    IDENTIFIER      shift and go to state 63
    RUNE            shift and go to state 47
    RAW_STRING      shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NIL             shift and go to state 52
    MINUS           shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57

    value_key                      shift and go to state 269
    expression                     shift and go to state 258
    slice_literal                  shift and go to state 53
    llamarFuncion                  shift and go to state 54

state 266

    (92) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .

    IDENTIFIER      reduce using rule 92 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    VAR             reduce using rule 92 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    TYPE            reduce using rule 92 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    FOR             reduce using rule 92 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    PACKAGE         reduce using rule 92 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    IMPORT          reduce using rule 92 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    SWITCH          reduce using rule 92 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    IF              reduce using rule 92 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    FUNC            reduce using rule 92 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    RETURN          reduce using rule 92 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    $end            reduce using rule 92 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    RBRACE          reduce using rule 92 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    CASE            reduce using rule 92 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    DEFAULT         reduce using rule 92 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)


state 267

    (29) arguments -> arguments COMMA expression .
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (112) expression -> expression . operator expression
    (113) expression -> expression . DOT IDENTIFIER
    (141) expression -> expression . LBRACKET expression RBRACKET
    (142) expression -> expression . LBRACKET expression COLON expression RBRACKET
    (143) expression -> expression . LBRACKET COLON expression RBRACKET
    (144) expression -> expression . LBRACKET expression COLON RBRACKET
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (114) operator -> . PLUS
    (115) operator -> . MINUS
    (116) operator -> . TIMES
    (117) operator -> . DIVIDE
    (118) operator -> . MOD

    RPAREN          reduce using rule 29 (arguments -> arguments COMMA expression .)
    COMMA           reduce using rule 29 (arguments -> arguments COMMA expression .)
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90
    EQ              shift and go to state 91
    NEQ             shift and go to state 92
    GT              shift and go to state 93
    LT              shift and go to state 94
    GE              shift and go to state 95
    LE              shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103

    comparador                     shift and go to state 115
    operadorLogico                 shift and go to state 87
    operator                       shift and go to state 88

state 268

    (70) mapEntries -> mapEntry COMMA mapEntries .

    RBRACE          reduce using rule 70 (mapEntries -> mapEntry COMMA mapEntries .)


state 269

    (71) mapEntry -> value_key COLON value_key .

    COMMA           reduce using rule 71 (mapEntry -> value_key COLON value_key .)
    RBRACE          reduce using rule 71 (mapEntry -> value_key COLON value_key .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOT in state 45 resolved as shift
WARNING: shift/reduce conflict for DOT in state 63 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 79 resolved as shift
WARNING: shift/reduce conflict for DOT in state 136 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 136 resolved as shift
WARNING: shift/reduce conflict for EQ in state 136 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 136 resolved as shift
WARNING: shift/reduce conflict for GT in state 136 resolved as shift
WARNING: shift/reduce conflict for LT in state 136 resolved as shift
WARNING: shift/reduce conflict for GE in state 136 resolved as shift
WARNING: shift/reduce conflict for LE in state 136 resolved as shift
WARNING: shift/reduce conflict for AND in state 136 resolved as shift
WARNING: shift/reduce conflict for OR in state 136 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 136 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 136 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 136 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 136 resolved as shift
WARNING: shift/reduce conflict for MOD in state 136 resolved as shift
WARNING: shift/reduce conflict for DOT in state 137 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 137 resolved as shift
WARNING: shift/reduce conflict for EQ in state 137 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 137 resolved as shift
WARNING: shift/reduce conflict for GT in state 137 resolved as shift
WARNING: shift/reduce conflict for LT in state 137 resolved as shift
WARNING: shift/reduce conflict for GE in state 137 resolved as shift
WARNING: shift/reduce conflict for LE in state 137 resolved as shift
WARNING: shift/reduce conflict for AND in state 137 resolved as shift
WARNING: shift/reduce conflict for OR in state 137 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 137 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 137 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 137 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 137 resolved as shift
WARNING: shift/reduce conflict for MOD in state 137 resolved as shift
WARNING: shift/reduce conflict for DOT in state 138 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 138 resolved as shift
WARNING: shift/reduce conflict for EQ in state 138 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 138 resolved as shift
WARNING: shift/reduce conflict for GT in state 138 resolved as shift
WARNING: shift/reduce conflict for LT in state 138 resolved as shift
WARNING: shift/reduce conflict for GE in state 138 resolved as shift
WARNING: shift/reduce conflict for LE in state 138 resolved as shift
WARNING: shift/reduce conflict for AND in state 138 resolved as shift
WARNING: shift/reduce conflict for OR in state 138 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 138 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 138 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 138 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 138 resolved as shift
WARNING: shift/reduce conflict for MOD in state 138 resolved as shift
WARNING: shift/reduce conflict for DOT in state 157 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 157 resolved as shift
WARNING: shift/reduce conflict for EQ in state 157 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 157 resolved as shift
WARNING: shift/reduce conflict for GT in state 157 resolved as shift
WARNING: shift/reduce conflict for LT in state 157 resolved as shift
WARNING: shift/reduce conflict for GE in state 157 resolved as shift
WARNING: shift/reduce conflict for LE in state 157 resolved as shift
WARNING: shift/reduce conflict for AND in state 157 resolved as shift
WARNING: shift/reduce conflict for OR in state 157 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 157 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 157 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 157 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 157 resolved as shift
WARNING: shift/reduce conflict for MOD in state 157 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 199 resolved as shift
WARNING: reduce/reduce conflict in state 72 resolved using rule (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal)
WARNING: rejected rule (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal) in state 72
WARNING: reduce/reduce conflict in state 72 resolved using rule (assignment -> IDENTIFIER DECLARE_ASSIGN slice_literal)
WARNING: rejected rule (expression -> slice_literal) in state 72
WARNING: reduce/reduce conflict in state 136 resolved using rule (expression -> expression comparador expression)
WARNING: rejected rule (condicion -> expression comparador expression) in state 136
WARNING: reduce/reduce conflict in state 180 resolved using rule (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion)
WARNING: rejected rule (expression -> llamarFuncion) in state 180
WARNING: reduce/reduce conflict in state 181 resolved using rule (assignment -> VAR IDENTIFIER DATATYPE ASSIGN slice_literal)
WARNING: rejected rule (expression -> slice_literal) in state 181
WARNING: reduce/reduce conflict in state 212 resolved using rule (llamarFuncion -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN)
WARNING: rejected rule (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN) in state 212
WARNING: reduce/reduce conflict in state 259 resolved using rule (value_key -> STRING)
WARNING: rejected rule (expression -> STRING) in state 259
WARNING: Rule (declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal) is never reduced
WARNING: Rule (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN) is never reduced
