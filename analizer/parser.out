Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CONTINUE
    DEFER
    FALLTHROUGH
    GO
    INTERFACE
    SELECT
    STRING_UNCLOSE

Grammar

Rule 0     S' -> program
Rule 1     program -> package import_list declaration_list
Rule 2     program -> package declaration_list
Rule 3     program -> declaration_list
Rule 4     program -> package
Rule 5     package -> PACKAGE MAIN
Rule 6     arguments -> expression
Rule 7     arguments -> expression COMMA arguments
Rule 8     declaration_list -> declaration
Rule 9     declaration_list -> declaration_list declaration
Rule 10    declaration -> struct_definition
Rule 11    declaration -> print_statement
Rule 12    declaration -> for_statement
Rule 13    declaration -> const_declaration
Rule 14    declaration -> function
Rule 15    declaration -> method_definition
Rule 16    declaration -> function_literal
Rule 17    declaration -> import
Rule 18    const_declaration -> CONST IDENTIFIER ASSIGN expression
Rule 19    import_list -> import
Rule 20    import_list -> import_list import
Rule 21    sentencias -> sentencia
Rule 22    sentencias -> sentencia sentencias
Rule 23    sentencia -> assignment
Rule 24    sentencia -> input
Rule 25    sentencia -> llamarFuncion
Rule 26    sentencia -> print_statement
Rule 27    sentencia -> struct_definition
Rule 28    sentencia -> for_statement
Rule 29    sentencia -> package
Rule 30    sentencia -> import
Rule 31    sentencia -> switch
Rule 32    sentencia -> map
Rule 33    sentencia -> if_statement
Rule 34    sentencia -> return_statement
Rule 35    input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
Rule 36    varDeclaration -> VAR IDENTIFIER DATATYPE
Rule 37    assignment -> IDENTIFIER DECLARE_ASSIGN expression
Rule 38    assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression
Rule 39    assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
Rule 40    llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN
Rule 41    argumentos -> expression
Rule 42    argumentos -> expression COMMA argumentos
Rule 43    expression -> expression comparador expression
Rule 44    expression -> expression operadorLogico expression
Rule 45    argument_list -> expression
Rule 46    argument_list -> argument_list COMMA expression
Rule 47    argument_list_opt -> argument_list
Rule 48    argument_list_opt -> <empty>
Rule 49    condicion -> expression comparador expression
Rule 50    condicion_compleja -> condicion operadorLogico condicion
Rule 51    condicion_compleja -> condicion operadorLogico condicion_compleja
Rule 52    operadorLogico -> AND
Rule 53    operadorLogico -> OR
Rule 54    comparador -> EQ
Rule 55    comparador -> NEQ
Rule 56    comparador -> GT
Rule 57    comparador -> LT
Rule 58    comparador -> GE
Rule 59    comparador -> LE
Rule 60    empty -> <empty>
Rule 61    switch -> SWITCH expression LBRACE caseBlocks RBRACE
Rule 62    caseBlocks -> caseBlock
Rule 63    caseBlocks -> caseBlock caseBlocks
Rule 64    caseBlock -> CASE expression COLON sentencias
Rule 65    caseBlock -> DEFAULT COLON sentencias
Rule 66    map -> IDENTIFIER DECLARE_ASSIGN mapLiteral
Rule 67    map -> VAR IDENTIFIER ASSIGN mapLiteral
Rule 68    mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE
Rule 69    mapEntries -> mapEntry
Rule 70    mapEntries -> mapEntry COMMA mapEntries
Rule 71    mapEntry -> value_key COLON value_key
Rule 72    value_key -> expression
Rule 73    value_key -> STRING
Rule 74    function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block
Rule 75    function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE sentencias RETURN expression RBRACE
Rule 76    function -> FUNC MAIN LPAREN params_opt RPAREN block
Rule 77    return_statement -> RETURN expression
Rule 78    params_opt -> params
Rule 79    params_opt -> empty
Rule 80    params -> param
Rule 81    params -> param COMMA params
Rule 82    param -> IDENTIFIER type_name
Rule 83    type_name -> DATATYPE
Rule 84    type_name -> IDENTIFIER
Rule 85    import -> IMPORT STRING
Rule 86    print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
Rule 87    struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
Rule 88    struct_field -> IDENTIFIER DATATYPE
Rule 89    struct_fields -> struct_field
Rule 90    struct_fields -> struct_fields struct_field
Rule 91    method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
Rule 92    for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
Rule 93    identifier_list -> IDENTIFIER
Rule 94    identifier_list -> IDENTIFIER COMMA identifier_list
Rule 95    shortAssignment -> identifier_list DECLARE_ASSIGN expression
Rule 96    for_statement -> FOR condicion block
Rule 97    for_statement -> FOR block
Rule 98    for_range_clause -> shortAssignment RANGE expression
Rule 99    block -> LBRACE sentencias RBRACE
Rule 100   block -> LBRACE RBRACE
Rule 101   expression -> NUMBER
Rule 102   expression -> IDENTIFIER
Rule 103   expression -> RUNE
Rule 104   expression -> STRING
Rule 105   expression -> RAW_STRING
Rule 106   expression -> TRUE
Rule 107   expression -> FALSE
Rule 108   expression -> NIL
Rule 109   expression -> expression operator expression
Rule 110   operator -> PLUS
Rule 111   operator -> MINUS
Rule 112   operator -> TIMES
Rule 113   operator -> DIVIDE
Rule 114   operator -> MOD
Rule 115   expression -> MINUS expression
Rule 116   expression -> LPAREN expression RPAREN
Rule 117   if_statement -> IF condicion_compleja block
Rule 118   if_statement -> IF condicion_compleja block ELSE block
Rule 119   function_literal -> FUNC LPAREN parameters RPAREN return_type block
Rule 120   parameters -> parameters COMMA parameter
Rule 121   parameters -> parameter
Rule 122   parameters -> empty
Rule 123   parameter -> IDENTIFIER DATATYPE
Rule 124   parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE
Rule 125   return_type -> DATATYPE
Rule 126   return_type -> empty
Rule 127   slice_declaration -> VAR IDENTIFIER LBRACKET RBRACKET type_name
Rule 128   declare_assign -> IDENTIFIER DECLARE_ASSIGN slice_literal
Rule 129   slice_literal -> LBRACKET RBRACKET type_name LBRACE elements RBRACE
Rule 130   elements -> elements COMMA expression
Rule 131   elements -> expression

Terminals, with rules where they appear

AMPERSAND            : 35
AND                  : 52
ASSIGN               : 18 38 39 67
BREAK                : 
CASE                 : 64
COLON                : 64 65 71
COMMA                : 7 42 46 70 81 94 120 130
CONST                : 18
CONTINUE             : 
DATATYPE             : 36 38 39 68 68 83 88 123 124 125
DECLARE_ASSIGN       : 37 66 95 128
DEFAULT              : 65
DEFER                : 
DIVIDE               : 113
DOT                  : 35 86
ELSE                 : 118
EQ                   : 54
FALLTHROUGH          : 
FALSE                : 107
FOR                  : 92 96 97
FUNC                 : 74 75 76 91 119 124
GE                   : 58
GO                   : 
GT                   : 56
IDENTIFIER           : 18 35 35 35 36 37 38 39 40 66 67 74 75 82 84 86 86 87 88 91 91 91 93 94 102 123 124 127 128
IF                   : 117 118
IMPORT               : 85
INTERFACE            : 
LBRACE               : 61 68 75 87 99 100 129
LBRACKET             : 68 127 129
LE                   : 59
LPAREN               : 35 40 74 75 76 86 91 91 116 119 124
LT                   : 57
MAIN                 : 5 76
MAP                  : 68
MINUS                : 111 115
MOD                  : 114
NEQ                  : 55
NIL                  : 108
NUMBER               : 101
OR                   : 53
PACKAGE              : 5
PLUS                 : 110
RANGE                : 98
RAW_STRING           : 105
RBRACE               : 61 68 75 87 99 100 129
RBRACKET             : 68 127 129
RETURN               : 75 77
RPAREN               : 35 40 74 75 76 86 91 91 116 119 124
RUNE                 : 103
SELECT               : 
SEMICOLON            : 92 92
STRING               : 73 85 104
STRING_UNCLOSE       : 
STRUCT               : 87
SWITCH               : 61
TIMES                : 112
TRUE                 : 106
TYPE                 : 87
VAR                  : 36 38 39 67 127
error                : 

Nonterminals, with rules where they appear

argument_list        : 46 47
argument_list_opt    : 40 86
argumentos           : 42
arguments            : 7 91
assignment           : 23
block                : 74 76 91 92 96 97 117 118 118 119
caseBlock            : 62 63
caseBlocks           : 61 63
comparador           : 43 49
condicion            : 50 50 51 92 96
condicion_compleja   : 51 117 118
const_declaration    : 13
declaration          : 8 9
declaration_list     : 1 2 3 9
declare_assign       : 
elements             : 129 130
empty                : 79 122 126
expression           : 6 7 18 37 38 41 42 43 43 44 44 45 46 49 49 61 64 72 75 77 92 95 98 109 109 115 116 130 131
for_range_clause     : 
for_statement        : 12 28
function             : 14
function_literal     : 16
identifier_list      : 94 95
if_statement         : 33
import               : 17 19 20 30
import_list          : 1 20
input                : 24
llamarFuncion        : 25 39
map                  : 32
mapEntries           : 68 70
mapEntry             : 69 70
mapLiteral           : 66 67
method_definition    : 15
operadorLogico       : 44 50 51
operator             : 109
package              : 1 2 4 29
param                : 80 81
parameter            : 120 121
parameters           : 119 120 124
params               : 78 81
params_opt           : 74 75 76
print_statement      : 11 26
program              : 0
return_statement     : 34
return_type          : 74 75 119
sentencia            : 21 22
sentencias           : 22 64 65 75 99
shortAssignment      : 92 98
slice_declaration    : 
slice_literal        : 128
struct_definition    : 10 27
struct_field         : 89 90
struct_fields        : 87 90
switch               : 31
type_name            : 82 127 129
value_key            : 71 71
varDeclaration       : 

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . package import_list declaration_list
    (2) program -> . package declaration_list
    (3) program -> . declaration_list
    (4) program -> . package
    (5) package -> . PACKAGE MAIN
    (8) declaration_list -> . declaration
    (9) declaration_list -> . declaration_list declaration
    (10) declaration -> . struct_definition
    (11) declaration -> . print_statement
    (12) declaration -> . for_statement
    (13) declaration -> . const_declaration
    (14) declaration -> . function
    (15) declaration -> . method_definition
    (16) declaration -> . function_literal
    (17) declaration -> . import
    (87) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (86) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (92) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (96) for_statement -> . FOR condicion block
    (97) for_statement -> . FOR block
    (18) const_declaration -> . CONST IDENTIFIER ASSIGN expression
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE sentencias RETURN expression RBRACE
    (76) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (91) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (119) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (85) import -> . IMPORT STRING

    PACKAGE         shift and go to state 4
    TYPE            shift and go to state 14
    IDENTIFIER      shift and go to state 15
    FOR             shift and go to state 16
    CONST           shift and go to state 17
    FUNC            shift and go to state 18
    IMPORT          shift and go to state 19

    program                        shift and go to state 1
    package                        shift and go to state 2
    declaration_list               shift and go to state 3
    declaration                    shift and go to state 5
    struct_definition              shift and go to state 6
    print_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    const_declaration              shift and go to state 9
    function                       shift and go to state 10
    method_definition              shift and go to state 11
    function_literal               shift and go to state 12
    import                         shift and go to state 13

state 1

    (0) S' -> program .



state 2

    (1) program -> package . import_list declaration_list
    (2) program -> package . declaration_list
    (4) program -> package .
    (19) import_list -> . import
    (20) import_list -> . import_list import
    (8) declaration_list -> . declaration
    (9) declaration_list -> . declaration_list declaration
    (85) import -> . IMPORT STRING
    (10) declaration -> . struct_definition
    (11) declaration -> . print_statement
    (12) declaration -> . for_statement
    (13) declaration -> . const_declaration
    (14) declaration -> . function
    (15) declaration -> . method_definition
    (16) declaration -> . function_literal
    (17) declaration -> . import
    (87) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (86) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (92) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (96) for_statement -> . FOR condicion block
    (97) for_statement -> . FOR block
    (18) const_declaration -> . CONST IDENTIFIER ASSIGN expression
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE sentencias RETURN expression RBRACE
    (76) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (91) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (119) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    $end            reduce using rule 4 (program -> package .)
    IMPORT          shift and go to state 19
    TYPE            shift and go to state 14
    IDENTIFIER      shift and go to state 15
    FOR             shift and go to state 16
    CONST           shift and go to state 17
    FUNC            shift and go to state 18

    import_list                    shift and go to state 20
    declaration_list               shift and go to state 21
    import                         shift and go to state 22
    declaration                    shift and go to state 5
    struct_definition              shift and go to state 6
    print_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    const_declaration              shift and go to state 9
    function                       shift and go to state 10
    method_definition              shift and go to state 11
    function_literal               shift and go to state 12

state 3

    (3) program -> declaration_list .
    (9) declaration_list -> declaration_list . declaration
    (10) declaration -> . struct_definition
    (11) declaration -> . print_statement
    (12) declaration -> . for_statement
    (13) declaration -> . const_declaration
    (14) declaration -> . function
    (15) declaration -> . method_definition
    (16) declaration -> . function_literal
    (17) declaration -> . import
    (87) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (86) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (92) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (96) for_statement -> . FOR condicion block
    (97) for_statement -> . FOR block
    (18) const_declaration -> . CONST IDENTIFIER ASSIGN expression
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE sentencias RETURN expression RBRACE
    (76) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (91) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (119) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (85) import -> . IMPORT STRING

    $end            reduce using rule 3 (program -> declaration_list .)
    TYPE            shift and go to state 14
    IDENTIFIER      shift and go to state 15
    FOR             shift and go to state 16
    CONST           shift and go to state 17
    FUNC            shift and go to state 18
    IMPORT          shift and go to state 19

    declaration                    shift and go to state 23
    struct_definition              shift and go to state 6
    print_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    const_declaration              shift and go to state 9
    function                       shift and go to state 10
    method_definition              shift and go to state 11
    function_literal               shift and go to state 12
    import                         shift and go to state 13

state 4

    (5) package -> PACKAGE . MAIN

    MAIN            shift and go to state 24


state 5

    (8) declaration_list -> declaration .

    TYPE            reduce using rule 8 (declaration_list -> declaration .)
    IDENTIFIER      reduce using rule 8 (declaration_list -> declaration .)
    FOR             reduce using rule 8 (declaration_list -> declaration .)
    CONST           reduce using rule 8 (declaration_list -> declaration .)
    FUNC            reduce using rule 8 (declaration_list -> declaration .)
    IMPORT          reduce using rule 8 (declaration_list -> declaration .)
    $end            reduce using rule 8 (declaration_list -> declaration .)


state 6

    (10) declaration -> struct_definition .

    TYPE            reduce using rule 10 (declaration -> struct_definition .)
    IDENTIFIER      reduce using rule 10 (declaration -> struct_definition .)
    FOR             reduce using rule 10 (declaration -> struct_definition .)
    CONST           reduce using rule 10 (declaration -> struct_definition .)
    FUNC            reduce using rule 10 (declaration -> struct_definition .)
    IMPORT          reduce using rule 10 (declaration -> struct_definition .)
    $end            reduce using rule 10 (declaration -> struct_definition .)


state 7

    (11) declaration -> print_statement .

    TYPE            reduce using rule 11 (declaration -> print_statement .)
    IDENTIFIER      reduce using rule 11 (declaration -> print_statement .)
    FOR             reduce using rule 11 (declaration -> print_statement .)
    CONST           reduce using rule 11 (declaration -> print_statement .)
    FUNC            reduce using rule 11 (declaration -> print_statement .)
    IMPORT          reduce using rule 11 (declaration -> print_statement .)
    $end            reduce using rule 11 (declaration -> print_statement .)


state 8

    (12) declaration -> for_statement .

    TYPE            reduce using rule 12 (declaration -> for_statement .)
    IDENTIFIER      reduce using rule 12 (declaration -> for_statement .)
    FOR             reduce using rule 12 (declaration -> for_statement .)
    CONST           reduce using rule 12 (declaration -> for_statement .)
    FUNC            reduce using rule 12 (declaration -> for_statement .)
    IMPORT          reduce using rule 12 (declaration -> for_statement .)
    $end            reduce using rule 12 (declaration -> for_statement .)


state 9

    (13) declaration -> const_declaration .

    TYPE            reduce using rule 13 (declaration -> const_declaration .)
    IDENTIFIER      reduce using rule 13 (declaration -> const_declaration .)
    FOR             reduce using rule 13 (declaration -> const_declaration .)
    CONST           reduce using rule 13 (declaration -> const_declaration .)
    FUNC            reduce using rule 13 (declaration -> const_declaration .)
    IMPORT          reduce using rule 13 (declaration -> const_declaration .)
    $end            reduce using rule 13 (declaration -> const_declaration .)


state 10

    (14) declaration -> function .

    TYPE            reduce using rule 14 (declaration -> function .)
    IDENTIFIER      reduce using rule 14 (declaration -> function .)
    FOR             reduce using rule 14 (declaration -> function .)
    CONST           reduce using rule 14 (declaration -> function .)
    FUNC            reduce using rule 14 (declaration -> function .)
    IMPORT          reduce using rule 14 (declaration -> function .)
    $end            reduce using rule 14 (declaration -> function .)


state 11

    (15) declaration -> method_definition .

    TYPE            reduce using rule 15 (declaration -> method_definition .)
    IDENTIFIER      reduce using rule 15 (declaration -> method_definition .)
    FOR             reduce using rule 15 (declaration -> method_definition .)
    CONST           reduce using rule 15 (declaration -> method_definition .)
    FUNC            reduce using rule 15 (declaration -> method_definition .)
    IMPORT          reduce using rule 15 (declaration -> method_definition .)
    $end            reduce using rule 15 (declaration -> method_definition .)


state 12

    (16) declaration -> function_literal .

    TYPE            reduce using rule 16 (declaration -> function_literal .)
    IDENTIFIER      reduce using rule 16 (declaration -> function_literal .)
    FOR             reduce using rule 16 (declaration -> function_literal .)
    CONST           reduce using rule 16 (declaration -> function_literal .)
    FUNC            reduce using rule 16 (declaration -> function_literal .)
    IMPORT          reduce using rule 16 (declaration -> function_literal .)
    $end            reduce using rule 16 (declaration -> function_literal .)


state 13

    (17) declaration -> import .

    TYPE            reduce using rule 17 (declaration -> import .)
    IDENTIFIER      reduce using rule 17 (declaration -> import .)
    FOR             reduce using rule 17 (declaration -> import .)
    CONST           reduce using rule 17 (declaration -> import .)
    FUNC            reduce using rule 17 (declaration -> import .)
    IMPORT          reduce using rule 17 (declaration -> import .)
    $end            reduce using rule 17 (declaration -> import .)


state 14

    (87) struct_definition -> TYPE . IDENTIFIER STRUCT LBRACE struct_fields RBRACE

    IDENTIFIER      shift and go to state 25


state 15

    (86) print_statement -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN

    DOT             shift and go to state 26


state 16

    (92) for_statement -> FOR . shortAssignment SEMICOLON condicion SEMICOLON expression block
    (96) for_statement -> FOR . condicion block
    (97) for_statement -> FOR . block
    (95) shortAssignment -> . identifier_list DECLARE_ASSIGN expression
    (49) condicion -> . expression comparador expression
    (99) block -> . LBRACE sentencias RBRACE
    (100) block -> . LBRACE RBRACE
    (93) identifier_list -> . IDENTIFIER
    (94) identifier_list -> . IDENTIFIER COMMA identifier_list
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (101) expression -> . NUMBER
    (102) expression -> . IDENTIFIER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . expression operator expression
    (115) expression -> . MINUS expression
    (116) expression -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 32
    IDENTIFIER      shift and go to state 33
    NUMBER          shift and go to state 34
    RUNE            shift and go to state 35
    STRING          shift and go to state 36
    RAW_STRING      shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NIL             shift and go to state 40
    MINUS           shift and go to state 41
    LPAREN          shift and go to state 42

    shortAssignment                shift and go to state 27
    condicion                      shift and go to state 28
    expression                     shift and go to state 29
    block                          shift and go to state 30
    identifier_list                shift and go to state 31

state 17

    (18) const_declaration -> CONST . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 43


state 18

    (74) function -> FUNC . IDENTIFIER LPAREN params_opt RPAREN return_type block
    (75) function -> FUNC . IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE sentencias RETURN expression RBRACE
    (76) function -> FUNC . MAIN LPAREN params_opt RPAREN block
    (91) method_definition -> FUNC . LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (119) function_literal -> FUNC . LPAREN parameters RPAREN return_type block

    IDENTIFIER      shift and go to state 44
    MAIN            shift and go to state 46
    LPAREN          shift and go to state 45


state 19

    (85) import -> IMPORT . STRING

    STRING          shift and go to state 47


state 20

    (1) program -> package import_list . declaration_list
    (20) import_list -> import_list . import
    (8) declaration_list -> . declaration
    (9) declaration_list -> . declaration_list declaration
    (85) import -> . IMPORT STRING
    (10) declaration -> . struct_definition
    (11) declaration -> . print_statement
    (12) declaration -> . for_statement
    (13) declaration -> . const_declaration
    (14) declaration -> . function
    (15) declaration -> . method_definition
    (16) declaration -> . function_literal
    (17) declaration -> . import
    (87) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (86) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (92) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (96) for_statement -> . FOR condicion block
    (97) for_statement -> . FOR block
    (18) const_declaration -> . CONST IDENTIFIER ASSIGN expression
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE sentencias RETURN expression RBRACE
    (76) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (91) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (119) function_literal -> . FUNC LPAREN parameters RPAREN return_type block

    IMPORT          shift and go to state 19
    TYPE            shift and go to state 14
    IDENTIFIER      shift and go to state 15
    FOR             shift and go to state 16
    CONST           shift and go to state 17
    FUNC            shift and go to state 18

    declaration_list               shift and go to state 48
    import                         shift and go to state 49
    declaration                    shift and go to state 5
    struct_definition              shift and go to state 6
    print_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    const_declaration              shift and go to state 9
    function                       shift and go to state 10
    method_definition              shift and go to state 11
    function_literal               shift and go to state 12

state 21

    (2) program -> package declaration_list .
    (9) declaration_list -> declaration_list . declaration
    (10) declaration -> . struct_definition
    (11) declaration -> . print_statement
    (12) declaration -> . for_statement
    (13) declaration -> . const_declaration
    (14) declaration -> . function
    (15) declaration -> . method_definition
    (16) declaration -> . function_literal
    (17) declaration -> . import
    (87) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (86) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (92) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (96) for_statement -> . FOR condicion block
    (97) for_statement -> . FOR block
    (18) const_declaration -> . CONST IDENTIFIER ASSIGN expression
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE sentencias RETURN expression RBRACE
    (76) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (91) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (119) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (85) import -> . IMPORT STRING

    $end            reduce using rule 2 (program -> package declaration_list .)
    TYPE            shift and go to state 14
    IDENTIFIER      shift and go to state 15
    FOR             shift and go to state 16
    CONST           shift and go to state 17
    FUNC            shift and go to state 18
    IMPORT          shift and go to state 19

    declaration                    shift and go to state 23
    struct_definition              shift and go to state 6
    print_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    const_declaration              shift and go to state 9
    function                       shift and go to state 10
    method_definition              shift and go to state 11
    function_literal               shift and go to state 12
    import                         shift and go to state 13

state 22

    (19) import_list -> import .
    (17) declaration -> import .

  ! reduce/reduce conflict for TYPE resolved using rule 17 (declaration -> import .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 17 (declaration -> import .)
  ! reduce/reduce conflict for FOR resolved using rule 17 (declaration -> import .)
  ! reduce/reduce conflict for CONST resolved using rule 17 (declaration -> import .)
  ! reduce/reduce conflict for FUNC resolved using rule 17 (declaration -> import .)
  ! reduce/reduce conflict for IMPORT resolved using rule 17 (declaration -> import .)
    TYPE            reduce using rule 17 (declaration -> import .)
    IDENTIFIER      reduce using rule 17 (declaration -> import .)
    FOR             reduce using rule 17 (declaration -> import .)
    CONST           reduce using rule 17 (declaration -> import .)
    FUNC            reduce using rule 17 (declaration -> import .)
    IMPORT          reduce using rule 17 (declaration -> import .)
    $end            reduce using rule 17 (declaration -> import .)

  ! IMPORT          [ reduce using rule 19 (import_list -> import .) ]
  ! TYPE            [ reduce using rule 19 (import_list -> import .) ]
  ! IDENTIFIER      [ reduce using rule 19 (import_list -> import .) ]
  ! FOR             [ reduce using rule 19 (import_list -> import .) ]
  ! CONST           [ reduce using rule 19 (import_list -> import .) ]
  ! FUNC            [ reduce using rule 19 (import_list -> import .) ]


state 23

    (9) declaration_list -> declaration_list declaration .

    TYPE            reduce using rule 9 (declaration_list -> declaration_list declaration .)
    IDENTIFIER      reduce using rule 9 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 9 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 9 (declaration_list -> declaration_list declaration .)
    FUNC            reduce using rule 9 (declaration_list -> declaration_list declaration .)
    IMPORT          reduce using rule 9 (declaration_list -> declaration_list declaration .)
    $end            reduce using rule 9 (declaration_list -> declaration_list declaration .)


state 24

    (5) package -> PACKAGE MAIN .

    IMPORT          reduce using rule 5 (package -> PACKAGE MAIN .)
    TYPE            reduce using rule 5 (package -> PACKAGE MAIN .)
    IDENTIFIER      reduce using rule 5 (package -> PACKAGE MAIN .)
    FOR             reduce using rule 5 (package -> PACKAGE MAIN .)
    CONST           reduce using rule 5 (package -> PACKAGE MAIN .)
    FUNC            reduce using rule 5 (package -> PACKAGE MAIN .)
    $end            reduce using rule 5 (package -> PACKAGE MAIN .)
    VAR             reduce using rule 5 (package -> PACKAGE MAIN .)
    PACKAGE         reduce using rule 5 (package -> PACKAGE MAIN .)
    SWITCH          reduce using rule 5 (package -> PACKAGE MAIN .)
    IF              reduce using rule 5 (package -> PACKAGE MAIN .)
    RETURN          reduce using rule 5 (package -> PACKAGE MAIN .)
    RBRACE          reduce using rule 5 (package -> PACKAGE MAIN .)
    CASE            reduce using rule 5 (package -> PACKAGE MAIN .)
    DEFAULT         reduce using rule 5 (package -> PACKAGE MAIN .)


state 25

    (87) struct_definition -> TYPE IDENTIFIER . STRUCT LBRACE struct_fields RBRACE

    STRUCT          shift and go to state 50


state 26

    (86) print_statement -> IDENTIFIER DOT . IDENTIFIER LPAREN argument_list_opt RPAREN

    IDENTIFIER      shift and go to state 51


state 27

    (92) for_statement -> FOR shortAssignment . SEMICOLON condicion SEMICOLON expression block

    SEMICOLON       shift and go to state 52


state 28

    (96) for_statement -> FOR condicion . block
    (99) block -> . LBRACE sentencias RBRACE
    (100) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 32

    block                          shift and go to state 53

state 29

    (49) condicion -> expression . comparador expression
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (109) expression -> expression . operator expression
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (110) operator -> . PLUS
    (111) operator -> . MINUS
    (112) operator -> . TIMES
    (113) operator -> . DIVIDE
    (114) operator -> . MOD

    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    GT              shift and go to state 59
    LT              shift and go to state 60
    GE              shift and go to state 61
    LE              shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 69

    comparador                     shift and go to state 54
    operadorLogico                 shift and go to state 55
    operator                       shift and go to state 56

state 30

    (97) for_statement -> FOR block .

    TYPE            reduce using rule 97 (for_statement -> FOR block .)
    IDENTIFIER      reduce using rule 97 (for_statement -> FOR block .)
    FOR             reduce using rule 97 (for_statement -> FOR block .)
    CONST           reduce using rule 97 (for_statement -> FOR block .)
    FUNC            reduce using rule 97 (for_statement -> FOR block .)
    IMPORT          reduce using rule 97 (for_statement -> FOR block .)
    $end            reduce using rule 97 (for_statement -> FOR block .)
    VAR             reduce using rule 97 (for_statement -> FOR block .)
    PACKAGE         reduce using rule 97 (for_statement -> FOR block .)
    SWITCH          reduce using rule 97 (for_statement -> FOR block .)
    IF              reduce using rule 97 (for_statement -> FOR block .)
    RETURN          reduce using rule 97 (for_statement -> FOR block .)
    RBRACE          reduce using rule 97 (for_statement -> FOR block .)
    CASE            reduce using rule 97 (for_statement -> FOR block .)
    DEFAULT         reduce using rule 97 (for_statement -> FOR block .)


state 31

    (95) shortAssignment -> identifier_list . DECLARE_ASSIGN expression

    DECLARE_ASSIGN  shift and go to state 70


state 32

    (99) block -> LBRACE . sentencias RBRACE
    (100) block -> LBRACE . RBRACE
    (21) sentencias -> . sentencia
    (22) sentencias -> . sentencia sentencias
    (23) sentencia -> . assignment
    (24) sentencia -> . input
    (25) sentencia -> . llamarFuncion
    (26) sentencia -> . print_statement
    (27) sentencia -> . struct_definition
    (28) sentencia -> . for_statement
    (29) sentencia -> . package
    (30) sentencia -> . import
    (31) sentencia -> . switch
    (32) sentencia -> . map
    (33) sentencia -> . if_statement
    (34) sentencia -> . return_statement
    (37) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (38) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (39) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (35) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (86) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (87) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (92) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (96) for_statement -> . FOR condicion block
    (97) for_statement -> . FOR block
    (5) package -> . PACKAGE MAIN
    (85) import -> . IMPORT STRING
    (61) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (66) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (67) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (117) if_statement -> . IF condicion_compleja block
    (118) if_statement -> . IF condicion_compleja block ELSE block
    (77) return_statement -> . RETURN expression

    RBRACE          shift and go to state 72
    IDENTIFIER      shift and go to state 86
    VAR             shift and go to state 87
    TYPE            shift and go to state 14
    FOR             shift and go to state 16
    PACKAGE         shift and go to state 4
    IMPORT          shift and go to state 19
    SWITCH          shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90

    sentencias                     shift and go to state 71
    sentencia                      shift and go to state 73
    assignment                     shift and go to state 74
    input                          shift and go to state 75
    llamarFuncion                  shift and go to state 76
    print_statement                shift and go to state 77
    struct_definition              shift and go to state 78
    for_statement                  shift and go to state 79
    package                        shift and go to state 80
    import                         shift and go to state 81
    switch                         shift and go to state 82
    map                            shift and go to state 83
    if_statement                   shift and go to state 84
    return_statement               shift and go to state 85

state 33

    (93) identifier_list -> IDENTIFIER .
    (94) identifier_list -> IDENTIFIER . COMMA identifier_list
    (102) expression -> IDENTIFIER .

    DECLARE_ASSIGN  reduce using rule 93 (identifier_list -> IDENTIFIER .)
    COMMA           shift and go to state 91
    EQ              reduce using rule 102 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 102 (expression -> IDENTIFIER .)
    GT              reduce using rule 102 (expression -> IDENTIFIER .)
    LT              reduce using rule 102 (expression -> IDENTIFIER .)
    GE              reduce using rule 102 (expression -> IDENTIFIER .)
    LE              reduce using rule 102 (expression -> IDENTIFIER .)
    AND             reduce using rule 102 (expression -> IDENTIFIER .)
    OR              reduce using rule 102 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 102 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 102 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 102 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 102 (expression -> IDENTIFIER .)
    MOD             reduce using rule 102 (expression -> IDENTIFIER .)


state 34

    (101) expression -> NUMBER .

    EQ              reduce using rule 101 (expression -> NUMBER .)
    NEQ             reduce using rule 101 (expression -> NUMBER .)
    GT              reduce using rule 101 (expression -> NUMBER .)
    LT              reduce using rule 101 (expression -> NUMBER .)
    GE              reduce using rule 101 (expression -> NUMBER .)
    LE              reduce using rule 101 (expression -> NUMBER .)
    AND             reduce using rule 101 (expression -> NUMBER .)
    OR              reduce using rule 101 (expression -> NUMBER .)
    PLUS            reduce using rule 101 (expression -> NUMBER .)
    MINUS           reduce using rule 101 (expression -> NUMBER .)
    TIMES           reduce using rule 101 (expression -> NUMBER .)
    DIVIDE          reduce using rule 101 (expression -> NUMBER .)
    MOD             reduce using rule 101 (expression -> NUMBER .)
    RPAREN          reduce using rule 101 (expression -> NUMBER .)
    LBRACE          reduce using rule 101 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 101 (expression -> NUMBER .)
    IDENTIFIER      reduce using rule 101 (expression -> NUMBER .)
    VAR             reduce using rule 101 (expression -> NUMBER .)
    TYPE            reduce using rule 101 (expression -> NUMBER .)
    FOR             reduce using rule 101 (expression -> NUMBER .)
    PACKAGE         reduce using rule 101 (expression -> NUMBER .)
    IMPORT          reduce using rule 101 (expression -> NUMBER .)
    SWITCH          reduce using rule 101 (expression -> NUMBER .)
    IF              reduce using rule 101 (expression -> NUMBER .)
    RETURN          reduce using rule 101 (expression -> NUMBER .)
    RBRACE          reduce using rule 101 (expression -> NUMBER .)
    CASE            reduce using rule 101 (expression -> NUMBER .)
    DEFAULT         reduce using rule 101 (expression -> NUMBER .)
    CONST           reduce using rule 101 (expression -> NUMBER .)
    FUNC            reduce using rule 101 (expression -> NUMBER .)
    $end            reduce using rule 101 (expression -> NUMBER .)
    COMMA           reduce using rule 101 (expression -> NUMBER .)
    COLON           reduce using rule 101 (expression -> NUMBER .)


state 35

    (103) expression -> RUNE .

    EQ              reduce using rule 103 (expression -> RUNE .)
    NEQ             reduce using rule 103 (expression -> RUNE .)
    GT              reduce using rule 103 (expression -> RUNE .)
    LT              reduce using rule 103 (expression -> RUNE .)
    GE              reduce using rule 103 (expression -> RUNE .)
    LE              reduce using rule 103 (expression -> RUNE .)
    AND             reduce using rule 103 (expression -> RUNE .)
    OR              reduce using rule 103 (expression -> RUNE .)
    PLUS            reduce using rule 103 (expression -> RUNE .)
    MINUS           reduce using rule 103 (expression -> RUNE .)
    TIMES           reduce using rule 103 (expression -> RUNE .)
    DIVIDE          reduce using rule 103 (expression -> RUNE .)
    MOD             reduce using rule 103 (expression -> RUNE .)
    RPAREN          reduce using rule 103 (expression -> RUNE .)
    LBRACE          reduce using rule 103 (expression -> RUNE .)
    SEMICOLON       reduce using rule 103 (expression -> RUNE .)
    IDENTIFIER      reduce using rule 103 (expression -> RUNE .)
    VAR             reduce using rule 103 (expression -> RUNE .)
    TYPE            reduce using rule 103 (expression -> RUNE .)
    FOR             reduce using rule 103 (expression -> RUNE .)
    PACKAGE         reduce using rule 103 (expression -> RUNE .)
    IMPORT          reduce using rule 103 (expression -> RUNE .)
    SWITCH          reduce using rule 103 (expression -> RUNE .)
    IF              reduce using rule 103 (expression -> RUNE .)
    RETURN          reduce using rule 103 (expression -> RUNE .)
    RBRACE          reduce using rule 103 (expression -> RUNE .)
    CASE            reduce using rule 103 (expression -> RUNE .)
    DEFAULT         reduce using rule 103 (expression -> RUNE .)
    CONST           reduce using rule 103 (expression -> RUNE .)
    FUNC            reduce using rule 103 (expression -> RUNE .)
    $end            reduce using rule 103 (expression -> RUNE .)
    COMMA           reduce using rule 103 (expression -> RUNE .)
    COLON           reduce using rule 103 (expression -> RUNE .)


state 36

    (104) expression -> STRING .

    EQ              reduce using rule 104 (expression -> STRING .)
    NEQ             reduce using rule 104 (expression -> STRING .)
    GT              reduce using rule 104 (expression -> STRING .)
    LT              reduce using rule 104 (expression -> STRING .)
    GE              reduce using rule 104 (expression -> STRING .)
    LE              reduce using rule 104 (expression -> STRING .)
    AND             reduce using rule 104 (expression -> STRING .)
    OR              reduce using rule 104 (expression -> STRING .)
    PLUS            reduce using rule 104 (expression -> STRING .)
    MINUS           reduce using rule 104 (expression -> STRING .)
    TIMES           reduce using rule 104 (expression -> STRING .)
    DIVIDE          reduce using rule 104 (expression -> STRING .)
    MOD             reduce using rule 104 (expression -> STRING .)
    RPAREN          reduce using rule 104 (expression -> STRING .)
    LBRACE          reduce using rule 104 (expression -> STRING .)
    SEMICOLON       reduce using rule 104 (expression -> STRING .)
    IDENTIFIER      reduce using rule 104 (expression -> STRING .)
    VAR             reduce using rule 104 (expression -> STRING .)
    TYPE            reduce using rule 104 (expression -> STRING .)
    FOR             reduce using rule 104 (expression -> STRING .)
    PACKAGE         reduce using rule 104 (expression -> STRING .)
    IMPORT          reduce using rule 104 (expression -> STRING .)
    SWITCH          reduce using rule 104 (expression -> STRING .)
    IF              reduce using rule 104 (expression -> STRING .)
    RETURN          reduce using rule 104 (expression -> STRING .)
    RBRACE          reduce using rule 104 (expression -> STRING .)
    CASE            reduce using rule 104 (expression -> STRING .)
    DEFAULT         reduce using rule 104 (expression -> STRING .)
    CONST           reduce using rule 104 (expression -> STRING .)
    FUNC            reduce using rule 104 (expression -> STRING .)
    $end            reduce using rule 104 (expression -> STRING .)
    COMMA           reduce using rule 104 (expression -> STRING .)
    COLON           reduce using rule 104 (expression -> STRING .)


state 37

    (105) expression -> RAW_STRING .

    EQ              reduce using rule 105 (expression -> RAW_STRING .)
    NEQ             reduce using rule 105 (expression -> RAW_STRING .)
    GT              reduce using rule 105 (expression -> RAW_STRING .)
    LT              reduce using rule 105 (expression -> RAW_STRING .)
    GE              reduce using rule 105 (expression -> RAW_STRING .)
    LE              reduce using rule 105 (expression -> RAW_STRING .)
    AND             reduce using rule 105 (expression -> RAW_STRING .)
    OR              reduce using rule 105 (expression -> RAW_STRING .)
    PLUS            reduce using rule 105 (expression -> RAW_STRING .)
    MINUS           reduce using rule 105 (expression -> RAW_STRING .)
    TIMES           reduce using rule 105 (expression -> RAW_STRING .)
    DIVIDE          reduce using rule 105 (expression -> RAW_STRING .)
    MOD             reduce using rule 105 (expression -> RAW_STRING .)
    RPAREN          reduce using rule 105 (expression -> RAW_STRING .)
    LBRACE          reduce using rule 105 (expression -> RAW_STRING .)
    SEMICOLON       reduce using rule 105 (expression -> RAW_STRING .)
    IDENTIFIER      reduce using rule 105 (expression -> RAW_STRING .)
    VAR             reduce using rule 105 (expression -> RAW_STRING .)
    TYPE            reduce using rule 105 (expression -> RAW_STRING .)
    FOR             reduce using rule 105 (expression -> RAW_STRING .)
    PACKAGE         reduce using rule 105 (expression -> RAW_STRING .)
    IMPORT          reduce using rule 105 (expression -> RAW_STRING .)
    SWITCH          reduce using rule 105 (expression -> RAW_STRING .)
    IF              reduce using rule 105 (expression -> RAW_STRING .)
    RETURN          reduce using rule 105 (expression -> RAW_STRING .)
    RBRACE          reduce using rule 105 (expression -> RAW_STRING .)
    CASE            reduce using rule 105 (expression -> RAW_STRING .)
    DEFAULT         reduce using rule 105 (expression -> RAW_STRING .)
    CONST           reduce using rule 105 (expression -> RAW_STRING .)
    FUNC            reduce using rule 105 (expression -> RAW_STRING .)
    $end            reduce using rule 105 (expression -> RAW_STRING .)
    COMMA           reduce using rule 105 (expression -> RAW_STRING .)
    COLON           reduce using rule 105 (expression -> RAW_STRING .)


state 38

    (106) expression -> TRUE .

    EQ              reduce using rule 106 (expression -> TRUE .)
    NEQ             reduce using rule 106 (expression -> TRUE .)
    GT              reduce using rule 106 (expression -> TRUE .)
    LT              reduce using rule 106 (expression -> TRUE .)
    GE              reduce using rule 106 (expression -> TRUE .)
    LE              reduce using rule 106 (expression -> TRUE .)
    AND             reduce using rule 106 (expression -> TRUE .)
    OR              reduce using rule 106 (expression -> TRUE .)
    PLUS            reduce using rule 106 (expression -> TRUE .)
    MINUS           reduce using rule 106 (expression -> TRUE .)
    TIMES           reduce using rule 106 (expression -> TRUE .)
    DIVIDE          reduce using rule 106 (expression -> TRUE .)
    MOD             reduce using rule 106 (expression -> TRUE .)
    RPAREN          reduce using rule 106 (expression -> TRUE .)
    LBRACE          reduce using rule 106 (expression -> TRUE .)
    SEMICOLON       reduce using rule 106 (expression -> TRUE .)
    IDENTIFIER      reduce using rule 106 (expression -> TRUE .)
    VAR             reduce using rule 106 (expression -> TRUE .)
    TYPE            reduce using rule 106 (expression -> TRUE .)
    FOR             reduce using rule 106 (expression -> TRUE .)
    PACKAGE         reduce using rule 106 (expression -> TRUE .)
    IMPORT          reduce using rule 106 (expression -> TRUE .)
    SWITCH          reduce using rule 106 (expression -> TRUE .)
    IF              reduce using rule 106 (expression -> TRUE .)
    RETURN          reduce using rule 106 (expression -> TRUE .)
    RBRACE          reduce using rule 106 (expression -> TRUE .)
    CASE            reduce using rule 106 (expression -> TRUE .)
    DEFAULT         reduce using rule 106 (expression -> TRUE .)
    CONST           reduce using rule 106 (expression -> TRUE .)
    FUNC            reduce using rule 106 (expression -> TRUE .)
    $end            reduce using rule 106 (expression -> TRUE .)
    COMMA           reduce using rule 106 (expression -> TRUE .)
    COLON           reduce using rule 106 (expression -> TRUE .)


state 39

    (107) expression -> FALSE .

    EQ              reduce using rule 107 (expression -> FALSE .)
    NEQ             reduce using rule 107 (expression -> FALSE .)
    GT              reduce using rule 107 (expression -> FALSE .)
    LT              reduce using rule 107 (expression -> FALSE .)
    GE              reduce using rule 107 (expression -> FALSE .)
    LE              reduce using rule 107 (expression -> FALSE .)
    AND             reduce using rule 107 (expression -> FALSE .)
    OR              reduce using rule 107 (expression -> FALSE .)
    PLUS            reduce using rule 107 (expression -> FALSE .)
    MINUS           reduce using rule 107 (expression -> FALSE .)
    TIMES           reduce using rule 107 (expression -> FALSE .)
    DIVIDE          reduce using rule 107 (expression -> FALSE .)
    MOD             reduce using rule 107 (expression -> FALSE .)
    RPAREN          reduce using rule 107 (expression -> FALSE .)
    LBRACE          reduce using rule 107 (expression -> FALSE .)
    SEMICOLON       reduce using rule 107 (expression -> FALSE .)
    IDENTIFIER      reduce using rule 107 (expression -> FALSE .)
    VAR             reduce using rule 107 (expression -> FALSE .)
    TYPE            reduce using rule 107 (expression -> FALSE .)
    FOR             reduce using rule 107 (expression -> FALSE .)
    PACKAGE         reduce using rule 107 (expression -> FALSE .)
    IMPORT          reduce using rule 107 (expression -> FALSE .)
    SWITCH          reduce using rule 107 (expression -> FALSE .)
    IF              reduce using rule 107 (expression -> FALSE .)
    RETURN          reduce using rule 107 (expression -> FALSE .)
    RBRACE          reduce using rule 107 (expression -> FALSE .)
    CASE            reduce using rule 107 (expression -> FALSE .)
    DEFAULT         reduce using rule 107 (expression -> FALSE .)
    CONST           reduce using rule 107 (expression -> FALSE .)
    FUNC            reduce using rule 107 (expression -> FALSE .)
    $end            reduce using rule 107 (expression -> FALSE .)
    COMMA           reduce using rule 107 (expression -> FALSE .)
    COLON           reduce using rule 107 (expression -> FALSE .)


state 40

    (108) expression -> NIL .

    EQ              reduce using rule 108 (expression -> NIL .)
    NEQ             reduce using rule 108 (expression -> NIL .)
    GT              reduce using rule 108 (expression -> NIL .)
    LT              reduce using rule 108 (expression -> NIL .)
    GE              reduce using rule 108 (expression -> NIL .)
    LE              reduce using rule 108 (expression -> NIL .)
    AND             reduce using rule 108 (expression -> NIL .)
    OR              reduce using rule 108 (expression -> NIL .)
    PLUS            reduce using rule 108 (expression -> NIL .)
    MINUS           reduce using rule 108 (expression -> NIL .)
    TIMES           reduce using rule 108 (expression -> NIL .)
    DIVIDE          reduce using rule 108 (expression -> NIL .)
    MOD             reduce using rule 108 (expression -> NIL .)
    RPAREN          reduce using rule 108 (expression -> NIL .)
    LBRACE          reduce using rule 108 (expression -> NIL .)
    SEMICOLON       reduce using rule 108 (expression -> NIL .)
    IDENTIFIER      reduce using rule 108 (expression -> NIL .)
    VAR             reduce using rule 108 (expression -> NIL .)
    TYPE            reduce using rule 108 (expression -> NIL .)
    FOR             reduce using rule 108 (expression -> NIL .)
    PACKAGE         reduce using rule 108 (expression -> NIL .)
    IMPORT          reduce using rule 108 (expression -> NIL .)
    SWITCH          reduce using rule 108 (expression -> NIL .)
    IF              reduce using rule 108 (expression -> NIL .)
    RETURN          reduce using rule 108 (expression -> NIL .)
    RBRACE          reduce using rule 108 (expression -> NIL .)
    CASE            reduce using rule 108 (expression -> NIL .)
    DEFAULT         reduce using rule 108 (expression -> NIL .)
    CONST           reduce using rule 108 (expression -> NIL .)
    FUNC            reduce using rule 108 (expression -> NIL .)
    $end            reduce using rule 108 (expression -> NIL .)
    COMMA           reduce using rule 108 (expression -> NIL .)
    COLON           reduce using rule 108 (expression -> NIL .)


state 41

    (115) expression -> MINUS . expression
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (101) expression -> . NUMBER
    (102) expression -> . IDENTIFIER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . expression operator expression
    (115) expression -> . MINUS expression
    (116) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 34
    IDENTIFIER      shift and go to state 93
    RUNE            shift and go to state 35
    STRING          shift and go to state 36
    RAW_STRING      shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NIL             shift and go to state 40
    MINUS           shift and go to state 41
    LPAREN          shift and go to state 42

    expression                     shift and go to state 92

state 42

    (116) expression -> LPAREN . expression RPAREN
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (101) expression -> . NUMBER
    (102) expression -> . IDENTIFIER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . expression operator expression
    (115) expression -> . MINUS expression
    (116) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 34
    IDENTIFIER      shift and go to state 93
    RUNE            shift and go to state 35
    STRING          shift and go to state 36
    RAW_STRING      shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NIL             shift and go to state 40
    MINUS           shift and go to state 41
    LPAREN          shift and go to state 42

    expression                     shift and go to state 94

state 43

    (18) const_declaration -> CONST IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 95


state 44

    (74) function -> FUNC IDENTIFIER . LPAREN params_opt RPAREN return_type block
    (75) function -> FUNC IDENTIFIER . LPAREN params_opt RPAREN return_type LBRACE sentencias RETURN expression RBRACE

    LPAREN          shift and go to state 96


state 45

    (91) method_definition -> FUNC LPAREN . IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (119) function_literal -> FUNC LPAREN . parameters RPAREN return_type block
    (120) parameters -> . parameters COMMA parameter
    (121) parameters -> . parameter
    (122) parameters -> . empty
    (123) parameter -> . IDENTIFIER DATATYPE
    (124) parameter -> . IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE
    (60) empty -> .

    IDENTIFIER      shift and go to state 97
    RPAREN          reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)

    parameters                     shift and go to state 98
    parameter                      shift and go to state 99
    empty                          shift and go to state 100

state 46

    (76) function -> FUNC MAIN . LPAREN params_opt RPAREN block

    LPAREN          shift and go to state 101


state 47

    (85) import -> IMPORT STRING .

    TYPE            reduce using rule 85 (import -> IMPORT STRING .)
    IDENTIFIER      reduce using rule 85 (import -> IMPORT STRING .)
    FOR             reduce using rule 85 (import -> IMPORT STRING .)
    CONST           reduce using rule 85 (import -> IMPORT STRING .)
    FUNC            reduce using rule 85 (import -> IMPORT STRING .)
    IMPORT          reduce using rule 85 (import -> IMPORT STRING .)
    $end            reduce using rule 85 (import -> IMPORT STRING .)
    VAR             reduce using rule 85 (import -> IMPORT STRING .)
    PACKAGE         reduce using rule 85 (import -> IMPORT STRING .)
    SWITCH          reduce using rule 85 (import -> IMPORT STRING .)
    IF              reduce using rule 85 (import -> IMPORT STRING .)
    RETURN          reduce using rule 85 (import -> IMPORT STRING .)
    RBRACE          reduce using rule 85 (import -> IMPORT STRING .)
    CASE            reduce using rule 85 (import -> IMPORT STRING .)
    DEFAULT         reduce using rule 85 (import -> IMPORT STRING .)


state 48

    (1) program -> package import_list declaration_list .
    (9) declaration_list -> declaration_list . declaration
    (10) declaration -> . struct_definition
    (11) declaration -> . print_statement
    (12) declaration -> . for_statement
    (13) declaration -> . const_declaration
    (14) declaration -> . function
    (15) declaration -> . method_definition
    (16) declaration -> . function_literal
    (17) declaration -> . import
    (87) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (86) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (92) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (96) for_statement -> . FOR condicion block
    (97) for_statement -> . FOR block
    (18) const_declaration -> . CONST IDENTIFIER ASSIGN expression
    (74) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block
    (75) function -> . FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE sentencias RETURN expression RBRACE
    (76) function -> . FUNC MAIN LPAREN params_opt RPAREN block
    (91) method_definition -> . FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (119) function_literal -> . FUNC LPAREN parameters RPAREN return_type block
    (85) import -> . IMPORT STRING

    $end            reduce using rule 1 (program -> package import_list declaration_list .)
    TYPE            shift and go to state 14
    IDENTIFIER      shift and go to state 15
    FOR             shift and go to state 16
    CONST           shift and go to state 17
    FUNC            shift and go to state 18
    IMPORT          shift and go to state 19

    declaration                    shift and go to state 23
    struct_definition              shift and go to state 6
    print_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    const_declaration              shift and go to state 9
    function                       shift and go to state 10
    method_definition              shift and go to state 11
    function_literal               shift and go to state 12
    import                         shift and go to state 13

state 49

    (20) import_list -> import_list import .
    (17) declaration -> import .

  ! reduce/reduce conflict for TYPE resolved using rule 17 (declaration -> import .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 17 (declaration -> import .)
  ! reduce/reduce conflict for FOR resolved using rule 17 (declaration -> import .)
  ! reduce/reduce conflict for CONST resolved using rule 17 (declaration -> import .)
  ! reduce/reduce conflict for FUNC resolved using rule 17 (declaration -> import .)
  ! reduce/reduce conflict for IMPORT resolved using rule 17 (declaration -> import .)
    TYPE            reduce using rule 17 (declaration -> import .)
    IDENTIFIER      reduce using rule 17 (declaration -> import .)
    FOR             reduce using rule 17 (declaration -> import .)
    CONST           reduce using rule 17 (declaration -> import .)
    FUNC            reduce using rule 17 (declaration -> import .)
    IMPORT          reduce using rule 17 (declaration -> import .)
    $end            reduce using rule 17 (declaration -> import .)

  ! IMPORT          [ reduce using rule 20 (import_list -> import_list import .) ]
  ! TYPE            [ reduce using rule 20 (import_list -> import_list import .) ]
  ! IDENTIFIER      [ reduce using rule 20 (import_list -> import_list import .) ]
  ! FOR             [ reduce using rule 20 (import_list -> import_list import .) ]
  ! CONST           [ reduce using rule 20 (import_list -> import_list import .) ]
  ! FUNC            [ reduce using rule 20 (import_list -> import_list import .) ]


state 50

    (87) struct_definition -> TYPE IDENTIFIER STRUCT . LBRACE struct_fields RBRACE

    LBRACE          shift and go to state 102


state 51

    (86) print_statement -> IDENTIFIER DOT IDENTIFIER . LPAREN argument_list_opt RPAREN

    LPAREN          shift and go to state 103


state 52

    (92) for_statement -> FOR shortAssignment SEMICOLON . condicion SEMICOLON expression block
    (49) condicion -> . expression comparador expression
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (101) expression -> . NUMBER
    (102) expression -> . IDENTIFIER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . expression operator expression
    (115) expression -> . MINUS expression
    (116) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 34
    IDENTIFIER      shift and go to state 93
    RUNE            shift and go to state 35
    STRING          shift and go to state 36
    RAW_STRING      shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NIL             shift and go to state 40
    MINUS           shift and go to state 41
    LPAREN          shift and go to state 42

    condicion                      shift and go to state 104
    expression                     shift and go to state 29

state 53

    (96) for_statement -> FOR condicion block .

    TYPE            reduce using rule 96 (for_statement -> FOR condicion block .)
    IDENTIFIER      reduce using rule 96 (for_statement -> FOR condicion block .)
    FOR             reduce using rule 96 (for_statement -> FOR condicion block .)
    CONST           reduce using rule 96 (for_statement -> FOR condicion block .)
    FUNC            reduce using rule 96 (for_statement -> FOR condicion block .)
    IMPORT          reduce using rule 96 (for_statement -> FOR condicion block .)
    $end            reduce using rule 96 (for_statement -> FOR condicion block .)
    VAR             reduce using rule 96 (for_statement -> FOR condicion block .)
    PACKAGE         reduce using rule 96 (for_statement -> FOR condicion block .)
    SWITCH          reduce using rule 96 (for_statement -> FOR condicion block .)
    IF              reduce using rule 96 (for_statement -> FOR condicion block .)
    RETURN          reduce using rule 96 (for_statement -> FOR condicion block .)
    RBRACE          reduce using rule 96 (for_statement -> FOR condicion block .)
    CASE            reduce using rule 96 (for_statement -> FOR condicion block .)
    DEFAULT         reduce using rule 96 (for_statement -> FOR condicion block .)


state 54

    (49) condicion -> expression comparador . expression
    (43) expression -> expression comparador . expression
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (101) expression -> . NUMBER
    (102) expression -> . IDENTIFIER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . expression operator expression
    (115) expression -> . MINUS expression
    (116) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 34
    IDENTIFIER      shift and go to state 93
    RUNE            shift and go to state 35
    STRING          shift and go to state 36
    RAW_STRING      shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NIL             shift and go to state 40
    MINUS           shift and go to state 41
    LPAREN          shift and go to state 42

    expression                     shift and go to state 105

state 55

    (44) expression -> expression operadorLogico . expression
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (101) expression -> . NUMBER
    (102) expression -> . IDENTIFIER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . expression operator expression
    (115) expression -> . MINUS expression
    (116) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 34
    IDENTIFIER      shift and go to state 93
    RUNE            shift and go to state 35
    STRING          shift and go to state 36
    RAW_STRING      shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NIL             shift and go to state 40
    MINUS           shift and go to state 41
    LPAREN          shift and go to state 42

    expression                     shift and go to state 106

state 56

    (109) expression -> expression operator . expression
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (101) expression -> . NUMBER
    (102) expression -> . IDENTIFIER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . expression operator expression
    (115) expression -> . MINUS expression
    (116) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 34
    IDENTIFIER      shift and go to state 93
    RUNE            shift and go to state 35
    STRING          shift and go to state 36
    RAW_STRING      shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NIL             shift and go to state 40
    MINUS           shift and go to state 41
    LPAREN          shift and go to state 42

    expression                     shift and go to state 107

state 57

    (54) comparador -> EQ .

    NUMBER          reduce using rule 54 (comparador -> EQ .)
    IDENTIFIER      reduce using rule 54 (comparador -> EQ .)
    RUNE            reduce using rule 54 (comparador -> EQ .)
    STRING          reduce using rule 54 (comparador -> EQ .)
    RAW_STRING      reduce using rule 54 (comparador -> EQ .)
    TRUE            reduce using rule 54 (comparador -> EQ .)
    FALSE           reduce using rule 54 (comparador -> EQ .)
    NIL             reduce using rule 54 (comparador -> EQ .)
    MINUS           reduce using rule 54 (comparador -> EQ .)
    LPAREN          reduce using rule 54 (comparador -> EQ .)


state 58

    (55) comparador -> NEQ .

    NUMBER          reduce using rule 55 (comparador -> NEQ .)
    IDENTIFIER      reduce using rule 55 (comparador -> NEQ .)
    RUNE            reduce using rule 55 (comparador -> NEQ .)
    STRING          reduce using rule 55 (comparador -> NEQ .)
    RAW_STRING      reduce using rule 55 (comparador -> NEQ .)
    TRUE            reduce using rule 55 (comparador -> NEQ .)
    FALSE           reduce using rule 55 (comparador -> NEQ .)
    NIL             reduce using rule 55 (comparador -> NEQ .)
    MINUS           reduce using rule 55 (comparador -> NEQ .)
    LPAREN          reduce using rule 55 (comparador -> NEQ .)


state 59

    (56) comparador -> GT .

    NUMBER          reduce using rule 56 (comparador -> GT .)
    IDENTIFIER      reduce using rule 56 (comparador -> GT .)
    RUNE            reduce using rule 56 (comparador -> GT .)
    STRING          reduce using rule 56 (comparador -> GT .)
    RAW_STRING      reduce using rule 56 (comparador -> GT .)
    TRUE            reduce using rule 56 (comparador -> GT .)
    FALSE           reduce using rule 56 (comparador -> GT .)
    NIL             reduce using rule 56 (comparador -> GT .)
    MINUS           reduce using rule 56 (comparador -> GT .)
    LPAREN          reduce using rule 56 (comparador -> GT .)


state 60

    (57) comparador -> LT .

    NUMBER          reduce using rule 57 (comparador -> LT .)
    IDENTIFIER      reduce using rule 57 (comparador -> LT .)
    RUNE            reduce using rule 57 (comparador -> LT .)
    STRING          reduce using rule 57 (comparador -> LT .)
    RAW_STRING      reduce using rule 57 (comparador -> LT .)
    TRUE            reduce using rule 57 (comparador -> LT .)
    FALSE           reduce using rule 57 (comparador -> LT .)
    NIL             reduce using rule 57 (comparador -> LT .)
    MINUS           reduce using rule 57 (comparador -> LT .)
    LPAREN          reduce using rule 57 (comparador -> LT .)


state 61

    (58) comparador -> GE .

    NUMBER          reduce using rule 58 (comparador -> GE .)
    IDENTIFIER      reduce using rule 58 (comparador -> GE .)
    RUNE            reduce using rule 58 (comparador -> GE .)
    STRING          reduce using rule 58 (comparador -> GE .)
    RAW_STRING      reduce using rule 58 (comparador -> GE .)
    TRUE            reduce using rule 58 (comparador -> GE .)
    FALSE           reduce using rule 58 (comparador -> GE .)
    NIL             reduce using rule 58 (comparador -> GE .)
    MINUS           reduce using rule 58 (comparador -> GE .)
    LPAREN          reduce using rule 58 (comparador -> GE .)


state 62

    (59) comparador -> LE .

    NUMBER          reduce using rule 59 (comparador -> LE .)
    IDENTIFIER      reduce using rule 59 (comparador -> LE .)
    RUNE            reduce using rule 59 (comparador -> LE .)
    STRING          reduce using rule 59 (comparador -> LE .)
    RAW_STRING      reduce using rule 59 (comparador -> LE .)
    TRUE            reduce using rule 59 (comparador -> LE .)
    FALSE           reduce using rule 59 (comparador -> LE .)
    NIL             reduce using rule 59 (comparador -> LE .)
    MINUS           reduce using rule 59 (comparador -> LE .)
    LPAREN          reduce using rule 59 (comparador -> LE .)


state 63

    (52) operadorLogico -> AND .

    NUMBER          reduce using rule 52 (operadorLogico -> AND .)
    IDENTIFIER      reduce using rule 52 (operadorLogico -> AND .)
    RUNE            reduce using rule 52 (operadorLogico -> AND .)
    STRING          reduce using rule 52 (operadorLogico -> AND .)
    RAW_STRING      reduce using rule 52 (operadorLogico -> AND .)
    TRUE            reduce using rule 52 (operadorLogico -> AND .)
    FALSE           reduce using rule 52 (operadorLogico -> AND .)
    NIL             reduce using rule 52 (operadorLogico -> AND .)
    MINUS           reduce using rule 52 (operadorLogico -> AND .)
    LPAREN          reduce using rule 52 (operadorLogico -> AND .)


state 64

    (53) operadorLogico -> OR .

    NUMBER          reduce using rule 53 (operadorLogico -> OR .)
    IDENTIFIER      reduce using rule 53 (operadorLogico -> OR .)
    RUNE            reduce using rule 53 (operadorLogico -> OR .)
    STRING          reduce using rule 53 (operadorLogico -> OR .)
    RAW_STRING      reduce using rule 53 (operadorLogico -> OR .)
    TRUE            reduce using rule 53 (operadorLogico -> OR .)
    FALSE           reduce using rule 53 (operadorLogico -> OR .)
    NIL             reduce using rule 53 (operadorLogico -> OR .)
    MINUS           reduce using rule 53 (operadorLogico -> OR .)
    LPAREN          reduce using rule 53 (operadorLogico -> OR .)


state 65

    (110) operator -> PLUS .

    NUMBER          reduce using rule 110 (operator -> PLUS .)
    IDENTIFIER      reduce using rule 110 (operator -> PLUS .)
    RUNE            reduce using rule 110 (operator -> PLUS .)
    STRING          reduce using rule 110 (operator -> PLUS .)
    RAW_STRING      reduce using rule 110 (operator -> PLUS .)
    TRUE            reduce using rule 110 (operator -> PLUS .)
    FALSE           reduce using rule 110 (operator -> PLUS .)
    NIL             reduce using rule 110 (operator -> PLUS .)
    MINUS           reduce using rule 110 (operator -> PLUS .)
    LPAREN          reduce using rule 110 (operator -> PLUS .)


state 66

    (111) operator -> MINUS .

    NUMBER          reduce using rule 111 (operator -> MINUS .)
    IDENTIFIER      reduce using rule 111 (operator -> MINUS .)
    RUNE            reduce using rule 111 (operator -> MINUS .)
    STRING          reduce using rule 111 (operator -> MINUS .)
    RAW_STRING      reduce using rule 111 (operator -> MINUS .)
    TRUE            reduce using rule 111 (operator -> MINUS .)
    FALSE           reduce using rule 111 (operator -> MINUS .)
    NIL             reduce using rule 111 (operator -> MINUS .)
    MINUS           reduce using rule 111 (operator -> MINUS .)
    LPAREN          reduce using rule 111 (operator -> MINUS .)


state 67

    (112) operator -> TIMES .

    NUMBER          reduce using rule 112 (operator -> TIMES .)
    IDENTIFIER      reduce using rule 112 (operator -> TIMES .)
    RUNE            reduce using rule 112 (operator -> TIMES .)
    STRING          reduce using rule 112 (operator -> TIMES .)
    RAW_STRING      reduce using rule 112 (operator -> TIMES .)
    TRUE            reduce using rule 112 (operator -> TIMES .)
    FALSE           reduce using rule 112 (operator -> TIMES .)
    NIL             reduce using rule 112 (operator -> TIMES .)
    MINUS           reduce using rule 112 (operator -> TIMES .)
    LPAREN          reduce using rule 112 (operator -> TIMES .)


state 68

    (113) operator -> DIVIDE .

    NUMBER          reduce using rule 113 (operator -> DIVIDE .)
    IDENTIFIER      reduce using rule 113 (operator -> DIVIDE .)
    RUNE            reduce using rule 113 (operator -> DIVIDE .)
    STRING          reduce using rule 113 (operator -> DIVIDE .)
    RAW_STRING      reduce using rule 113 (operator -> DIVIDE .)
    TRUE            reduce using rule 113 (operator -> DIVIDE .)
    FALSE           reduce using rule 113 (operator -> DIVIDE .)
    NIL             reduce using rule 113 (operator -> DIVIDE .)
    MINUS           reduce using rule 113 (operator -> DIVIDE .)
    LPAREN          reduce using rule 113 (operator -> DIVIDE .)


state 69

    (114) operator -> MOD .

    NUMBER          reduce using rule 114 (operator -> MOD .)
    IDENTIFIER      reduce using rule 114 (operator -> MOD .)
    RUNE            reduce using rule 114 (operator -> MOD .)
    STRING          reduce using rule 114 (operator -> MOD .)
    RAW_STRING      reduce using rule 114 (operator -> MOD .)
    TRUE            reduce using rule 114 (operator -> MOD .)
    FALSE           reduce using rule 114 (operator -> MOD .)
    NIL             reduce using rule 114 (operator -> MOD .)
    MINUS           reduce using rule 114 (operator -> MOD .)
    LPAREN          reduce using rule 114 (operator -> MOD .)


state 70

    (95) shortAssignment -> identifier_list DECLARE_ASSIGN . expression
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (101) expression -> . NUMBER
    (102) expression -> . IDENTIFIER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . expression operator expression
    (115) expression -> . MINUS expression
    (116) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 34
    IDENTIFIER      shift and go to state 93
    RUNE            shift and go to state 35
    STRING          shift and go to state 36
    RAW_STRING      shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NIL             shift and go to state 40
    MINUS           shift and go to state 41
    LPAREN          shift and go to state 42

    expression                     shift and go to state 108

state 71

    (99) block -> LBRACE sentencias . RBRACE

    RBRACE          shift and go to state 109


state 72

    (100) block -> LBRACE RBRACE .

    TYPE            reduce using rule 100 (block -> LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 100 (block -> LBRACE RBRACE .)
    FOR             reduce using rule 100 (block -> LBRACE RBRACE .)
    CONST           reduce using rule 100 (block -> LBRACE RBRACE .)
    FUNC            reduce using rule 100 (block -> LBRACE RBRACE .)
    IMPORT          reduce using rule 100 (block -> LBRACE RBRACE .)
    $end            reduce using rule 100 (block -> LBRACE RBRACE .)
    VAR             reduce using rule 100 (block -> LBRACE RBRACE .)
    PACKAGE         reduce using rule 100 (block -> LBRACE RBRACE .)
    SWITCH          reduce using rule 100 (block -> LBRACE RBRACE .)
    IF              reduce using rule 100 (block -> LBRACE RBRACE .)
    RETURN          reduce using rule 100 (block -> LBRACE RBRACE .)
    RBRACE          reduce using rule 100 (block -> LBRACE RBRACE .)
    CASE            reduce using rule 100 (block -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 100 (block -> LBRACE RBRACE .)
    ELSE            reduce using rule 100 (block -> LBRACE RBRACE .)


state 73

    (21) sentencias -> sentencia .
    (22) sentencias -> sentencia . sentencias
    (21) sentencias -> . sentencia
    (22) sentencias -> . sentencia sentencias
    (23) sentencia -> . assignment
    (24) sentencia -> . input
    (25) sentencia -> . llamarFuncion
    (26) sentencia -> . print_statement
    (27) sentencia -> . struct_definition
    (28) sentencia -> . for_statement
    (29) sentencia -> . package
    (30) sentencia -> . import
    (31) sentencia -> . switch
    (32) sentencia -> . map
    (33) sentencia -> . if_statement
    (34) sentencia -> . return_statement
    (37) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (38) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (39) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (35) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (86) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (87) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (92) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (96) for_statement -> . FOR condicion block
    (97) for_statement -> . FOR block
    (5) package -> . PACKAGE MAIN
    (85) import -> . IMPORT STRING
    (61) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (66) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (67) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (117) if_statement -> . IF condicion_compleja block
    (118) if_statement -> . IF condicion_compleja block ELSE block
    (77) return_statement -> . RETURN expression

  ! shift/reduce conflict for RETURN resolved as shift
    RBRACE          reduce using rule 21 (sentencias -> sentencia .)
    CASE            reduce using rule 21 (sentencias -> sentencia .)
    DEFAULT         reduce using rule 21 (sentencias -> sentencia .)
    IDENTIFIER      shift and go to state 86
    VAR             shift and go to state 87
    TYPE            shift and go to state 14
    FOR             shift and go to state 16
    PACKAGE         shift and go to state 4
    IMPORT          shift and go to state 19
    SWITCH          shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90

  ! RETURN          [ reduce using rule 21 (sentencias -> sentencia .) ]

    sentencia                      shift and go to state 73
    sentencias                     shift and go to state 110
    assignment                     shift and go to state 74
    input                          shift and go to state 75
    llamarFuncion                  shift and go to state 76
    print_statement                shift and go to state 77
    struct_definition              shift and go to state 78
    for_statement                  shift and go to state 79
    package                        shift and go to state 80
    import                         shift and go to state 81
    switch                         shift and go to state 82
    map                            shift and go to state 83
    if_statement                   shift and go to state 84
    return_statement               shift and go to state 85

state 74

    (23) sentencia -> assignment .

    IDENTIFIER      reduce using rule 23 (sentencia -> assignment .)
    VAR             reduce using rule 23 (sentencia -> assignment .)
    TYPE            reduce using rule 23 (sentencia -> assignment .)
    FOR             reduce using rule 23 (sentencia -> assignment .)
    PACKAGE         reduce using rule 23 (sentencia -> assignment .)
    IMPORT          reduce using rule 23 (sentencia -> assignment .)
    SWITCH          reduce using rule 23 (sentencia -> assignment .)
    IF              reduce using rule 23 (sentencia -> assignment .)
    RETURN          reduce using rule 23 (sentencia -> assignment .)
    RBRACE          reduce using rule 23 (sentencia -> assignment .)
    CASE            reduce using rule 23 (sentencia -> assignment .)
    DEFAULT         reduce using rule 23 (sentencia -> assignment .)


state 75

    (24) sentencia -> input .

    IDENTIFIER      reduce using rule 24 (sentencia -> input .)
    VAR             reduce using rule 24 (sentencia -> input .)
    TYPE            reduce using rule 24 (sentencia -> input .)
    FOR             reduce using rule 24 (sentencia -> input .)
    PACKAGE         reduce using rule 24 (sentencia -> input .)
    IMPORT          reduce using rule 24 (sentencia -> input .)
    SWITCH          reduce using rule 24 (sentencia -> input .)
    IF              reduce using rule 24 (sentencia -> input .)
    RETURN          reduce using rule 24 (sentencia -> input .)
    RBRACE          reduce using rule 24 (sentencia -> input .)
    CASE            reduce using rule 24 (sentencia -> input .)
    DEFAULT         reduce using rule 24 (sentencia -> input .)


state 76

    (25) sentencia -> llamarFuncion .

    IDENTIFIER      reduce using rule 25 (sentencia -> llamarFuncion .)
    VAR             reduce using rule 25 (sentencia -> llamarFuncion .)
    TYPE            reduce using rule 25 (sentencia -> llamarFuncion .)
    FOR             reduce using rule 25 (sentencia -> llamarFuncion .)
    PACKAGE         reduce using rule 25 (sentencia -> llamarFuncion .)
    IMPORT          reduce using rule 25 (sentencia -> llamarFuncion .)
    SWITCH          reduce using rule 25 (sentencia -> llamarFuncion .)
    IF              reduce using rule 25 (sentencia -> llamarFuncion .)
    RETURN          reduce using rule 25 (sentencia -> llamarFuncion .)
    RBRACE          reduce using rule 25 (sentencia -> llamarFuncion .)
    CASE            reduce using rule 25 (sentencia -> llamarFuncion .)
    DEFAULT         reduce using rule 25 (sentencia -> llamarFuncion .)


state 77

    (26) sentencia -> print_statement .

    IDENTIFIER      reduce using rule 26 (sentencia -> print_statement .)
    VAR             reduce using rule 26 (sentencia -> print_statement .)
    TYPE            reduce using rule 26 (sentencia -> print_statement .)
    FOR             reduce using rule 26 (sentencia -> print_statement .)
    PACKAGE         reduce using rule 26 (sentencia -> print_statement .)
    IMPORT          reduce using rule 26 (sentencia -> print_statement .)
    SWITCH          reduce using rule 26 (sentencia -> print_statement .)
    IF              reduce using rule 26 (sentencia -> print_statement .)
    RETURN          reduce using rule 26 (sentencia -> print_statement .)
    RBRACE          reduce using rule 26 (sentencia -> print_statement .)
    CASE            reduce using rule 26 (sentencia -> print_statement .)
    DEFAULT         reduce using rule 26 (sentencia -> print_statement .)


state 78

    (27) sentencia -> struct_definition .

    IDENTIFIER      reduce using rule 27 (sentencia -> struct_definition .)
    VAR             reduce using rule 27 (sentencia -> struct_definition .)
    TYPE            reduce using rule 27 (sentencia -> struct_definition .)
    FOR             reduce using rule 27 (sentencia -> struct_definition .)
    PACKAGE         reduce using rule 27 (sentencia -> struct_definition .)
    IMPORT          reduce using rule 27 (sentencia -> struct_definition .)
    SWITCH          reduce using rule 27 (sentencia -> struct_definition .)
    IF              reduce using rule 27 (sentencia -> struct_definition .)
    RETURN          reduce using rule 27 (sentencia -> struct_definition .)
    RBRACE          reduce using rule 27 (sentencia -> struct_definition .)
    CASE            reduce using rule 27 (sentencia -> struct_definition .)
    DEFAULT         reduce using rule 27 (sentencia -> struct_definition .)


state 79

    (28) sentencia -> for_statement .

    IDENTIFIER      reduce using rule 28 (sentencia -> for_statement .)
    VAR             reduce using rule 28 (sentencia -> for_statement .)
    TYPE            reduce using rule 28 (sentencia -> for_statement .)
    FOR             reduce using rule 28 (sentencia -> for_statement .)
    PACKAGE         reduce using rule 28 (sentencia -> for_statement .)
    IMPORT          reduce using rule 28 (sentencia -> for_statement .)
    SWITCH          reduce using rule 28 (sentencia -> for_statement .)
    IF              reduce using rule 28 (sentencia -> for_statement .)
    RETURN          reduce using rule 28 (sentencia -> for_statement .)
    RBRACE          reduce using rule 28 (sentencia -> for_statement .)
    CASE            reduce using rule 28 (sentencia -> for_statement .)
    DEFAULT         reduce using rule 28 (sentencia -> for_statement .)


state 80

    (29) sentencia -> package .

    IDENTIFIER      reduce using rule 29 (sentencia -> package .)
    VAR             reduce using rule 29 (sentencia -> package .)
    TYPE            reduce using rule 29 (sentencia -> package .)
    FOR             reduce using rule 29 (sentencia -> package .)
    PACKAGE         reduce using rule 29 (sentencia -> package .)
    IMPORT          reduce using rule 29 (sentencia -> package .)
    SWITCH          reduce using rule 29 (sentencia -> package .)
    IF              reduce using rule 29 (sentencia -> package .)
    RETURN          reduce using rule 29 (sentencia -> package .)
    RBRACE          reduce using rule 29 (sentencia -> package .)
    CASE            reduce using rule 29 (sentencia -> package .)
    DEFAULT         reduce using rule 29 (sentencia -> package .)


state 81

    (30) sentencia -> import .

    IDENTIFIER      reduce using rule 30 (sentencia -> import .)
    VAR             reduce using rule 30 (sentencia -> import .)
    TYPE            reduce using rule 30 (sentencia -> import .)
    FOR             reduce using rule 30 (sentencia -> import .)
    PACKAGE         reduce using rule 30 (sentencia -> import .)
    IMPORT          reduce using rule 30 (sentencia -> import .)
    SWITCH          reduce using rule 30 (sentencia -> import .)
    IF              reduce using rule 30 (sentencia -> import .)
    RETURN          reduce using rule 30 (sentencia -> import .)
    RBRACE          reduce using rule 30 (sentencia -> import .)
    CASE            reduce using rule 30 (sentencia -> import .)
    DEFAULT         reduce using rule 30 (sentencia -> import .)


state 82

    (31) sentencia -> switch .

    IDENTIFIER      reduce using rule 31 (sentencia -> switch .)
    VAR             reduce using rule 31 (sentencia -> switch .)
    TYPE            reduce using rule 31 (sentencia -> switch .)
    FOR             reduce using rule 31 (sentencia -> switch .)
    PACKAGE         reduce using rule 31 (sentencia -> switch .)
    IMPORT          reduce using rule 31 (sentencia -> switch .)
    SWITCH          reduce using rule 31 (sentencia -> switch .)
    IF              reduce using rule 31 (sentencia -> switch .)
    RETURN          reduce using rule 31 (sentencia -> switch .)
    RBRACE          reduce using rule 31 (sentencia -> switch .)
    CASE            reduce using rule 31 (sentencia -> switch .)
    DEFAULT         reduce using rule 31 (sentencia -> switch .)


state 83

    (32) sentencia -> map .

    IDENTIFIER      reduce using rule 32 (sentencia -> map .)
    VAR             reduce using rule 32 (sentencia -> map .)
    TYPE            reduce using rule 32 (sentencia -> map .)
    FOR             reduce using rule 32 (sentencia -> map .)
    PACKAGE         reduce using rule 32 (sentencia -> map .)
    IMPORT          reduce using rule 32 (sentencia -> map .)
    SWITCH          reduce using rule 32 (sentencia -> map .)
    IF              reduce using rule 32 (sentencia -> map .)
    RETURN          reduce using rule 32 (sentencia -> map .)
    RBRACE          reduce using rule 32 (sentencia -> map .)
    CASE            reduce using rule 32 (sentencia -> map .)
    DEFAULT         reduce using rule 32 (sentencia -> map .)


state 84

    (33) sentencia -> if_statement .

    IDENTIFIER      reduce using rule 33 (sentencia -> if_statement .)
    VAR             reduce using rule 33 (sentencia -> if_statement .)
    TYPE            reduce using rule 33 (sentencia -> if_statement .)
    FOR             reduce using rule 33 (sentencia -> if_statement .)
    PACKAGE         reduce using rule 33 (sentencia -> if_statement .)
    IMPORT          reduce using rule 33 (sentencia -> if_statement .)
    SWITCH          reduce using rule 33 (sentencia -> if_statement .)
    IF              reduce using rule 33 (sentencia -> if_statement .)
    RETURN          reduce using rule 33 (sentencia -> if_statement .)
    RBRACE          reduce using rule 33 (sentencia -> if_statement .)
    CASE            reduce using rule 33 (sentencia -> if_statement .)
    DEFAULT         reduce using rule 33 (sentencia -> if_statement .)


state 85

    (34) sentencia -> return_statement .

    IDENTIFIER      reduce using rule 34 (sentencia -> return_statement .)
    VAR             reduce using rule 34 (sentencia -> return_statement .)
    TYPE            reduce using rule 34 (sentencia -> return_statement .)
    FOR             reduce using rule 34 (sentencia -> return_statement .)
    PACKAGE         reduce using rule 34 (sentencia -> return_statement .)
    IMPORT          reduce using rule 34 (sentencia -> return_statement .)
    SWITCH          reduce using rule 34 (sentencia -> return_statement .)
    IF              reduce using rule 34 (sentencia -> return_statement .)
    RETURN          reduce using rule 34 (sentencia -> return_statement .)
    RBRACE          reduce using rule 34 (sentencia -> return_statement .)
    CASE            reduce using rule 34 (sentencia -> return_statement .)
    DEFAULT         reduce using rule 34 (sentencia -> return_statement .)


state 86

    (37) assignment -> IDENTIFIER . DECLARE_ASSIGN expression
    (35) input -> IDENTIFIER . DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (40) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN
    (86) print_statement -> IDENTIFIER . DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (66) map -> IDENTIFIER . DECLARE_ASSIGN mapLiteral

    DECLARE_ASSIGN  shift and go to state 111
    DOT             shift and go to state 112
    LPAREN          shift and go to state 113


state 87

    (38) assignment -> VAR . IDENTIFIER DATATYPE ASSIGN expression
    (39) assignment -> VAR . IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (67) map -> VAR . IDENTIFIER ASSIGN mapLiteral

    IDENTIFIER      shift and go to state 114


state 88

    (61) switch -> SWITCH . expression LBRACE caseBlocks RBRACE
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (101) expression -> . NUMBER
    (102) expression -> . IDENTIFIER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . expression operator expression
    (115) expression -> . MINUS expression
    (116) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 34
    IDENTIFIER      shift and go to state 93
    RUNE            shift and go to state 35
    STRING          shift and go to state 36
    RAW_STRING      shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NIL             shift and go to state 40
    MINUS           shift and go to state 41
    LPAREN          shift and go to state 42

    expression                     shift and go to state 115

state 89

    (117) if_statement -> IF . condicion_compleja block
    (118) if_statement -> IF . condicion_compleja block ELSE block
    (50) condicion_compleja -> . condicion operadorLogico condicion
    (51) condicion_compleja -> . condicion operadorLogico condicion_compleja
    (49) condicion -> . expression comparador expression
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (101) expression -> . NUMBER
    (102) expression -> . IDENTIFIER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . expression operator expression
    (115) expression -> . MINUS expression
    (116) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 34
    IDENTIFIER      shift and go to state 93
    RUNE            shift and go to state 35
    STRING          shift and go to state 36
    RAW_STRING      shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NIL             shift and go to state 40
    MINUS           shift and go to state 41
    LPAREN          shift and go to state 42

    condicion_compleja             shift and go to state 116
    condicion                      shift and go to state 117
    expression                     shift and go to state 29

state 90

    (77) return_statement -> RETURN . expression
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (101) expression -> . NUMBER
    (102) expression -> . IDENTIFIER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . expression operator expression
    (115) expression -> . MINUS expression
    (116) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 34
    IDENTIFIER      shift and go to state 93
    RUNE            shift and go to state 35
    STRING          shift and go to state 36
    RAW_STRING      shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NIL             shift and go to state 40
    MINUS           shift and go to state 41
    LPAREN          shift and go to state 42

    expression                     shift and go to state 118

state 91

    (94) identifier_list -> IDENTIFIER COMMA . identifier_list
    (93) identifier_list -> . IDENTIFIER
    (94) identifier_list -> . IDENTIFIER COMMA identifier_list

    IDENTIFIER      shift and go to state 119

    identifier_list                shift and go to state 120

state 92

    (115) expression -> MINUS expression .
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (109) expression -> expression . operator expression
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (110) operator -> . PLUS
    (111) operator -> . MINUS
    (112) operator -> . TIMES
    (113) operator -> . DIVIDE
    (114) operator -> . MOD

    EQ              reduce using rule 115 (expression -> MINUS expression .)
    NEQ             reduce using rule 115 (expression -> MINUS expression .)
    GT              reduce using rule 115 (expression -> MINUS expression .)
    LT              reduce using rule 115 (expression -> MINUS expression .)
    GE              reduce using rule 115 (expression -> MINUS expression .)
    LE              reduce using rule 115 (expression -> MINUS expression .)
    AND             reduce using rule 115 (expression -> MINUS expression .)
    OR              reduce using rule 115 (expression -> MINUS expression .)
    PLUS            reduce using rule 115 (expression -> MINUS expression .)
    MINUS           reduce using rule 115 (expression -> MINUS expression .)
    TIMES           reduce using rule 115 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 115 (expression -> MINUS expression .)
    MOD             reduce using rule 115 (expression -> MINUS expression .)
    RPAREN          reduce using rule 115 (expression -> MINUS expression .)
    LBRACE          reduce using rule 115 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 115 (expression -> MINUS expression .)
    IDENTIFIER      reduce using rule 115 (expression -> MINUS expression .)
    VAR             reduce using rule 115 (expression -> MINUS expression .)
    TYPE            reduce using rule 115 (expression -> MINUS expression .)
    FOR             reduce using rule 115 (expression -> MINUS expression .)
    PACKAGE         reduce using rule 115 (expression -> MINUS expression .)
    IMPORT          reduce using rule 115 (expression -> MINUS expression .)
    SWITCH          reduce using rule 115 (expression -> MINUS expression .)
    IF              reduce using rule 115 (expression -> MINUS expression .)
    RETURN          reduce using rule 115 (expression -> MINUS expression .)
    RBRACE          reduce using rule 115 (expression -> MINUS expression .)
    CASE            reduce using rule 115 (expression -> MINUS expression .)
    DEFAULT         reduce using rule 115 (expression -> MINUS expression .)
    CONST           reduce using rule 115 (expression -> MINUS expression .)
    FUNC            reduce using rule 115 (expression -> MINUS expression .)
    $end            reduce using rule 115 (expression -> MINUS expression .)
    COMMA           reduce using rule 115 (expression -> MINUS expression .)
    COLON           reduce using rule 115 (expression -> MINUS expression .)

  ! EQ              [ shift and go to state 57 ]
  ! NEQ             [ shift and go to state 58 ]
  ! GT              [ shift and go to state 59 ]
  ! LT              [ shift and go to state 60 ]
  ! GE              [ shift and go to state 61 ]
  ! LE              [ shift and go to state 62 ]
  ! AND             [ shift and go to state 63 ]
  ! OR              [ shift and go to state 64 ]
  ! PLUS            [ shift and go to state 65 ]
  ! MINUS           [ shift and go to state 66 ]
  ! TIMES           [ shift and go to state 67 ]
  ! DIVIDE          [ shift and go to state 68 ]
  ! MOD             [ shift and go to state 69 ]

    comparador                     shift and go to state 121
    operadorLogico                 shift and go to state 55
    operator                       shift and go to state 56

state 93

    (102) expression -> IDENTIFIER .

    EQ              reduce using rule 102 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 102 (expression -> IDENTIFIER .)
    GT              reduce using rule 102 (expression -> IDENTIFIER .)
    LT              reduce using rule 102 (expression -> IDENTIFIER .)
    GE              reduce using rule 102 (expression -> IDENTIFIER .)
    LE              reduce using rule 102 (expression -> IDENTIFIER .)
    AND             reduce using rule 102 (expression -> IDENTIFIER .)
    OR              reduce using rule 102 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 102 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 102 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 102 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 102 (expression -> IDENTIFIER .)
    MOD             reduce using rule 102 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 102 (expression -> IDENTIFIER .)
    LBRACE          reduce using rule 102 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 102 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 102 (expression -> IDENTIFIER .)
    VAR             reduce using rule 102 (expression -> IDENTIFIER .)
    TYPE            reduce using rule 102 (expression -> IDENTIFIER .)
    FOR             reduce using rule 102 (expression -> IDENTIFIER .)
    PACKAGE         reduce using rule 102 (expression -> IDENTIFIER .)
    IMPORT          reduce using rule 102 (expression -> IDENTIFIER .)
    SWITCH          reduce using rule 102 (expression -> IDENTIFIER .)
    IF              reduce using rule 102 (expression -> IDENTIFIER .)
    RETURN          reduce using rule 102 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 102 (expression -> IDENTIFIER .)
    CASE            reduce using rule 102 (expression -> IDENTIFIER .)
    DEFAULT         reduce using rule 102 (expression -> IDENTIFIER .)
    CONST           reduce using rule 102 (expression -> IDENTIFIER .)
    FUNC            reduce using rule 102 (expression -> IDENTIFIER .)
    $end            reduce using rule 102 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 102 (expression -> IDENTIFIER .)
    COLON           reduce using rule 102 (expression -> IDENTIFIER .)


state 94

    (116) expression -> LPAREN expression . RPAREN
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (109) expression -> expression . operator expression
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (110) operator -> . PLUS
    (111) operator -> . MINUS
    (112) operator -> . TIMES
    (113) operator -> . DIVIDE
    (114) operator -> . MOD

    RPAREN          shift and go to state 122
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    GT              shift and go to state 59
    LT              shift and go to state 60
    GE              shift and go to state 61
    LE              shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 69

    comparador                     shift and go to state 121
    operadorLogico                 shift and go to state 55
    operator                       shift and go to state 56

state 95

    (18) const_declaration -> CONST IDENTIFIER ASSIGN . expression
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (101) expression -> . NUMBER
    (102) expression -> . IDENTIFIER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . expression operator expression
    (115) expression -> . MINUS expression
    (116) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 34
    IDENTIFIER      shift and go to state 93
    RUNE            shift and go to state 35
    STRING          shift and go to state 36
    RAW_STRING      shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NIL             shift and go to state 40
    MINUS           shift and go to state 41
    LPAREN          shift and go to state 42

    expression                     shift and go to state 123

state 96

    (74) function -> FUNC IDENTIFIER LPAREN . params_opt RPAREN return_type block
    (75) function -> FUNC IDENTIFIER LPAREN . params_opt RPAREN return_type LBRACE sentencias RETURN expression RBRACE
    (78) params_opt -> . params
    (79) params_opt -> . empty
    (80) params -> . param
    (81) params -> . param COMMA params
    (60) empty -> .
    (82) param -> . IDENTIFIER type_name

    RPAREN          reduce using rule 60 (empty -> .)
    IDENTIFIER      shift and go to state 124

    params_opt                     shift and go to state 125
    params                         shift and go to state 126
    empty                          shift and go to state 127
    param                          shift and go to state 128

state 97

    (91) method_definition -> FUNC LPAREN IDENTIFIER . IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block
    (123) parameter -> IDENTIFIER . DATATYPE
    (124) parameter -> IDENTIFIER . FUNC LPAREN parameters RPAREN DATATYPE

    IDENTIFIER      shift and go to state 130
    DATATYPE        shift and go to state 131
    FUNC            shift and go to state 129


state 98

    (119) function_literal -> FUNC LPAREN parameters . RPAREN return_type block
    (120) parameters -> parameters . COMMA parameter

    RPAREN          shift and go to state 132
    COMMA           shift and go to state 133


state 99

    (121) parameters -> parameter .

    RPAREN          reduce using rule 121 (parameters -> parameter .)
    COMMA           reduce using rule 121 (parameters -> parameter .)


state 100

    (122) parameters -> empty .

    RPAREN          reduce using rule 122 (parameters -> empty .)
    COMMA           reduce using rule 122 (parameters -> empty .)


state 101

    (76) function -> FUNC MAIN LPAREN . params_opt RPAREN block
    (78) params_opt -> . params
    (79) params_opt -> . empty
    (80) params -> . param
    (81) params -> . param COMMA params
    (60) empty -> .
    (82) param -> . IDENTIFIER type_name

    RPAREN          reduce using rule 60 (empty -> .)
    IDENTIFIER      shift and go to state 124

    params_opt                     shift and go to state 134
    params                         shift and go to state 126
    empty                          shift and go to state 127
    param                          shift and go to state 128

state 102

    (87) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE . struct_fields RBRACE
    (89) struct_fields -> . struct_field
    (90) struct_fields -> . struct_fields struct_field
    (88) struct_field -> . IDENTIFIER DATATYPE

    IDENTIFIER      shift and go to state 135

    struct_fields                  shift and go to state 136
    struct_field                   shift and go to state 137

state 103

    (86) print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN . argument_list_opt RPAREN
    (47) argument_list_opt -> . argument_list
    (48) argument_list_opt -> .
    (45) argument_list -> . expression
    (46) argument_list -> . argument_list COMMA expression
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (101) expression -> . NUMBER
    (102) expression -> . IDENTIFIER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . expression operator expression
    (115) expression -> . MINUS expression
    (116) expression -> . LPAREN expression RPAREN

    RPAREN          reduce using rule 48 (argument_list_opt -> .)
    NUMBER          shift and go to state 34
    IDENTIFIER      shift and go to state 93
    RUNE            shift and go to state 35
    STRING          shift and go to state 36
    RAW_STRING      shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NIL             shift and go to state 40
    MINUS           shift and go to state 41
    LPAREN          shift and go to state 42

    argument_list_opt              shift and go to state 138
    argument_list                  shift and go to state 139
    expression                     shift and go to state 140

state 104

    (92) for_statement -> FOR shortAssignment SEMICOLON condicion . SEMICOLON expression block

    SEMICOLON       shift and go to state 141


state 105

    (49) condicion -> expression comparador expression .
    (43) expression -> expression comparador expression .
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (109) expression -> expression . operator expression
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (110) operator -> . PLUS
    (111) operator -> . MINUS
    (112) operator -> . TIMES
    (113) operator -> . DIVIDE
    (114) operator -> . MOD

  ! reduce/reduce conflict for AND resolved using rule 43 (expression -> expression comparador expression .)
  ! reduce/reduce conflict for OR resolved using rule 43 (expression -> expression comparador expression .)
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LBRACE          reduce using rule 49 (condicion -> expression comparador expression .)
    SEMICOLON       reduce using rule 49 (condicion -> expression comparador expression .)
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    GT              shift and go to state 59
    LT              shift and go to state 60
    GE              shift and go to state 61
    LE              shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 69

  ! AND             [ reduce using rule 49 (condicion -> expression comparador expression .) ]
  ! OR              [ reduce using rule 49 (condicion -> expression comparador expression .) ]
  ! EQ              [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! NEQ             [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! GT              [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! LT              [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! GE              [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! LE              [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! AND             [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! OR              [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! PLUS            [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! MINUS           [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! TIMES           [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! MOD             [ reduce using rule 43 (expression -> expression comparador expression .) ]

    comparador                     shift and go to state 121
    operadorLogico                 shift and go to state 55
    operator                       shift and go to state 56

state 106

    (44) expression -> expression operadorLogico expression .
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (109) expression -> expression . operator expression
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (110) operator -> . PLUS
    (111) operator -> . MINUS
    (112) operator -> . TIMES
    (113) operator -> . DIVIDE
    (114) operator -> . MOD

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    RPAREN          reduce using rule 44 (expression -> expression operadorLogico expression .)
    LBRACE          reduce using rule 44 (expression -> expression operadorLogico expression .)
    SEMICOLON       reduce using rule 44 (expression -> expression operadorLogico expression .)
    IDENTIFIER      reduce using rule 44 (expression -> expression operadorLogico expression .)
    VAR             reduce using rule 44 (expression -> expression operadorLogico expression .)
    TYPE            reduce using rule 44 (expression -> expression operadorLogico expression .)
    FOR             reduce using rule 44 (expression -> expression operadorLogico expression .)
    PACKAGE         reduce using rule 44 (expression -> expression operadorLogico expression .)
    IMPORT          reduce using rule 44 (expression -> expression operadorLogico expression .)
    SWITCH          reduce using rule 44 (expression -> expression operadorLogico expression .)
    IF              reduce using rule 44 (expression -> expression operadorLogico expression .)
    RETURN          reduce using rule 44 (expression -> expression operadorLogico expression .)
    RBRACE          reduce using rule 44 (expression -> expression operadorLogico expression .)
    CASE            reduce using rule 44 (expression -> expression operadorLogico expression .)
    DEFAULT         reduce using rule 44 (expression -> expression operadorLogico expression .)
    CONST           reduce using rule 44 (expression -> expression operadorLogico expression .)
    FUNC            reduce using rule 44 (expression -> expression operadorLogico expression .)
    $end            reduce using rule 44 (expression -> expression operadorLogico expression .)
    COMMA           reduce using rule 44 (expression -> expression operadorLogico expression .)
    COLON           reduce using rule 44 (expression -> expression operadorLogico expression .)
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    GT              shift and go to state 59
    LT              shift and go to state 60
    GE              shift and go to state 61
    LE              shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 69

  ! EQ              [ reduce using rule 44 (expression -> expression operadorLogico expression .) ]
  ! NEQ             [ reduce using rule 44 (expression -> expression operadorLogico expression .) ]
  ! GT              [ reduce using rule 44 (expression -> expression operadorLogico expression .) ]
  ! LT              [ reduce using rule 44 (expression -> expression operadorLogico expression .) ]
  ! GE              [ reduce using rule 44 (expression -> expression operadorLogico expression .) ]
  ! LE              [ reduce using rule 44 (expression -> expression operadorLogico expression .) ]
  ! AND             [ reduce using rule 44 (expression -> expression operadorLogico expression .) ]
  ! OR              [ reduce using rule 44 (expression -> expression operadorLogico expression .) ]
  ! PLUS            [ reduce using rule 44 (expression -> expression operadorLogico expression .) ]
  ! MINUS           [ reduce using rule 44 (expression -> expression operadorLogico expression .) ]
  ! TIMES           [ reduce using rule 44 (expression -> expression operadorLogico expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> expression operadorLogico expression .) ]
  ! MOD             [ reduce using rule 44 (expression -> expression operadorLogico expression .) ]

    operadorLogico                 shift and go to state 55
    comparador                     shift and go to state 121
    operator                       shift and go to state 56

state 107

    (109) expression -> expression operator expression .
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (109) expression -> expression . operator expression
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (110) operator -> . PLUS
    (111) operator -> . MINUS
    (112) operator -> . TIMES
    (113) operator -> . DIVIDE
    (114) operator -> . MOD

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    RPAREN          reduce using rule 109 (expression -> expression operator expression .)
    LBRACE          reduce using rule 109 (expression -> expression operator expression .)
    SEMICOLON       reduce using rule 109 (expression -> expression operator expression .)
    IDENTIFIER      reduce using rule 109 (expression -> expression operator expression .)
    VAR             reduce using rule 109 (expression -> expression operator expression .)
    TYPE            reduce using rule 109 (expression -> expression operator expression .)
    FOR             reduce using rule 109 (expression -> expression operator expression .)
    PACKAGE         reduce using rule 109 (expression -> expression operator expression .)
    IMPORT          reduce using rule 109 (expression -> expression operator expression .)
    SWITCH          reduce using rule 109 (expression -> expression operator expression .)
    IF              reduce using rule 109 (expression -> expression operator expression .)
    RETURN          reduce using rule 109 (expression -> expression operator expression .)
    RBRACE          reduce using rule 109 (expression -> expression operator expression .)
    CASE            reduce using rule 109 (expression -> expression operator expression .)
    DEFAULT         reduce using rule 109 (expression -> expression operator expression .)
    CONST           reduce using rule 109 (expression -> expression operator expression .)
    FUNC            reduce using rule 109 (expression -> expression operator expression .)
    $end            reduce using rule 109 (expression -> expression operator expression .)
    COMMA           reduce using rule 109 (expression -> expression operator expression .)
    COLON           reduce using rule 109 (expression -> expression operator expression .)
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    GT              shift and go to state 59
    LT              shift and go to state 60
    GE              shift and go to state 61
    LE              shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 69

  ! EQ              [ reduce using rule 109 (expression -> expression operator expression .) ]
  ! NEQ             [ reduce using rule 109 (expression -> expression operator expression .) ]
  ! GT              [ reduce using rule 109 (expression -> expression operator expression .) ]
  ! LT              [ reduce using rule 109 (expression -> expression operator expression .) ]
  ! GE              [ reduce using rule 109 (expression -> expression operator expression .) ]
  ! LE              [ reduce using rule 109 (expression -> expression operator expression .) ]
  ! AND             [ reduce using rule 109 (expression -> expression operator expression .) ]
  ! OR              [ reduce using rule 109 (expression -> expression operator expression .) ]
  ! PLUS            [ reduce using rule 109 (expression -> expression operator expression .) ]
  ! MINUS           [ reduce using rule 109 (expression -> expression operator expression .) ]
  ! TIMES           [ reduce using rule 109 (expression -> expression operator expression .) ]
  ! DIVIDE          [ reduce using rule 109 (expression -> expression operator expression .) ]
  ! MOD             [ reduce using rule 109 (expression -> expression operator expression .) ]

    operator                       shift and go to state 56
    comparador                     shift and go to state 121
    operadorLogico                 shift and go to state 55

state 108

    (95) shortAssignment -> identifier_list DECLARE_ASSIGN expression .
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (109) expression -> expression . operator expression
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (110) operator -> . PLUS
    (111) operator -> . MINUS
    (112) operator -> . TIMES
    (113) operator -> . DIVIDE
    (114) operator -> . MOD

    SEMICOLON       reduce using rule 95 (shortAssignment -> identifier_list DECLARE_ASSIGN expression .)
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    GT              shift and go to state 59
    LT              shift and go to state 60
    GE              shift and go to state 61
    LE              shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 69

    comparador                     shift and go to state 121
    operadorLogico                 shift and go to state 55
    operator                       shift and go to state 56

state 109

    (99) block -> LBRACE sentencias RBRACE .

    TYPE            reduce using rule 99 (block -> LBRACE sentencias RBRACE .)
    IDENTIFIER      reduce using rule 99 (block -> LBRACE sentencias RBRACE .)
    FOR             reduce using rule 99 (block -> LBRACE sentencias RBRACE .)
    CONST           reduce using rule 99 (block -> LBRACE sentencias RBRACE .)
    FUNC            reduce using rule 99 (block -> LBRACE sentencias RBRACE .)
    IMPORT          reduce using rule 99 (block -> LBRACE sentencias RBRACE .)
    $end            reduce using rule 99 (block -> LBRACE sentencias RBRACE .)
    VAR             reduce using rule 99 (block -> LBRACE sentencias RBRACE .)
    PACKAGE         reduce using rule 99 (block -> LBRACE sentencias RBRACE .)
    SWITCH          reduce using rule 99 (block -> LBRACE sentencias RBRACE .)
    IF              reduce using rule 99 (block -> LBRACE sentencias RBRACE .)
    RETURN          reduce using rule 99 (block -> LBRACE sentencias RBRACE .)
    RBRACE          reduce using rule 99 (block -> LBRACE sentencias RBRACE .)
    CASE            reduce using rule 99 (block -> LBRACE sentencias RBRACE .)
    DEFAULT         reduce using rule 99 (block -> LBRACE sentencias RBRACE .)
    ELSE            reduce using rule 99 (block -> LBRACE sentencias RBRACE .)


state 110

    (22) sentencias -> sentencia sentencias .

    RBRACE          reduce using rule 22 (sentencias -> sentencia sentencias .)
    CASE            reduce using rule 22 (sentencias -> sentencia sentencias .)
    DEFAULT         reduce using rule 22 (sentencias -> sentencia sentencias .)
    RETURN          reduce using rule 22 (sentencias -> sentencia sentencias .)


state 111

    (37) assignment -> IDENTIFIER DECLARE_ASSIGN . expression
    (66) map -> IDENTIFIER DECLARE_ASSIGN . mapLiteral
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (101) expression -> . NUMBER
    (102) expression -> . IDENTIFIER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . expression operator expression
    (115) expression -> . MINUS expression
    (116) expression -> . LPAREN expression RPAREN
    (68) mapLiteral -> . MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE

    NUMBER          shift and go to state 34
    IDENTIFIER      shift and go to state 93
    RUNE            shift and go to state 35
    STRING          shift and go to state 36
    RAW_STRING      shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NIL             shift and go to state 40
    MINUS           shift and go to state 41
    LPAREN          shift and go to state 42
    MAP             shift and go to state 144

    expression                     shift and go to state 142
    mapLiteral                     shift and go to state 143

state 112

    (35) input -> IDENTIFIER DOT . IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (86) print_statement -> IDENTIFIER DOT . IDENTIFIER LPAREN argument_list_opt RPAREN

    IDENTIFIER      shift and go to state 145


state 113

    (40) llamarFuncion -> IDENTIFIER LPAREN . argument_list_opt RPAREN
    (47) argument_list_opt -> . argument_list
    (48) argument_list_opt -> .
    (45) argument_list -> . expression
    (46) argument_list -> . argument_list COMMA expression
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (101) expression -> . NUMBER
    (102) expression -> . IDENTIFIER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . expression operator expression
    (115) expression -> . MINUS expression
    (116) expression -> . LPAREN expression RPAREN

    RPAREN          reduce using rule 48 (argument_list_opt -> .)
    NUMBER          shift and go to state 34
    IDENTIFIER      shift and go to state 93
    RUNE            shift and go to state 35
    STRING          shift and go to state 36
    RAW_STRING      shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NIL             shift and go to state 40
    MINUS           shift and go to state 41
    LPAREN          shift and go to state 42

    argument_list_opt              shift and go to state 146
    argument_list                  shift and go to state 139
    expression                     shift and go to state 140

state 114

    (38) assignment -> VAR IDENTIFIER . DATATYPE ASSIGN expression
    (39) assignment -> VAR IDENTIFIER . DATATYPE ASSIGN llamarFuncion
    (67) map -> VAR IDENTIFIER . ASSIGN mapLiteral

    DATATYPE        shift and go to state 147
    ASSIGN          shift and go to state 148


state 115

    (61) switch -> SWITCH expression . LBRACE caseBlocks RBRACE
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (109) expression -> expression . operator expression
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (110) operator -> . PLUS
    (111) operator -> . MINUS
    (112) operator -> . TIMES
    (113) operator -> . DIVIDE
    (114) operator -> . MOD

    LBRACE          shift and go to state 149
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    GT              shift and go to state 59
    LT              shift and go to state 60
    GE              shift and go to state 61
    LE              shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 69

    comparador                     shift and go to state 121
    operadorLogico                 shift and go to state 55
    operator                       shift and go to state 56

state 116

    (117) if_statement -> IF condicion_compleja . block
    (118) if_statement -> IF condicion_compleja . block ELSE block
    (99) block -> . LBRACE sentencias RBRACE
    (100) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 32

    block                          shift and go to state 150

state 117

    (50) condicion_compleja -> condicion . operadorLogico condicion
    (51) condicion_compleja -> condicion . operadorLogico condicion_compleja
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR

    AND             shift and go to state 63
    OR              shift and go to state 64

    operadorLogico                 shift and go to state 151

state 118

    (77) return_statement -> RETURN expression .
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (109) expression -> expression . operator expression
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (110) operator -> . PLUS
    (111) operator -> . MINUS
    (112) operator -> . TIMES
    (113) operator -> . DIVIDE
    (114) operator -> . MOD

    IDENTIFIER      reduce using rule 77 (return_statement -> RETURN expression .)
    VAR             reduce using rule 77 (return_statement -> RETURN expression .)
    TYPE            reduce using rule 77 (return_statement -> RETURN expression .)
    FOR             reduce using rule 77 (return_statement -> RETURN expression .)
    PACKAGE         reduce using rule 77 (return_statement -> RETURN expression .)
    IMPORT          reduce using rule 77 (return_statement -> RETURN expression .)
    SWITCH          reduce using rule 77 (return_statement -> RETURN expression .)
    IF              reduce using rule 77 (return_statement -> RETURN expression .)
    RETURN          reduce using rule 77 (return_statement -> RETURN expression .)
    RBRACE          reduce using rule 77 (return_statement -> RETURN expression .)
    CASE            reduce using rule 77 (return_statement -> RETURN expression .)
    DEFAULT         reduce using rule 77 (return_statement -> RETURN expression .)
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    GT              shift and go to state 59
    LT              shift and go to state 60
    GE              shift and go to state 61
    LE              shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 69

    comparador                     shift and go to state 121
    operadorLogico                 shift and go to state 55
    operator                       shift and go to state 56

state 119

    (93) identifier_list -> IDENTIFIER .
    (94) identifier_list -> IDENTIFIER . COMMA identifier_list

    DECLARE_ASSIGN  reduce using rule 93 (identifier_list -> IDENTIFIER .)
    COMMA           shift and go to state 91


state 120

    (94) identifier_list -> IDENTIFIER COMMA identifier_list .

    DECLARE_ASSIGN  reduce using rule 94 (identifier_list -> IDENTIFIER COMMA identifier_list .)


state 121

    (43) expression -> expression comparador . expression
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (101) expression -> . NUMBER
    (102) expression -> . IDENTIFIER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . expression operator expression
    (115) expression -> . MINUS expression
    (116) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 34
    IDENTIFIER      shift and go to state 93
    RUNE            shift and go to state 35
    STRING          shift and go to state 36
    RAW_STRING      shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NIL             shift and go to state 40
    MINUS           shift and go to state 41
    LPAREN          shift and go to state 42

    expression                     shift and go to state 152

state 122

    (116) expression -> LPAREN expression RPAREN .

    EQ              reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    TYPE            reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    PACKAGE         reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    IMPORT          reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    CASE            reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    CONST           reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    FUNC            reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 116 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 116 (expression -> LPAREN expression RPAREN .)


state 123

    (18) const_declaration -> CONST IDENTIFIER ASSIGN expression .
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (109) expression -> expression . operator expression
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (110) operator -> . PLUS
    (111) operator -> . MINUS
    (112) operator -> . TIMES
    (113) operator -> . DIVIDE
    (114) operator -> . MOD

    TYPE            reduce using rule 18 (const_declaration -> CONST IDENTIFIER ASSIGN expression .)
    IDENTIFIER      reduce using rule 18 (const_declaration -> CONST IDENTIFIER ASSIGN expression .)
    FOR             reduce using rule 18 (const_declaration -> CONST IDENTIFIER ASSIGN expression .)
    CONST           reduce using rule 18 (const_declaration -> CONST IDENTIFIER ASSIGN expression .)
    FUNC            reduce using rule 18 (const_declaration -> CONST IDENTIFIER ASSIGN expression .)
    IMPORT          reduce using rule 18 (const_declaration -> CONST IDENTIFIER ASSIGN expression .)
    $end            reduce using rule 18 (const_declaration -> CONST IDENTIFIER ASSIGN expression .)
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    GT              shift and go to state 59
    LT              shift and go to state 60
    GE              shift and go to state 61
    LE              shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 69

    comparador                     shift and go to state 121
    operadorLogico                 shift and go to state 55
    operator                       shift and go to state 56

state 124

    (82) param -> IDENTIFIER . type_name
    (83) type_name -> . DATATYPE
    (84) type_name -> . IDENTIFIER

    DATATYPE        shift and go to state 155
    IDENTIFIER      shift and go to state 153

    type_name                      shift and go to state 154

state 125

    (74) function -> FUNC IDENTIFIER LPAREN params_opt . RPAREN return_type block
    (75) function -> FUNC IDENTIFIER LPAREN params_opt . RPAREN return_type LBRACE sentencias RETURN expression RBRACE

    RPAREN          shift and go to state 156


state 126

    (78) params_opt -> params .

    RPAREN          reduce using rule 78 (params_opt -> params .)


state 127

    (79) params_opt -> empty .

    RPAREN          reduce using rule 79 (params_opt -> empty .)


state 128

    (80) params -> param .
    (81) params -> param . COMMA params

    RPAREN          reduce using rule 80 (params -> param .)
    COMMA           shift and go to state 157


state 129

    (124) parameter -> IDENTIFIER FUNC . LPAREN parameters RPAREN DATATYPE

    LPAREN          shift and go to state 158


state 130

    (91) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER . RPAREN IDENTIFIER LPAREN arguments RPAREN block

    RPAREN          shift and go to state 159


state 131

    (123) parameter -> IDENTIFIER DATATYPE .

    RPAREN          reduce using rule 123 (parameter -> IDENTIFIER DATATYPE .)
    COMMA           reduce using rule 123 (parameter -> IDENTIFIER DATATYPE .)


state 132

    (119) function_literal -> FUNC LPAREN parameters RPAREN . return_type block
    (125) return_type -> . DATATYPE
    (126) return_type -> . empty
    (60) empty -> .

    DATATYPE        shift and go to state 161
    LBRACE          reduce using rule 60 (empty -> .)

    return_type                    shift and go to state 160
    empty                          shift and go to state 162

state 133

    (120) parameters -> parameters COMMA . parameter
    (123) parameter -> . IDENTIFIER DATATYPE
    (124) parameter -> . IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE

    IDENTIFIER      shift and go to state 164

    parameter                      shift and go to state 163

state 134

    (76) function -> FUNC MAIN LPAREN params_opt . RPAREN block

    RPAREN          shift and go to state 165


state 135

    (88) struct_field -> IDENTIFIER . DATATYPE

    DATATYPE        shift and go to state 166


state 136

    (87) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields . RBRACE
    (90) struct_fields -> struct_fields . struct_field
    (88) struct_field -> . IDENTIFIER DATATYPE

    RBRACE          shift and go to state 167
    IDENTIFIER      shift and go to state 135

    struct_field                   shift and go to state 168

state 137

    (89) struct_fields -> struct_field .

    RBRACE          reduce using rule 89 (struct_fields -> struct_field .)
    IDENTIFIER      reduce using rule 89 (struct_fields -> struct_field .)


state 138

    (86) print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 169


state 139

    (47) argument_list_opt -> argument_list .
    (46) argument_list -> argument_list . COMMA expression

    RPAREN          reduce using rule 47 (argument_list_opt -> argument_list .)
    COMMA           shift and go to state 170


state 140

    (45) argument_list -> expression .
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (109) expression -> expression . operator expression
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (110) operator -> . PLUS
    (111) operator -> . MINUS
    (112) operator -> . TIMES
    (113) operator -> . DIVIDE
    (114) operator -> . MOD

    COMMA           reduce using rule 45 (argument_list -> expression .)
    RPAREN          reduce using rule 45 (argument_list -> expression .)
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    GT              shift and go to state 59
    LT              shift and go to state 60
    GE              shift and go to state 61
    LE              shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 69

    comparador                     shift and go to state 121
    operadorLogico                 shift and go to state 55
    operator                       shift and go to state 56

state 141

    (92) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON . expression block
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (101) expression -> . NUMBER
    (102) expression -> . IDENTIFIER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . expression operator expression
    (115) expression -> . MINUS expression
    (116) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 34
    IDENTIFIER      shift and go to state 93
    RUNE            shift and go to state 35
    STRING          shift and go to state 36
    RAW_STRING      shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NIL             shift and go to state 40
    MINUS           shift and go to state 41
    LPAREN          shift and go to state 42

    expression                     shift and go to state 171

state 142

    (37) assignment -> IDENTIFIER DECLARE_ASSIGN expression .
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (109) expression -> expression . operator expression
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (110) operator -> . PLUS
    (111) operator -> . MINUS
    (112) operator -> . TIMES
    (113) operator -> . DIVIDE
    (114) operator -> . MOD

    IDENTIFIER      reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    VAR             reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    TYPE            reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    FOR             reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    PACKAGE         reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    IMPORT          reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    SWITCH          reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    IF              reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    RETURN          reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    RBRACE          reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    CASE            reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    DEFAULT         reduce using rule 37 (assignment -> IDENTIFIER DECLARE_ASSIGN expression .)
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    GT              shift and go to state 59
    LT              shift and go to state 60
    GE              shift and go to state 61
    LE              shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 69

    comparador                     shift and go to state 121
    operadorLogico                 shift and go to state 55
    operator                       shift and go to state 56

state 143

    (66) map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .

    IDENTIFIER      reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    VAR             reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    TYPE            reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    FOR             reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    PACKAGE         reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    IMPORT          reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    SWITCH          reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    IF              reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    RETURN          reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    RBRACE          reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    CASE            reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)
    DEFAULT         reduce using rule 66 (map -> IDENTIFIER DECLARE_ASSIGN mapLiteral .)


state 144

    (68) mapLiteral -> MAP . LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE

    LBRACKET        shift and go to state 172


state 145

    (35) input -> IDENTIFIER DOT IDENTIFIER . LPAREN AMPERSAND IDENTIFIER RPAREN
    (86) print_statement -> IDENTIFIER DOT IDENTIFIER . LPAREN argument_list_opt RPAREN

    LPAREN          shift and go to state 173


state 146

    (40) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 174


state 147

    (38) assignment -> VAR IDENTIFIER DATATYPE . ASSIGN expression
    (39) assignment -> VAR IDENTIFIER DATATYPE . ASSIGN llamarFuncion

    ASSIGN          shift and go to state 175


state 148

    (67) map -> VAR IDENTIFIER ASSIGN . mapLiteral
    (68) mapLiteral -> . MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE

    MAP             shift and go to state 144

    mapLiteral                     shift and go to state 176

state 149

    (61) switch -> SWITCH expression LBRACE . caseBlocks RBRACE
    (62) caseBlocks -> . caseBlock
    (63) caseBlocks -> . caseBlock caseBlocks
    (64) caseBlock -> . CASE expression COLON sentencias
    (65) caseBlock -> . DEFAULT COLON sentencias

    CASE            shift and go to state 179
    DEFAULT         shift and go to state 180

    caseBlocks                     shift and go to state 177
    caseBlock                      shift and go to state 178

state 150

    (117) if_statement -> IF condicion_compleja block .
    (118) if_statement -> IF condicion_compleja block . ELSE block

    IDENTIFIER      reduce using rule 117 (if_statement -> IF condicion_compleja block .)
    VAR             reduce using rule 117 (if_statement -> IF condicion_compleja block .)
    TYPE            reduce using rule 117 (if_statement -> IF condicion_compleja block .)
    FOR             reduce using rule 117 (if_statement -> IF condicion_compleja block .)
    PACKAGE         reduce using rule 117 (if_statement -> IF condicion_compleja block .)
    IMPORT          reduce using rule 117 (if_statement -> IF condicion_compleja block .)
    SWITCH          reduce using rule 117 (if_statement -> IF condicion_compleja block .)
    IF              reduce using rule 117 (if_statement -> IF condicion_compleja block .)
    RETURN          reduce using rule 117 (if_statement -> IF condicion_compleja block .)
    RBRACE          reduce using rule 117 (if_statement -> IF condicion_compleja block .)
    CASE            reduce using rule 117 (if_statement -> IF condicion_compleja block .)
    DEFAULT         reduce using rule 117 (if_statement -> IF condicion_compleja block .)
    ELSE            shift and go to state 181


state 151

    (50) condicion_compleja -> condicion operadorLogico . condicion
    (51) condicion_compleja -> condicion operadorLogico . condicion_compleja
    (49) condicion -> . expression comparador expression
    (50) condicion_compleja -> . condicion operadorLogico condicion
    (51) condicion_compleja -> . condicion operadorLogico condicion_compleja
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (101) expression -> . NUMBER
    (102) expression -> . IDENTIFIER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . expression operator expression
    (115) expression -> . MINUS expression
    (116) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 34
    IDENTIFIER      shift and go to state 93
    RUNE            shift and go to state 35
    STRING          shift and go to state 36
    RAW_STRING      shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NIL             shift and go to state 40
    MINUS           shift and go to state 41
    LPAREN          shift and go to state 42

    condicion                      shift and go to state 182
    condicion_compleja             shift and go to state 183
    expression                     shift and go to state 29

state 152

    (43) expression -> expression comparador expression .
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (109) expression -> expression . operator expression
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (110) operator -> . PLUS
    (111) operator -> . MINUS
    (112) operator -> . TIMES
    (113) operator -> . DIVIDE
    (114) operator -> . MOD

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    RPAREN          reduce using rule 43 (expression -> expression comparador expression .)
    LBRACE          reduce using rule 43 (expression -> expression comparador expression .)
    SEMICOLON       reduce using rule 43 (expression -> expression comparador expression .)
    IDENTIFIER      reduce using rule 43 (expression -> expression comparador expression .)
    VAR             reduce using rule 43 (expression -> expression comparador expression .)
    TYPE            reduce using rule 43 (expression -> expression comparador expression .)
    FOR             reduce using rule 43 (expression -> expression comparador expression .)
    PACKAGE         reduce using rule 43 (expression -> expression comparador expression .)
    IMPORT          reduce using rule 43 (expression -> expression comparador expression .)
    SWITCH          reduce using rule 43 (expression -> expression comparador expression .)
    IF              reduce using rule 43 (expression -> expression comparador expression .)
    RETURN          reduce using rule 43 (expression -> expression comparador expression .)
    RBRACE          reduce using rule 43 (expression -> expression comparador expression .)
    CASE            reduce using rule 43 (expression -> expression comparador expression .)
    DEFAULT         reduce using rule 43 (expression -> expression comparador expression .)
    CONST           reduce using rule 43 (expression -> expression comparador expression .)
    FUNC            reduce using rule 43 (expression -> expression comparador expression .)
    $end            reduce using rule 43 (expression -> expression comparador expression .)
    COMMA           reduce using rule 43 (expression -> expression comparador expression .)
    COLON           reduce using rule 43 (expression -> expression comparador expression .)
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    GT              shift and go to state 59
    LT              shift and go to state 60
    GE              shift and go to state 61
    LE              shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 69

  ! EQ              [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! NEQ             [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! GT              [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! LT              [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! GE              [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! LE              [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! AND             [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! OR              [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! PLUS            [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! MINUS           [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! TIMES           [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> expression comparador expression .) ]
  ! MOD             [ reduce using rule 43 (expression -> expression comparador expression .) ]

    comparador                     shift and go to state 121
    operadorLogico                 shift and go to state 55
    operator                       shift and go to state 56

state 153

    (84) type_name -> IDENTIFIER .

    COMMA           reduce using rule 84 (type_name -> IDENTIFIER .)
    RPAREN          reduce using rule 84 (type_name -> IDENTIFIER .)


state 154

    (82) param -> IDENTIFIER type_name .

    COMMA           reduce using rule 82 (param -> IDENTIFIER type_name .)
    RPAREN          reduce using rule 82 (param -> IDENTIFIER type_name .)


state 155

    (83) type_name -> DATATYPE .

    COMMA           reduce using rule 83 (type_name -> DATATYPE .)
    RPAREN          reduce using rule 83 (type_name -> DATATYPE .)


state 156

    (74) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN . return_type block
    (75) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN . return_type LBRACE sentencias RETURN expression RBRACE
    (125) return_type -> . DATATYPE
    (126) return_type -> . empty
    (60) empty -> .

    DATATYPE        shift and go to state 161
    LBRACE          reduce using rule 60 (empty -> .)

    return_type                    shift and go to state 184
    empty                          shift and go to state 162

state 157

    (81) params -> param COMMA . params
    (80) params -> . param
    (81) params -> . param COMMA params
    (82) param -> . IDENTIFIER type_name

    IDENTIFIER      shift and go to state 124

    param                          shift and go to state 128
    params                         shift and go to state 185

state 158

    (124) parameter -> IDENTIFIER FUNC LPAREN . parameters RPAREN DATATYPE
    (120) parameters -> . parameters COMMA parameter
    (121) parameters -> . parameter
    (122) parameters -> . empty
    (123) parameter -> . IDENTIFIER DATATYPE
    (124) parameter -> . IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE
    (60) empty -> .

    IDENTIFIER      shift and go to state 164
    RPAREN          reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)

    parameters                     shift and go to state 186
    parameter                      shift and go to state 99
    empty                          shift and go to state 100

state 159

    (91) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN . IDENTIFIER LPAREN arguments RPAREN block

    IDENTIFIER      shift and go to state 187


state 160

    (119) function_literal -> FUNC LPAREN parameters RPAREN return_type . block
    (99) block -> . LBRACE sentencias RBRACE
    (100) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 32

    block                          shift and go to state 188

state 161

    (125) return_type -> DATATYPE .

    LBRACE          reduce using rule 125 (return_type -> DATATYPE .)


state 162

    (126) return_type -> empty .

    LBRACE          reduce using rule 126 (return_type -> empty .)


state 163

    (120) parameters -> parameters COMMA parameter .

    RPAREN          reduce using rule 120 (parameters -> parameters COMMA parameter .)
    COMMA           reduce using rule 120 (parameters -> parameters COMMA parameter .)


state 164

    (123) parameter -> IDENTIFIER . DATATYPE
    (124) parameter -> IDENTIFIER . FUNC LPAREN parameters RPAREN DATATYPE

    DATATYPE        shift and go to state 131
    FUNC            shift and go to state 129


state 165

    (76) function -> FUNC MAIN LPAREN params_opt RPAREN . block
    (99) block -> . LBRACE sentencias RBRACE
    (100) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 32

    block                          shift and go to state 189

state 166

    (88) struct_field -> IDENTIFIER DATATYPE .

    RBRACE          reduce using rule 88 (struct_field -> IDENTIFIER DATATYPE .)
    IDENTIFIER      reduce using rule 88 (struct_field -> IDENTIFIER DATATYPE .)


state 167

    (87) struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .

    TYPE            reduce using rule 87 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    IDENTIFIER      reduce using rule 87 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    FOR             reduce using rule 87 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    CONST           reduce using rule 87 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    FUNC            reduce using rule 87 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    IMPORT          reduce using rule 87 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    $end            reduce using rule 87 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    VAR             reduce using rule 87 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    PACKAGE         reduce using rule 87 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    SWITCH          reduce using rule 87 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    IF              reduce using rule 87 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    RETURN          reduce using rule 87 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    RBRACE          reduce using rule 87 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    CASE            reduce using rule 87 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)
    DEFAULT         reduce using rule 87 (struct_definition -> TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE .)


state 168

    (90) struct_fields -> struct_fields struct_field .

    RBRACE          reduce using rule 90 (struct_fields -> struct_fields struct_field .)
    IDENTIFIER      reduce using rule 90 (struct_fields -> struct_fields struct_field .)


state 169

    (86) print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .

    TYPE            reduce using rule 86 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IDENTIFIER      reduce using rule 86 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FOR             reduce using rule 86 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    CONST           reduce using rule 86 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FUNC            reduce using rule 86 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IMPORT          reduce using rule 86 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    $end            reduce using rule 86 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    VAR             reduce using rule 86 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PACKAGE         reduce using rule 86 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SWITCH          reduce using rule 86 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IF              reduce using rule 86 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RETURN          reduce using rule 86 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 86 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    CASE            reduce using rule 86 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DEFAULT         reduce using rule 86 (print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN .)


state 170

    (46) argument_list -> argument_list COMMA . expression
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (101) expression -> . NUMBER
    (102) expression -> . IDENTIFIER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . expression operator expression
    (115) expression -> . MINUS expression
    (116) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 34
    IDENTIFIER      shift and go to state 93
    RUNE            shift and go to state 35
    STRING          shift and go to state 36
    RAW_STRING      shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NIL             shift and go to state 40
    MINUS           shift and go to state 41
    LPAREN          shift and go to state 42

    expression                     shift and go to state 190

state 171

    (92) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression . block
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (109) expression -> expression . operator expression
    (99) block -> . LBRACE sentencias RBRACE
    (100) block -> . LBRACE RBRACE
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (110) operator -> . PLUS
    (111) operator -> . MINUS
    (112) operator -> . TIMES
    (113) operator -> . DIVIDE
    (114) operator -> . MOD

    LBRACE          shift and go to state 32
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    GT              shift and go to state 59
    LT              shift and go to state 60
    GE              shift and go to state 61
    LE              shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 69

    block                          shift and go to state 191
    comparador                     shift and go to state 121
    operadorLogico                 shift and go to state 55
    operator                       shift and go to state 56

state 172

    (68) mapLiteral -> MAP LBRACKET . DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE

    DATATYPE        shift and go to state 192


state 173

    (35) input -> IDENTIFIER DOT IDENTIFIER LPAREN . AMPERSAND IDENTIFIER RPAREN
    (86) print_statement -> IDENTIFIER DOT IDENTIFIER LPAREN . argument_list_opt RPAREN
    (47) argument_list_opt -> . argument_list
    (48) argument_list_opt -> .
    (45) argument_list -> . expression
    (46) argument_list -> . argument_list COMMA expression
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (101) expression -> . NUMBER
    (102) expression -> . IDENTIFIER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . expression operator expression
    (115) expression -> . MINUS expression
    (116) expression -> . LPAREN expression RPAREN

    AMPERSAND       shift and go to state 193
    RPAREN          reduce using rule 48 (argument_list_opt -> .)
    NUMBER          shift and go to state 34
    IDENTIFIER      shift and go to state 93
    RUNE            shift and go to state 35
    STRING          shift and go to state 36
    RAW_STRING      shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NIL             shift and go to state 40
    MINUS           shift and go to state 41
    LPAREN          shift and go to state 42

    argument_list_opt              shift and go to state 138
    argument_list                  shift and go to state 139
    expression                     shift and go to state 140

state 174

    (40) llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .

    IDENTIFIER      reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    VAR             reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    TYPE            reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    FOR             reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    PACKAGE         reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IMPORT          reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    SWITCH          reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    IF              reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RETURN          reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    CASE            reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)
    DEFAULT         reduce using rule 40 (llamarFuncion -> IDENTIFIER LPAREN argument_list_opt RPAREN .)


state 175

    (38) assignment -> VAR IDENTIFIER DATATYPE ASSIGN . expression
    (39) assignment -> VAR IDENTIFIER DATATYPE ASSIGN . llamarFuncion
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (101) expression -> . NUMBER
    (102) expression -> . IDENTIFIER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . expression operator expression
    (115) expression -> . MINUS expression
    (116) expression -> . LPAREN expression RPAREN
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN

    NUMBER          shift and go to state 34
    IDENTIFIER      shift and go to state 194
    RUNE            shift and go to state 35
    STRING          shift and go to state 36
    RAW_STRING      shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NIL             shift and go to state 40
    MINUS           shift and go to state 41
    LPAREN          shift and go to state 42

    expression                     shift and go to state 195
    llamarFuncion                  shift and go to state 196

state 176

    (67) map -> VAR IDENTIFIER ASSIGN mapLiteral .

    IDENTIFIER      reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    VAR             reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    TYPE            reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    FOR             reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    PACKAGE         reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    IMPORT          reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    SWITCH          reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    IF              reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    RETURN          reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    RBRACE          reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    CASE            reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)
    DEFAULT         reduce using rule 67 (map -> VAR IDENTIFIER ASSIGN mapLiteral .)


state 177

    (61) switch -> SWITCH expression LBRACE caseBlocks . RBRACE

    RBRACE          shift and go to state 197


state 178

    (62) caseBlocks -> caseBlock .
    (63) caseBlocks -> caseBlock . caseBlocks
    (62) caseBlocks -> . caseBlock
    (63) caseBlocks -> . caseBlock caseBlocks
    (64) caseBlock -> . CASE expression COLON sentencias
    (65) caseBlock -> . DEFAULT COLON sentencias

    RBRACE          reduce using rule 62 (caseBlocks -> caseBlock .)
    CASE            shift and go to state 179
    DEFAULT         shift and go to state 180

    caseBlock                      shift and go to state 178
    caseBlocks                     shift and go to state 198

state 179

    (64) caseBlock -> CASE . expression COLON sentencias
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (101) expression -> . NUMBER
    (102) expression -> . IDENTIFIER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . expression operator expression
    (115) expression -> . MINUS expression
    (116) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 34
    IDENTIFIER      shift and go to state 93
    RUNE            shift and go to state 35
    STRING          shift and go to state 36
    RAW_STRING      shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NIL             shift and go to state 40
    MINUS           shift and go to state 41
    LPAREN          shift and go to state 42

    expression                     shift and go to state 199

state 180

    (65) caseBlock -> DEFAULT . COLON sentencias

    COLON           shift and go to state 200


state 181

    (118) if_statement -> IF condicion_compleja block ELSE . block
    (99) block -> . LBRACE sentencias RBRACE
    (100) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 32

    block                          shift and go to state 201

state 182

    (50) condicion_compleja -> condicion operadorLogico condicion .
    (50) condicion_compleja -> condicion . operadorLogico condicion
    (51) condicion_compleja -> condicion . operadorLogico condicion_compleja
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR

    LBRACE          reduce using rule 50 (condicion_compleja -> condicion operadorLogico condicion .)
    AND             shift and go to state 63
    OR              shift and go to state 64

    operadorLogico                 shift and go to state 151

state 183

    (51) condicion_compleja -> condicion operadorLogico condicion_compleja .

    LBRACE          reduce using rule 51 (condicion_compleja -> condicion operadorLogico condicion_compleja .)


state 184

    (74) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type . block
    (75) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type . LBRACE sentencias RETURN expression RBRACE
    (99) block -> . LBRACE sentencias RBRACE
    (100) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 203

    block                          shift and go to state 202

state 185

    (81) params -> param COMMA params .

    RPAREN          reduce using rule 81 (params -> param COMMA params .)


state 186

    (124) parameter -> IDENTIFIER FUNC LPAREN parameters . RPAREN DATATYPE
    (120) parameters -> parameters . COMMA parameter

    RPAREN          shift and go to state 204
    COMMA           shift and go to state 133


state 187

    (91) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER . LPAREN arguments RPAREN block

    LPAREN          shift and go to state 205


state 188

    (119) function_literal -> FUNC LPAREN parameters RPAREN return_type block .

    TYPE            reduce using rule 119 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    IDENTIFIER      reduce using rule 119 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    FOR             reduce using rule 119 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    CONST           reduce using rule 119 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    FUNC            reduce using rule 119 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    IMPORT          reduce using rule 119 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)
    $end            reduce using rule 119 (function_literal -> FUNC LPAREN parameters RPAREN return_type block .)


state 189

    (76) function -> FUNC MAIN LPAREN params_opt RPAREN block .

    TYPE            reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    IDENTIFIER      reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    FOR             reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    CONST           reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    FUNC            reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    IMPORT          reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)
    $end            reduce using rule 76 (function -> FUNC MAIN LPAREN params_opt RPAREN block .)


state 190

    (46) argument_list -> argument_list COMMA expression .
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (109) expression -> expression . operator expression
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (110) operator -> . PLUS
    (111) operator -> . MINUS
    (112) operator -> . TIMES
    (113) operator -> . DIVIDE
    (114) operator -> . MOD

    COMMA           reduce using rule 46 (argument_list -> argument_list COMMA expression .)
    RPAREN          reduce using rule 46 (argument_list -> argument_list COMMA expression .)
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    GT              shift and go to state 59
    LT              shift and go to state 60
    GE              shift and go to state 61
    LE              shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 69

    comparador                     shift and go to state 121
    operadorLogico                 shift and go to state 55
    operator                       shift and go to state 56

state 191

    (92) for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .

    TYPE            reduce using rule 92 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    IDENTIFIER      reduce using rule 92 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    FOR             reduce using rule 92 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    CONST           reduce using rule 92 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    FUNC            reduce using rule 92 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    IMPORT          reduce using rule 92 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    $end            reduce using rule 92 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    VAR             reduce using rule 92 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    PACKAGE         reduce using rule 92 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    SWITCH          reduce using rule 92 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    IF              reduce using rule 92 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    RETURN          reduce using rule 92 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    RBRACE          reduce using rule 92 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    CASE            reduce using rule 92 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)
    DEFAULT         reduce using rule 92 (for_statement -> FOR shortAssignment SEMICOLON condicion SEMICOLON expression block .)


state 192

    (68) mapLiteral -> MAP LBRACKET DATATYPE . RBRACKET DATATYPE LBRACE mapEntries RBRACE

    RBRACKET        shift and go to state 206


state 193

    (35) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND . IDENTIFIER RPAREN

    IDENTIFIER      shift and go to state 207


state 194

    (102) expression -> IDENTIFIER .
    (40) llamarFuncion -> IDENTIFIER . LPAREN argument_list_opt RPAREN

    EQ              reduce using rule 102 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 102 (expression -> IDENTIFIER .)
    GT              reduce using rule 102 (expression -> IDENTIFIER .)
    LT              reduce using rule 102 (expression -> IDENTIFIER .)
    GE              reduce using rule 102 (expression -> IDENTIFIER .)
    LE              reduce using rule 102 (expression -> IDENTIFIER .)
    AND             reduce using rule 102 (expression -> IDENTIFIER .)
    OR              reduce using rule 102 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 102 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 102 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 102 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 102 (expression -> IDENTIFIER .)
    MOD             reduce using rule 102 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 102 (expression -> IDENTIFIER .)
    VAR             reduce using rule 102 (expression -> IDENTIFIER .)
    TYPE            reduce using rule 102 (expression -> IDENTIFIER .)
    FOR             reduce using rule 102 (expression -> IDENTIFIER .)
    PACKAGE         reduce using rule 102 (expression -> IDENTIFIER .)
    IMPORT          reduce using rule 102 (expression -> IDENTIFIER .)
    SWITCH          reduce using rule 102 (expression -> IDENTIFIER .)
    IF              reduce using rule 102 (expression -> IDENTIFIER .)
    RETURN          reduce using rule 102 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 102 (expression -> IDENTIFIER .)
    CASE            reduce using rule 102 (expression -> IDENTIFIER .)
    DEFAULT         reduce using rule 102 (expression -> IDENTIFIER .)
    LPAREN          shift and go to state 113


state 195

    (38) assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (109) expression -> expression . operator expression
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (110) operator -> . PLUS
    (111) operator -> . MINUS
    (112) operator -> . TIMES
    (113) operator -> . DIVIDE
    (114) operator -> . MOD

    IDENTIFIER      reduce using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    VAR             reduce using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    TYPE            reduce using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    FOR             reduce using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    PACKAGE         reduce using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    IMPORT          reduce using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    SWITCH          reduce using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    IF              reduce using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    RETURN          reduce using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    RBRACE          reduce using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    CASE            reduce using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    DEFAULT         reduce using rule 38 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN expression .)
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    GT              shift and go to state 59
    LT              shift and go to state 60
    GE              shift and go to state 61
    LE              shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 69

    comparador                     shift and go to state 121
    operadorLogico                 shift and go to state 55
    operator                       shift and go to state 56

state 196

    (39) assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .

    IDENTIFIER      reduce using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    VAR             reduce using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    TYPE            reduce using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    FOR             reduce using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    PACKAGE         reduce using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    IMPORT          reduce using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    SWITCH          reduce using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    IF              reduce using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    RETURN          reduce using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    RBRACE          reduce using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    CASE            reduce using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)
    DEFAULT         reduce using rule 39 (assignment -> VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion .)


state 197

    (61) switch -> SWITCH expression LBRACE caseBlocks RBRACE .

    IDENTIFIER      reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    VAR             reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    TYPE            reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    FOR             reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    PACKAGE         reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    IMPORT          reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    SWITCH          reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    IF              reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    RETURN          reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    RBRACE          reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    CASE            reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)
    DEFAULT         reduce using rule 61 (switch -> SWITCH expression LBRACE caseBlocks RBRACE .)


state 198

    (63) caseBlocks -> caseBlock caseBlocks .

    RBRACE          reduce using rule 63 (caseBlocks -> caseBlock caseBlocks .)


state 199

    (64) caseBlock -> CASE expression . COLON sentencias
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (109) expression -> expression . operator expression
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (110) operator -> . PLUS
    (111) operator -> . MINUS
    (112) operator -> . TIMES
    (113) operator -> . DIVIDE
    (114) operator -> . MOD

    COLON           shift and go to state 208
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    GT              shift and go to state 59
    LT              shift and go to state 60
    GE              shift and go to state 61
    LE              shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 69

    comparador                     shift and go to state 121
    operadorLogico                 shift and go to state 55
    operator                       shift and go to state 56

state 200

    (65) caseBlock -> DEFAULT COLON . sentencias
    (21) sentencias -> . sentencia
    (22) sentencias -> . sentencia sentencias
    (23) sentencia -> . assignment
    (24) sentencia -> . input
    (25) sentencia -> . llamarFuncion
    (26) sentencia -> . print_statement
    (27) sentencia -> . struct_definition
    (28) sentencia -> . for_statement
    (29) sentencia -> . package
    (30) sentencia -> . import
    (31) sentencia -> . switch
    (32) sentencia -> . map
    (33) sentencia -> . if_statement
    (34) sentencia -> . return_statement
    (37) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (38) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (39) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (35) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (86) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (87) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (92) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (96) for_statement -> . FOR condicion block
    (97) for_statement -> . FOR block
    (5) package -> . PACKAGE MAIN
    (85) import -> . IMPORT STRING
    (61) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (66) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (67) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (117) if_statement -> . IF condicion_compleja block
    (118) if_statement -> . IF condicion_compleja block ELSE block
    (77) return_statement -> . RETURN expression

    IDENTIFIER      shift and go to state 86
    VAR             shift and go to state 87
    TYPE            shift and go to state 14
    FOR             shift and go to state 16
    PACKAGE         shift and go to state 4
    IMPORT          shift and go to state 19
    SWITCH          shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90

    sentencias                     shift and go to state 209
    sentencia                      shift and go to state 73
    assignment                     shift and go to state 74
    input                          shift and go to state 75
    llamarFuncion                  shift and go to state 76
    print_statement                shift and go to state 77
    struct_definition              shift and go to state 78
    for_statement                  shift and go to state 79
    package                        shift and go to state 80
    import                         shift and go to state 81
    switch                         shift and go to state 82
    map                            shift and go to state 83
    if_statement                   shift and go to state 84
    return_statement               shift and go to state 85

state 201

    (118) if_statement -> IF condicion_compleja block ELSE block .

    IDENTIFIER      reduce using rule 118 (if_statement -> IF condicion_compleja block ELSE block .)
    VAR             reduce using rule 118 (if_statement -> IF condicion_compleja block ELSE block .)
    TYPE            reduce using rule 118 (if_statement -> IF condicion_compleja block ELSE block .)
    FOR             reduce using rule 118 (if_statement -> IF condicion_compleja block ELSE block .)
    PACKAGE         reduce using rule 118 (if_statement -> IF condicion_compleja block ELSE block .)
    IMPORT          reduce using rule 118 (if_statement -> IF condicion_compleja block ELSE block .)
    SWITCH          reduce using rule 118 (if_statement -> IF condicion_compleja block ELSE block .)
    IF              reduce using rule 118 (if_statement -> IF condicion_compleja block ELSE block .)
    RETURN          reduce using rule 118 (if_statement -> IF condicion_compleja block ELSE block .)
    RBRACE          reduce using rule 118 (if_statement -> IF condicion_compleja block ELSE block .)
    CASE            reduce using rule 118 (if_statement -> IF condicion_compleja block ELSE block .)
    DEFAULT         reduce using rule 118 (if_statement -> IF condicion_compleja block ELSE block .)


state 202

    (74) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block .

    TYPE            reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block .)
    IDENTIFIER      reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block .)
    FOR             reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block .)
    CONST           reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block .)
    FUNC            reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block .)
    IMPORT          reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block .)
    $end            reduce using rule 74 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type block .)


state 203

    (75) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE . sentencias RETURN expression RBRACE
    (99) block -> LBRACE . sentencias RBRACE
    (100) block -> LBRACE . RBRACE
    (21) sentencias -> . sentencia
    (22) sentencias -> . sentencia sentencias
    (23) sentencia -> . assignment
    (24) sentencia -> . input
    (25) sentencia -> . llamarFuncion
    (26) sentencia -> . print_statement
    (27) sentencia -> . struct_definition
    (28) sentencia -> . for_statement
    (29) sentencia -> . package
    (30) sentencia -> . import
    (31) sentencia -> . switch
    (32) sentencia -> . map
    (33) sentencia -> . if_statement
    (34) sentencia -> . return_statement
    (37) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (38) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (39) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (35) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (86) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (87) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (92) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (96) for_statement -> . FOR condicion block
    (97) for_statement -> . FOR block
    (5) package -> . PACKAGE MAIN
    (85) import -> . IMPORT STRING
    (61) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (66) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (67) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (117) if_statement -> . IF condicion_compleja block
    (118) if_statement -> . IF condicion_compleja block ELSE block
    (77) return_statement -> . RETURN expression

    RBRACE          shift and go to state 72
    IDENTIFIER      shift and go to state 86
    VAR             shift and go to state 87
    TYPE            shift and go to state 14
    FOR             shift and go to state 16
    PACKAGE         shift and go to state 4
    IMPORT          shift and go to state 19
    SWITCH          shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90

    sentencias                     shift and go to state 210
    sentencia                      shift and go to state 73
    assignment                     shift and go to state 74
    input                          shift and go to state 75
    llamarFuncion                  shift and go to state 76
    print_statement                shift and go to state 77
    struct_definition              shift and go to state 78
    for_statement                  shift and go to state 79
    package                        shift and go to state 80
    import                         shift and go to state 81
    switch                         shift and go to state 82
    map                            shift and go to state 83
    if_statement                   shift and go to state 84
    return_statement               shift and go to state 85

state 204

    (124) parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN . DATATYPE

    DATATYPE        shift and go to state 211


state 205

    (91) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN . arguments RPAREN block
    (6) arguments -> . expression
    (7) arguments -> . expression COMMA arguments
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (101) expression -> . NUMBER
    (102) expression -> . IDENTIFIER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . expression operator expression
    (115) expression -> . MINUS expression
    (116) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 34
    IDENTIFIER      shift and go to state 93
    RUNE            shift and go to state 35
    STRING          shift and go to state 36
    RAW_STRING      shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NIL             shift and go to state 40
    MINUS           shift and go to state 41
    LPAREN          shift and go to state 42

    arguments                      shift and go to state 212
    expression                     shift and go to state 213

state 206

    (68) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET . DATATYPE LBRACE mapEntries RBRACE

    DATATYPE        shift and go to state 214


state 207

    (35) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER . RPAREN

    RPAREN          shift and go to state 215


state 208

    (64) caseBlock -> CASE expression COLON . sentencias
    (21) sentencias -> . sentencia
    (22) sentencias -> . sentencia sentencias
    (23) sentencia -> . assignment
    (24) sentencia -> . input
    (25) sentencia -> . llamarFuncion
    (26) sentencia -> . print_statement
    (27) sentencia -> . struct_definition
    (28) sentencia -> . for_statement
    (29) sentencia -> . package
    (30) sentencia -> . import
    (31) sentencia -> . switch
    (32) sentencia -> . map
    (33) sentencia -> . if_statement
    (34) sentencia -> . return_statement
    (37) assignment -> . IDENTIFIER DECLARE_ASSIGN expression
    (38) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN expression
    (39) assignment -> . VAR IDENTIFIER DATATYPE ASSIGN llamarFuncion
    (35) input -> . IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN
    (40) llamarFuncion -> . IDENTIFIER LPAREN argument_list_opt RPAREN
    (86) print_statement -> . IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
    (87) struct_definition -> . TYPE IDENTIFIER STRUCT LBRACE struct_fields RBRACE
    (92) for_statement -> . FOR shortAssignment SEMICOLON condicion SEMICOLON expression block
    (96) for_statement -> . FOR condicion block
    (97) for_statement -> . FOR block
    (5) package -> . PACKAGE MAIN
    (85) import -> . IMPORT STRING
    (61) switch -> . SWITCH expression LBRACE caseBlocks RBRACE
    (66) map -> . IDENTIFIER DECLARE_ASSIGN mapLiteral
    (67) map -> . VAR IDENTIFIER ASSIGN mapLiteral
    (117) if_statement -> . IF condicion_compleja block
    (118) if_statement -> . IF condicion_compleja block ELSE block
    (77) return_statement -> . RETURN expression

    IDENTIFIER      shift and go to state 86
    VAR             shift and go to state 87
    TYPE            shift and go to state 14
    FOR             shift and go to state 16
    PACKAGE         shift and go to state 4
    IMPORT          shift and go to state 19
    SWITCH          shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90

    sentencias                     shift and go to state 216
    sentencia                      shift and go to state 73
    assignment                     shift and go to state 74
    input                          shift and go to state 75
    llamarFuncion                  shift and go to state 76
    print_statement                shift and go to state 77
    struct_definition              shift and go to state 78
    for_statement                  shift and go to state 79
    package                        shift and go to state 80
    import                         shift and go to state 81
    switch                         shift and go to state 82
    map                            shift and go to state 83
    if_statement                   shift and go to state 84
    return_statement               shift and go to state 85

state 209

    (65) caseBlock -> DEFAULT COLON sentencias .

    CASE            reduce using rule 65 (caseBlock -> DEFAULT COLON sentencias .)
    DEFAULT         reduce using rule 65 (caseBlock -> DEFAULT COLON sentencias .)
    RBRACE          reduce using rule 65 (caseBlock -> DEFAULT COLON sentencias .)


state 210

    (75) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE sentencias . RETURN expression RBRACE
    (99) block -> LBRACE sentencias . RBRACE

    RETURN          shift and go to state 217
    RBRACE          shift and go to state 109


state 211

    (124) parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE .

    RPAREN          reduce using rule 124 (parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE .)
    COMMA           reduce using rule 124 (parameter -> IDENTIFIER FUNC LPAREN parameters RPAREN DATATYPE .)


state 212

    (91) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments . RPAREN block

    RPAREN          shift and go to state 218


state 213

    (6) arguments -> expression .
    (7) arguments -> expression . COMMA arguments
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (109) expression -> expression . operator expression
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (110) operator -> . PLUS
    (111) operator -> . MINUS
    (112) operator -> . TIMES
    (113) operator -> . DIVIDE
    (114) operator -> . MOD

    RPAREN          reduce using rule 6 (arguments -> expression .)
    COMMA           shift and go to state 219
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    GT              shift and go to state 59
    LT              shift and go to state 60
    GE              shift and go to state 61
    LE              shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 69

    comparador                     shift and go to state 121
    operadorLogico                 shift and go to state 55
    operator                       shift and go to state 56

state 214

    (68) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE . LBRACE mapEntries RBRACE

    LBRACE          shift and go to state 220


state 215

    (35) input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .

    IDENTIFIER      reduce using rule 35 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    VAR             reduce using rule 35 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    TYPE            reduce using rule 35 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    FOR             reduce using rule 35 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    PACKAGE         reduce using rule 35 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    IMPORT          reduce using rule 35 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    SWITCH          reduce using rule 35 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    IF              reduce using rule 35 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    RETURN          reduce using rule 35 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    RBRACE          reduce using rule 35 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    CASE            reduce using rule 35 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)
    DEFAULT         reduce using rule 35 (input -> IDENTIFIER DOT IDENTIFIER LPAREN AMPERSAND IDENTIFIER RPAREN .)


state 216

    (64) caseBlock -> CASE expression COLON sentencias .

    CASE            reduce using rule 64 (caseBlock -> CASE expression COLON sentencias .)
    DEFAULT         reduce using rule 64 (caseBlock -> CASE expression COLON sentencias .)
    RBRACE          reduce using rule 64 (caseBlock -> CASE expression COLON sentencias .)


state 217

    (75) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE sentencias RETURN . expression RBRACE
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (101) expression -> . NUMBER
    (102) expression -> . IDENTIFIER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . expression operator expression
    (115) expression -> . MINUS expression
    (116) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 34
    IDENTIFIER      shift and go to state 93
    RUNE            shift and go to state 35
    STRING          shift and go to state 36
    RAW_STRING      shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NIL             shift and go to state 40
    MINUS           shift and go to state 41
    LPAREN          shift and go to state 42

    expression                     shift and go to state 221

state 218

    (91) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN . block
    (99) block -> . LBRACE sentencias RBRACE
    (100) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 32

    block                          shift and go to state 222

state 219

    (7) arguments -> expression COMMA . arguments
    (6) arguments -> . expression
    (7) arguments -> . expression COMMA arguments
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (101) expression -> . NUMBER
    (102) expression -> . IDENTIFIER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . expression operator expression
    (115) expression -> . MINUS expression
    (116) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 34
    IDENTIFIER      shift and go to state 93
    RUNE            shift and go to state 35
    STRING          shift and go to state 36
    RAW_STRING      shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NIL             shift and go to state 40
    MINUS           shift and go to state 41
    LPAREN          shift and go to state 42

    expression                     shift and go to state 213
    arguments                      shift and go to state 223

state 220

    (68) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE . mapEntries RBRACE
    (69) mapEntries -> . mapEntry
    (70) mapEntries -> . mapEntry COMMA mapEntries
    (71) mapEntry -> . value_key COLON value_key
    (72) value_key -> . expression
    (73) value_key -> . STRING
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (101) expression -> . NUMBER
    (102) expression -> . IDENTIFIER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . expression operator expression
    (115) expression -> . MINUS expression
    (116) expression -> . LPAREN expression RPAREN

    STRING          shift and go to state 228
    NUMBER          shift and go to state 34
    IDENTIFIER      shift and go to state 93
    RUNE            shift and go to state 35
    RAW_STRING      shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NIL             shift and go to state 40
    MINUS           shift and go to state 41
    LPAREN          shift and go to state 42

    mapEntries                     shift and go to state 224
    mapEntry                       shift and go to state 225
    value_key                      shift and go to state 226
    expression                     shift and go to state 227

state 221

    (75) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE sentencias RETURN expression . RBRACE
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (109) expression -> expression . operator expression
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (110) operator -> . PLUS
    (111) operator -> . MINUS
    (112) operator -> . TIMES
    (113) operator -> . DIVIDE
    (114) operator -> . MOD

    RBRACE          shift and go to state 229
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    GT              shift and go to state 59
    LT              shift and go to state 60
    GE              shift and go to state 61
    LE              shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 69

    comparador                     shift and go to state 121
    operadorLogico                 shift and go to state 55
    operator                       shift and go to state 56

state 222

    (91) method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .

    TYPE            reduce using rule 91 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    IDENTIFIER      reduce using rule 91 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    FOR             reduce using rule 91 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    CONST           reduce using rule 91 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    FUNC            reduce using rule 91 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    IMPORT          reduce using rule 91 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)
    $end            reduce using rule 91 (method_definition -> FUNC LPAREN IDENTIFIER IDENTIFIER RPAREN IDENTIFIER LPAREN arguments RPAREN block .)


state 223

    (7) arguments -> expression COMMA arguments .

    RPAREN          reduce using rule 7 (arguments -> expression COMMA arguments .)


state 224

    (68) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries . RBRACE

    RBRACE          shift and go to state 230


state 225

    (69) mapEntries -> mapEntry .
    (70) mapEntries -> mapEntry . COMMA mapEntries

    RBRACE          reduce using rule 69 (mapEntries -> mapEntry .)
    COMMA           shift and go to state 231


state 226

    (71) mapEntry -> value_key . COLON value_key

    COLON           shift and go to state 232


state 227

    (72) value_key -> expression .
    (43) expression -> expression . comparador expression
    (44) expression -> expression . operadorLogico expression
    (109) expression -> expression . operator expression
    (54) comparador -> . EQ
    (55) comparador -> . NEQ
    (56) comparador -> . GT
    (57) comparador -> . LT
    (58) comparador -> . GE
    (59) comparador -> . LE
    (52) operadorLogico -> . AND
    (53) operadorLogico -> . OR
    (110) operator -> . PLUS
    (111) operator -> . MINUS
    (112) operator -> . TIMES
    (113) operator -> . DIVIDE
    (114) operator -> . MOD

    COLON           reduce using rule 72 (value_key -> expression .)
    COMMA           reduce using rule 72 (value_key -> expression .)
    RBRACE          reduce using rule 72 (value_key -> expression .)
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    GT              shift and go to state 59
    LT              shift and go to state 60
    GE              shift and go to state 61
    LE              shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 69

    comparador                     shift and go to state 121
    operadorLogico                 shift and go to state 55
    operator                       shift and go to state 56

state 228

    (73) value_key -> STRING .
    (104) expression -> STRING .

  ! reduce/reduce conflict for COLON resolved using rule 73 (value_key -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 73 (value_key -> STRING .)
  ! reduce/reduce conflict for RBRACE resolved using rule 73 (value_key -> STRING .)
    COLON           reduce using rule 73 (value_key -> STRING .)
    COMMA           reduce using rule 73 (value_key -> STRING .)
    RBRACE          reduce using rule 73 (value_key -> STRING .)
    EQ              reduce using rule 104 (expression -> STRING .)
    NEQ             reduce using rule 104 (expression -> STRING .)
    GT              reduce using rule 104 (expression -> STRING .)
    LT              reduce using rule 104 (expression -> STRING .)
    GE              reduce using rule 104 (expression -> STRING .)
    LE              reduce using rule 104 (expression -> STRING .)
    AND             reduce using rule 104 (expression -> STRING .)
    OR              reduce using rule 104 (expression -> STRING .)
    PLUS            reduce using rule 104 (expression -> STRING .)
    MINUS           reduce using rule 104 (expression -> STRING .)
    TIMES           reduce using rule 104 (expression -> STRING .)
    DIVIDE          reduce using rule 104 (expression -> STRING .)
    MOD             reduce using rule 104 (expression -> STRING .)

  ! COLON           [ reduce using rule 104 (expression -> STRING .) ]
  ! COMMA           [ reduce using rule 104 (expression -> STRING .) ]
  ! RBRACE          [ reduce using rule 104 (expression -> STRING .) ]


state 229

    (75) function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE sentencias RETURN expression RBRACE .

    TYPE            reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE sentencias RETURN expression RBRACE .)
    IDENTIFIER      reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE sentencias RETURN expression RBRACE .)
    FOR             reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE sentencias RETURN expression RBRACE .)
    CONST           reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE sentencias RETURN expression RBRACE .)
    FUNC            reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE sentencias RETURN expression RBRACE .)
    IMPORT          reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE sentencias RETURN expression RBRACE .)
    $end            reduce using rule 75 (function -> FUNC IDENTIFIER LPAREN params_opt RPAREN return_type LBRACE sentencias RETURN expression RBRACE .)


state 230

    (68) mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .

    IDENTIFIER      reduce using rule 68 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    VAR             reduce using rule 68 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    TYPE            reduce using rule 68 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    FOR             reduce using rule 68 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    PACKAGE         reduce using rule 68 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    IMPORT          reduce using rule 68 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    SWITCH          reduce using rule 68 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    IF              reduce using rule 68 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    RETURN          reduce using rule 68 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    RBRACE          reduce using rule 68 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    CASE            reduce using rule 68 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)
    DEFAULT         reduce using rule 68 (mapLiteral -> MAP LBRACKET DATATYPE RBRACKET DATATYPE LBRACE mapEntries RBRACE .)


state 231

    (70) mapEntries -> mapEntry COMMA . mapEntries
    (69) mapEntries -> . mapEntry
    (70) mapEntries -> . mapEntry COMMA mapEntries
    (71) mapEntry -> . value_key COLON value_key
    (72) value_key -> . expression
    (73) value_key -> . STRING
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (101) expression -> . NUMBER
    (102) expression -> . IDENTIFIER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . expression operator expression
    (115) expression -> . MINUS expression
    (116) expression -> . LPAREN expression RPAREN

    STRING          shift and go to state 228
    NUMBER          shift and go to state 34
    IDENTIFIER      shift and go to state 93
    RUNE            shift and go to state 35
    RAW_STRING      shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NIL             shift and go to state 40
    MINUS           shift and go to state 41
    LPAREN          shift and go to state 42

    mapEntry                       shift and go to state 225
    mapEntries                     shift and go to state 233
    value_key                      shift and go to state 226
    expression                     shift and go to state 227

state 232

    (71) mapEntry -> value_key COLON . value_key
    (72) value_key -> . expression
    (73) value_key -> . STRING
    (43) expression -> . expression comparador expression
    (44) expression -> . expression operadorLogico expression
    (101) expression -> . NUMBER
    (102) expression -> . IDENTIFIER
    (103) expression -> . RUNE
    (104) expression -> . STRING
    (105) expression -> . RAW_STRING
    (106) expression -> . TRUE
    (107) expression -> . FALSE
    (108) expression -> . NIL
    (109) expression -> . expression operator expression
    (115) expression -> . MINUS expression
    (116) expression -> . LPAREN expression RPAREN

    STRING          shift and go to state 228
    NUMBER          shift and go to state 34
    IDENTIFIER      shift and go to state 93
    RUNE            shift and go to state 35
    RAW_STRING      shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NIL             shift and go to state 40
    MINUS           shift and go to state 41
    LPAREN          shift and go to state 42

    value_key                      shift and go to state 234
    expression                     shift and go to state 227

state 233

    (70) mapEntries -> mapEntry COMMA mapEntries .

    RBRACE          reduce using rule 70 (mapEntries -> mapEntry COMMA mapEntries .)


state 234

    (71) mapEntry -> value_key COLON value_key .

    COMMA           reduce using rule 71 (mapEntry -> value_key COLON value_key .)
    RBRACE          reduce using rule 71 (mapEntry -> value_key COLON value_key .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RETURN in state 73 resolved as shift
WARNING: shift/reduce conflict for EQ in state 105 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 105 resolved as shift
WARNING: shift/reduce conflict for GT in state 105 resolved as shift
WARNING: shift/reduce conflict for LT in state 105 resolved as shift
WARNING: shift/reduce conflict for GE in state 105 resolved as shift
WARNING: shift/reduce conflict for LE in state 105 resolved as shift
WARNING: shift/reduce conflict for AND in state 105 resolved as shift
WARNING: shift/reduce conflict for OR in state 105 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 105 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 105 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 105 resolved as shift
WARNING: shift/reduce conflict for MOD in state 105 resolved as shift
WARNING: shift/reduce conflict for EQ in state 106 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 106 resolved as shift
WARNING: shift/reduce conflict for GT in state 106 resolved as shift
WARNING: shift/reduce conflict for LT in state 106 resolved as shift
WARNING: shift/reduce conflict for GE in state 106 resolved as shift
WARNING: shift/reduce conflict for LE in state 106 resolved as shift
WARNING: shift/reduce conflict for AND in state 106 resolved as shift
WARNING: shift/reduce conflict for OR in state 106 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 106 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 106 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 106 resolved as shift
WARNING: shift/reduce conflict for MOD in state 106 resolved as shift
WARNING: shift/reduce conflict for EQ in state 107 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 107 resolved as shift
WARNING: shift/reduce conflict for GT in state 107 resolved as shift
WARNING: shift/reduce conflict for LT in state 107 resolved as shift
WARNING: shift/reduce conflict for GE in state 107 resolved as shift
WARNING: shift/reduce conflict for LE in state 107 resolved as shift
WARNING: shift/reduce conflict for AND in state 107 resolved as shift
WARNING: shift/reduce conflict for OR in state 107 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 107 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 107 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 107 resolved as shift
WARNING: shift/reduce conflict for MOD in state 107 resolved as shift
WARNING: shift/reduce conflict for EQ in state 152 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 152 resolved as shift
WARNING: shift/reduce conflict for GT in state 152 resolved as shift
WARNING: shift/reduce conflict for LT in state 152 resolved as shift
WARNING: shift/reduce conflict for GE in state 152 resolved as shift
WARNING: shift/reduce conflict for LE in state 152 resolved as shift
WARNING: shift/reduce conflict for AND in state 152 resolved as shift
WARNING: shift/reduce conflict for OR in state 152 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 152 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 152 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 152 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 152 resolved as shift
WARNING: shift/reduce conflict for MOD in state 152 resolved as shift
WARNING: reduce/reduce conflict in state 22 resolved using rule (declaration -> import)
WARNING: rejected rule (import_list -> import) in state 22
WARNING: reduce/reduce conflict in state 49 resolved using rule (declaration -> import)
WARNING: rejected rule (import_list -> import_list import) in state 49
WARNING: reduce/reduce conflict in state 105 resolved using rule (expression -> expression comparador expression)
WARNING: rejected rule (condicion -> expression comparador expression) in state 105
WARNING: reduce/reduce conflict in state 228 resolved using rule (value_key -> STRING)
WARNING: rejected rule (expression -> STRING) in state 228
WARNING: Rule (import_list -> import) is never reduced
WARNING: Rule (import_list -> import_list import) is never reduced
